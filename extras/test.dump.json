{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 136
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(1)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23320
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(4)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 160
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 304
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 448
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 592
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 736
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 880
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1168
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1312
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1456
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(18)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34312
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34776
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(20)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(21)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36632
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37096
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1600
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(26)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(27)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 1744
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39024
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(28)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(29)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(30)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40416
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(31)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(32)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(33)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 1888
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43008
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(36)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(37)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(38)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(39)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44832
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(40)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(41)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29224
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29960
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(10)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2176
	, "static": true
	, "const": true
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2320
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2472
	, "static": true
	, "const": true
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "true"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "false"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "uint8"
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "float32"
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "float64"
		, "value": "float64"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3768
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3912
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x1 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x1 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4776
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 4920
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x1 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x1 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x2 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x2 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x4 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x4 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 5496
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 6792
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 7616
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8464
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8880
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 9296
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 9712
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 10400
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 11392
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 12352
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 13312
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 14544
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 15776
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 16736
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 17696
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 18656
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 19616
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 20032
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25072
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(5)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "3"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "4"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27120
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "void"
	, "size": 0
	, "offs": 30008
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31048
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(12)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(13)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(14)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32032
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(15)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32360
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(16)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 5
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 5
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 5
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 5
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 8
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 8
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 8
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 8
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 8
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 9
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 9
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 11
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 11
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 12
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 12
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 12
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 12
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 14
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 15
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 15
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 15
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 15
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 17
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 17
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 17
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 17
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 17
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 18
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 18
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 18
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 20
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 20
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 20
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 20
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 21
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 23
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 23
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 23
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "stdlib.ci"
			, "line": 23
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 24
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 24
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "stdlib.ci"
				, "line": 25
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "stdlib.ci"
			, "line": 25
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 25
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "stdlib.ci"
		, "line": 27
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 27
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 27
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 27
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 27
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 27
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "stdlib.ci"
					, "line": 27
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 28
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 28
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 28
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 28
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 28
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 28
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "stdlib.ci"
					, "line": 28
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "stdlib.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 29
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 29
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 29
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 29
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 29
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 29
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "stdlib.ci"
					, "line": 29
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "stdlib.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 69
	, "offs": 236488
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 32
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 33
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "stdlib.ci"
				, "line": 33
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 33
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "stdlib.ci"
					, "line": 33
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 33
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.ci"
					, "line": 34
				}]
			}
		}, {
			"": "NonEqualIntegers"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "stdlib.ci"
			, "line": 36
			, "value": "NonEqualIntegers"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "assertEq.NonEqualIntegers"
			, "file": "stdlib.ci"
			, "line": 41
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 46
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236488
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236490
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 236492
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236493
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236497
		, "size": 1
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236498
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236502
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236504
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236506
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236508
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236510
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236512
		, "size": 2
	}, {
		"instruction": "load.ref .00b5b8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 236514
		, "size": 5
	}, {
		"instruction": "load.c32 46"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236519
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236524
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236529
		, "size": 5
	}, {
		"instruction": "load.ref .00b62c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 236534
		, "size": 5
	}, {
		"instruction": "load.ref .00e3a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 236539
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 236544
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 236548
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236552
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236556
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "stdlib.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "stdlib.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "stdlib.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 52
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "stdlib.ci"
		, "line": 52
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(type.size)"
		, "kind": "()"
		, "type": "int32"
		, "file": "stdlib.ci"
		, "line": 52
		, "args": [{
			"": "type.size"
			, "kind": "."
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 52
			, "left": {
				"": "type"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "type"
			}
			, "right": {
				"": "size"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "size"
			}
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Math"
	, "type": "typename"
	, "file": "lib/math.ci"
	, "line": 3
	, "size": 0
	, "offs": 60344
	, "static": true
	, "const": true
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 7
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 7
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 8
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 8
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 9
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 9
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.000000 / ln2"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 10
		, "left": {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 10
			, "value": "1.000000"
		}
		, "right": {
			"": "ln2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 10
			, "value": "ln2"
		}
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 11
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 11
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 12
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.000000 / ln10"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 12
		, "left": {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 12
			, "value": "1.000000"
		}
		, "right": {
			"": "ln10"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 12
			, "value": "ln10"
		}
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 13
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 13
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 14
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 14
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 15
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 16
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 17
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 17
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 18
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "(0) / 0.000000"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 18
		, "left": {
			"": "(0)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 18
			, "args": [{
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/math.ci"
				, "line": 18
				, "value": "0"
			}]
		}
		, "right": {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 18
			, "value": "0.000000"
		}
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/math.ci"
	, "line": 19
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "(1) / 0.000000"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 19
		, "left": {
			"": "(1)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 19
			, "args": [{
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/math.ci"
				, "line": 19
				, "value": "1"
			}]
		}
		, "right": {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 19
			, "value": "0.000000"
		}
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 104
	, "offs": 236560
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236560
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 236562
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 236571
		, "size": 1
	}, {
		"instruction": "jz +58"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236572
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236576
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 236578
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 236579
		, "size": 1
	}, {
		"instruction": "jz +41"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236580
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 236584
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236585
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 236587
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236588
		, "size": 2
	}, {
		"instruction": "load.ref .039c10"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 236590
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 236595
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236596
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 236600
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236601
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 236603
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 236604
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236605
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 236607
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236608
		, "size": 2
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236610
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236612
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236616
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236617
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 236621
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236622
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 236624
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236625
		, "size": 2
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236627
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236629
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236630
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 236632
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 236641
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236642
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236644
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 236646
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236647
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 236649
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236650
		, "size": 2
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236652
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236654
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236658
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236659
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236663
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 59
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 59
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 35
	, "offs": 236664
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 59
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 60
			, "value": "result"
		}, {
			"": "modf(x, result);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 61
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 62
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 62
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1a"
		, "offs": 236664
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236665
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 236667
		, "size": 4
	}, {
		"instruction": "load.ref .039c10"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 236671
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 236676
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236677
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236681
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236685
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236687
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236689
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236693
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 236694
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236698
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 64
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 64
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 64
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 64
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 64
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 64
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 65
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 65
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 65
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 65
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 65
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 65
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 65
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/math.ci"
		, "line": 71
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 71
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 236704
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 71
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 72
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 72
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 72
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 72
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 72
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 72
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 73
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 73
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 75
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 75
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 75
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 75
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 75
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 75
				, "stmt": [{
					"": "return .result := -1;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 76
					, "stmt": {
						"": ".result := -1"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "-1"
							, "kind": "-"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 76
							, "right": {
								"": "1"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/math.ci"
								, "line": 76
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := 1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 78
			, "stmt": {
				"": ".result := 1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 78
					, "value": "1"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236704
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 236706
		, "size": 1
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 236707
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236708
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 236712
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236713
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236715
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236716
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 236718
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 236719
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236720
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236724
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236729
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236731
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236732
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236737
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236739
		, "size": 1
	}]
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/math.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 80
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 236744
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 80
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 81
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 81
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 81
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 81
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 81
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 81
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 82
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 82
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 84
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 84
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 84
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 84
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 84
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 84
				, "stmt": [{
					"": "return .result := -1;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 85
					, "stmt": {
						"": ".result := -1"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "-1"
							, "kind": "-"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 85
							, "right": {
								"": "1"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/math.ci"
								, "line": 85
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := 1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 87
			, "stmt": {
				"": ".result := 1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 87
					, "value": "1"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236744
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 236746
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 236747
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236748
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 236752
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236753
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236755
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236756
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 236758
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 236759
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236760
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236764
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236769
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236771
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 236772
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236777
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236779
		, "size": 1
	}]
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 90
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 236784
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 90
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 91
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 91
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 91
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 91
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 91
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 91
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 92
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 92
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/math.ci"
								, "line": 92
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 94
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 94
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236784
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 236786
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 236787
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236788
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236792
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 236794
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236795
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236797
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236798
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236800
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236802
		, "size": 1
	}]
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 96
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 96
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 96
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 236808
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 96
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 97
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 97
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 97
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 97
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 97
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 97
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 98
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 98
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 98
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 100
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 100
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236808
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 236810
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 236811
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236812
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236816
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 236818
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236819
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236821
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236822
		, "size": 2
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236824
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236826
		, "size": 1
	}]
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 103
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 103
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 103
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 236832
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 103
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 104
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 104
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 104
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 104
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 104
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 105
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 105
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 107
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 107
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236832
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236834
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 236836
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236837
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236841
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236843
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236845
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236846
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236848
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236850
		, "size": 1
	}]
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 109
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 109
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 109
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 109
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 236856
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 109
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 110
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 110
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 110
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 110
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 110
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 111
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 111
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 113
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 113
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236856
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236858
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 236860
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236861
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236865
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236867
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236869
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236870
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236872
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236874
		, "size": 1
	}]
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 236880
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 116
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 117
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 117
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 117
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 117
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 117
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 118
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 118
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 120
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 120
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236880
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236882
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 236884
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236885
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236889
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236891
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236893
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236894
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236896
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236898
		, "size": 1
	}]
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 122
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 122
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 122
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 122
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 19
	, "offs": 236904
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 122
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 123
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 123
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 123
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 123
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 123
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 124
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 124
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 126
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 126
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236904
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236906
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 236908
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236909
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236913
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236915
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236917
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236918
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236920
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236922
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 129
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 129
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 129
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 129
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 33
	, "offs": 236928
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 129
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 130
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 130
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 130
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 130
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 130
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 131
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 131
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 133
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 133
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 133
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 133
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 133
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 134
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 134
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 136
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 136
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236928
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236930
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 236932
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236933
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236937
		, "size": 2
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236939
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236941
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236942
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236944
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 236946
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236947
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236951
		, "size": 2
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236953
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236955
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 236956
		, "size": 2
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 236958
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236960
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 138
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 33
	, "offs": 236968
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 138
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 139
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 139
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 139
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 139
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 139
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 140
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 140
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 142
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 142
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 142
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 142
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 142
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 143
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 143
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 145
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 145
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236968
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236970
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 236972
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236973
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236977
		, "size": 2
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236979
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236981
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236982
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236984
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 236986
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 236987
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236991
		, "size": 2
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236993
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 236995
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 236996
		, "size": 2
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 236998
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237000
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 148
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 148
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 148
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 148
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 148
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 237008
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 148
		, "stmt": [{
			"": "return .result := a + t * (b - a);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 149
			, "stmt": {
				"": ".result := a + t * (b - a)"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "a + t * (b - a)"
					, "kind": "+"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/math.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "t * (b - a)"
						, "kind": "*"
						, "type": "float32"
						, "file": "lib/math.ci"
						, "line": 149
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 149
							, "value": "t"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 149
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/math.ci"
								, "line": 149
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 149
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 149
									, "value": "a"
								}
							}]
						}
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237008
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237010
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237012
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237014
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 237016
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 237017
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 237018
		, "size": 1
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237019
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237021
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 151
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 151
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 151
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 151
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 237024
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 151
		, "stmt": [{
			"": "return .result := a + t * (b - a);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 152
			, "stmt": {
				"": ".result := a + t * (b - a)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "a + t * (b - a)"
					, "kind": "+"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 152
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 152
						, "value": "a"
					}
					, "right": {
						"": "t * (b - a)"
						, "kind": "*"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 152
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 152
							, "value": "t"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 152
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 152
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 152
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 152
									, "value": "a"
								}
							}]
						}
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237024
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237026
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237028
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237030
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237032
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237033
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237034
		, "size": 1
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237035
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237037
		, "size": 1
	}]
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 155
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 155
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 155
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 155
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 155
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 237040
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 155
		, "stmt": [{
			"": "t := clamp((t - a) / (b - a), 0.000000, 1.000000);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 156
		}, {
			"": "return .result := t * t * ((3) - (2) * t);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 157
			, "stmt": {
				"": ".result := t * t * ((3) - (2) * t)"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t * t * ((3) - (2) * t)"
					, "kind": "*"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 157
					, "left": {
						"": "t * t"
						, "kind": "*"
						, "type": "float32"
						, "file": "lib/math.ci"
						, "line": 157
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 157
							, "value": "t"
						}
						, "right": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 157
							, "value": "t"
						}
					}
					, "right": {
						"": "((3) - (2) * t)"
						, "kind": "()"
						, "type": "float32"
						, "file": "lib/math.ci"
						, "line": 157
						, "args": [{
							"": "(3) - (2) * t"
							, "kind": "-"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 157
							, "left": {
								"": "(3)"
								, "kind": "()"
								, "type": "float32"
								, "file": "lib/math.ci"
								, "line": 157
								, "args": [{
									"": "3"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 157
									, "value": "3"
								}]
							}
							, "right": {
								"": "(2) * t"
								, "kind": "*"
								, "type": "float32"
								, "file": "lib/math.ci"
								, "line": 157
								, "left": {
									"": "(2)"
									, "kind": "()"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 157
									, "args": [{
										"": "2"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/math.ci"
										, "line": 157
										, "value": "2"
									}]
								}
								, "right": {
									"": "t"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 157
									, "value": "t"
								}
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 237040
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237041
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237043
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 237045
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237046
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237048
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 237050
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 237051
		, "size": 1
	}, {
		"instruction": "load.f32 0.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 237052
		, "size": 5
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 237057
		, "size": 5
	}, {
		"instruction": "load.ref .039d80"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 237062
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 237067
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237068
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237072
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237074
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237076
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 237078
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 237079
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 237084
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237089
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 237091
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 237092
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 237093
		, "size": 1
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237094
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237096
		, "size": 1
	}]
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 159
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 237104
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 159
		, "stmt": [{
			"": "t := clamp((t - a) / (b - a), 0.000000, 1.000000);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 160
		}, {
			"": "return .result := t * t * ((3) - (2) * t);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 161
			, "stmt": {
				"": ".result := t * t * ((3) - (2) * t)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t * t * ((3) - (2) * t)"
					, "kind": "*"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 161
					, "left": {
						"": "t * t"
						, "kind": "*"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 161
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 161
							, "value": "t"
						}
						, "right": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 161
							, "value": "t"
						}
					}
					, "right": {
						"": "((3) - (2) * t)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 161
						, "args": [{
							"": "(3) - (2) * t"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 161
							, "left": {
								"": "(3)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 161
								, "args": [{
									"": "3"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 161
									, "value": "3"
								}]
							}
							, "right": {
								"": "(2) * t"
								, "kind": "*"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 161
								, "left": {
									"": "(2)"
									, "kind": "()"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 161
									, "args": [{
										"": "2"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/math.ci"
										, "line": 161
										, "value": "2"
									}]
								}
								, "right": {
									"": "t"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 161
									, "value": "t"
								}
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 237104
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237105
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237107
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237109
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237110
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237112
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237114
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 237115
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237116
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237125
		, "size": 9
	}, {
		"instruction": "load.ref .039da8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 237134
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 237139
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237140
		, "size": 4
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237144
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237146
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237148
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237150
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237151
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237160
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237169
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237171
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237172
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237173
		, "size": 1
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237174
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237176
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 239
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/math.ci"
		, "line": 239
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 239
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 239
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "lib/math.ci"
		, "line": 239
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 237184
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 239
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 240
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 240
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 240
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/math.ci"
					, "line": 240
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 240
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 241
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 241
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 241
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 241
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/math.ci"
								, "line": 241
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 241
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 241
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 241
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 242
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 242
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/math.ci"
										, "line": 242
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 245
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 246
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 246
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 246
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/math.ci"
							, "line": 246
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/math.ci"
								, "line": 246
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 246
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/math.ci"
									, "line": 246
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 246
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 247
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 247
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/math.ci"
										, "line": 247
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 250
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 250
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237184
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237186
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 237188
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237189
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237193
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237195
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237197
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 237199
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 237200
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237201
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237205
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237210
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237212
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 237213
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237217
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237219
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237221
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 237223
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 237224
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237225
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237229
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237234
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237236
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 237237
		, "size": 1
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237238
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237240
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 252
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/math.ci"
		, "line": 252
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 237248
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 252
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 253
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 253
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 253
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 253
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 253
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 254
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 254
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 254
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 254
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 254
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 254
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 254
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 254
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 255
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 255
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/math.ci"
										, "line": 255
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 258
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 259
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 259
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 259
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 259
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 259
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 259
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 259
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 259
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 260
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 260
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/math.ci"
										, "line": 260
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 263
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 263
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237248
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237250
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 237252
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237253
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237257
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237259
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237261
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237263
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 237264
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237265
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237269
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237274
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237276
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 237277
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237281
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237283
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237285
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237287
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 237288
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237289
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237293
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237298
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237300
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 237301
		, "size": 1
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237302
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237304
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 266
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 266
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 266
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "lib/math.ci"
		, "line": 266
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 348
	, "offs": 237312
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 266
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 280
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 281
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 281
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 281
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 281
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 281
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 281
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 282
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 283
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 286
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 287
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 288
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 288
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 288
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 288
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 288
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 288
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 289
					, "value": "e"
				}, {
					"": "y := modf(x, e);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 290
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 291
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 293
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, f);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 294
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 295
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 297
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 298
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 299
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 300
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 301
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 303
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "lib/math.ci"
				, "line": 303
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 303
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 303
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 303
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 304
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 306
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 306
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 306
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 306
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 306
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 307
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 310
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 311
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 312
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 313
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 313
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 313
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 313
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237312
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237314
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 237316
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 237317
		, "size": 1
	}, {
		"instruction": "jz +17"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237318
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237322
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 237324
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237325
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237327
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 237329
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237333
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 237335
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237336
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237338
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237347
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 237356
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237357
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237358
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237360
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237362
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 237371
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237372
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1a"
		, "offs": 237376
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237377
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237379
		, "size": 4
	}, {
		"instruction": "load.ref .039c10"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 237383
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 237388
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237389
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237393
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237395
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 237397
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237398
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1a"
		, "offs": 237399
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237400
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237409
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237411
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237412
		, "size": 4
	}, {
		"instruction": "load.ref .039c10"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 237416
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 237421
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237422
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237426
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237430
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237432
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237441
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237443
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237444
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 237445
		, "size": 1
	}, {
		"instruction": "set.x1 sp(10)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237446
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237448
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 237452
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237456
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 237458
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237459
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237461
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 237463
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237464
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237465
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237467
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237469
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 237471
		, "size": 1
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237472
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237474
		, "size": 2
	}, {
		"instruction": "b32.and 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 237476
		, "size": 2
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 237478
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237480
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237484
		, "size": 2
	}, {
		"instruction": "b32.and 0x001"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 237486
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237488
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237492
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237501
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237503
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237504
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237506
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237508
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 237513
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237514
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237518
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 237520
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237521
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237523
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237525
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237527
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237528
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237537
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237539
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237540
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237549
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237550
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237552
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237553
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237562
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237563
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237565
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237566
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237575
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237576
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237578
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237579
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237588
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237589
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237591
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237592
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237594
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237603
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237604
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237606
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237607
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237616
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237617
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237619
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237620
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237629
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237630
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237632
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237633
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237642
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237643
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237645
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 237647
		, "size": 1
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237648
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237650
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237654
		, "size": 1
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237655
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 237659
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 317
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 317
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 317
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 317
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 317
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/math.ci"
			, "line": 317
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 320
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 320
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 320
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 320
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 320
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 320
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/math.ci"
			, "line": 320
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 323
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 323
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 323
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 387
	, "offs": 237664
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 323
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/math.ci"
			, "line": 336
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/math.ci"
			, "line": 337
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 339
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 339
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 339
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 339
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 339
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 339
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 340
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 341
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 343
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 345
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 346
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/math.ci"
			, "line": 347
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 349
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 349
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 349
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 349
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 350
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 350
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 350
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 350
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 350
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 350
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 351
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 352
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 354
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 354
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "lib/math.ci"
								, "line": 354
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 354
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 354
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/math.ci"
								, "line": 354
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/math.ci"
									, "line": 355
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/math.ci"
									, "line": 356
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/math.ci"
								, "line": 358
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "lib/math.ci"
									, "line": 358
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "lib/math.ci"
										, "line": 358
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/math.ci"
											, "line": 358
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "lib/math.ci"
											, "line": 358
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "lib/math.ci"
										, "line": 358
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "lib/math.ci"
											, "line": 359
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "lib/math.ci"
											, "line": 360
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 363
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 364
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 365
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 367
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 367
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 367
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 368
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/math.ci"
						, "line": 368
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 368
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 368
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/math.ci"
								, "line": 368
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/math.ci"
						, "line": 368
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/math.ci"
							, "line": 369
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 369
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 371
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 373
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 373
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 373
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 374
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 374
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 374
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 376
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 376
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 237664
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 237665
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237666
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 237668
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 237669
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237670
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237674
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 237676
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237677
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237679
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237684
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 237688
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237689
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237698
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237700
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237701
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 237710
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237711
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1a"
		, "offs": 237713
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237714
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237716
		, "size": 4
	}, {
		"instruction": "load.ref .039c10"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 237720
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 237725
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237726
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237730
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 237732
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237733
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 237738
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237739
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 237741
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 237742
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 237743
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237747
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237749
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 237754
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237755
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237759
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237768
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237770
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237771
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237773
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237778
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 237782
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 237783
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237787
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237789
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 237794
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237795
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237799
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 237803
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 237804
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237805
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 237809
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237810
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237815
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 237819
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 237820
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 237824
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 237826
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 237831
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237832
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237836
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237845
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 237847
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237848
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237850
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 237854
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 237855
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237856
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 237860
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237861
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237863
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237865
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237866
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237875
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237877
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237878
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237887
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237888
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237890
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237891
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237900
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237901
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237903
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237904
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237913
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237914
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237916
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237917
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237926
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237927
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237929
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237930
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237932
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237941
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237942
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237944
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237945
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237954
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237955
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 237957
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237958
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 237967
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 237968
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 237969
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 237973
		, "size": 1
	}, {
		"instruction": "jz +44"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237974
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 237978
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 237980
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 237981
		, "size": 1
	}, {
		"instruction": "jz +22"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 237982
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 237986
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 237987
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 237996
		, "size": 1
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 237997
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 237999
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238003
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238004
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238013
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238015
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238016
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 238018
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238022
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238023
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238027
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238029
		, "size": 1
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238030
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238032
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238036
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238037
		, "size": 2
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238039
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238041
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238045
		, "size": 1
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238046
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238050
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 380
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 380
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 380
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 248
	, "offs": 238056
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 380
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/math.ci"
			, "line": 392
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 393
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 393
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 393
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 393
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 393
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 393
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 394
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 395
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 398
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 398
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 398
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 398
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 398
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 398
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 399
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 399
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 399
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 399
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 399
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 399
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 402
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 403
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 403
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 403
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 403
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 403
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 404
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 406
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 407
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 408
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 409
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 412
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 412
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 412
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 413
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 413
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 413
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 415
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 415
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 238056
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238057
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238059
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 238060
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238061
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238065
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238067
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238068
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 238070
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 238075
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 238079
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238080
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238082
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 238091
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238092
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238096
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238098
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238102
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238111
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238112
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238114
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238118
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238119
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238120
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238122
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 238131
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238132
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238136
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238138
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238142
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238144
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238145
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 238149
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238150
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238159
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238160
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 238162
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238166
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238168
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238170
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238171
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238180
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238182
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238183
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238192
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238193
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238195
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238196
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238205
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238206
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238208
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238209
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238218
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238219
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238221
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238222
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238224
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238226
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238228
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238237
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238238
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238240
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238241
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238250
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238251
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238253
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238254
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238263
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238264
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238265
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238267
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 238271
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238275
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238276
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238280
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238282
		, "size": 1
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238283
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238285
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238289
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238290
		, "size": 2
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238292
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238294
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238298
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238299
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238303
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 419
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 419
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 419
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 238304
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 419
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 420
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 420
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 420
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 420
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 420
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 420
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 421
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 423
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 423
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 423
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 423
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 423
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 423
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 424
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 424
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 424
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 424
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 424
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/math.ci"
									, "line": 424
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 426
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 426
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 426
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 426
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 426
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 426
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 426
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "lib/math.ci"
									, "line": 426
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "lib/math.ci"
										, "line": 426
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/math.ci"
						, "line": 426
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/math.ci"
							, "line": 426
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238304
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238306
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 238307
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238308
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238312
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238314
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238315
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238317
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238319
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 238328
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238329
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238333
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238335
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238339
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238348
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238349
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238351
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238352
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238354
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238358
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238360
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238361
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238365
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238366
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238375
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238376
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238378
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 435
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 435
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 435
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 183
	, "offs": 238384
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.ci"
		, "line": 435
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 436
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 436
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 436
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 436
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 436
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 436
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 438
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 438
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/math.ci"
			, "line": 441
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 442
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 442
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 442
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 442
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 442
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 442
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 443
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 444
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 447
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 447
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 447
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 447
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 447
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 447
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 449
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 449
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 452
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 453
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 453
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 453
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 453
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 453
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 454
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 456
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 457
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 460
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/math.ci"
				, "line": 460
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.ci"
				, "line": 460
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.ci"
					, "line": 461
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/math.ci"
							, "line": 461
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/math.ci"
								, "line": 461
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.ci"
			, "line": 463
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 463
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238384
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238386
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 238387
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238388
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238392
		, "size": 2
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238394
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238396
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 238397
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238398
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238400
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 238401
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238402
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 238406
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 238411
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 238415
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238416
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238418
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238419
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238421
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238423
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 238432
		, "size": 1
	}, {
		"instruction": "jz +22"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238433
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238437
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238438
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238447
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238448
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238450
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238454
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238455
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238464
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238466
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238468
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 238469
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238470
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238474
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238476
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 238485
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238486
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238490
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 238499
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238508
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238509
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238511
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238513
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 238517
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238518
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 238520
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238524
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238526
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238528
		, "size": 4
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238532
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 238534
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238538
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238539
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238543
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238545
		, "size": 1
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238546
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238548
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238552
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238553
		, "size": 2
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238555
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238557
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238561
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238562
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238566
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 470
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 470
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 470
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 470
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 470
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 470
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 470
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 470
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 470
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 470
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 470
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.deg2rad(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "deg2rad"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 493
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 493
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 493
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64(x * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 493
		, "args": [{
			"": "x * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 493
			, "left": {
				"": "x * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 493
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 493
					, "value": "x"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 493
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 493
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/math.ci"
					, "line": 493
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.rad2deg(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rad2deg"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/math.ci"
	, "line": 494
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 494
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 494
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64(x * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.ci"
		, "line": 494
		, "args": [{
			"": "x * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "lib/math.ci"
			, "line": 494
			, "left": {
				"": "x * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 494
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 494
					, "value": "x"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.ci"
					, "line": 494
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.ci"
						, "line": 494
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.ci"
				, "line": 494
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "lib/math.Complex.ci"
	, "line": 3
	, "size": 16
	, "offs": 84232
	, "static": true
	, "const": true
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "lib/math.Complex.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "lib/math.Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/math.Complex.ci"
		, "line": 5
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 40
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 238568
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.Complex.ci"
		, "line": 40
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.Complex.ci"
			, "line": 41
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 42
					}, {
						"": ".result.im := (0)"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result.im"
							, "kind": "."
							, "type": "float64"
							, "left": {
								"": ".result"
								, "kind": ".variable"
								, "type": "Complex"
								, "file": "lib/math.Complex.ci"
								, "line": 40
								, "value": ".result"
							}
							, "right": {
								"": "im"
								, "kind": ".variable"
								, "type": "float64"
								, "value": "im"
							}
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/math.Complex.ci"
							, "line": 5
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/math.Complex.ci"
								, "line": 5
								, "value": "0"
							}]
						}
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238568
		, "size": 2
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238570
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238572
		, "size": 1
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238573
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238575
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 45
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 45
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 45
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 45
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 9
	, "offs": 238576
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.Complex.ci"
		, "line": 45
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.Complex.ci"
			, "line": 46
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 47
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 48
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238576
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238578
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238580
		, "size": 2
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238582
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238584
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 52
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 52
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(-a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "-a.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 52
			, "right": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 52
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 52
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 52
					, "value": "re"
				}
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 52
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 52
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 52
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 52
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 54
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 54
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 54
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re + b.re, a.im + b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "a.re + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 54
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "re"
				}
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "re"
				}
			}
		}, {
			"": "a.im + b.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 54
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "im"
				}
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 54
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 55
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 55
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 55
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 55
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 55
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 55
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 55
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 55
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 55
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 55
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 55
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 55
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 56
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 56
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 56
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 56
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 56
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 56
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 56
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 56
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 56
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 56
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 56
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 56
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 56
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 58
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 58
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 58
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re - b.re, a.im - b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "a.re - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 58
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "re"
				}
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "re"
				}
			}
		}, {
			"": "a.im - b.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 58
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "im"
				}
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 58
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 59
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 59
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 59
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 59
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 59
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 59
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 59
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 59
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 59
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 60
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 60
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 60
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 60
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 60
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 60
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 60
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 60
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 60
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 60
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 60
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 60
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "a.re * b.re - a.im * b.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 62
			, "left": {
				"": "a.re * b.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
				, "right": {
					"": "b.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * b.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
				, "right": {
					"": "b.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
			}
		}, {
			"": "a.re * b.im + a.im * b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 62
			, "left": {
				"": "a.re * b.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
				, "right": {
					"": "b.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
			}
			, "right": {
				"": "a.im * b.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
				, "right": {
					"": "b.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 63
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 63
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 63
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 63
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 63
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 63
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 63
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 63
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 63
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 63
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 63
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 63
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 63
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 63
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 64
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 64
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 64
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 64
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 64
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 128
	, "offs": 238592
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.Complex.ci"
		, "line": 66
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/math.Complex.ci"
			, "line": 70
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/math.Complex.ci"
				, "line": 70
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 70
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 70
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/math.Complex.ci"
							, "line": 70
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.Complex.ci"
							, "line": 70
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 70
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 70
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/math.Complex.ci"
							, "line": 70
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.Complex.ci"
							, "line": 70
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/math.Complex.ci"
				, "line": 70
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 71
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 72
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/math.Complex.ci"
					, "line": 73
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/math.Complex.ci"
								, "line": 74
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/math.Complex.ci"
								, "line": 75
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 78
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 79
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.Complex.ci"
			, "line": 80
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 81
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 82
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238592
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238593
		, "size": 2
	}, {
		"instruction": "load.ref .039d08"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 238595
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 238600
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238601
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 238605
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238606
		, "size": 2
	}, {
		"instruction": "load.ref .039d08"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 238608
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 238613
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238614
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 238618
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 238619
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238623
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238625
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238627
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238628
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238630
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238632
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238634
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238635
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238636
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238638
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(15)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238640
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238642
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238643
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238644
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238646
		, "size": 1
	}, {
		"instruction": "set.x2 sp(15)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238647
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238649
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238651
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(13)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238653
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238655
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 238656
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238657
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238659
		, "size": 1
	}, {
		"instruction": "set.x2 sp(17)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238660
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238662
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238666
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238667
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238671
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238673
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238675
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238676
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238678
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238680
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238682
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238683
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238684
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238686
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238688
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(13)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238689
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238691
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238692
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238694
		, "size": 1
	}, {
		"instruction": "set.x2 sp(15)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238695
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238697
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238699
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238701
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238702
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 238704
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238705
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238707
		, "size": 1
	}, {
		"instruction": "set.x2 sp(17)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238708
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238710
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238714
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238715
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238719
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 86
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 86
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 86
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 86
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 87
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 87
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 87
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 87
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 87
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 87
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 89
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 89
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 89
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 89
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 89
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 89
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 89
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 89
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 90
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 90
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 90
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 90
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 90
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 90
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 90
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 93
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 93
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 238720
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.Complex.ci"
		, "line": 93
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 94
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.Complex.ci"
			, "line": 95
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 96
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 97
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238720
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238722
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238724
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238725
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238727
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238729
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238730
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238731
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238733
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238735
		, "size": 1
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238736
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238738
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238740
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238741
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 238743
		, "size": 1
	}, {
		"instruction": "set.x2 sp(11)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238744
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238746
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238750
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238751
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238755
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 101
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 101
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 101
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 101
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 101
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 101
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 101
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 101
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 101
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 101
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 103
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 103
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 103
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 103
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 103
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 103
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 105
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 105
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 105
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 105
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 105
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 105
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 105
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 105
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 105
	, "offs": 238760
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/math.Complex.ci"
		, "line": 107
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 108
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 109
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 110
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 111
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/math.Complex.ci"
			, "line": 112
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 113
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/math.Complex.ci"
						, "line": 114
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x4 sp(5)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 238760
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238762
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238764
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238766
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238767
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238769
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238771
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238772
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238773
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238777
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238779
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(7)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 238783
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238785
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238787
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238789
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238793
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238795
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238799
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238801
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238803
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238804
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238806
		, "size": 2
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238808
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238812
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 238813
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238814
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238816
		, "size": 2
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238818
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238822
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 238824
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238825
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238827
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238828
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238832
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238833
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238835
		, "size": 2
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238837
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238841
		, "size": 1
	}, {
		"instruction": "set.x2 sp(19)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238842
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238844
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 238846
		, "size": 2
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 238848
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 238852
		, "size": 1
	}, {
		"instruction": "set.x2 sp(21)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 238853
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238855
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238859
		, "size": 1
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238860
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238864
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/math.Complex.ci"
		, "line": 117
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 117
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 117
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 117
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 117
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 119
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 119
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 119
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 119
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 119
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 119
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 119
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 119
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 119
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 119
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 119
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 119
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/math.Complex.ci"
							, "line": 119
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.Complex.ci"
							, "line": 119
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 119
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 119
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 119
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 120
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 120
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 120
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 120
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 120
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 120
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 120
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 120
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 120
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 120
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 120
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 120
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/math.Complex.ci"
							, "line": 120
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/math.Complex.ci"
							, "line": 120
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 120
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 120
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 120
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 121
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 121
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 121
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 121
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 121
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 121
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 121
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 121
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 122
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 122
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 122
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 122
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 122
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 122
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 122
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 122
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 124
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 124
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 124
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 124
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 124
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 124
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 124
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 124
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 124
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 124
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/math.Complex.ci"
			, "line": 124
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 125
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 125
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 125
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 125
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 125
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 125
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 125
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 125
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 125
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 125
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/math.Complex.ci"
			, "line": 125
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 126
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 126
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 126
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 126
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.Complex.ci"
						, "line": 126
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 126
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/math.Complex.ci"
				, "line": 126
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 126
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 126
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 126
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.Complex.ci"
						, "line": 126
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 126
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/math.Complex.ci"
				, "line": 126
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 127
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 127
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 127
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 127
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 127
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 127
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 127
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.Complex.ci"
						, "line": 127
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 127
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/math.Complex.ci"
				, "line": 127
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 127
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 127
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 127
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/math.Complex.ci"
						, "line": 127
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 127
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/math.Complex.ci"
				, "line": 127
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 129
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 129
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 129
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 130
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 130
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 130
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 130
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 130
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 130
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 131
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 131
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 131
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 131
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 131
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 132
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/math.Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 145
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 145
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 145
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 145
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 145
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 145
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 145
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 145
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 145
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 145
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 145
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 145
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 145
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 145
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/math.Complex.ci"
					, "line": 145
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 145
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/math.Complex.ci"
				, "line": 145
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/math.Complex.ci"
					, "line": 145
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/math.Complex.ci"
						, "line": 145
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/math.Complex.ci"
						, "line": 145
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "lib/math.Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/math.Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 146
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 146
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/math.Complex.ci"
			, "line": 146
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/math.Complex.ci"
				, "line": 146
				, "value": "x"
			}]
		}]
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 238872
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 3
		, "stmt": [{
			"": "if (str == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 4
			, "test": {
				"": "str == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 4
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/string.ci"
					, "line": 4
					, "value": "str"
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "lib/string.ci"
					, "line": 4
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 4
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 5
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 5
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 7
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 8
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/string.ci"
				, "line": 8
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/string.ci"
					, "line": 8
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 8
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 8
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 8
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 8
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 8
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 8
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 10
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 10
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238872
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 238874
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 238879
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238880
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 238884
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 238885
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238887
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 238888
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 238889
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 238893
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238897
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238899
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 238901
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238902
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 238903
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238907
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 238909
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238911
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238915
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238916
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238920
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 14
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 14
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 56
	, "offs": 238928
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 14
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 15
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 15
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/string.ci"
				, "line": 15
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/string.ci"
					, "line": 15
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 15
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 15
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 15
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 15
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 15
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 15
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 15
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 16
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 16
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 16
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "lib/string.ci"
								, "line": 16
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/string.ci"
								, "line": 16
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 16
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 16
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 17
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 17
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 20
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 20
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 20
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 238928
		, "size": 1
	}, {
		"instruction": "jmp +33"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 238929
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238933
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238935
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 238937
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238938
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 238939
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238943
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 238944
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 238945
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238949
		, "size": 2
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 238951
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238953
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238957
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 238958
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238962
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238964
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 238966
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238967
		, "size": 1
	}, {
		"instruction": "jnz -35"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 238968
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 238972
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 238976
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 238981
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 238983
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 24
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 24
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 62
	, "offs": 238984
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 24
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 25
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 26
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 26
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/string.ci"
				, "line": 26
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/string.ci"
					, "line": 26
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 26
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 26
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 26
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 26
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 26
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 26
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 26
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 27
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 27
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 27
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "lib/string.ci"
								, "line": 27
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/string.ci"
								, "line": 27
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 27
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 27
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 28
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 31
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 31
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 238984
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 238989
		, "size": 1
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 238990
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238994
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 238996
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 238998
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 238999
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239000
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239004
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239005
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239006
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239010
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239012
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239014
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239018
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239020
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239022
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239023
		, "size": 1
	}, {
		"instruction": "jnz -30"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239024
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239028
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239032
		, "size": 2
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239034
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239036
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239040
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239041
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239045
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 35
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 35
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 35
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 35
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/string.ci"
		, "line": 35
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 35
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 35
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 35
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 239048
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 35
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 36
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 36
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 36
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 36
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "lib/string.ci"
						, "line": 36
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "lib/string.ci"
							, "line": 36
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 36
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 36
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 36
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 36
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 36
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 36
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 36
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 36
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 37
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 37
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 37
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/string.ci"
								, "line": 37
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/string.ci"
									, "line": 37
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 37
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/string.ci"
								, "line": 37
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/string.ci"
									, "line": 37
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 37
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 37
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 37
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 38
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "lib/string.ci"
									, "line": 38
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 41
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/string.ci"
					, "line": 41
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239048
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239049
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239053
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239054
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239056
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239058
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239059
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239060
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239062
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239064
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239065
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239066
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239068
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239069
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239073
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239074
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239075
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239079
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239080
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239084
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239085
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239089
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239090
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239094
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239096
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239098
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239099
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239100
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239101
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239102
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239106
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239110
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239115
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239119
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239120
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 44
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 44
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 44
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 44
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/string.ci"
		, "line": 44
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 44
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 44
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 44
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 131
	, "offs": 239128
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 44
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 45
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 46
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 47
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 47
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 47
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 47
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 47
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 48
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "lib/string.ci"
							, "line": 48
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 50
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 50
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 50
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 50
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 50
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 50
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 50
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 50
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 50
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 50
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 50
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 51
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 51
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 51
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/string.ci"
								, "line": 51
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/string.ci"
									, "line": 51
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 51
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "lib/string.ci"
										, "line": 51
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/string.ci"
											, "line": 51
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/string.ci"
											, "line": 51
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "lib/string.ci"
										, "line": 51
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/string.ci"
								, "line": 51
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/string.ci"
									, "line": 51
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 51
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 51
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 51
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 52
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "lib/string.ci"
									, "line": 52
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 55
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/string.ci"
					, "line": 55
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239128
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239129
		, "size": 2
	}, {
		"instruction": "load.ref .03a518"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239131
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239136
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239137
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239141
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239142
		, "size": 2
	}, {
		"instruction": "load.ref .03a518"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239144
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239149
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239150
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239154
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239156
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239158
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239159
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239163
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239164
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239168
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239169
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239173
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239174
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239175
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239179
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239180
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239182
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239184
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 239186
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239187
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239189
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239190
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239191
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239192
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239194
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239196
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239197
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239198
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239200
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239201
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239205
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239206
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239207
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239211
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239212
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239216
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239217
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239221
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239222
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239226
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239228
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239230
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239231
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239235
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239239
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239244
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239248
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239249
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239253
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239254
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239258
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/string.ci"
		, "line": 58
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 58
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 58
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 58
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 74
	, "offs": 239264
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 58
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 59
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 60
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 60
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 60
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 60
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 60
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 60
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 60
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 60
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 60
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 60
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 60
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 61
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 62
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 62
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 62
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/string.ci"
								, "line": 62
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/string.ci"
									, "line": 62
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 62
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 62
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 62
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 63
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 66
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 66
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239264
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239265
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239266
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239270
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239271
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239273
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239275
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239276
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239277
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239279
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239281
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239282
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239283
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239285
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239286
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239290
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239292
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239294
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239296
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239297
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239298
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239299
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239300
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239304
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239308
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239312
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239314
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239315
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239316
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239320
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239324
		, "size": 2
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239326
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239328
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239332
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239333
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239337
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 70
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 70
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 70
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 70
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 239416
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 70
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/string.ci"
			, "line": 71
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 79
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "lib/string.ci"
					, "line": 79
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "lib/string.ci"
						, "line": 79
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 79
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "lib/string.ci"
						, "line": 79
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 79
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239416
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239417
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239421
		, "size": 1
	}, {
		"instruction": "load.ref .03a6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239422
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239427
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239428
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239432
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239433
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239437
		, "size": 1
	}, {
		"instruction": "load.ref .03a6f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239438
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239443
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239444
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 239448
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239449
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239451
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 82
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 239456
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 82
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 83
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "lib/string.ci"
					, "line": 83
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/string.ci"
						, "line": 83
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/string.ci"
						, "line": 83
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239456
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239460
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239461
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239465
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 239466
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239467
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239469
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 86
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 86
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 86
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/string.ci"
			, "line": 86
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/string.ci"
			, "line": 86
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/string.ci"
			, "line": 86
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 87
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 87
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 87
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/string.ci"
			, "line": 87
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/string.ci"
			, "line": 87
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/string.ci"
			, "line": 87
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/string.ci"
			, "line": 88
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/string.ci"
			, "line": 88
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/string.ci"
			, "line": 88
			, "value": "caseCmp"
		}]
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 90
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/string.ci"
		, "line": 90
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "lib/string.ci"
		, "line": 90
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 90
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "lib/string.ci"
				, "line": 90
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "lib/string.ci"
				, "line": 90
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 90
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "lib/string.ci"
	, "line": 93
	, "size": 16
	, "offs": 115232
	, "static": true
	, "const": true
}, {
	"": "FormatFlags.radix"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "radix"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/string.ci"
	, "line": 94
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "FormatFlags.sign"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sign"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "lib/string.ci"
	, "line": 95
	, "size": 1
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "lib/string.ci"
	, "line": 96
	, "size": 1
	, "offs": 5
	, "static": false
	, "const": true
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/string.ci"
	, "line": 97
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/string.ci"
	, "line": 98
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 101
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/string.ci"
		, "line": 101
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 101
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "lib/string.ci"
		, "line": 101
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 85
	, "offs": 239472
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 101
		, "stmt": [{
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 102
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 102
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/string.ci"
				, "line": 102
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/string.ci"
					, "line": 102
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 102
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 102
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 102
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 102
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 102
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 102
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 102
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 103
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 103
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 103
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 103
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "lib/string.ci"
								, "line": 103
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "lib/string.ci"
									, "line": 103
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "lib/string.ci"
									, "line": 103
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 103
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 104
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 106
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 107
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 110
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 110
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 110
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 110
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/string.ci"
						, "line": 110
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/string.ci"
							, "line": 110
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/string.ci"
							, "line": 110
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 110
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 111
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 113
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 114
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 114
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239472
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239473
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239477
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239479
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239481
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239482
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239486
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239490
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239492
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239494
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239495
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239496
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239498
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239500
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239501
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239502
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239504
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239508
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239510
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239514
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239516
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239518
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239519
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239520
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239524
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239528
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239530
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239532
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239533
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239537
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239539
		, "size": 4
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239543
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239545
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239546
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239548
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239550
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239551
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239552
		, "size": 2
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239554
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 239556
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 117
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/string.ci"
		, "line": 117
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 117
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "lib/string.ci"
		, "line": 117
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/string.ci"
		, "line": 117
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 623
	, "offs": 239576
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 117
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/string.ci"
			, "line": 118
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/string.ci"
			, "line": 119
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 121
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "lib/string.ci"
			, "line": 122
			, "value": "digits"
		}, {
			"": "radix"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 124
			, "value": "radix"
		}, {
			"": "assert(radix > 1 && radix < (radixDigits.length));"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 125
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 128
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 128
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "lib/string.ci"
					, "line": 128
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "lib/string.ci"
					, "line": 128
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 128
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint32"
				, "file": "lib/string.ci"
				, "line": 128
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "lib/string.ci"
					, "line": 128
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint32"
					, "file": "lib/string.ci"
					, "line": 128
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/string.ci"
						, "line": 128
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint32"
						, "file": "lib/string.ci"
						, "line": 128
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/string.ci"
							, "line": 128
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 128
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 129
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 131
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 131
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 131
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 131
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 131
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 132
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/string.ci"
			, "line": 135
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "lib/string.ci"
			, "line": 137
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 138
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 138
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "lib/string.ci"
					, "line": 138
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/string.ci"
					, "line": 138
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 138
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 139
				}]
			}
		}, {
			"": "if (format.sign != '')"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 143
			, "test": {
				"": "format.sign != ''"
				, "kind": "!="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 143
				, "left": {
					"": "format.sign"
					, "kind": "."
					, "type": "char"
					, "file": "lib/string.ci"
					, "line": 143
					, "left": {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "lib/string.ci"
						, "line": 143
						, "value": "format"
					}
					, "right": {
						"": "sign"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/string.ci"
						, "line": 143
						, "value": "sign"
					}
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/string.ci"
					, "line": 143
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 143
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 144
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 145
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "lib/string.ci"
						, "line": 145
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/string.ci"
							, "line": 145
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/string.ci"
							, "line": 145
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/string.ci"
						, "line": 145
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "lib/string.ci"
							, "line": 147
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "lib/string.ci"
								, "line": 147
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 147
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 147
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "lib/string.ci"
								, "line": 147
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 147
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/string.ci"
									, "line": 147
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "lib/string.ci"
										, "line": 147
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/string.ci"
										, "line": 147
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/string.ci"
								, "line": 147
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/string.ci"
									, "line": 148
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/string.ci"
									, "line": 149
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/string.ci"
									, "line": 150
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 153
				}, {
					"": "output[pos] := format.sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 154
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 155
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 159
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 159
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 159
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 159
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 159
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 159
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 159
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 159
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 159
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 159
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 160
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 161
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 162
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 166
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 166
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 166
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 166
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 166
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/string.ci"
				, "line": 166
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 166
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 166
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 166
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 166
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 166
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 167
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 168
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 169
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 172
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/string.ci"
				, "line": 172
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 172
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 172
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/string.ci"
						, "line": 172
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/string.ci"
							, "line": 172
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/string.ci"
							, "line": 172
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/string.ci"
				, "line": 172
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/string.ci"
					, "line": 173
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 175
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 176
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 176
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239576
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239577
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239581
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 239583
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239584
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239586
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 239591
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239592
		, "size": 2
	}, {
		"instruction": "load.m32 .03a7d4"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 239594
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239598
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 239599
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239600
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239604
		, "size": 4
	}, {
		"instruction": "load.ref .00b664"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239608
		, "size": 5
	}, {
		"instruction": "load.c32 125"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239613
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239618
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239623
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239628
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239633
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239638
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 239643
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239647
		, "size": 4
	}, {
		"instruction": "load.m32 .03a7d0"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 239651
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239655
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239657
		, "size": 2
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 239659
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239660
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239661
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239662
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239666
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239668
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239672
		, "size": 2
	}, {
		"instruction": "set.x1 sp(25)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239674
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239676
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239677
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239678
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239680
		, "size": 2
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 239682
		, "size": 1
	}, {
		"instruction": "set.x1 sp(25)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239683
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239685
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239687
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 239688
		, "size": 1
	}, {
		"instruction": "jnz -38"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239689
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239693
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239695
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239696
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239697
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239701
		, "size": 5
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239706
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239710
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239712
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239716
		, "size": 2
	}, {
		"instruction": "set.x1 sp(25)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239718
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239720
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239721
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239722
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239724
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 239728
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239729
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 239731
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239732
		, "size": 2
	}, {
		"instruction": "inc.i32(+5)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239734
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239738
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239739
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239743
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239744
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239745
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239746
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239750
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239755
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239759
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239760
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239762
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239766
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239767
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 239768
		, "size": 1
	}, {
		"instruction": "jnz +202"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239769
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239773
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239775
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239779
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239781
		, "size": 1
	}, {
		"instruction": "load.m32 .03a7c8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 239782
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239786
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239790
		, "size": 1
	}, {
		"instruction": "load.ref .03a550"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239791
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 239796
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 239797
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239801
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239802
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239803
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239807
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239811
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239813
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239815
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239816
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239820
		, "size": 4
	}, {
		"instruction": "load.ref .00b664"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239824
		, "size": 5
	}, {
		"instruction": "load.c32 148"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239829
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239834
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239839
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239844
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239849
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239854
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 239859
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 239863
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239867
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239868
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239870
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239872
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239873
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239874
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239876
		, "size": 4
	}, {
		"instruction": "set.x1 sp(28)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239880
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239882
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239884
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239888
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239890
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 239892
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 239893
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 239894
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239898
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239900
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239902
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239903
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239907
		, "size": 4
	}, {
		"instruction": "load.ref .00b664"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239911
		, "size": 5
	}, {
		"instruction": "load.c32 153"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239916
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239921
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239926
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239931
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239936
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239941
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 239946
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239950
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239952
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 239956
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239957
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239959
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 239961
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 239962
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239963
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 239965
		, "size": 4
	}, {
		"instruction": "set.x1 sp(28)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 239969
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239971
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239975
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 239977
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 239979
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 239980
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 239984
		, "size": 4
	}, {
		"instruction": "load.ref .00b664"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 239988
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239993
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 239998
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240003
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240008
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240013
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240018
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240023
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 240027
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 240031
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240032
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240034
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240036
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 240037
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240038
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240040
		, "size": 4
	}, {
		"instruction": "set.x1 sp(28)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240044
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240046
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240048
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240052
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240054
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240056
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 240057
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 240058
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240062
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 240063
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240067
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240069
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 240071
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 240072
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 240076
		, "size": 4
	}, {
		"instruction": "load.ref .00b664"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240080
		, "size": 5
	}, {
		"instruction": "load.c32 167"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240085
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240090
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240095
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240100
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240105
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240110
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240115
		, "size": 4
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 240119
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240123
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240125
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 240127
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240128
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 240129
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240130
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240132
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240134
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 240135
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240136
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240138
		, "size": 4
	}, {
		"instruction": "set.x1 sp(29)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240142
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240144
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240148
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240150
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 240152
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 240153
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240157
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240161
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240163
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 240165
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 240166
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240170
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240172
		, "size": 4
	}, {
		"instruction": "set.x1 sp(28)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240176
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240178
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240179
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240181
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240183
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 240184
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240185
		, "size": 2
	}, {
		"instruction": "set.x1 sp(31)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240187
		, "size": 2
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240189
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240193
		, "size": 1
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240194
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240198
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/string.ci"
	, "line": 179
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 179
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/string.ci"
		, "line": 179
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/string.ci"
		, "line": 179
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "lib/string.ci"
		, "line": 179
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 25
	, "offs": 240216
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/string.ci"
		, "line": 179
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/string.ci"
			, "line": 180
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/string.ci"
			, "line": 187
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/string.ci"
					, "line": 187
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "lib/string.ci"
						, "line": 187
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/string.ci"
						, "line": 187
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/string.ci"
						, "line": 187
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "lib/string.ci"
						, "line": 187
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240216
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 240217
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240219
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240221
		, "size": 2
	}, {
		"instruction": "load.ref .03aa48"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240223
		, "size": 5
	}, {
		"instruction": "load.ref .03a7d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240228
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 240233
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240234
		, "size": 4
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240238
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240240
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "test.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test.ci"
		, "line": 4
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 3
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 4
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 6
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 7
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 9
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 9
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 10
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 10
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "void"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 11
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(float32(3.140000 / (2)), float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "float32(3.140000 / (2))"
			, "kind": "()"
			, "type": "float32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 11
			, "args": [{
				"": "3.140000 / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "left": {
					"": "3.140000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 11
					, "value": "3.140000"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 11
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.inlineEmit.ci"
						, "line": 11
						, "value": "2"
					}]
				}
			}]
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "float32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 11
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 14
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 14
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 14
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 14
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 15
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 15
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 15
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang.inlineEmit.ci"
					, "line": 15
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 17
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 17
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 17
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 18
	, "size": 8
	, "offs": 44
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 18
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 18
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 19
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 19
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 19
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 20
	, "size": 8
	, "offs": 56
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 20
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 20
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "test/lang.inlineEmit.ci"
	, "line": 23
	, "size": 8
	, "offs": 64
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang.inlineEmit.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 23
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "test/lang.inlineEmit.ci"
			, "line": 23
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "sum(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(sum(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "sum(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 9
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 9
			, "value": "c"
		}]
	}
}, {
	"": "any(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "any(any(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "any(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 10
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 10
			, "value": "c"
		}]
	}
}, {
	"": "min(a: int32, b: int32, c: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "min(min(a, b), c)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "min(a, b)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 11
			, "args": [{
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "b"
			}]
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 11
			, "value": "c"
		}]
	}
}, {
	"": "ma"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "ma"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 68
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 13
		, "value": "3"
	}
}, {
	"": "mb"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "mb"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 14
	, "size": 4
	, "offs": 72
	, "static": false
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 14
		, "value": "6"
	}
}, {
	"": "mc"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "mc"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 76
	, "static": false
	, "const": false
	, "ast": {
		"": "9"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 15
		, "value": "9"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 80
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(2, 3)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 17
			, "value": "3"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 18
	, "size": 4
	, "offs": 84
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 18
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 18
			, "value": "mb"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 88
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 19
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 19
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "mc"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 92
	, "static": false
	, "const": false
	, "ast": {
		"": "last(2, 3)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 21
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 21
			, "value": "3"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 22
	, "size": 4
	, "offs": 96
	, "static": false
	, "const": false
	, "ast": {
		"": "last(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 22
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 22
			, "value": "mb"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 100
	, "static": false
	, "const": false
	, "ast": {
		"": "last(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 23
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 23
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "mc"
			}
		}]
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 104
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 25
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 25
			, "value": "12"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 26
	, "size": 4
	, "offs": 108
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 26
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 26
			, "value": "mb"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 112
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 27
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 27
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "mc"
			}
		}]
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 116
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 29
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 29
			, "value": "12"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 30
	, "size": 4
	, "offs": 120
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 30
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 30
			, "value": "mb"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 124
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 31
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 31
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "mc"
			}
		}]
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 128
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 12)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 33
			, "value": "3"
		}, {
			"": "12"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 33
			, "value": "12"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 34
	, "size": 4
	, "offs": 132
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma, mb)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 34
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 34
			, "value": "mb"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 136
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma + mb, mb + mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 35
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 35
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "mc"
			}
		}]
	}
}, {
	"": "sum3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 140
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 37
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 37
			, "value": "6"
		}]
	}
}, {
	"": "sum3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 38
	, "size": 4
	, "offs": 144
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 38
			, "value": "mc"
		}]
	}
}, {
	"": "sum3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 39
	, "size": 4
	, "offs": 148
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 39
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "ma"
			}
		}]
	}
}, {
	"": "any3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 152
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "any3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 156
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 42
			, "value": "mc"
		}]
	}
}, {
	"": "any3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 160
	, "static": false
	, "const": false
	, "ast": {
		"": "any(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 43
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "ma"
			}
		}]
	}
}, {
	"": "min3Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Val"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 164
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "3"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 45
			, "value": "6"
		}]
	}
}, {
	"": "min3Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Var"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 168
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma, mb, mc)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "ma"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "ma"
		}, {
			"": "mb"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "mb"
		}, {
			"": "mc"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 46
			, "value": "mc"
		}]
	}
}, {
	"": "min3Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min3Xpr"
	, "type": "int32"
	, "file": "test/lang.inlineMacros.ci"
	, "line": 47
	, "size": 4
	, "offs": 172
	, "static": false
	, "const": false
	, "ast": {
		"": "min(ma + mb, mb + mc, mc + ma)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.inlineMacros.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "ma + mb"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "ma"
			}
			, "right": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mb"
			}
		}, {
			"": "mb + mc"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mb"
			}
			, "right": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mc"
			}
		}, {
			"": "mc + ma"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang.inlineMacros.ci"
			, "line": 47
			, "left": {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "mc"
			}
			, "right": {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "ma"
			}
		}]
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 9
	, "size": 4
	, "offs": 176
	, "static": false
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 10
	, "size": 4
	, "offs": 180
	, "static": false
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 11
	, "size": 4
	, "offs": 184
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 12
	, "size": 4
	, "offs": 188
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "test/test.inlineOverload.ci"
	, "line": 13
	, "size": 4
	, "offs": 192
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/test.inlineOverload.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/test.inlineOverload.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 15
	, "size": 8
	, "offs": 135184
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "test/test.inlineOverload.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "test/test.inlineOverload.ci"
	, "line": 16
	, "size": 8
	, "offs": 135456
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "test/test.inlineOverload.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/test.inlineOverload.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/test.inlineOverload.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/test.inlineOverload.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/test.inlineOverload.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "test/test.inlineOverload.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "test/test.inlineOverload.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/test.inlineOverload.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "test/test.inlineOverload.ci"
	, "line": 28
	, "size": 8
	, "offs": 200
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/test.inlineOverload.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/test.inlineOverload.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "test/test.inlineOverload.ci"
	, "line": 29
	, "size": 8
	, "offs": 208
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/test.inlineOverload.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "test/test.inlineOverload.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 7
	, "size": 8
	, "offs": 240248
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.initByRef.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 8
	, "size": 4
	, "offs": 212
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 9
	, "size": 4
	, "offs": 216
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 10
	, "size": 8
	, "offs": 224
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 12
	, "size": 8
	, "offs": 232
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 13
	, "size": 4
	, "offs": 236
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 14
	, "size": 4
	, "offs": 240
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 16
	, "size": 4
	, "offs": 244
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 17
	, "size": 4
	, "offs": 248
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 18
	, "size": 8
	, "offs": 256
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 19
	, "size": 4
	, "offs": 260
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "test/lang.initByRef.ci"
	, "line": 20
	, "size": 4
	, "offs": 264
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "test/lang.initByRef.ci"
	, "line": 21
	, "size": 4
	, "offs": 268
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 23
	, "size": 4
	, "offs": 272
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 24
	, "size": 8
	, "offs": 280
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 25
	, "size": 4
	, "offs": 284
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 27
	, "size": 8
	, "offs": 292
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 28
	, "size": 8
	, "offs": 300
	, "static": false
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "test/lang.initByRef.ci"
	, "line": 29
	, "size": 4
	, "offs": 304
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang.initByRef.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 30
	, "size": 4
	, "offs": 308
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 31
	, "size": 8
	, "offs": 316
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 32
	, "size": 4
	, "offs": 320
	, "static": false
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 35
	, "size": 4
	, "offs": 324
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 36
	, "size": 4
	, "offs": 328
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 37
	, "size": 4
	, "offs": 332
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 38
	, "size": 4
	, "offs": 336
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 39
	, "size": 4
	, "offs": 340
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 40
	, "size": 4
	, "offs": 344
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 41
	, "size": 4
	, "offs": 348
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 42
	, "size": 4
	, "offs": 352
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 43
	, "size": 4
	, "offs": 356
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 44
	, "size": 4
	, "offs": 360
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 45
	, "size": 4
	, "offs": 364
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 46
	, "size": 4
	, "offs": 368
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 47
	, "size": 4
	, "offs": 372
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 48
	, "size": 4
	, "offs": 376
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 49
	, "size": 4
	, "offs": 380
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 50
	, "size": 4
	, "offs": 384
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 51
	, "size": 4
	, "offs": 388
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 52
	, "size": 4
	, "offs": 392
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 55
	, "size": 8
	, "offs": 400
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 56
	, "size": 8
	, "offs": 408
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 57
	, "size": 8
	, "offs": 416
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 58
	, "size": 8
	, "offs": 424
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 59
	, "size": 8
	, "offs": 432
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 60
	, "size": 8
	, "offs": 440
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 61
	, "size": 8
	, "offs": 448
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 62
	, "size": 8
	, "offs": 456
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 63
	, "size": 8
	, "offs": 464
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 64
	, "size": 8
	, "offs": 472
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 65
	, "size": 8
	, "offs": 480
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 66
	, "size": 8
	, "offs": 488
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 67
	, "size": 8
	, "offs": 496
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 68
	, "size": 8
	, "offs": 504
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 69
	, "size": 8
	, "offs": 512
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 70
	, "size": 8
	, "offs": 520
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 71
	, "size": 8
	, "offs": 528
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 72
	, "size": 8
	, "offs": 536
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 75
	, "size": 4
	, "offs": 540
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 76
	, "size": 4
	, "offs": 544
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 77
	, "size": 4
	, "offs": 548
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 78
	, "size": 4
	, "offs": 552
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 79
	, "size": 4
	, "offs": 556
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 80
	, "size": 4
	, "offs": 560
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 81
	, "size": 4
	, "offs": 564
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 82
	, "size": 4
	, "offs": 568
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 83
	, "size": 4
	, "offs": 572
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 84
	, "size": 4
	, "offs": 576
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 85
	, "size": 4
	, "offs": 580
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 86
	, "size": 4
	, "offs": 584
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 87
	, "size": 4
	, "offs": 588
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 88
	, "size": 4
	, "offs": 592
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 89
	, "size": 4
	, "offs": 596
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 90
	, "size": 4
	, "offs": 600
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 91
	, "size": 4
	, "offs": 604
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 92
	, "size": 4
	, "offs": 608
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 95
	, "size": 4
	, "offs": 612
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 96
	, "size": 8
	, "offs": 620
	, "static": false
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 97
	, "size": 4
	, "offs": 624
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "test/lang.initByRef.ci"
	, "line": 99
	, "size": 4
	, "offs": 628
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.initByRef.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.initByRef.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "test/lang.initByRef.ci"
	, "line": 105
	, "size": 8
	, "offs": 636
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.initByRef.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "test/lang.initByRef.ci"
	, "line": 108
	, "size": 4
	, "offs": 640
	, "static": false
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang.initByRef.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 3
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 240256
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240256
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 240264
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 7
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang.function.ci"
					, "line": 7
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 7
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 7
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240264
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240266
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240268
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240269
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240271
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 11
	, "size": 4
	, "offs": 644
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 11
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 11
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 648
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 14
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 17
	, "size": 4
	, "offs": 652
	, "static": false
	, "const": false
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 17
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 20
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 656
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 23
	, "size": 4
	, "offs": 660
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 23
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 664
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 26
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "test/lang.function.ci"
	, "line": 29
	, "size": 4
	, "offs": 668
	, "static": false
	, "const": false
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 29
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 29
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 240272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 33
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.function.ci"
					, "line": 33
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 33
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 33
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240272
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240274
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 240276
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240277
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240279
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "test/lang.function.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 55
	, "offs": 240280
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 38
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "test/lang.function.ci"
				, "line": 38
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 38
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 38
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.function.ci"
						, "line": 38
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang.function.ci"
				, "line": 38
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "test/lang.function.ci"
					, "line": 39
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 39
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.function.ci"
			, "line": 41
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "test/lang.function.ci"
					, "line": 41
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang.function.ci"
						, "line": 41
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.function.ci"
									, "line": 41
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang.function.ci"
						, "line": 41
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang.function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang.function.ci"
								, "line": 41
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.function.ci"
									, "line": 41
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240280
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240282
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 240287
		, "size": 1
	}, {
		"instruction": "jnz +9"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 240288
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240292
		, "size": 2
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240294
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240296
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240297
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240298
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240300
		, "size": 4
	}, {
		"instruction": "load.ref .03aa98"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240304
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 240309
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240310
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240314
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240315
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 240317
		, "size": 4
	}, {
		"instruction": "load.ref .03aa98"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240321
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 240326
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240327
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240331
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240332
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240334
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "test/lang.function.ci"
	, "line": 45
	, "size": 4
	, "offs": 672
	, "static": false
	, "const": false
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "test/lang.function.ci"
		, "line": 45
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 45
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 676
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 680
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 684
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 688
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 692
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 696
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 700
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 704
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 708
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 712
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 716
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 720
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 724
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 728
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 732
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 736
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 740
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 744
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "test/lang.reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 156832
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "test/lang.reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "test/lang.reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 157104
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 748
	, "static": false
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "test/lang.reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 752
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 756
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 760
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 33
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 764
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 768
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 772
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 776
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 780
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 784
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 40
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}]
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "test/lang.reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 788
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 792
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 796
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 800
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 804
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "test/lang.reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 808
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang.reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 812
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "test/lang.reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 816
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang.reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang.reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 3
	, "size": 8
	, "offs": 824
	, "static": false
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 4
	, "size": 8
	, "offs": 832
	, "static": false
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 6
	, "size": 4
	, "offs": 836
	, "static": false
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 7
	, "size": 4
	, "offs": 840
	, "static": false
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "test/stdc.number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "test/stdc.number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc.number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 14
	, "size": 4
	, "offs": 844
	, "static": false
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 15
	, "size": 4
	, "offs": 848
	, "static": false
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 16
	, "size": 4
	, "offs": 852
	, "static": false
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 18
	, "size": 4
	, "offs": 856
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 19
	, "size": 4
	, "offs": 860
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 21
	, "size": 4
	, "offs": 864
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 22
	, "size": 4
	, "offs": 868
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 23
	, "size": 4
	, "offs": 872
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 25
	, "size": 4
	, "offs": 876
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 26
	, "size": 4
	, "offs": 880
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 27
	, "size": 4
	, "offs": 884
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 29
	, "size": 4
	, "offs": 888
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 30
	, "size": 4
	, "offs": 892
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 31
	, "size": 4
	, "offs": 896
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 33
	, "size": 4
	, "offs": 900
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 34
	, "size": 4
	, "offs": 904
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "test/stdc.number.ci"
	, "line": 35
	, "size": 4
	, "offs": 908
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "sinF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "sinF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 37
	, "size": 8
	, "offs": 916
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "cosF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "cosF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 38
	, "size": 8
	, "offs": 924
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "tanF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "tanF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 39
	, "size": 8
	, "offs": 932
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "logF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "logF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 40
	, "size": 8
	, "offs": 940
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc.number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc.number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "expF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "expF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 41
	, "size": 8
	, "offs": 948
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "powF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "powF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 42
	, "size": 8
	, "offs": 956
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "sqrtF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "sqrtF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 43
	, "size": 8
	, "offs": 964
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "atanF64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "atanF64"
	, "type": "float64"
	, "file": "test/stdc.number.ci"
	, "line": 44
	, "size": 8
	, "offs": 972
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc.number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc.number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "sinF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "sinF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 46
	, "size": 4
	, "offs": 976
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "cosF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "cosF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 47
	, "size": 4
	, "offs": 980
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "tanF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "tanF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 48
	, "size": 4
	, "offs": 984
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc.number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "logF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "logF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 49
	, "size": 4
	, "offs": 988
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc.number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc.number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "expF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "expF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 50
	, "size": 4
	, "offs": 992
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "powF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "powF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 51
	, "size": 4
	, "offs": 996
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "sqrtF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "sqrtF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 52
	, "size": 4
	, "offs": 1000
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "atanF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "atanF32"
	, "type": "float32"
	, "file": "test/stdc.number.ci"
	, "line": 53
	, "size": 4
	, "offs": 1004
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc.number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc.number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "test/stdc.memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 1008
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 1012
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 1016
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "test/stdc.memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 1020
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc.memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc.memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "test/stdc.memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 1028
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "test/stdc.memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 1036
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc.memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 240336
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240336
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 240344
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[1024]"
			, "file": "test/stdc.execute.ci"
			, "line": 15
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 16
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+1024)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240344
		, "size": 4
	}, {
		"instruction": "load.sp(+1028)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 240348
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 240352
		, "size": 1
	}, {
		"instruction": "load.ref .03aad8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240353
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 240358
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240359
		, "size": 4
	}, {
		"instruction": "inc.sp(-1024)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240363
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240367
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 240368
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 20
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240368
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240373
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 240374
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240375
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240379
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 64
	, "offs": 240384
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/stdc.execute.ci"
			, "line": 24
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "test/stdc.execute.ci"
			, "line": 29
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.noTrace, \"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 34
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240384
		, "size": 4
	}, {
		"instruction": "load.ref .00b62c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240388
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240393
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240395
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240400
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240402
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240407
		, "size": 2
	}, {
		"instruction": "load.ref .01d828"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240409
		, "size": 5
	}, {
		"instruction": "load.c32 34"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240414
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240419
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240424
		, "size": 1
	}, {
		"instruction": "load.ref .029556"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240425
		, "size": 5
	}, {
		"instruction": "load.ref .029e70"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240430
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 240435
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240439
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240443
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240447
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 240448
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 38
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc.execute.ci"
			, "line": 39
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240448
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240453
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 240455
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 240456
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240460
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "test/stdc.execute.ci"
	, "line": 42
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 240464
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 43
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240464
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240465
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 46
	, "size": 4
	, "offs": 1040
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 46
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 46
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 47
	, "size": 4
	, "offs": 1044
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 47
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 48
	, "size": 4
	, "offs": 1048
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 48
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 49
	, "size": 4
	, "offs": 1052
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 49
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 50
	, "size": 4
	, "offs": 1056
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 50
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 51
	, "size": 4
	, "offs": 1060
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 51
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "test/stdc.execute.ci"
	, "line": 52
	, "size": 4
	, "offs": 1064
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc.execute.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc.execute.ci"
			, "line": 52
			, "value": "abortExecution"
		}]
	}
}, {
	"": "arrFixedNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "arrFixedNoInit"
	, "type": "int64[7]"
	, "file": "test/lang.array.ci"
	, "line": 49
	, "size": 56
	, "offs": 1120
	, "static": false
	, "const": false
}, {
	"": "arrArrayNoInit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayNoInit"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 50
	, "size": 4
	, "offs": 1124
	, "static": false
	, "const": false
}, {
	"": "arrSliceNoInit"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceNoInit"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 51
	, "size": 8
	, "offs": 1132
	, "static": false
	, "const": false
}, {
	"": "arrArrayInitNull"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitNull"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 59
	, "size": 4
	, "offs": 1136
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.array.ci"
		, "line": 59
		, "value": "null"
	}
}, {
	"": "arrSliceInitNull"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitNull"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 60
	, "size": 8
	, "offs": 1144
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.array.ci"
		, "line": 60
		, "value": "null"
	}
}, {
	"": "arrArrayInitFixed"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitFixed"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 63
	, "size": 4
	, "offs": 1148
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang.array.ci"
		, "line": 63
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrSliceInitFixed"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitFixed"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 64
	, "size": 8
	, "offs": 1156
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang.array.ci"
		, "line": 64
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrArrayInitSlice"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitSlice"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 67
	, "size": 4
	, "offs": 1160
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 67
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrSliceInitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitSlice"
	, "type": "int64[]"
	, "file": "test/lang.array.ci"
	, "line": 68
	, "size": 8
	, "offs": 1168
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 68
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrArrayInitPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitPtr"
	, "type": "int64[*]"
	, "file": "test/lang.array.ci"
	, "line": 71
	, "size": 4
	, "offs": 1172
	, "static": false
	, "const": false
	, "ast": {
		"": "arrArrayInitFixed"
		, "kind": ".variable"
		, "type": "int64[*]"
		, "file": "test/lang.array.ci"
		, "line": 71
		, "value": "arrArrayInitFixed"
	}
}, {
	"": "strFixed"
	, "kind": "variable"
	, "cast": "val"
	, "name": "strFixed"
	, "type": "char[7]"
	, "file": "test/lang.array.ci"
	, "line": 81
	, "size": 7
	, "offs": 1180
	, "static": false
	, "const": false
}, {
	"": "strArray"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "strArray"
	, "type": "char[*]"
	, "file": "test/lang.array.ci"
	, "line": 86
	, "size": 4
	, "offs": 1184
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang.array.ci"
		, "line": 86
		, "value": "\"string\""
	}
}, {
	"": "strSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "strSlice"
	, "type": "char[]"
	, "file": "test/lang.array.ci"
	, "line": 90
	, "size": 8
	, "offs": 1192
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang.array.ci"
		, "line": 90
		, "value": "\"string\""
	}
}, {
	"": "lenSlice(values: int64[]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lenSlice"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 5
	, "offs": 240472
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "stmt": [{
			"": "return .result := values.length;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 103
			, "stmt": {
				"": ".result := values.length"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "values.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "test/lang.array.ci"
					, "line": 103
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang.array.ci"
						, "line": 103
						, "value": "values"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "test/lang.array.ci"
						, "line": 103
						, "value": "length"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240472
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240474
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240476
		, "size": 1
	}]
}, {
	"": "nthFixed(idx: int32, values: int64[7]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthFixed"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[7]"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 240480
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.array.ci"
					, "line": 104
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[7]"
						, "file": "test/lang.array.ci"
						, "line": 104
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 104
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240480
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240482
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 240484
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 240488
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 240489
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240491
		, "size": 1
	}]
}, {
	"": "nthArray(idx: int32, values: int64[*]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthArray"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[*]"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 240496
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.array.ci"
					, "line": 105
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[*]"
						, "file": "test/lang.array.ci"
						, "line": 105
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 105
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240496
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240498
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 240500
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 240504
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 240505
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240507
		, "size": 1
	}]
}, {
	"": "nthSlice(idx: int32, values: int64[]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthSlice"
	, "type": "function"
	, "file": "test/lang.array.ci"
	, "line": 106
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 240512
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang.array.ci"
					, "line": 106
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang.array.ci"
						, "line": 106
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 106
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240512
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240514
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 240516
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 240520
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x16"
		, "offs": 240521
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240523
		, "size": 1
	}]
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang.member.ci"
	, "line": 3
	, "size": 32
	, "offs": 182024
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang.member.ci"
	, "line": 5
	, "size": 8
	, "offs": 182160
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 11
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 14
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 17
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 17
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 20
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 20
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 23
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 26
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 35
	, "size": 4
	, "offs": 240528
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 38
	, "size": 4
	, "offs": 240536
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 38
		, "value": "5"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang.member.ci"
	, "line": 41
	, "size": 4
	, "offs": 240544
	, "static": true
	, "const": true
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.member.ci"
		, "line": 41
		, "value": "6"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 44
	, "size": 8
	, "offs": 240552
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 47
	, "size": 8
	, "offs": 240560
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 51;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 47
		}, {
			"": "globalRecInit.constant := 52;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 47
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang.member.ci"
	, "line": 50
	, "size": 8
	, "offs": 240568
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 50
		}, {
			"": "globalConstantRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 50
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "test/lang.member.ci"
	, "line": 53
	, "size": 32
	, "offs": 1224
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.memberInit := 8;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.constantInit := 9;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 57
		}, {
			"": "recordMemberTest.memberRec.member := 61;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.memberRec.constant := 62;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 61
		}, {
			"": "recordMemberTest.constantRec.member := 71;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 65
		}, {
			"": "recordMemberTest.constantRec.constant := 72;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.member.ci"
			, "line": 66
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "test/lang.method.ci"
	, "line": 3
	, "size": 16
	, "offs": 184560
	, "static": true
	, "const": true
}, {
	"": "RecordMethodTest.staticMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 240576
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 6
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 7
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 7
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 7
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 7
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240576
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240578
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240580
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240581
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240583
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 240584
	, "static": true
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 16
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 16
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMethodTest.delegateMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 20
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 240592
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 26
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 27
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 27
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 27
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 27
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240592
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240594
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 240596
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240597
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240599
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 240600
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 32
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 32
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 32
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 32
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240600
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240602
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 240604
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240605
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240607
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.print(this: RecordMethodTest): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "print"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "print"
		, "kind": ".variable"
		, "type": "function"
		, "value": "print"
	}
}, {
	"": "RecordMethodTest.print(this: RecordMethodTest): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "print"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 240608
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"virtual\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref .01d864"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240608
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240613
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240618
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240623
		, "size": 5
	}, {
		"instruction": "load.ref .02d073"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240628
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240633
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240638
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240643
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240647
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.printStatic(this: RecordMethodTest): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "printStatic"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 44
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 44
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang.method.ci"
		, "line": 44
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 240648
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 44
		, "stmt": [{
			"": "trace(\"static\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 45
		}]
	}
	, "asm": [{
		"instruction": "load.ref .01d864"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240648
		, "size": 5
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240653
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240658
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240663
		, "size": 5
	}, {
		"instruction": "load.ref .02d087"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240668
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240673
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240678
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240683
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240687
		, "size": 1
	}]
}, {
	"": "globalFunction(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang.method.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 240688
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 49
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 50
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang.method.ci"
					, "line": 50
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 50
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.method.ci"
						, "line": 50
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240688
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240690
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 240692
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 240693
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240695
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "test/lang.method.ci"
	, "line": 53
	, "size": 16
	, "offs": 1240
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.delegateMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 54
		}, {
			"": "recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 55
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang.method.ci"
					, "line": 53
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}, {
			"": "recordMethodTest.print := print"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.print"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang.method.ci"
					, "line": 53
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "print"
					, "kind": ".variable"
					, "type": "function"
					, "value": "print"
				}
			}
			, "right": {
				"": "print"
				, "kind": ".variable"
				, "type": "function"
				, "value": "print"
			}
		}]
	}
}, {
	"": "customPrint(this: RecordMethodTest): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "customPrint"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 59
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang.method.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 240696
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 59
		, "stmt": [{
			"": "trace(\"override\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 60
		}]
	}
	, "asm": [{
		"instruction": "load.ref .01d864"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240696
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240701
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240706
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240711
		, "size": 5
	}, {
		"instruction": "load.ref .02d0ba"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240716
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240721
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240726
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240731
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240735
		, "size": 1
	}]
}, {
	"": "recordMethodTestCustomPrint"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTestCustomPrint"
	, "type": "RecordMethodTest"
	, "file": "test/lang.method.ci"
	, "line": 63
	, "size": 16
	, "offs": 1256
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTestCustomPrint.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 64
		}, {
			"": "recordMethodTestCustomPrint.print := customPrint;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 65
		}, {
			"": "recordMethodTestCustomPrint.delegateMethod := forwardMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTestCustomPrint.delegateMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTestCustomPrint"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang.method.ci"
					, "line": 63
					, "value": "recordMethodTestCustomPrint"
				}
				, "right": {
					"": "delegateMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "delegateMethod"
				}
			}
			, "right": {
				"": "forwardMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.method.ci"
				, "line": 20
				, "value": "forwardMethod"
			}
		}, {
			"": "recordMethodTestCustomPrint.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTestCustomPrint.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTestCustomPrint"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang.method.ci"
					, "line": 63
					, "value": "recordMethodTestCustomPrint"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}]
	}
}, {
	"": "print(this: RecordMethodTest): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "print"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 75
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang.method.ci"
		, "line": 75
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 240736
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 75
		, "stmt": [{
			"": "trace(\"extension\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 76
		}]
	}
	, "asm": [{
		"instruction": "load.ref .01d864"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240736
		, "size": 5
	}, {
		"instruction": "load.c32 76"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240741
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240746
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240751
		, "size": 5
	}, {
		"instruction": "load.ref .02d0df"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240756
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240761
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240766
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240771
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240775
		, "size": 1
	}]
}, {
	"": "printStatic(this: RecordMethodTest): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "printStatic"
	, "type": "function"
	, "file": "test/lang.method.ci"
	, "line": 79
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 79
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang.method.ci"
		, "line": 79
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 240776
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang.method.ci"
		, "line": 79
		, "stmt": [{
			"": "trace(\"extension\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 80
		}]
	}
	, "asm": [{
		"instruction": "load.ref .01d864"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240776
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240781
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240786
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240791
		, "size": 5
	}, {
		"instruction": "load.ref .02d0df"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240796
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240801
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240806
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 240811
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 240815
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "test/lang.recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 191152
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang.recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "test/lang.recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 191696
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang.recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "test/lang.recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 192240
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "test/lang.recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "test/lang.recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 192648
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "test/lang.recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 1260
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 1264
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "test/lang.recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 1268
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "test/lang.recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 1272
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "test/lang.recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 1276
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang.recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 193696
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 194648
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 195600
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 196552
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 197504
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "test/lang.recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 198456
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "test/lang.recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "test/lang.recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang.recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "test/lang.recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "test/lang.useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "test/lang.useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 1280
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 1284
	, "static": false
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 1288
	, "static": false
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 1292
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 1296
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 1300
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 1304
	, "static": false
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 1308
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 1312
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 1316
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 1320
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 1324
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 1328
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 1332
	, "static": false
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 1336
	, "static": false
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 1340
	, "static": false
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 1344
	, "static": false
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 1348
	, "static": false
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 1352
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 1356
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 1360
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 1364
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 1368
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 1372
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 1376
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 1380
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "test/lang.useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 1384
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "test/lang.useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 1388
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 1392
	, "static": false
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 1396
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 1400
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 1404
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 1408
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 1412
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 1416
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang.useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 1420
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 1424
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 1428
	, "static": false
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 1432
	, "static": false
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 1436
	, "static": false
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 1440
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 1444
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 1448
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 1452
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 1456
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 1460
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 1464
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 1468
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "test/lang.useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 1472
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "test/lang.useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 1476
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 1480
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 1484
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 1488
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 1492
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 1496
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 1500
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 1504
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang.useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 1508
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 1512
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 1516
	, "static": false
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 1520
	, "static": false
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 1524
	, "static": false
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 1528
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 1532
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 1536
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 1540
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 1544
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 1548
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 1552
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 1556
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "test/lang.useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 1560
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "test/lang.useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 1564
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 1568
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 1572
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 1576
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 1580
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 1584
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 1588
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 1592
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang.useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 1596
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 1600
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 1604
	, "static": false
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 1608
	, "static": false
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 1612
	, "static": false
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 1616
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 1620
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 1624
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 1628
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 1632
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 1636
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 1640
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 1644
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "test/lang.useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 1648
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "test/lang.useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 1652
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 1656
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 1660
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 1664
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 1668
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 1672
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 1676
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 1680
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang.useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 1684
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 1688
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 1692
	, "static": false
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 1696
	, "static": false
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 1700
	, "static": false
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 1704
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 1708
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 1712
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 1716
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 1720
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 1724
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 1728
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 1732
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "test/lang.useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 1736
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "test/lang.useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 1740
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 1744
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 1748
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 1752
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 1756
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 1760
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 1764
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 1768
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang.useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 1772
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 1776
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 1780
	, "static": false
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 1784
	, "static": false
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 1788
	, "static": false
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 1792
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 1796
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 1800
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 1804
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 1808
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 1812
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 1816
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 1820
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 1824
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "test/lang.useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 1828
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang.useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 1832
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 1836
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 1840
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 1844
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 1848
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 1852
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 1856
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 1860
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 1864
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 1868
	, "static": false
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 1872
	, "static": false
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 1876
	, "static": false
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 1880
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 1884
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 1888
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 1892
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 1896
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 1900
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 1904
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 1908
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 1912
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "test/lang.useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 1916
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "test/lang.useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 1920
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 1924
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 1928
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 1932
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 1936
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 1940
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 1944
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang.useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 1952
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 1960
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 1968
	, "static": false
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 1976
	, "static": false
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 1984
	, "static": false
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 1992
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 2000
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 2008
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 2016
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 2024
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 2032
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 2040
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 2048
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 2056
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "test/lang.useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 2064
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "test/lang.useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 2068
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 2072
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 2076
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 2080
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 2084
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 2088
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 2092
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang.useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 2100
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 2108
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 2116
	, "static": false
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 2124
	, "static": false
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 2132
	, "static": false
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 2140
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 2148
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 2156
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 2164
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 2172
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 2180
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 2188
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 2196
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 2204
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "test/lang.useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 2212
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "test/lang.useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 2216
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 2220
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 2224
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 2228
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 2232
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 2236
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 2240
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang.useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 2244
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 2248
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 2252
	, "static": false
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 2256
	, "static": false
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 2260
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 2264
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 2268
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 2272
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "test/lang.useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 2276
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "test/lang.useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 2280
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 2284
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 2288
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 2292
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 2296
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 2300
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 2304
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang.useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 2312
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 2320
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 2328
	, "static": false
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 2336
	, "static": false
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 2344
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 2352
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 2360
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 2368
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "test/lang.useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 2376
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "test/lang.useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 2380
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang.useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 2384
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 2388
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 2392
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 2396
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 2400
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 2404
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang.useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "test/lang.useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 2408
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang.useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "test/lang.useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 2412
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang.useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang.useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 2416
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "test/lang.useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 2420
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang.useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang.useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "test/lang.statementIf.ci"
	, "line": 26
	, "size": 4
	, "offs": 2424
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang.statementIf.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "test/lang.statementFor.ci"
	, "line": 12
	, "size": 4
	, "offs": 2428
	, "static": false
	, "const": false
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 7233
	, "offs": 240816
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 3
			, "stmt": [{
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "stdlib.ci"
				, "line": 3
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "stdlib.ci"
					, "line": 3
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 3
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "void"
							, "file": "stdlib.ci"
							, "line": 3
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 3
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "stdlib.ci"
					, "line": 3
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 5
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 8
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 9
						, "value": "trace(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 11
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 12
						, "value": "debug(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 14
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 15
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 17
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 18
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 20
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 21
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 23
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 24
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 25
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 27
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 28
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 29
						, "value": "assert(condition: bool): void"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "stdlib.ci"
						, "line": 32
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "stdlib.ci"
						, "line": 48
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "stdlib.ci"
				, "line": 52
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.ci"
				, "line": 3
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 3
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/math.Complex.ci"
				, "line": 40
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/math.Complex.ci"
				, "line": 45
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 52
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 54
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 55
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 56
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 58
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 59
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 60
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 62
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 63
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 64
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/math.Complex.ci"
				, "line": 66
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 87
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 89
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 90
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/math.Complex.ci"
				, "line": 93
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 101
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 103
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 105
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/math.Complex.ci"
				, "line": 107
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 117
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 119
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 120
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 121
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 122
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 124
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 125
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 126
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 127
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 129
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 130
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 131
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 132
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 145
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/math.Complex.ci"
				, "line": 146
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 3
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 14
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 24
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 35
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 44
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 58
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 70
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 82
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/string.ci"
				, "line": 86
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/string.ci"
				, "line": 87
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/string.ci"
				, "line": 88
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/string.ci"
				, "line": 90
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/string.ci"
				, "line": 93
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 101
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 117
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/string.ci"
				, "line": 179
				, "value": "append(output: char[], pos: int32, value: uint32): int32"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "test.ci"
			, "line": 4
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test.ci"
				, "line": 4
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 9
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 10
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 11
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 14
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 15
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 17
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 18
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 19
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 20
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang.inlineEmit.ci"
				, "line": 23
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 9
				, "value": "sum(a: int32, b: int32, c: int32): int32"
			}, {
				"": "any(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 10
				, "value": "any(a: int32, b: int32, c: int32): int32"
			}, {
				"": "min(a: int32, b: int32, c: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 11
				, "value": "min(a: int32, b: int32, c: int32): int32"
			}, {
				"": "ma"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 13
				, "value": "ma"
			}, {
				"": "mb"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 14
				, "value": "mb"
			}, {
				"": "mc"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 15
				, "value": "mc"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 17
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 18
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 19
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 21
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 22
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 23
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 25
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 26
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 27
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 29
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 30
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 31
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 33
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 34
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 35
				, "value": "min2Xpr"
			}, {
				"": "sum3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 37
				, "value": "sum3Val"
			}, {
				"": "sum3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 38
				, "value": "sum3Var"
			}, {
				"": "sum3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 39
				, "value": "sum3Xpr"
			}, {
				"": "any3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 41
				, "value": "any3Val"
			}, {
				"": "any3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 42
				, "value": "any3Var"
			}, {
				"": "any3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 43
				, "value": "any3Xpr"
			}, {
				"": "min3Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 45
				, "value": "min3Val"
			}, {
				"": "min3Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 46
				, "value": "min3Var"
			}, {
				"": "min3Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.inlineMacros.ci"
				, "line": 47
				, "value": "min3Xpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/test.inlineOverload.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.inlineOverload.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "test/test.inlineOverload.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "test/test.inlineOverload.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.initByRef.ci"
				, "line": 3
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.initByRef.ci"
					, "line": 3
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.initByRef.ci"
						, "line": 3
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.initByRef.ci"
							, "line": 3
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.initByRef.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.initByRef.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.initByRef.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.initByRef.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "test/lang.initByRef.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.initByRef.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.initByRef.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang.initByRef.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.initByRef.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 3
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 6
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 11
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 14
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 17
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 20
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 23
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 26
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.function.ci"
				, "line": 29
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 32
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.function.ci"
				, "line": 37
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.function.ci"
				, "line": 45
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "sinF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 37
				, "value": "sinF64"
			}, {
				"": "cosF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 38
				, "value": "cosF64"
			}, {
				"": "tanF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 39
				, "value": "tanF64"
			}, {
				"": "logF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 40
				, "value": "logF64"
			}, {
				"": "expF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 41
				, "value": "expF64"
			}, {
				"": "powF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 42
				, "value": "powF64"
			}, {
				"": "sqrtF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 43
				, "value": "sqrtF64"
			}, {
				"": "atanF64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc.number.ci"
				, "line": 44
				, "value": "atanF64"
			}, {
				"": "sinF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 46
				, "value": "sinF32"
			}, {
				"": "cosF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 47
				, "value": "cosF32"
			}, {
				"": "tanF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 48
				, "value": "tanF32"
			}, {
				"": "logF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 49
				, "value": "logF32"
			}, {
				"": "expF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 50
				, "value": "expF32"
			}, {
				"": "powF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 51
				, "value": "powF32"
			}, {
				"": "sqrtF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 52
				, "value": "sqrtF32"
			}, {
				"": "atanF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc.number.ci"
				, "line": 53
				, "value": "atanF32"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc.memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc.memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc.memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc.memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc.memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 19
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 23
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 37
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc.execute.ci"
				, "line": 42
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 46
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 47
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 48
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 49
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 50
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 51
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc.execute.ci"
				, "line": 52
				, "value": "tryExecErr6"
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 44
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.array.ci"
					, "line": 44
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.array.ci"
						, "line": 44
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.array.ci"
							, "line": 44
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.array.ci"
						, "line": 44
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.array.ci"
					, "line": 44
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.array.ci"
						, "line": 45
						, "value": "integer"
					}]
				}
			}, {
				"": "arrFixedNoInit"
				, "kind": ".variable"
				, "type": "int64[7]"
				, "file": "test/lang.array.ci"
				, "line": 49
				, "value": "arrFixedNoInit"
			}, {
				"": "arrArrayNoInit"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 50
				, "value": "arrArrayNoInit"
			}, {
				"": "arrSliceNoInit"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 51
				, "value": "arrSliceNoInit"
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 54
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 54
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 54
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.array.ci"
					, "line": 54
					, "stmt": [{
						"": "arrFixedNoInit[i] := (42 + i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 55
					}]
				}
			}, {
				"": "arrArrayInitNull"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 59
				, "value": "arrArrayInitNull"
			}, {
				"": "arrSliceInitNull"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 60
				, "value": "arrSliceInitNull"
			}, {
				"": "arrArrayInitFixed"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 63
				, "value": "arrArrayInitFixed"
			}, {
				"": "arrSliceInitFixed"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 64
				, "value": "arrSliceInitFixed"
			}, {
				"": "arrArrayInitSlice"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 67
				, "value": "arrArrayInitSlice"
			}, {
				"": "arrSliceInitSlice"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang.array.ci"
				, "line": 68
				, "value": "arrSliceInitSlice"
			}, {
				"": "arrArrayInitPtr"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang.array.ci"
				, "line": 71
				, "value": "arrArrayInitPtr"
			}, {
				"": "strFixed"
				, "kind": ".variable"
				, "type": "char[7]"
				, "file": "test/lang.array.ci"
				, "line": 81
				, "value": "strFixed"
			}, {
				"": "pointer.copy(strFixed, pointer(\"string\"), 7);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 82
			}, {
				"": "debug(\"string as variant\", strFixed);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 83
			}, {
				"": "debug(\"string to variant\", variant(strFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 84
			}, {
				"": "strArray"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang.array.ci"
				, "line": 86
				, "value": "strArray"
			}, {
				"": "debug(\"string as variant\", strArray);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 87
			}, {
				"": "debug(\"string to variant\", variant(strArray));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 88
			}, {
				"": "strSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang.array.ci"
				, "line": 90
				, "value": "strSlice"
			}, {
				"": "debug(\"string as variant\", strSlice);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 91
			}, {
				"": "debug(\"string to variant\", variant(strSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 92
			}, {
				"": "assert(arrSliceNoInit.length >= (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 98
			}, {
				"": "assert(arrSliceInitNull.length == (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 99
			}, {
				"": "assert(arrFixedNoInit[0] == (42));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 101
			}, {
				"": "lenSlice(values: int64[]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 103
				, "value": "lenSlice(values: int64[]): int32"
			}, {
				"": "nthFixed(idx: int32, values: int64[7]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 104
				, "value": "nthFixed(idx: int32, values: int64[7]): int64"
			}, {
				"": "nthArray(idx: int32, values: int64[*]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 105
				, "value": "nthArray(idx: int32, values: int64[*]): int64"
			}, {
				"": "nthSlice(idx: int32, values: int64[]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.array.ci"
				, "line": 106
				, "value": "nthSlice(idx: int32, values: int64[]): int64"
			}, {
				"": "assertEq(7, arrFixedNoInit.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 108
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 109
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 110
			}, {
				"": "assertEq(0, lenSlice(null));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 112
			}, {
				"": "assertEq(0, lenSlice(arrSliceInitNull));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 113
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 114
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 115
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 116
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.array.ci"
				, "line": 118
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.array.ci"
						, "line": 118
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.array.ci"
							, "line": 118
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.array.ci"
					, "line": 118
					, "stmt": [{
						"": "expected"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "test/lang.array.ci"
						, "line": 119
						, "value": "expected"
					}, {
						"": "assert(expected == arrFixedNoInit[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 120
					}, {
						"": "assert(expected == arrArrayInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 121
					}, {
						"": "assert(expected == arrSliceInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 122
					}, {
						"": "assert(expected == nthFixed(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 124
					}, {
						"": "assert(expected == nthFixed(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 125
					}, {
						"": "assert(expected == nthFixed(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 126
					}, {
						"": "assert(expected == nthArray(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 128
					}, {
						"": "assert(expected == nthArray(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 129
					}, {
						"": "assert(expected == nthArray(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 130
					}, {
						"": "assert(expected == nthSlice(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 132
					}, {
						"": "assert(expected == nthSlice(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 134
					}, {
						"": "assert(expected == arrSliceInitSlice[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.array.ci"
						, "line": 136
					}]
				}
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.member.ci"
				, "line": 3
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "test/lang.member.ci"
				, "line": 53
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.method.ci"
				, "line": 3
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.method.ci"
				, "line": 49
				, "value": "globalFunction(x: int32, y: int32): int32"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "test/lang.method.ci"
				, "line": 53
				, "value": "recordMethodTest"
			}, {
				"": "customPrint(this: RecordMethodTest): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.method.ci"
				, "line": 59
				, "value": "customPrint(this: RecordMethodTest): void"
			}, {
				"": "recordMethodTestCustomPrint"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "test/lang.method.ci"
				, "line": 63
				, "value": "recordMethodTestCustomPrint"
			}, {
				"": "recordMethodTest.print(recordMethodTest);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 69
			}, {
				"": "recordMethodTestCustomPrint.print(recordMethodTestCustomPrint);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 70
			}, {
				"": "recordMethodTest.printStatic(recordMethodTest);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 73
			}, {
				"": "print(this: RecordMethodTest): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.method.ci"
				, "line": 75
				, "value": "print(this: RecordMethodTest): void"
			}, {
				"": "printStatic(this: RecordMethodTest): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang.method.ci"
				, "line": 79
				, "value": "printStatic(this: RecordMethodTest): void"
			}, {
				"": "print(recordMethodTest);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 84
			}, {
				"": "printStatic(recordMethodTest);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 85
			}, {
				"": "print(recordMethodTestCustomPrint);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 86
			}, {
				"": "RecordMethodTest.print(recordMethodTest);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 89
			}, {
				"": "RecordMethodTest.printStatic(recordMethodTest);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 90
			}, {
				"": "RecordMethodTest.print(recordMethodTestCustomPrint);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang.method.ci"
				, "line": 91
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang.recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang.recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang.recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang.useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang.useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang.useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang.useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang.useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang.useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang.useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang.useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang.useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang.useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang.useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang.useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang.useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementIf.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementIf.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang.statementIf.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementIf.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "test/lang.statementIf.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "test/lang.statementIf.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "test/lang.statementIf.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang.statementIf.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang.statementIf.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "test/lang.statementIf.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang.statementIf.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "test/lang.statementIf.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "test/lang.statementIf.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "test/lang.statementIf.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "test/lang.statementIf.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang.statementIf.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "test/lang.statementIf.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang.statementIf.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "test/lang.statementIf.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "test/lang.statementIf.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "test/lang.statementIf.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "test/lang.statementIf.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang.statementIf.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "test/lang.statementIf.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang.statementIf.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "test/lang.statementIf.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "test/lang.statementIf.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "test/lang.statementIf.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "test/lang.statementIf.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang.statementIf.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "test/lang.statementIf.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang.statementIf.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "test/lang.statementIf.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "test/lang.statementIf.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang.statementIf.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang.statementIf.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang.statementIf.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if (typename(int64) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 73
				, "test": {
					"": "typename(int64) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 73
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 73
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.statementIf.ci"
							, "line": 73
							, "value": "int64"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang.statementIf.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang.statementIf.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang.statementIf.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang.statementIf.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang.statementIf.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementIf.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementIf.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang.statementFor.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "test/lang.statementFor.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang.statementFor.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "test/lang.statementFor.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang.statementFor.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang.statementFor.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang.statementFor.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang.statementFor.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "test/lang.statementFor.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang.statementFor.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang.statementFor.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "test/lang.statementFor.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang.statementFor.ci"
						, "line": 28
					}]
				}
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240816
		, "size": 5
	}, {
		"instruction": "load.ref .019316"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240821
		, "size": 5
	}, {
		"instruction": "store.m64 .03a7c8"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 240826
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240830
		, "size": 5
	}, {
		"instruction": "load.ref .019327"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240835
		, "size": 5
	}, {
		"instruction": "store.m64 .03a7d0"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 240840
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240844
		, "size": 5
	}, {
		"instruction": "store.m32 .03aa48"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240849
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240853
		, "size": 1
	}, {
		"instruction": "load.ref .03aa4c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240854
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 240859
		, "size": 1
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240860
		, "size": 5
	}, {
		"instruction": "load.ref .03aa4d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240865
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 240870
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240871
		, "size": 1
	}, {
		"instruction": "store.m32 .03aa50"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240872
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240876
		, "size": 1
	}, {
		"instruction": "store.m32 .03aa54"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240877
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 240881
		, "size": 9
	}, {
		"instruction": "store.m64 .03aa78"
		, "name": "store.m64"
		, "code": "0x2e"
		, "offs": 240890
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240894
		, "size": 1
	}, {
		"instruction": "store.m32 .03ab90"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240895
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240899
		, "size": 5
	}, {
		"instruction": "store.m32 .03ab98"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240904
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240908
		, "size": 5
	}, {
		"instruction": "store.m32 .03aba0"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240913
		, "size": 4
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240917
		, "size": 5
	}, {
		"instruction": "store.m32 .03abb0"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240922
		, "size": 4
	}, {
		"instruction": "load.c32 52"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240926
		, "size": 5
	}, {
		"instruction": "store.m32 .03abb4"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240931
		, "size": 4
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240935
		, "size": 5
	}, {
		"instruction": "store.m32 .03abb8"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240940
		, "size": 4
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240944
		, "size": 5
	}, {
		"instruction": "store.m32 .03abbc"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240949
		, "size": 4
	}, {
		"instruction": "load.ref .03abd8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 240953
		, "size": 5
	}, {
		"instruction": "store.m32 .03abc8"
		, "name": "store.m32"
		, "code": "0x2d"
		, "offs": 240958
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 240962
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 240963
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240964
		, "size": 5
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240969
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240974
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 240976
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 240978
		, "size": 1
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240979
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 240984
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 240989
		, "size": 1
	}, {
		"instruction": "load.f64 3.140000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 240990
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 240999
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 241008
		, "size": 1
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 241009
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 241010
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241014
		, "size": 5
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241019
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 241024
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 241025
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 241034
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 241035
		, "size": 9
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241044
		, "size": 5
	}, {
		"instruction": "load.ref .01da25"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241049
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241054
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241059
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241064
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 241069
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 241070
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 241071
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241072
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241077
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241079
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241081
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241083
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241084
		, "size": 5
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 241089
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241093
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241095
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241097
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241098
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241100
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241102
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241103
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241105
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241107
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241108
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241109
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241114
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241116
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241120
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241122
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241126
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241131
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241133
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241135
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241137
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241141
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241143
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241147
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241149
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241151
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241153
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241155
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241156
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241158
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241162
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241164
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241168
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241170
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241172
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241173
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241175
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241180
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241185
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241187
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241189
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241190
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241194
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241196
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241200
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241202
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241204
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241208
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241210
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241212
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241214
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241216
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241217
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241221
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241223
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241227
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241229
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241231
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241235
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241237
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241239
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241240
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241242
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241244
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241245
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241247
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241249
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241250
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241254
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241256
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241260
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241262
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241264
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241268
		, "size": 5
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 241273
		, "size": 4
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 241277
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241281
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241283
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241285
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241286
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241288
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241289
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241291
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241293
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241294
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241296
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241298
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241299
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241300
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241302
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241304
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241305
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241306
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241311
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241313
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241317
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241319
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241323
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241328
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241330
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241332
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241336
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241338
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241342
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241347
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241349
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241351
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241353
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241357
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241359
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241363
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241365
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241367
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241369
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241373
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241375
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241379
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241381
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241383
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241385
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241387
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241388
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241390
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241394
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241396
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241400
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241402
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241404
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241405
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241407
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241409
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241413
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241415
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241419
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241421
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241423
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241424
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241426
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241431
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241436
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241438
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241440
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241441
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241445
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241447
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241451
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241453
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241455
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 241459
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241464
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241466
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241468
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241469
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241473
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241475
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241479
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241481
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241483
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241487
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241489
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241491
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241493
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241495
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241496
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241500
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241502
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241506
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241508
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241510
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241514
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241516
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241518
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241520
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241521
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241525
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241527
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241531
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241533
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241535
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241539
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241541
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241543
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241544
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241546
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241548
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241549
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241551
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241553
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241554
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241558
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241560
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241564
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241566
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241568
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241572
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241574
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 241576
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241577
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241579
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 241581
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 241582
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241586
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 241588
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241592
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 241594
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 241596
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241600
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241605
		, "size": 5
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241610
		, "size": 5
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241615
		, "size": 5
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 241620
		, "size": 5
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 241625
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 241634
		, "size": 2
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 241636
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 241645
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 241646
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 241655
		, "size": 1
	}, {
		"instruction": "load.ref .03aa78"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241656
		, "size": 5
	}, {
		"instruction": "load.ref .03aa78"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241661
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241666
		, "size": 5
	}, {
		"instruction": "load.ref .03aa78"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241671
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241676
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 241678
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241679
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241681
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241683
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241688
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241693
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241698
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241703
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241708
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241713
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241718
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241723
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241728
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241733
		, "size": 5
	}, {
		"instruction": "load.m64 .03aa78"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 241738
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 241742
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241744
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241746
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 241748
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 241750
		, "size": 2
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241752
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241757
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241762
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241767
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241772
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241777
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241782
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241787
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241792
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241797
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241802
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241807
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241812
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241817
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241822
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241827
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241832
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241837
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241842
		, "size": 5
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241847
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241852
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241857
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241862
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241867
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241872
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241877
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241882
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241887
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241892
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241897
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241902
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241907
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241912
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241917
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241922
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241927
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241932
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241937
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241942
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241947
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241952
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241957
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241962
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241967
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241972
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241977
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241982
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241987
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241992
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 241997
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242002
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242007
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242012
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242017
		, "size": 5
	}, {
		"instruction": "load.ref .0000a0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242022
		, "size": 5
	}, {
		"instruction": "load.ref .000130"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242027
		, "size": 5
	}, {
		"instruction": "load.ref .0001c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242032
		, "size": 5
	}, {
		"instruction": "load.ref .000250"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242037
		, "size": 5
	}, {
		"instruction": "load.ref .0002e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242042
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242047
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242052
		, "size": 5
	}, {
		"instruction": "load.ref .000490"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242057
		, "size": 5
	}, {
		"instruction": "load.ref .000520"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242062
		, "size": 5
	}, {
		"instruction": "load.ref .0005b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242067
		, "size": 5
	}, {
		"instruction": "load.ref .000640"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242072
		, "size": 5
	}, {
		"instruction": "load.ref .0006d0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242077
		, "size": 5
	}, {
		"instruction": "load.ref .000760"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242082
		, "size": 5
	}, {
		"instruction": "load.ref .000008"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242087
		, "size": 5
	}, {
		"instruction": "load.ref .000910"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242092
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242097
		, "size": 5
	}, {
		"instruction": "load.ref .000880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242102
		, "size": 5
	}, {
		"instruction": "load.ref .0009a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242107
		, "size": 5
	}, {
		"instruction": "load.ref .03aa78"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242112
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242117
		, "size": 5
	}, {
		"instruction": "load.ref .03aa78"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242122
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242127
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242132
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242137
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(65)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242142
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242144
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242146
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242147
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242152
		, "size": 5
	}, {
		"instruction": "load.ref .03aa88"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242157
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 242162
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 242163
		, "size": 4
	}, {
		"instruction": "load.ref .03aa88"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242167
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242172
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242173
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242178
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242183
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 242185
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 242186
		, "size": 4
	}, {
		"instruction": "load.ref .03aa90"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242190
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242195
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242196
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242201
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242206
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 242208
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 242209
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242213
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242215
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242216
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242221
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242226
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 242228
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 242229
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242233
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242234
		, "size": 5
	}, {
		"instruction": "load.ref .03aa98"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242239
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 242244
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 242245
		, "size": 4
	}, {
		"instruction": "load.m32 .0000b8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242249
		, "size": 4
	}, {
		"instruction": "load.m32 .000148"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242253
		, "size": 4
	}, {
		"instruction": "load.m32 .0001d8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242257
		, "size": 4
	}, {
		"instruction": "load.m32 .000268"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242261
		, "size": 4
	}, {
		"instruction": "load.m32 .0002f8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242265
		, "size": 4
	}, {
		"instruction": "load.m32 .000388"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242269
		, "size": 4
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242273
		, "size": 4
	}, {
		"instruction": "load.m32 .0004a8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242277
		, "size": 4
	}, {
		"instruction": "load.m32 .000538"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242281
		, "size": 4
	}, {
		"instruction": "load.m32 .0005c8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242285
		, "size": 4
	}, {
		"instruction": "load.m32 .000658"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242289
		, "size": 4
	}, {
		"instruction": "load.m32 .0006e8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242293
		, "size": 4
	}, {
		"instruction": "load.m32 .000778"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242297
		, "size": 4
	}, {
		"instruction": "load.m32 .000808"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242301
		, "size": 4
	}, {
		"instruction": "load.m32 .000898"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242305
		, "size": 4
	}, {
		"instruction": "load.m32 .000020"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242309
		, "size": 4
	}, {
		"instruction": "load.m32 .000928"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242313
		, "size": 4
	}, {
		"instruction": "load.m32 .0009c0"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 242317
		, "size": 4
	}, {
		"instruction": "load.ref .0265b0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242321
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242326
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242328
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242332
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242334
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242338
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242339
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242341
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242345
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242346
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242348
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242352
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242354
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242358
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242360
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242364
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242366
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242370
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242372
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242376
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242377
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242379
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242383
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242384
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242386
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242390
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242392
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242396
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242398
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242402
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242404
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242408
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242409
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242411
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242415
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242416
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242418
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242422
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242424
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242428
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242429
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 242431
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 242435
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242436
		, "size": 9
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242445
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242454
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 242456
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242457
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 242459
		, "size": 1
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242460
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242465
		, "size": 2
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242467
		, "size": 5
	}, {
		"instruction": "b32.shl 0x002"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242472
		, "size": 2
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242474
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242479
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242481
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242483
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242485
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 242490
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242491
		, "size": 2
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242493
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242495
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 242500
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 242501
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242502
		, "size": 2
	}, {
		"instruction": "b32.sar 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242504
		, "size": 2
	}, {
		"instruction": "b32.and 0x01f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242506
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 242508
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242509
		, "size": 2
	}, {
		"instruction": "b32.shl 0x010"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242511
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242513
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 242518
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242519
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242521
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242523
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 242528
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 242529
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242530
		, "size": 2
	}, {
		"instruction": "b32.and 0x0ff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 242532
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 242534
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242535
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242537
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242542
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242547
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242551
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242553
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242558
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242563
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242567
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242569
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242570
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242575
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242579
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242581
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242586
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242591
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242595
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242597
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242602
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242607
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242611
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242613
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242614
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242619
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242623
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242625
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242630
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242635
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242639
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242641
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242646
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242651
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242655
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242657
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242658
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242663
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242667
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242669
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242674
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242679
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242683
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242685
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242690
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242695
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242699
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242701
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242702
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242707
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242711
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242713
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 242722
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242723
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(23)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242727
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242729
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 242738
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242739
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242743
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242745
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 242754
		, "size": 1
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242755
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242759
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242761
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 242763
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242764
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 242766
		, "size": 1
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242767
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242771
		, "size": 9
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242780
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242784
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242786
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 242788
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242789
		, "size": 9
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242798
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242802
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242804
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 242806
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242807
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 242811
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 242813
		, "size": 9
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242822
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(34)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242826
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 242828
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 242833
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242834
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242838
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 242840
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 242845
		, "size": 1
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242846
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242850
		, "size": 2
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 242852
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 242857
		, "size": 1
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242858
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242862
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242864
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 242866
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242867
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 242869
		, "size": 1
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242870
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 242874
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242879
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(39)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242883
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242885
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 242887
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 242888
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242893
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242897
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242899
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 242901
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242902
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242906
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 242908
		, "size": 5
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242913
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242917
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242922
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242927
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242931
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242936
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242941
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242945
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242950
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242955
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 242959
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242964
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242969
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242973
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 242975
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242976
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242981
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 242985
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242989
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 242991
		, "size": 2
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 242993
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 242998
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243002
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243006
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243008
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243009
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243013
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243017
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243019
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243020
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243024
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243028
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243030
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243031
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243035
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243039
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243041
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243042
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243046
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 243050
		, "size": 9
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 243059
		, "size": 9
	}, {
		"instruction": "load.ref .01d814"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243068
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243073
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243078
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243083
		, "size": 1
	}, {
		"instruction": "load.ref .028c89"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243084
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243089
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243094
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243098
		, "size": 4
	}, {
		"instruction": "load.ref .01d814"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243102
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243107
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243112
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243117
		, "size": 1
	}, {
		"instruction": "load.ref .028c8e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243118
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243123
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243128
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243132
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243136
		, "size": 4
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243140
		, "size": 4
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 243144
		, "size": 4
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243148
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243152
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243156
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243160
		, "size": 1
	}, {
		"instruction": "load.m32 .000418"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 243161
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243165
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243169
		, "size": 4
	}, {
		"instruction": "load.ref .01d814"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243173
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243178
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243183
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243188
		, "size": 1
	}, {
		"instruction": "load.ref .028c89"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243189
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243194
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243199
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243203
		, "size": 4
	}, {
		"instruction": "load.ref .01d814"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243207
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243212
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243217
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243222
		, "size": 1
	}, {
		"instruction": "load.ref .028c8e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243223
		, "size": 5
	}, {
		"instruction": "load.ref .000400"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243228
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243233
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243237
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243241
		, "size": 5
	}, {
		"instruction": "load.ref .03aad0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243246
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243251
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243255
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243260
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243265
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243269
		, "size": 5
	}, {
		"instruction": "load.ref .03aad8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243274
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243279
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243283
		, "size": 5
	}, {
		"instruction": "load.ref .03aaf0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243288
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243293
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243297
		, "size": 5
	}, {
		"instruction": "load.ref .03ab50"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243302
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243307
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243311
		, "size": 5
	}, {
		"instruction": "load.ref .03ab40"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243316
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243321
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243325
		, "size": 5
	}, {
		"instruction": "load.ref .03ab00"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243330
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243335
		, "size": 4
	}, {
		"instruction": "inc.sp(+56)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243339
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243343
		, "size": 4
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243347
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243351
		, "size": 1
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 243352
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243356
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243361
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 243363
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 243364
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243365
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243369
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 243371
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 243375
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 243376
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243380
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243382
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 243387
		, "size": 1
	}, {
		"instruction": "jnz -32"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 243388
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243392
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243396
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243401
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243402
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243407
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243411
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243416
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243420
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 243422
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243424
		, "size": 2
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243426
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243430
		, "size": 4
	}, {
		"instruction": "load.ref .01da25"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243434
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243439
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243444
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243448
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243452
		, "size": 5
	}, {
		"instruction": "load.c32 83"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243457
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243462
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243467
		, "size": 1
	}, {
		"instruction": "load.ref .02aa48"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243468
		, "size": 5
	}, {
		"instruction": "load.ref .02b6e8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243473
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243478
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243482
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243486
		, "size": 5
	}, {
		"instruction": "load.c32 84"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243491
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243496
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243501
		, "size": 1
	}, {
		"instruction": "load.ref .02aa5a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243502
		, "size": 5
	}, {
		"instruction": "load.ref .02b6e8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243507
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243512
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243516
		, "size": 4
	}, {
		"instruction": "load.ref .01da25"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243520
		, "size": 5
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243525
		, "size": 5
	}, {
		"instruction": "load.c32 87"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243530
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243535
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243540
		, "size": 1
	}, {
		"instruction": "load.ref .02aa48"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243541
		, "size": 5
	}, {
		"instruction": "load.ref .02b880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243546
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243551
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243553
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243557
		, "size": 5
	}, {
		"instruction": "load.c32 88"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243562
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243567
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243572
		, "size": 1
	}, {
		"instruction": "load.ref .02aa5a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243573
		, "size": 5
	}, {
		"instruction": "load.ref .02b880"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243578
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243583
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243585
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243589
		, "size": 5
	}, {
		"instruction": "load.ref .01da25"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243594
		, "size": 5
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243599
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243604
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243609
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243614
		, "size": 1
	}, {
		"instruction": "load.ref .02aa48"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243615
		, "size": 5
	}, {
		"instruction": "load.ref .02b990"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243620
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243625
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243627
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243631
		, "size": 5
	}, {
		"instruction": "load.c32 92"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243636
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243641
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243646
		, "size": 1
	}, {
		"instruction": "load.ref .02aa5a"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243647
		, "size": 5
	}, {
		"instruction": "load.ref .02b990"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243652
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243657
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243659
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243663
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243665
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 243666
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 243667
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 243671
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243675
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243680
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243685
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243690
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243695
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243700
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243705
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243710
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243714
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243716
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 243717
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 243718
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 243722
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243726
		, "size": 5
	}, {
		"instruction": "load.c32 99"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243731
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243736
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243741
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243746
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243751
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243756
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243761
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 243765
		, "size": 2
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 243767
		, "size": 9
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 243776
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 243777
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 243781
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243785
		, "size": 5
	}, {
		"instruction": "load.c32 101"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243790
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243795
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243800
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243805
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243810
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243815
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 243820
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243824
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243829
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243834
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243839
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243844
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243845
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243849
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243854
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243856
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243861
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243866
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243867
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243871
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 243876
		, "size": 2
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243878
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243883
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243888
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243889
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243893
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 243894
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243895
		, "size": 5
	}, {
		"instruction": "load.ref .03ab58"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243900
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243905
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243906
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243910
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243915
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243920
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243921
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243925
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243926
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 243927
		, "size": 2
	}, {
		"instruction": "load.ref .03ab58"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243929
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243934
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243935
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243939
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243944
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243949
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243950
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243954
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243959
		, "size": 1
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243960
		, "size": 5
	}, {
		"instruction": "load.sp(+84)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 243965
		, "size": 4
	}, {
		"instruction": "load.ref .03ab58"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243969
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243974
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243975
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243979
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 243984
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 243989
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 243990
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 243994
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 243999
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244000
		, "size": 2
	}, {
		"instruction": "load.ref .03ab58"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244002
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244007
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244008
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244012
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244017
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244022
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244023
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244027
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 244032
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244033
		, "size": 2
	}, {
		"instruction": "load.ref .03ab58"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244035
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244040
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244041
		, "size": 4
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244045
		, "size": 5
	}, {
		"instruction": "load.ref .039bc8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244050
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244055
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244056
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 244060
		, "size": 1
	}, {
		"instruction": "jmp +790"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244061
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244065
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244070
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 244072
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 244073
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244074
		, "size": 2
	}, {
		"instruction": "load.sp(+92)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 244076
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244080
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 244082
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 244086
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244087
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244088
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244092
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244096
		, "size": 5
	}, {
		"instruction": "load.c32 120"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244101
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244106
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244111
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244116
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244121
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244126
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244131
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244135
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244137
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244139
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 244141
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 244145
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244146
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244147
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244151
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244155
		, "size": 5
	}, {
		"instruction": "load.c32 121"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244160
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244165
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244170
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244175
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244180
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244185
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244190
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244194
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244196
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244198
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 244200
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 244204
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244205
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244206
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244210
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244214
		, "size": 5
	}, {
		"instruction": "load.c32 122"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244219
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244224
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244229
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244234
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244239
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244244
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244249
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244253
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244255
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244256
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 244258
		, "size": 4
	}, {
		"instruction": "load.ref .03ab60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244262
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244267
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244268
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244272
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244273
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244277
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244281
		, "size": 5
	}, {
		"instruction": "load.c32 124"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244286
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244291
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244296
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244301
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244306
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244311
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244316
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244320
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244322
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244323
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244325
		, "size": 2
	}, {
		"instruction": "load.ref .03ab60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244327
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244332
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244333
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244337
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244338
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244342
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244346
		, "size": 5
	}, {
		"instruction": "load.c32 125"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244351
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244356
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244361
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244366
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244371
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244376
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244381
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244385
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244387
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244388
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244390
		, "size": 2
	}, {
		"instruction": "load.ref .03ab60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244392
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244397
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244398
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244402
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244403
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244407
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244411
		, "size": 5
	}, {
		"instruction": "load.c32 126"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244416
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244421
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244426
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244431
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244436
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244441
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244446
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244450
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244452
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244453
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 244455
		, "size": 4
	}, {
		"instruction": "load.ref .03ab70"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244459
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244464
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244465
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244469
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244470
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244474
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244478
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244483
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244488
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244493
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244498
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244503
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244508
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244513
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244517
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244519
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244520
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244522
		, "size": 2
	}, {
		"instruction": "load.ref .03ab70"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244524
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244529
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244530
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244534
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244535
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244539
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244543
		, "size": 5
	}, {
		"instruction": "load.c32 129"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244548
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244553
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244558
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244563
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244568
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244573
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244578
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244582
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244584
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244585
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244587
		, "size": 2
	}, {
		"instruction": "load.ref .03ab70"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244589
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244594
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244595
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244599
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244600
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244604
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244608
		, "size": 5
	}, {
		"instruction": "load.c32 130"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244613
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244618
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244623
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244628
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244633
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244638
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244643
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244647
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244649
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244650
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244652
		, "size": 5
	}, {
		"instruction": "load.sp(+108)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 244657
		, "size": 4
	}, {
		"instruction": "load.ref .03ab80"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244661
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244666
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244667
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244671
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244672
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244676
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244680
		, "size": 5
	}, {
		"instruction": "load.c32 132"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244685
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244690
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244695
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244700
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244705
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244710
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244715
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244719
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x19"
		, "offs": 244721
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244722
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244724
		, "size": 2
	}, {
		"instruction": "load.ref .03ab80"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244726
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244731
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244732
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244736
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244737
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244741
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244745
		, "size": 5
	}, {
		"instruction": "load.c32 134"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244750
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244755
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244760
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244765
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244770
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244775
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244780
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 244784
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244786
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244788
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0c"
		, "offs": 244790
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 244794
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 244795
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 244796
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 244800
		, "size": 4
	}, {
		"instruction": "load.ref .01d83d"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244804
		, "size": 5
	}, {
		"instruction": "load.c32 136"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244809
		, "size": 5
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244814
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244819
		, "size": 5
	}, {
		"instruction": "load.ref .00b5e6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244824
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244829
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244834
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 244839
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244843
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 244847
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244851
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244853
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 244858
		, "size": 1
	}, {
		"instruction": "jnz -794"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 244859
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244863
		, "size": 4
	}, {
		"instruction": "inc.sp(+32)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244867
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244871
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244876
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244878
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244883
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244885
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244890
		, "size": 2
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244892
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244897
		, "size": 2
	}, {
		"instruction": "load.c32 61"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244899
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244904
		, "size": 2
	}, {
		"instruction": "load.c32 62"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244906
		, "size": 5
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244911
		, "size": 2
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244913
		, "size": 5
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244918
		, "size": 2
	}, {
		"instruction": "load.c32 72"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 244920
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244925
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244927
		, "size": 4
	}, {
		"instruction": "load.ref .03ac30"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244931
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244936
		, "size": 2
	}, {
		"instruction": "load.ref .03abc0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244938
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244943
		, "size": 2
	}, {
		"instruction": "load.ref .03abd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244945
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244950
		, "size": 2
	}, {
		"instruction": "load.ref .03abe0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244952
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244957
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244959
		, "size": 4
	}, {
		"instruction": "load.ref .03ac30"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244963
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244968
		, "size": 2
	}, {
		"instruction": "load.ref .03ac38"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244970
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244975
		, "size": 2
	}, {
		"instruction": "load.m32 .03abc8"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 244977
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244981
		, "size": 2
	}, {
		"instruction": "load.ref .03abd0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 244983
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 244988
		, "size": 2
	}, {
		"instruction": "dup.x4 sp(4)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 244990
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 244992
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 244994
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 244995
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 244999
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245001
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245003
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245004
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(4)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245008
		, "size": 2
	}, {
		"instruction": "load.ref .03ac08"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245010
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245015
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245016
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(4)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245020
		, "size": 2
	}, {
		"instruction": "load.ref .03ac60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245022
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245027
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245028
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(4)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245032
		, "size": 2
	}, {
		"instruction": "load.ref .03ac88"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245034
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245039
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245040
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245044
		, "size": 2
	}, {
		"instruction": "load.ref .03ac60"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245046
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245051
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245052
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(4)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245056
		, "size": 2
	}, {
		"instruction": "load.ref .03abe0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245058
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245063
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245064
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(4)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245068
		, "size": 2
	}, {
		"instruction": "load.ref .03ac08"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245070
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245075
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245076
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x14"
		, "offs": 245080
		, "size": 2
	}, {
		"instruction": "load.ref .03abe0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 245082
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 245087
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245088
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245092
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245096
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245097
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245101
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245102
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245103
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245107
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245108
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245109
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245113
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245114
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245118
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245119
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245123
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245124
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245129
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245133
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245134
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245135
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245139
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245140
		, "size": 4
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245144
		, "size": 5
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245149
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245153
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245154
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245159
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245163
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245164
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245169
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245173
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245174
		, "size": 4
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245178
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 245183
		, "size": 2
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 245185
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245189
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245190
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245194
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 245195
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245196
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245200
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245201
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245206
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 245210
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245211
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245216
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245221
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245226
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245230
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245231
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245235
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 245236
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245237
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245241
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245242
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245246
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 245247
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245248
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245252
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245253
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245257
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 245258
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245259
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245263
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245264
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245265
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245269
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245270
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245274
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245275
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245276
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245280
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245281
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245285
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245286
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245287
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245288
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245292
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245293
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245297
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 245298
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245299
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245303
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245304
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245308
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 245309
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245310
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245311
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245315
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245316
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245320
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 245321
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245322
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245326
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245327
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245331
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 245332
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245333
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245334
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245339
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245344
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245348
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245349
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245353
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 245354
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245355
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245359
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 245360
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245361
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245365
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245366
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245370
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 245371
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245372
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245376
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245377
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245381
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 245382
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245383
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245387
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245388
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245392
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 245393
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245394
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245398
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245399
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245403
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 245404
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245405
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245409
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245410
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245414
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 245415
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245416
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245420
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245421
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245425
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 245426
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245427
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245431
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245432
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245436
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 245437
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245438
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245442
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245443
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245447
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 245448
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245449
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245453
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(26)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245454
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 245456
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245457
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245461
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245462
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 245464
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245465
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245469
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 245470
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245471
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245472
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245476
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245477
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245481
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245482
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245483
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245487
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245488
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245492
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245493
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245494
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245495
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245499
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245500
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245504
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 245505
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245506
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245510
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245511
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245515
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 245516
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245517
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245518
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245522
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245523
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245527
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 245528
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245529
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245533
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245534
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245538
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 245539
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245540
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245541
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245546
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245551
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245555
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245556
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245560
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 245561
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245562
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245566
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 245567
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245568
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245572
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245573
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245577
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 245578
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245579
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245583
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245584
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245588
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 245589
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245590
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245594
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245595
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245599
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 245600
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245601
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245605
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245606
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245610
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 245611
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245612
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245616
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245617
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245621
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 245622
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245623
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245627
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245628
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245632
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 245633
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245634
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245638
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245639
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245643
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 245644
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245645
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245649
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245650
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245654
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 245655
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245656
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245660
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(48)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245661
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 245663
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245664
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245668
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(49)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245669
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 245671
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245672
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245676
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 245677
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245678
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245679
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245683
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245684
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245688
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245689
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245690
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245694
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245695
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245699
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245700
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245701
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245702
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245706
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245707
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245711
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 245712
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245713
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245717
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245718
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245722
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 245723
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245724
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245725
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245729
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245730
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245734
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 245735
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245736
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245740
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245741
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245745
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 245746
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245747
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245748
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245753
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245758
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245762
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245763
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245767
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 245768
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245769
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245773
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 245774
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245775
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245779
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245780
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245784
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 245785
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245786
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245790
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245791
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245795
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 245796
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245797
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245801
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245802
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245806
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 245807
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245808
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245812
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245813
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245817
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 245818
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245819
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245823
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245824
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245828
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 245829
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245830
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245834
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245835
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245839
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 245840
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245841
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245845
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245846
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245850
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 245851
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245852
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245856
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245857
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245861
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 245862
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245863
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245867
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(70)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245868
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 245870
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245871
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245875
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(71)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 245876
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 245878
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245879
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245883
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 245884
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245885
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245886
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245890
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245891
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245895
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245896
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245897
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245901
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245902
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245906
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 245907
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245908
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245909
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245913
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245914
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245918
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 245919
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245920
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245924
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245925
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245929
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 245930
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245931
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245932
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245936
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245937
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245941
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 245942
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245943
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245947
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245948
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 245952
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 245953
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 245954
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245955
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 245960
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245965
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 245969
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245970
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 245974
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 245975
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245976
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 245980
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 245981
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245982
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 245986
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245987
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 245991
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 245992
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245993
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 245997
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 245998
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246002
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 246003
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246004
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246008
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246009
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246013
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 246014
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246015
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246019
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246020
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246024
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 246025
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246026
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246030
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246031
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246035
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 246036
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246037
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246041
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246042
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246046
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 246047
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246048
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246052
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246053
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246057
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 246058
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246059
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246063
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246064
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246068
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 246069
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246070
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246074
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(92)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246075
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 246077
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246078
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246082
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(93)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246083
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 246085
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246086
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246090
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 246091
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246092
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246093
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246097
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246098
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246102
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246103
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246104
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246108
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246109
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246113
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246114
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246115
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246116
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246120
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246121
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246125
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 246126
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246127
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246131
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246132
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246136
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 246137
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246138
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246139
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246143
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246144
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246148
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 246149
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246150
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246154
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246155
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246159
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 246160
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246161
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246162
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246167
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246172
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246176
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246177
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246181
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 246182
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246183
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246187
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 246188
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246189
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246193
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246194
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246198
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 246199
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246200
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246204
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246205
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246209
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 246210
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246211
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246215
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246216
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246220
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 246221
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246222
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246226
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246227
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246231
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 246232
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246233
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246237
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246238
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246242
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 246243
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246244
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246248
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246249
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246253
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 246254
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246255
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246259
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246260
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246264
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 246265
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246266
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246270
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246271
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246275
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 246276
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246277
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246281
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(114)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246282
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 246284
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246285
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246289
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(115)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246290
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 246292
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246293
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246297
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 246298
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246299
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246300
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246304
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246305
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246309
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246310
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246311
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246315
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246316
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246320
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246321
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246322
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246323
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246327
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246328
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246332
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 246333
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246334
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246338
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246339
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246343
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 246344
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246345
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246346
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246350
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246351
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246355
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 246356
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246357
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246361
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246362
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 246366
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 246367
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246368
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246369
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246374
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246379
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246381
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 246383
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246384
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 246386
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246387
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246389
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 246391
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246392
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246394
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 246396
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246397
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246399
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 246401
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246402
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246404
		, "size": 2
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 246406
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246407
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246409
		, "size": 2
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 246411
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246412
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246414
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 246416
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246417
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246419
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 246421
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246422
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246424
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 246426
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246427
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(136)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246429
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 246431
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246432
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(137)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246434
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 246436
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246437
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 246439
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246440
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246441
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246443
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246445
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246446
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246448
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246450
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246451
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246452
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246454
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 246456
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246457
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246459
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 246461
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246462
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246463
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246465
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 246467
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246468
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246470
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 246472
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246473
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246474
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246479
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246484
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246486
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 246488
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246489
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 246491
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246492
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246494
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 246496
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246497
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246499
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 246501
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246502
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246504
		, "size": 2
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 246506
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246507
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246509
		, "size": 2
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 246511
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246512
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246514
		, "size": 2
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 246516
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246517
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246519
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 246521
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246522
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246524
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 246526
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246527
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246529
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 246531
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246532
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(158)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246534
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 246536
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246537
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(159)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246539
		, "size": 2
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 246541
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246542
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 246544
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246545
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246546
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246548
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246550
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246551
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246553
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246555
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246556
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246557
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246559
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 246561
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246562
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246564
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 246566
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246567
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246568
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246570
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 246572
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246573
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246575
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 246577
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246578
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 246579
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 246588
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246597
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246599
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 246601
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246602
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 246604
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246605
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246607
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 246609
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246610
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246612
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 246614
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246615
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246617
		, "size": 2
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 246619
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246620
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246622
		, "size": 2
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 246624
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246625
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246627
		, "size": 2
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 246629
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246630
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246632
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 246634
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246635
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246637
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 246639
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246640
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246642
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 246644
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246645
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(194)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246647
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 246649
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246650
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(196)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246652
		, "size": 2
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 246654
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246655
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 246657
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246658
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246659
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246661
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 246663
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246664
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246666
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 246668
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246669
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246670
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246672
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 246674
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246675
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246677
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 246679
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246680
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246681
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246683
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 246685
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246686
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246688
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 246690
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246691
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 246692
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1c"
		, "offs": 246701
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246710
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246712
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 246714
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246715
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 246717
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246718
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246720
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 246722
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246723
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246725
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 246727
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246728
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246730
		, "size": 2
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 246732
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246733
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246735
		, "size": 2
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 246737
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246738
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246740
		, "size": 2
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 246742
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246743
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246745
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 246747
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246748
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246750
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 246752
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246753
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246755
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 246757
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246758
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(231)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246760
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 246762
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246763
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(233)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246765
		, "size": 2
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 246767
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246768
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 246770
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246771
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246772
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246774
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 246776
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246777
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246779
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 246781
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246782
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246783
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246785
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 246787
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246788
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246790
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 246792
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246793
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246794
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246796
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 246798
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246799
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246801
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 246803
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246804
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 246805
		, "size": 5
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x1d"
		, "offs": 246810
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246815
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246817
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 246819
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246820
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246822
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 246824
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246825
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246827
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 246829
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246830
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246832
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 246834
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246835
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246837
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 246839
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246840
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246842
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 246844
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246845
		, "size": 2
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7b"
		, "offs": 246847
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246848
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246849
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246851
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 246853
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246854
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246856
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 246858
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246859
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246860
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246862
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 246864
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246865
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246867
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 246869
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246870
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246871
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246873
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 246875
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246876
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246878
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 246880
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246881
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 246882
		, "size": 9
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x1e"
		, "offs": 246891
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246900
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246902
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 246904
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246905
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246907
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 246909
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246910
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246912
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 246914
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246915
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246917
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 246919
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246920
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246922
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 246924
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246925
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246927
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 246929
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246930
		, "size": 2
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 246932
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246933
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246934
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246936
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 246938
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246939
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246941
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 246943
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246944
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246945
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246947
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 246949
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246950
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246952
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 246954
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246955
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246956
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246958
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 246960
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246961
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x13"
		, "offs": 246963
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 246965
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246966
		, "size": 1
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 246967
		, "size": 5
	}, {
		"instruction": "load.sp(+1128)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 246972
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246976
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246978
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246980
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246981
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 246983
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 246985
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0a"
		, "offs": 246986
		, "size": 1
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 246987
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246992
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 246997
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247002
		, "size": 5
	}, {
		"instruction": "load.ref .0395a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247007
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247012
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247017
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247022
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247026
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247031
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247036
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247041
		, "size": 5
	}, {
		"instruction": "load.ref .0395a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247046
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247051
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247056
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247061
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247065
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247070
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247075
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247080
		, "size": 5
	}, {
		"instruction": "load.ref .0395a8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247085
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247090
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247095
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247100
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247104
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247105
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247107
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247108
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247109
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247113
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247118
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247123
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247128
		, "size": 5
	}, {
		"instruction": "load.ref .0395b6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247133
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247138
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247143
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247147
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247151
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247153
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247154
		, "size": 1
	}, {
		"instruction": "jnz +42"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 247155
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247159
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247164
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247169
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247174
		, "size": 5
	}, {
		"instruction": "load.ref .0395bd"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247179
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247184
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247189
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247193
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247197
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247199
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247200
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247201
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247205
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247210
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247215
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247220
		, "size": 5
	}, {
		"instruction": "load.ref .0395b6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247225
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247230
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247235
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247239
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247243
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247247
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247252
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247257
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247262
		, "size": 5
	}, {
		"instruction": "load.ref .0395bd"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247267
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247272
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247277
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247281
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247285
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247287
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247288
		, "size": 1
	}, {
		"instruction": "jnz +46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 247289
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247293
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247298
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247303
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247308
		, "size": 5
	}, {
		"instruction": "load.ref .0395bd"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247313
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247318
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247323
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247327
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247331
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247335
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247340
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247345
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247350
		, "size": 5
	}, {
		"instruction": "load.ref .0395b6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247355
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247360
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247365
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247369
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247373
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247375
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247376
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247377
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247381
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247386
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247391
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247396
		, "size": 5
	}, {
		"instruction": "load.ref .0395b6"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247401
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247406
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247411
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247415
		, "size": 4
	}, {
		"instruction": "jmp +312"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247419
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247423
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247425
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247430
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247431
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247435
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247440
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247445
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247450
		, "size": 5
	}, {
		"instruction": "load.ref .0395c4"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247455
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247460
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247465
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247469
		, "size": 4
	}, {
		"instruction": "jmp +258"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247473
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247477
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247479
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247484
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247485
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247489
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247494
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247499
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247504
		, "size": 5
	}, {
		"instruction": "load.ref .0395cb"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247509
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247514
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247519
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247523
		, "size": 4
	}, {
		"instruction": "jmp +204"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247527
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247531
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247533
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247538
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247539
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247543
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247548
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247553
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247558
		, "size": 5
	}, {
		"instruction": "load.ref .0395d2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247563
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247568
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247573
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247577
		, "size": 4
	}, {
		"instruction": "jmp +150"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247581
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247585
		, "size": 2
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247587
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247592
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247593
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247597
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247602
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247607
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247612
		, "size": 5
	}, {
		"instruction": "load.ref .0395d9"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247617
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247622
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247627
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247631
		, "size": 4
	}, {
		"instruction": "jmp +96"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247635
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247639
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247641
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 247646
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247647
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247651
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247656
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247661
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247666
		, "size": 5
	}, {
		"instruction": "load.ref .0395e0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247671
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247676
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247681
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247685
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247689
		, "size": 4
	}, {
		"instruction": "load.ref .01d8bf"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247693
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247698
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247703
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247708
		, "size": 5
	}, {
		"instruction": "load.ref .0395e7"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247713
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247718
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247723
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247727
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247731
		, "size": 4
	}, {
		"instruction": "load.ref .01d8d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247735
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247740
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247745
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247750
		, "size": 1
	}, {
		"instruction": "load.ref .0396c0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247751
		, "size": 5
	}, {
		"instruction": "load.ref .0007f0"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247756
		, "size": 5
	}, {
		"instruction": "load.ref .000000"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247761
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247766
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247770
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247774
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247778
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247779
		, "size": 4
	}, {
		"instruction": "load.ref .01d8d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247783
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247788
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247793
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247798
		, "size": 1
	}, {
		"instruction": "load.ref .0396cc"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247799
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247804
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247809
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247813
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 247817
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247821
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247823
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 247828
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 247829
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 247833
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247837
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247838
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x15"
		, "offs": 247839
		, "size": 2
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247841
		, "size": 4
	}, {
		"instruction": "load.ref .01d8d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247845
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247850
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247855
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247860
		, "size": 1
	}, {
		"instruction": "load.ref .0396f2"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247861
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247866
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247871
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247875
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 247879
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247883
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247885
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 247890
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 247891
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247895
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247896
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247900
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247902
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 247907
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247908
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247912
		, "size": 4
	}, {
		"instruction": "load.ref .01d8d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247916
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247921
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247926
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247931
		, "size": 1
	}, {
		"instruction": "load.ref .03971c"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247932
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247937
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 247942
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 247946
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 247950
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247954
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247956
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 247961
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 247962
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 247966
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 247970
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247971
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 247975
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247977
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 247982
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 247983
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 247987
		, "size": 4
	}, {
		"instruction": "load.ref .01d8d8"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 247991
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 247996
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 248001
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x18"
		, "offs": 248006
		, "size": 1
	}, {
		"instruction": "load.ref .03972e"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 248007
		, "size": 5
	}, {
		"instruction": "load.ref .000370"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 248012
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x11"
		, "offs": 248017
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 248021
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0b"
		, "offs": 248025
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x12"
		, "offs": 248029
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1b"
		, "offs": 248031
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 248036
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 248037
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x10"
		, "offs": 248041
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 248045
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
142687,0,240816,
 142693,0,39024,
 142708,0,-1,
 142714,0,240264,
 142717,0,-1,
 142719,0,240264,
 142722,0,-1,
 142725,0,240272,
 142728,0,-1,
 142730,0,240272,
 142733,0,-1,
 142736,0,240280,
  142738,0,240280,
   142741,0,240280,
    142744,0,240280,
     142747,0,240280,
      142749,0,240280,
       142752,0,240280,
        142755,0,240280,
         142757,0,240280,
          142760,0,240280,
           142763,0,240280,
            142768,0,240280,
             142770,0,240280,
             142773,0,-1,
             142776,0,240280,
             142779,0,-1,
            142782,0,-1,
            142784,0,240280,
            142787,0,-1,
           142790,0,-1,
           142792,0,240280,
            142795,0,240280,
            142798,0,-1,
            142800,0,240280,
            142803,0,-1,
           142806,0,-1,
          142809,0,-1,
          142811,0,240280,
           142814,0,240280,
            142817,0,240280,
            142819,0,-1,
            142822,0,240280,
            142825,0,-1,
           142827,0,-1,
           142830,0,240280,
           142833,0,-1,
          142836,0,-1,
         142838,0,-1,
         142841,0,240280,
          142844,0,240280,
           142846,0,240280,
            142849,0,240280,
            142852,0,-1,
            142854,0,240280,
            142857,0,-1,
           142860,0,-1,
           142863,0,240280,
           142865,0,-1,
          142868,0,-1,
          142871,0,240280,
           142873,0,240280,
           142876,0,-1,
           142879,0,240280,
           142882,0,-1,
          142884,0,-1,
         142887,0,-1,
        142890,0,-1,
        142893,0,240280,
         142895,0,240280,
          142898,0,240280,
           142901,0,240280,
            142903,0,240280,
            142906,0,-1,
            142909,0,240280,
            142911,0,-1,
           142914,0,-1,
           142917,0,240280,
           142920,0,-1,
          142922,0,-1,
          142925,0,240280,
           142928,0,240280,
           142930,0,-1,
           142933,0,240280,
           142936,0,-1,
          142939,0,-1,
         142941,0,-1,
         142944,0,240280,
          142947,0,240280,
           142949,0,240280,
           142952,0,-1,
           142955,0,240280,
           142958,0,-1,
          142960,0,-1,
          142963,0,240280,
          142966,0,-1,
         142968,0,-1,
        142971,0,-1,
       142974,0,-1,
       142976,0,240280,
        142979,0,240280,
         142982,0,240280,
          142985,0,240280,
           142987,0,240280,
            142990,0,240280,
            142993,0,-1,
            142995,0,240280,
            142998,0,-1,
           143001,0,-1,
           143003,0,240280,
           143006,0,-1,
          143009,0,-1,
          143012,0,240280,
           143014,0,240280,
           143017,0,-1,
           143020,0,240280,
           143022,0,-1,
          143025,0,-1,
         143028,0,-1,
         143031,0,240280,
          143033,0,240280,
           143036,0,240280,
           143039,0,-1,
           143041,0,240280,
           143044,0,-1,
          143047,0,-1,
          143049,0,240280,
          143052,0,-1,
         143055,0,-1,
        143058,0,-1,
        143060,0,240280,
         143063,0,240280,
          143066,0,240280,
           143068,0,240280,
           143071,0,-1,
           143074,0,240280,
           143076,0,-1,
          143079,0,-1,
          143082,0,240280,
          143085,0,-1,
         143087,0,-1,
         143090,0,240280,
          143093,0,240280,
          143095,0,-1,
          143098,0,240280,
          143101,0,-1,
         143103,0,-1,
        143106,0,-1,
       143109,0,-1,
      143112,0,-1,
      143114,0,240280,
       143117,0,240280,
        143120,0,240280,
         143122,0,240280,
          143125,0,240280,
           143128,0,240280,
            143130,0,240280,
            143133,0,-1,
            143136,0,240280,
            143139,0,-1,
           143141,0,-1,
           143144,0,240280,
           143147,0,-1,
          143149,0,-1,
          143152,0,240280,
           143155,0,240280,
           143158,0,-1,
           143160,0,240280,
           143163,0,-1,
          143166,0,-1,
         143168,0,-1,
         143171,0,240280,
          143174,0,240280,
           143176,0,240280,
           143179,0,-1,
           143182,0,240280,
           143185,0,-1,
          143187,0,-1,
          143190,0,240280,
          143193,0,-1,
         143196,0,-1,
        143198,0,-1,
        143201,0,240280,
         143206,0,240280,
          143209,0,240280,
           143211,0,240280,
           143214,0,-1,
           143217,0,240280,
           143219,0,-1,
          143222,0,-1,
          143225,0,240280,
          143227,0,-1,
         143230,0,-1,
         143233,0,240280,
          143236,0,240280,
          143238,0,-1,
          143241,0,240280,
          143244,0,-1,
         143246,0,-1,
        143249,0,-1,
       143252,0,-1,
       143254,0,240280,
        143257,0,240280,
         143260,0,240280,
          143263,0,240280,
           143265,0,240280,
           143268,0,-1,
           143271,0,240280,
           143273,0,-1,
          143276,0,-1,
          143279,0,240280,
          143282,0,-1,
         143284,0,-1,
         143287,0,240280,
          143290,0,240280,
          143292,0,-1,
          143295,0,240280,
          143298,0,-1,
         143300,0,-1,
        143303,0,-1,
        143306,0,240280,
         143309,0,240280,
          143311,0,240280,
          143314,0,-1,
          143317,0,240280,
          143319,0,-1,
         143322,0,-1,
         143325,0,240280,
         143327,0,-1,
        143330,0,-1,
       143333,0,-1,
      143336,0,-1,
     143338,0,-1,
     143341,0,240280,
      143344,0,240280,
       143346,0,240280,
        143349,0,240280,
         143352,0,240280,
          143354,0,240280,
           143357,0,240280,
            143360,0,240280,
            143362,0,-1,
            143365,0,240280,
            143368,0,-1,
           143371,0,-1,
           143373,0,240280,
           143376,0,-1,
          143379,0,-1,
          143381,0,240280,
           143384,0,240280,
           143387,0,-1,
           143389,0,240280,
           143392,0,-1,
          143395,0,-1,
         143398,0,-1,
         143400,0,240280,
          143403,0,240280,
           143406,0,240280,
           143408,0,-1,
           143411,0,240280,
           143414,0,-1,
          143416,0,-1,
          143419,0,240280,
          143422,0,-1,
         143425,0,-1,
        143427,0,-1,
        143430,0,240280,
         143433,0,240280,
          143435,0,240280,
           143438,0,240280,
           143441,0,-1,
           143443,0,240280,
           143446,0,-1,
          143449,0,-1,
          143452,0,240280,
          143454,0,-1,
         143457,0,-1,
         143460,0,240280,
          143462,0,240280,
          143465,0,-1,
          143468,0,240280,
          143471,0,-1,
         143473,0,-1,
        143476,0,-1,
       143479,0,-1,
       143481,0,240280,
        143484,0,240280,
         143487,0,240280,
          143489,0,240280,
           143492,0,240280,
           143495,0,-1,
           143498,0,240280,
           143500,0,-1,
          143503,0,-1,
          143506,0,240280,
          143508,0,-1,
         143511,0,-1,
         143514,0,240280,
          143516,0,240280,
          143519,0,-1,
          143522,0,240280,
          143525,0,-1,
         143528,0,-1,
        143530,0,-1,
        143533,0,240280,
         143536,0,240280,
          143538,0,240280,
          143541,0,-1,
          143544,0,240280,
          143546,0,-1,
         143549,0,-1,
         143552,0,240280,
         143554,0,-1,
        143557,0,-1,
       143560,0,-1,
      143563,0,-1,
      143565,0,240280,
       143568,0,240280,
        143571,0,240280,
         143573,0,240280,
          143576,0,240280,
           143579,0,240280,
           143581,0,-1,
           143584,0,240280,
           143587,0,-1,
          143590,0,-1,
          143592,0,240280,
          143595,0,-1,
         143598,0,-1,
         143600,0,240280,
          143603,0,240280,
          143606,0,-1,
          143608,0,240280,
          143611,0,-1,
         143619,0,-1,
        143622,0,-1,
        143625,0,240280,
         143628,0,240280,
          143630,0,240280,
          143633,0,-1,
          143636,0,240280,
          143638,0,-1,
         143641,0,-1,
         143644,0,240280,
         143647,0,-1,
        143649,0,-1,
       143652,0,-1,
       143655,0,240280,
        143657,0,240280,
         143660,0,240280,
          143665,0,240280,
          143668,0,-1,
          143670,0,240280,
          143673,0,-1,
         143676,0,-1,
         143678,0,240280,
         143681,0,-1,
        143684,0,-1,
        143686,0,240280,
         143689,0,240280,
         143692,0,-1,
         143695,0,240280,
         143697,0,-1,
        143700,0,-1,
       143703,0,-1,
      143705,0,-1,
     143708,0,-1,
    143711,0,-1,
    143713,0,240280,
     143716,0,240280,
      143719,0,240280,
       143721,0,240280,
        143724,0,240280,
         143727,0,240280,
          143729,0,240280,
           143732,0,240280,
            143735,0,240280,
            143737,0,-1,
            143740,0,240280,
            143743,0,-1,
           143745,0,-1,
           143748,0,240280,
           143751,0,-1,
          143753,0,-1,
          143756,0,240280,
           143759,0,240280,
           143762,0,-1,
           143764,0,240280,
           143767,0,-1,
          143770,0,-1,
         143772,0,-1,
         143775,0,240280,
          143778,0,240280,
           143780,0,240280,
           143783,0,-1,
           143786,0,240280,
           143788,0,-1,
          143791,0,-1,
          143794,0,240280,
          143796,0,-1,
         143799,0,-1,
        143802,0,-1,
        143804,0,240280,
         143807,0,240280,
          143810,0,240280,
           143813,0,240280,
           143815,0,-1,
           143818,0,240280,
           143821,0,-1,
          143823,0,-1,
          143826,0,240280,
          143829,0,-1,
         143831,0,-1,
         143834,0,240280,
          143837,0,240280,
          143840,0,-1,
          143842,0,240280,
          143845,0,-1,
         143848,0,-1,
        143850,0,-1,
       143853,0,-1,
       143856,0,240280,
        143858,0,240280,
         143861,0,240280,
          143864,0,240280,
           143866,0,240280,
           143869,0,-1,
           143872,0,240280,
           143875,0,-1,
          143877,0,-1,
          143880,0,240280,
          143883,0,-1,
         143885,0,-1,
         143888,0,240280,
          143891,0,240280,
          143893,0,-1,
          143896,0,240280,
          143899,0,-1,
         143901,0,-1,
        143904,0,-1,
        143907,0,240280,
         143910,0,240280,
          143912,0,240280,
          143915,0,-1,
          143918,0,240280,
          143920,0,-1,
         143923,0,-1,
         143926,0,240280,
         143928,0,-1,
        143931,0,-1,
       143934,0,-1,
      143936,0,-1,
      143939,0,240280,
       143942,0,240280,
        143944,0,240280,
         143947,0,240280,
          143950,0,240280,
           143953,0,240280,
           143955,0,-1,
           143958,0,240280,
           143961,0,-1,
          143963,0,-1,
          143966,0,240280,
          143969,0,-1,
         143971,0,-1,
         143974,0,240280,
          143977,0,240280,
          143980,0,-1,
          143982,0,240280,
          143985,0,-1,
         143988,0,-1,
        143990,0,-1,
        143993,0,240280,
         143996,0,240280,
          143998,0,240280,
          144001,0,-1,
          144004,0,240280,
          144006,0,-1,
         144009,0,-1,
         144012,0,240280,
         144015,0,-1,
        144017,0,-1,
       144020,0,-1,
       144023,0,240280,
        144025,0,240280,
         144028,0,240280,
          144031,0,240280,
          144033,0,-1,
          144036,0,240280,
          144039,0,-1,
         144041,0,-1,
         144044,0,240280,
         144047,0,-1,
        144050,0,-1,
        144052,0,240280,
         144055,0,240280,
         144058,0,-1,
         144060,0,240280,
         144063,0,-1,
        144066,0,-1,
       144068,0,-1,
      144071,0,-1,
     144074,0,-1,
     144076,0,240280,
      144079,0,240280,
       144082,0,240280,
        144084,0,240280,
         144087,0,240280,
          144090,0,240280,
           144092,0,240280,
           144095,0,-1,
           144098,0,240280,
           144101,0,-1,
          144103,0,-1,
          144106,0,240280,
          144109,0,-1,
         144111,0,-1,
         144114,0,240280,
          144117,0,240280,
          144121,0,-1,
          144124,0,240280,
          144127,0,-1,
         144130,0,-1,
        144132,0,-1,
        144135,0,240280,
         144138,0,240280,
          144140,0,240280,
          144143,0,-1,
          144146,0,240280,
          144148,0,-1,
         144151,0,-1,
         144154,0,240280,
         144156,0,-1,
        144159,0,-1,
       144162,0,-1,
       144165,0,240280,
        144167,0,240280,
         144170,0,240280,
          144173,0,240280,
          144175,0,-1,
          144178,0,240280,
          144181,0,-1,
         144183,0,-1,
         144186,0,240280,
         144189,0,-1,
        144192,0,-1,
        144194,0,240280,
         144197,0,240280,
         144200,0,-1,
         144202,0,240280,
         144205,0,-1,
        144208,0,-1,
       144210,0,-1,
      144213,0,-1,
      144216,0,240280,
       144219,0,240280,
        144221,0,240280,
         144224,0,240280,
          144227,0,240280,
          144229,0,-1,
          144232,0,240280,
          144235,0,-1,
         144238,0,-1,
         144240,0,240280,
         144243,0,-1,
        144246,0,-1,
        144248,0,240280,
         144251,0,240280,
         144254,0,-1,
         144256,0,240280,
         144259,0,-1,
        144262,0,-1,
       144264,0,-1,
       144267,0,240280,
        144270,0,240280,
         144272,0,240280,
         144275,0,-1,
         144278,0,240280,
         144281,0,-1,
        144283,0,-1,
        144286,0,240280,
        144289,0,-1,
       144291,0,-1,
      144294,0,-1,
     144297,0,-1,
    144299,0,-1,
   144302,0,-1,
   144305,0,240280,
    144307,0,240280,
     144310,0,240280,
      144313,0,240280,
       144316,0,240280,
        144318,0,240280,
         144321,0,240280,
          144323,0,240280,
           144326,0,240280,
            144329,0,240280,
            144332,0,-1,
            144334,0,240280,
            144337,0,-1,
           144340,0,-1,
           144342,0,240280,
           144345,0,-1,
          144348,0,-1,
          144351,0,240280,
           144353,0,240280,
           144356,0,-1,
           144359,0,240280,
           144361,0,-1,
          144364,0,-1,
         144367,0,-1,
         144369,0,240280,
          144372,0,240280,
           144375,0,240280,
           144377,0,-1,
           144380,0,240280,
           144383,0,-1,
          144386,0,-1,
          144388,0,240280,
          144391,0,-1,
         144394,0,-1,
        144396,0,-1,
        144399,0,240280,
         144402,0,240280,
          144404,0,240280,
           144407,0,240280,
           144410,0,-1,
           144413,0,240280,
           144415,0,-1,
          144418,0,-1,
          144421,0,240280,
          144423,0,-1,
         144426,0,-1,
         144429,0,240280,
          144431,0,240280,
          144434,0,-1,
          144437,0,240280,
          144440,0,-1,
         144442,0,-1,
        144445,0,-1,
       144448,0,-1,
       144450,0,240280,
        144453,0,240280,
         144456,0,240280,
          144459,0,240280,
           144461,0,240280,
           144464,0,-1,
           144467,0,240280,
           144469,0,-1,
          144472,0,-1,
          144475,0,240280,
          144477,0,-1,
         144480,0,-1,
         144483,0,240280,
          144486,0,240280,
          144488,0,-1,
          144491,0,240280,
          144494,0,-1,
         144496,0,-1,
        144499,0,-1,
        144502,0,240280,
         144504,0,240280,
          144507,0,240280,
          144510,0,-1,
          144512,0,240280,
          144515,0,-1,
         144518,0,-1,
         144521,0,240280,
         144523,0,-1,
        144526,0,-1,
       144529,0,-1,
      144531,0,-1,
      144534,0,240280,
       144537,0,240280,
        144540,0,240280,
         144542,0,240280,
          144545,0,240280,
           144548,0,240280,
           144550,0,-1,
           144553,0,240280,
           144556,0,-1,
          144559,0,-1,
          144561,0,240280,
          144564,0,-1,
         144567,0,-1,
         144569,0,240280,
          144572,0,240280,
          144575,0,-1,
          144578,0,240280,
          144582,0,-1,
         144585,0,-1,
        144588,0,-1,
        144590,0,240280,
         144594,0,240280,
          144597,0,240280,
          144599,0,-1,
          144602,0,240280,
          144605,0,-1,
         144608,0,-1,
         144610,0,240280,
         144613,0,-1,
        144616,0,-1,
       144618,0,-1,
       144621,0,240280,
        144624,0,240280,
         144626,0,240280,
          144629,0,240280,
          144632,0,-1,
          144634,0,240280,
          144637,0,-1,
         144640,0,-1,
         144643,0,240280,
         144645,0,-1,
        144648,0,-1,
        144651,0,240280,
         144653,0,240280,
         144656,0,-1,
         144659,0,240280,
         144661,0,-1,
        144664,0,-1,
       144667,0,-1,
      144670,0,-1,
     144672,0,-1,
     144675,0,240280,
      144678,0,240280,
       144680,0,240280,
        144683,0,240280,
         144686,0,240280,
          144688,0,240280,
           144691,0,240280,
           144694,0,-1,
           144696,0,240280,
           144699,0,-1,
          144702,0,-1,
          144705,0,240280,
          144707,0,-1,
         144710,0,-1,
         144713,0,240280,
          144715,0,240280,
          144718,0,-1,
          144721,0,240280,
          144723,0,-1,
         144726,0,-1,
        144729,0,-1,
        144732,0,240280,
         144734,0,240280,
          144737,0,240280,
          144740,0,-1,
          144742,0,240280,
          144745,0,-1,
         144748,0,-1,
         144750,0,240280,
         144753,0,-1,
        144756,0,-1,
       144759,0,-1,
       144761,0,240280,
        144764,0,240280,
         144767,0,240280,
          144769,0,240280,
          144772,0,-1,
          144775,0,240280,
          144777,0,-1,
         144780,0,-1,
         144783,0,240280,
         144786,0,-1,
        144788,0,-1,
        144791,0,240280,
         144794,0,240280,
         144796,0,-1,
         144799,0,240280,
         144802,0,-1,
        144804,0,-1,
       144807,0,-1,
      144810,0,-1,
      144812,0,240280,
       144815,0,240280,
        144818,0,240280,
         144821,0,240280,
          144823,0,240280,
          144826,0,-1,
          144829,0,240280,
          144831,0,-1,
         144834,0,-1,
         144837,0,240280,
         144839,0,-1,
        144842,0,-1,
        144845,0,240280,
         144847,0,240280,
         144850,0,-1,
         144853,0,240280,
         144855,0,-1,
        144858,0,-1,
       144861,0,-1,
       144864,0,240280,
        144866,0,240280,
         144869,0,240280,
         144872,0,-1,
         144874,0,240280,
         144877,0,-1,
        144880,0,-1,
        144882,0,240280,
        144885,0,-1,
       144888,0,-1,
      144891,0,-1,
     144893,0,-1,
    144896,0,-1,
    144899,0,240280,
     144901,0,240280,
      144904,0,240280,
       144907,0,240280,
        144909,0,240280,
         144912,0,240280,
          144915,0,240280,
           144917,0,240280,
           144920,0,-1,
           144923,0,240280,
           144925,0,-1,
          144928,0,-1,
          144931,0,240280,
          144934,0,-1,
         144936,0,-1,
         144939,0,240280,
          144942,0,240280,
          144944,0,-1,
          144947,0,240280,
          144950,0,-1,
         144952,0,-1,
        144955,0,-1,
        144958,0,240280,
         144960,0,240280,
          144963,0,240280,
          144966,0,-1,
          144968,0,240280,
          144971,0,-1,
         144974,0,-1,
         144976,0,240280,
         144979,0,-1,
        144982,0,-1,
       144985,0,-1,
       144987,0,240280,
        144990,0,240280,
         144993,0,240280,
          144995,0,240280,
          144998,0,-1,
          145001,0,240280,
          145003,0,-1,
         145006,0,-1,
         145009,0,240280,
         145011,0,-1,
        145014,0,-1,
        145017,0,240280,
         145019,0,240280,
         145022,0,-1,
         145025,0,240280,
         145027,0,-1,
        145030,0,-1,
       145033,0,-1,
      145036,0,-1,
      145038,0,240280,
       145041,0,240280,
        145043,0,240280,
         145046,0,240280,
          145055,0,240280,
          145057,0,-1,
          145060,0,240280,
          145063,0,-1,
         145066,0,-1,
         145068,0,240280,
         145071,0,-1,
        145074,0,-1,
        145076,0,240280,
         145079,0,240280,
         145082,0,-1,
         145084,0,240280,
         145087,0,-1,
        145090,0,-1,
       145092,0,-1,
       145095,0,240280,
        145098,0,240280,
         145101,0,240280,
         145103,0,-1,
         145106,0,240280,
         145109,0,-1,
        145111,0,-1,
        145114,0,240280,
        145117,0,-1,
       145119,0,-1,
      145122,0,-1,
     145125,0,-1,
     145127,0,240280,
      145130,0,240280,
       145133,0,240280,
        145136,0,240280,
         145138,0,240280,
          145141,0,240280,
          145144,0,-1,
          145146,0,240280,
          145149,0,-1,
         145152,0,-1,
         145154,0,240280,
         145157,0,-1,
        145160,0,-1,
        145163,0,240280,
         145165,0,240280,
         145168,0,-1,
         145171,0,240280,
         145173,0,-1,
        145176,0,-1,
       145179,0,-1,
       145181,0,240280,
        145184,0,240280,
         145187,0,240280,
         145189,0,-1,
         145192,0,240280,
         145195,0,-1,
        145198,0,-1,
        145200,0,240280,
        145203,0,-1,
       145206,0,-1,
      145208,0,-1,
      145211,0,240280,
       145214,0,240280,
        145216,0,240280,
         145219,0,240280,
         145222,0,-1,
         145224,0,240280,
         145227,0,-1,
        145230,0,-1,
        145233,0,240280,
        145235,0,-1,
       145238,0,-1,
       145241,0,240280,
        145243,0,240280,
        145246,0,-1,
        145249,0,240280,
        145251,0,-1,
       145254,0,-1,
      145257,0,-1,
     145260,0,-1,
    145262,0,-1,
   145265,0,-1,
  145268,0,-1,
  145270,0,240280,
   145273,0,240280,
    145276,0,240280,
     145278,0,240280,
      145281,0,240280,
       145284,0,240280,
        145286,0,240280,
         145289,0,240280,
          145291,0,240280,
           145294,0,240280,
            145297,0,240280,
            145300,0,-1,
            145302,0,240280,
            145305,0,-1,
           145308,0,-1,
           145310,0,240280,
           145313,0,-1,
          145316,0,-1,
          145318,0,240280,
           145321,0,240280,
           145324,0,-1,
           145326,0,240280,
           145329,0,-1,
          145332,0,-1,
         145335,0,-1,
         145337,0,240280,
          145340,0,240280,
           145343,0,240280,
           145345,0,-1,
           145348,0,240280,
           145351,0,-1,
          145353,0,-1,
          145356,0,240280,
          145359,0,-1,
         145361,0,-1,
        145364,0,-1,
        145367,0,240280,
         145370,0,240280,
          145372,0,240280,
           145375,0,240280,
           145378,0,-1,
           145380,0,240280,
           145383,0,-1,
          145386,0,-1,
          145388,0,240280,
          145391,0,-1,
         145394,0,-1,
         145397,0,240280,
          145399,0,240280,
          145402,0,-1,
          145405,0,240280,
          145407,0,-1,
         145410,0,-1,
        145413,0,-1,
       145415,0,-1,
       145418,0,240280,
        145421,0,240280,
         145423,0,240280,
          145426,0,240280,
           145429,0,240280,
           145432,0,-1,
           145434,0,240280,
           145437,0,-1,
          145440,0,-1,
          145442,0,240280,
          145445,0,-1,
         145448,0,-1,
         145450,0,240280,
          145453,0,240280,
          145456,0,-1,
          145458,0,240280,
          145461,0,-1,
         145464,0,-1,
        145467,0,-1,
        145469,0,240280,
         145472,0,240280,
          145475,0,240280,
          145477,0,-1,
          145480,0,240280,
          145483,0,-1,
         145486,0,-1,
         145488,0,240280,
         145491,0,-1,
        145494,0,-1,
       145497,0,-1,
      145499,0,-1,
      145502,0,240280,
       145505,0,240280,
        145507,0,240280,
         145510,0,240280,
          145513,0,240280,
           145515,0,240280,
           145518,0,-1,
           145523,0,240280,
           145525,0,-1,
          145528,0,-1,
          145531,0,240280,
          145534,0,-1,
         145536,0,-1,
         145539,0,240280,
          145542,0,240280,
          145544,0,-1,
          145547,0,240280,
          145550,0,-1,
         145553,0,-1,
        145555,0,-1,
        145558,0,240280,
         145561,0,240280,
          145563,0,240280,
          145566,0,-1,
          145569,0,240280,
          145571,0,-1,
         145574,0,-1,
         145577,0,240280,
         145580,0,-1,
        145582,0,-1,
       145585,0,-1,
       145588,0,240280,
        145590,0,240280,
         145593,0,240280,
          145596,0,240280,
          145599,0,-1,
          145601,0,240280,
          145604,0,-1,
         145607,0,-1,
         145609,0,240280,
         145612,0,-1,
        145615,0,-1,
        145617,0,240280,
         145620,0,240280,
         145623,0,-1,
         145626,0,240280,
         145628,0,-1,
        145631,0,-1,
       145634,0,-1,
      145636,0,-1,
     145639,0,-1,
     145642,0,240280,
      145644,0,240280,
       145647,0,240280,
        145650,0,240280,
         145652,0,240280,
          145655,0,240280,
           145658,0,240280,
           145661,0,-1,
           145663,0,240280,
           145666,0,-1,
          145669,0,-1,
          145672,0,240280,
          145674,0,-1,
         145677,0,-1,
         145680,0,240280,
          145682,0,240280,
          145685,0,-1,
          145688,0,240280,
          145690,0,-1,
         145693,0,-1,
        145696,0,-1,
        145699,0,240280,
         145701,0,240280,
          145704,0,240280,
          145707,0,-1,
          145709,0,240280,
          145712,0,-1,
         145715,0,-1,
         145717,0,240280,
         145720,0,-1,
        145723,0,-1,
       145726,0,-1,
       145728,0,240280,
        145731,0,240280,
         145734,0,240280,
          145736,0,240280,
          145739,0,-1,
          145742,0,240280,
          145744,0,-1,
         145747,0,-1,
         145750,0,240280,
         145753,0,-1,
        145755,0,-1,
        145758,0,240280,
         145761,0,240280,
         145763,0,-1,
         145766,0,240280,
         145769,0,-1,
        145771,0,-1,
       145774,0,-1,
      145777,0,-1,
      145780,0,240280,
       145782,0,240280,
        145785,0,240280,
         145788,0,240280,
          145790,0,240280,
          145793,0,-1,
          145796,0,240280,
          145798,0,-1,
         145801,0,-1,
         145804,0,240280,
         145806,0,-1,
        145809,0,-1,
        145812,0,240280,
         145815,0,240280,
         145817,0,-1,
         145820,0,240280,
         145823,0,-1,
        145825,0,-1,
       145828,0,-1,
       145831,0,240280,
        145833,0,240280,
         145836,0,240280,
         145839,0,-1,
         145842,0,240280,
         145844,0,-1,
        145847,0,-1,
        145850,0,240280,
        145852,0,-1,
       145855,0,-1,
      145858,0,-1,
     145860,0,-1,
    145863,0,-1,
    145866,0,240280,
     145868,0,240280,
      145871,0,240280,
       145874,0,240280,
        145877,0,240280,
         145879,0,240280,
          145882,0,240280,
           145885,0,240280,
           145887,0,-1,
           145890,0,240280,
           145893,0,-1,
          145895,0,-1,
          145898,0,240280,
          145901,0,-1,
         145903,0,-1,
         145906,0,240280,
          145909,0,240280,
          145911,0,-1,
          145914,0,240280,
          145917,0,-1,
         145920,0,-1,
        145922,0,-1,
        145925,0,240280,
         145928,0,240280,
          145930,0,240280,
          145933,0,-1,
          145936,0,240280,
          145938,0,-1,
         145941,0,-1,
         145944,0,240280,
         145946,0,-1,
        145949,0,-1,
       145952,0,-1,
       145955,0,240280,
        145957,0,240280,
         145960,0,240280,
          145963,0,240280,
          145965,0,-1,
          145968,0,240280,
          145971,0,-1,
         145973,0,-1,
         145976,0,240280,
         145979,0,-1,
        145982,0,-1,
        145984,0,240280,
         145989,0,240280,
         145992,0,-1,
         145994,0,240280,
         145997,0,-1,
        146000,0,-1,
       146002,0,-1,
      146005,0,-1,
      146008,0,240280,
       146010,0,240280,
        146013,0,240280,
         146016,0,240280,
          146018,0,240280,
          146021,0,-1,
          146024,0,240280,
          146027,0,-1,
         146029,0,-1,
         146032,0,240280,
         146035,0,-1,
        146037,0,-1,
        146040,0,240280,
         146043,0,240280,
         146045,0,-1,
         146048,0,240280,
         146051,0,-1,
        146053,0,-1,
       146056,0,-1,
       146059,0,240280,
        146062,0,240280,
         146064,0,240280,
         146067,0,-1,
         146070,0,240280,
         146072,0,-1,
        146075,0,-1,
        146078,0,240280,
        146080,0,-1,
       146083,0,-1,
      146086,0,-1,
     146088,0,-1,
     146091,0,240280,
      146094,0,240280,
       146096,0,240280,
        146099,0,240280,
         146102,0,240280,
          146104,0,240280,
          146107,0,-1,
          146110,0,240280,
          146113,0,-1,
         146115,0,-1,
         146118,0,240280,
         146121,0,-1,
        146123,0,-1,
        146126,0,240280,
         146129,0,240280,
         146131,0,-1,
         146134,0,240280,
         146137,0,-1,
        146140,0,-1,
       146142,0,-1,
       146145,0,240280,
        146148,0,240280,
         146150,0,240280,
         146153,0,-1,
         146156,0,240280,
         146158,0,-1,
        146161,0,-1,
        146164,0,240280,
        146166,0,-1,
       146169,0,-1,
      146172,0,-1,
      146175,0,240280,
       146177,0,240280,
        146180,0,240280,
         146183,0,240280,
         146185,0,-1,
         146188,0,240280,
         146191,0,-1,
        146193,0,-1,
        146196,0,240280,
        146199,0,-1,
       146201,0,-1,
       146204,0,240280,
        146207,0,240280,
        146210,0,-1,
        146212,0,240280,
        146215,0,-1,
       146218,0,-1,
      146220,0,-1,
     146223,0,-1,
    146226,0,-1,
   146228,0,-1,
   146231,0,240280,
    146234,0,240280,
     146236,0,240280,
      146239,0,240280,
       146242,0,240280,
        146244,0,240280,
         146247,0,240280,
          146250,0,240280,
           146252,0,240280,
           146255,0,-1,
           146258,0,240280,
           146261,0,-1,
          146263,0,-1,
          146266,0,240280,
          146269,0,-1,
         146271,0,-1,
         146274,0,240280,
          146277,0,240280,
          146279,0,-1,
          146282,0,240280,
          146285,0,-1,
         146287,0,-1,
        146290,0,-1,
        146293,0,240280,
         146296,0,240280,
          146298,0,240280,
          146301,0,-1,
          146304,0,240280,
          146306,0,-1,
         146309,0,-1,
         146312,0,240280,
         146314,0,-1,
        146317,0,-1,
       146320,0,-1,
       146322,0,240280,
        146325,0,240280,
         146328,0,240280,
          146330,0,240280,
          146333,0,-1,
          146336,0,240280,
          146339,0,-1,
         146341,0,-1,
         146344,0,240280,
         146347,0,-1,
        146349,0,-1,
        146352,0,240280,
         146355,0,240280,
         146357,0,-1,
         146360,0,240280,
         146363,0,-1,
        146366,0,-1,
       146368,0,-1,
      146371,0,-1,
      146374,0,240280,
       146376,0,240280,
        146379,0,240280,
         146382,0,240280,
          146384,0,240280,
          146387,0,-1,
          146390,0,240280,
          146392,0,-1,
         146395,0,-1,
         146398,0,240280,
         146400,0,-1,
        146403,0,-1,
        146406,0,240280,
         146409,0,240280,
         146411,0,-1,
         146414,0,240280,
         146417,0,-1,
        146419,0,-1,
       146422,0,-1,
       146425,0,240280,
        146427,0,240280,
         146430,0,240280,
         146433,0,-1,
         146435,0,240280,
         146438,0,-1,
        146441,0,-1,
        146443,0,240280,
        146446,0,-1,
       146449,0,-1,
      146452,0,-1,
     146454,0,-1,
     146457,0,240280,
      146460,0,240280,
       146464,0,240280,
        146467,0,240280,
         146471,0,240280,
          146475,0,240280,
          146479,0,-1,
          146483,0,240280,
          146487,0,-1,
         146491,0,-1,
         146495,0,240280,
         146499,0,-1,
        146502,0,-1,
        146505,0,240280,
         146508,0,240280,
         146510,0,-1,
         146513,0,240280,
         146516,0,-1,
        146518,0,-1,
       146521,0,-1,
       146524,0,240280,
        146527,0,240280,
         146529,0,240280,
         146532,0,-1,
         146535,0,240280,
         146537,0,-1,
        146540,0,-1,
        146543,0,240280,
        146545,0,-1,
       146548,0,-1,
      146551,0,-1,
      146553,0,240280,
       146556,0,240280,
        146559,0,240280,
         146561,0,240280,
         146564,0,-1,
         146567,0,240280,
         146570,0,-1,
        146572,0,-1,
        146575,0,240280,
        146578,0,-1,
       146580,0,-1,
       146583,0,240280,
        146586,0,240280,
        146588,0,-1,
        146591,0,240280,
        146594,0,-1,
       146596,0,-1,
      146599,0,-1,
     146602,0,-1,
    146605,0,-1,
    146607,0,240280,
     146610,0,240280,
      146613,0,240280,
       146615,0,240280,
        146618,0,240280,
         146621,0,240280,
          146623,0,240280,
          146626,0,-1,
          146629,0,240280,
          146631,0,-1,
         146634,0,-1,
         146637,0,240280,
         146640,0,-1,
        146642,0,-1,
        146645,0,240280,
         146648,0,240280,
         146650,0,-1,
         146653,0,240280,
         146656,0,-1,
        146658,0,-1,
       146661,0,-1,
       146664,0,240280,
        146666,0,240280,
         146669,0,240280,
         146672,0,-1,
         146674,0,240280,
         146677,0,-1,
        146680,0,-1,
        146682,0,240280,
        146685,0,-1,
       146688,0,-1,
      146691,0,-1,
      146693,0,240280,
       146696,0,240280,
        146699,0,240280,
         146701,0,240280,
         146704,0,-1,
         146707,0,240280,
         146709,0,-1,
        146712,0,-1,
        146715,0,240280,
        146717,0,-1,
       146720,0,-1,
       146723,0,240280,
        146726,0,240280,
        146728,0,-1,
        146731,0,240280,
        146734,0,-1,
       146736,0,-1,
      146739,0,-1,
     146742,0,-1,
     146744,0,240280,
      146747,0,240280,
       146750,0,240280,
        146752,0,240280,
         146755,0,240280,
         146758,0,-1,
         146760,0,240280,
         146763,0,-1,
        146766,0,-1,
        146769,0,240280,
        146771,0,-1,
       146774,0,-1,
       146777,0,240280,
        146779,0,240280,
        146782,0,-1,
        146785,0,240280,
        146788,0,-1,
       146790,0,-1,
      146793,0,-1,
      146796,0,240280,
       146798,0,240280,
        146801,0,240280,
        146804,0,-1,
        146806,0,240280,
        146809,0,-1,
       146812,0,-1,
       146814,0,240280,
       146817,0,-1,
      146820,0,-1,
     146823,0,-1,
    146825,0,-1,
   146828,0,-1,
  146831,0,-1,
 146833,0,-1,
 146837,0,23320,
 146847,0,-1,
 146850,0,22392,
 146853,0,-1,
 146856,0,22856,
 146859,0,-1,
 146862,0,21928,
 146865,0,-1,
 146868,0,23320,
 146871,0,-1,
 146874,0,22392,
 146877,0,-1,
 146879,0,22856,
 146882,0,-1,
 146885,0,21928,
 146888,0,-1,
 146891,0,21928,
 146893,0,-1,
 146897,0,33576,
 146900,0,-1,
 146902,0,33576,
 146905,0,-1,
 146908,0,33576,
 146910,0,-1,
 146913,0,34312,
 146916,0,-1,
 146918,0,34312,
 146921,0,-1,
 146923,0,34312,
 146926,0,-1,
 146929,0,33576,
 146931,0,-1,
 146934,0,33576,
 146936,0,-1,
 146939,0,33576,
 146941,0,-1,
 146944,0,34312,
 146947,0,-1,
 146949,0,34312,
 146952,0,-1,
 146954,0,34312,
 146957,0,-1,
 146960,0,43008,
 146969,0,-1,
 146972,0,43464,
 146978,0,-1,
 146981,0,43920,
 146984,0,-1,
 146987,0,44376,
 146993,0,-1,
 146995,0,44832,
 146999,0,-1,
 147001,0,45424,
 147006,0,-1,
 147009,0,45880,
 147012,0,-1,
 147014,0,46472,
 147019,0,-1,
 147022,0,39024,
 147025,0,-1,
 147028,0,39488,
 147031,0,-1,
 147033,0,39952,
 147037,0,-1,
 147040,0,40416,
 147043,0,-1,
 147045,0,40880,
 147048,0,-1,
 147051,0,41488,
 147057,0,-1,
 147060,0,41952,
 147062,0,-1,
 147065,0,42552,
 147071,0,-1,
 147074,0,27728,
 147077,1024,-1,
 147080,1024,27728,
 147083,1104,-1,
 147085,1104,27728,
 147088,1264,-1,
 147090,1264,27728,
 147095,2096,-1,
 147098,2096,28480,
 147101,2096,-1,
 147104,2096,29224,
 147107,2096,-1,
 147110,2096,27728,
 147112,1072,-1,
 147115,1072,27728,
 147118,992,-1,
 147120,992,27728,
 147123,832,-1,
 147126,832,27728,
 147128,0,-1,
 147131,0,25072,
 147146,0,-1,
 147149,0,25072,
 147159,0,-1,
 147161,0,29960,
 147165,0,-1,
 147167,0,28480,
 147170,0,-1,
 147173,0,25072,
 147183,0,-1,
 147185,0,25072,
 147195,0,-1,
 147198,0,27120,
  147203,0,240336,
  147206,0,-1,
  147209,0,21168,
  147211,0,-1,
 147214,0,-1,
 147217,0,27120,
 147232,0,-1,
 147235,0,27120,
  147239,0,240344,
   147241,0,240344,
    147244,0,240344,
     147247,0,240344,
      147250,0,240344,
       147252,0,240344,
        147255,0,240344,
         147258,0,240344,
          147261,0,240344,
           147263,0,240344,
            147266,0,240344,
             147269,0,240344,
              147271,0,240344,
               147274,0,240344,
                147277,0,240344,
                 147280,0,240344,
                  147282,0,240344,
                   147285,0,240344,
                    147288,0,240344,
                     147290,0,240344,
                      147293,0,240344,
                       147296,0,240344,
                        147299,0,240344,
                         147301,0,240344,
                          147304,0,240344,
                           147307,0,240344,
                            147310,0,240344,
                             147312,0,240344,
                              147315,0,240344,
                               147318,0,240344,
                                147321,0,240344,
                                 147323,0,240344,
                                  147326,0,240344,
                                   147329,0,240344,
                                    147332,0,240344,
                                     147334,0,240344,
                                      147337,0,240344,
                                       147340,0,240344,
                                        147342,0,240344,
                                         147345,0,240344,
                                          147348,0,240344,
                                           147351,0,240344,
                                            147354,0,240344,
                                             147356,0,240344,
                                              147359,0,240344,
                                               147362,0,240344,
                                                147365,0,240344,
                                                 147367,0,240344,
                                                  147370,0,240344,
                                                   147373,0,240344,
                                                    147376,0,240344,
                                                     147378,0,240344,
                                                      147381,0,240344,
                                                       147384,0,240344,
                                                        147387,0,240344,
                                                         147390,0,240344,
                                                          147392,0,240344,
                                                           147395,0,240344,
                                                            147398,0,240344,
                                                             147401,0,240344,
                                                              147403,0,240344,
                                                               147406,0,240344,
                                                                147409,0,240344,
                                                                 147412,0,240344,
                                                                  147415,0,240344,
                                                                   147417,0,240344,
                                                                    147423,0,240344,
                                                                     147426,0,240344,
                                                                      147429,0,240344,
                                                                       147432,0,240344,
                                                                        147434,0,240344,
                                                                         147437,0,240344,
                                                                          147440,0,240344,
                                                                           147443,0,240344,
                                                                            147446,0,240344,
                                                                             147449,0,240344,
                                                                              147451,0,240344,
                                                                               147454,0,240344,
                                                                                147457,0,240344,
                                                                                 147460,0,240344,
                                                                                  147463,0,240344,
                                                                                   147465,0,240344,
                                                                                    147468,0,240344,
                                                                                     147471,0,240344,
                                                                                      147474,0,240344,
                                                                                       147477,0,240344,
                                                                                        147480,0,240344,
                                                                                         147482,0,240344,
                                                                                          147485,0,240344,
                                                                                           147488,0,240344,
                                                                                            147491,0,240344,
                                                                                             147494,0,240344,
                                                                                              147497,0,240344,
                                                                                               147500,0,240344,
                                                                                                147503,0,240344,
                                                                                                 147505,0,240344,
                                                                                                  147508,0,240344,
                                                                                                   147511,0,240344,
                                                                                                    147514,0,240344,
                                                                                                     147517,0,240344,
                                                                                                      147520,0,240344,
                                                                                                       147523,0,240344,
                                                                                                        147526,0,240344,
                                                                                                         147529,0,240344,
                                                                                                          147532,0,240344,
                                                                                                           147536,0,240344,
                                                                                                            147539,0,240344,
                                                                                                             147542,0,240344,
                                                                                                              147545,0,240344,
                                                                                                               147548,0,240344,
                                                                                                                147551,0,240344,
                                                                                                                 147554,0,240344,
                                                                                                                  147557,0,240344,
                                                                                                                   147560,0,240344,
                                                                                                                    147563,0,240344,
                                                                                                                     147565,0,240344,
                                                                                                                      147568,0,240344,
                                                                                                                       147571,0,240344,
                                                                                                                        147574,0,240344,
                                                                                                                         147577,0,240344,
                                                                                                                          147580,0,240344,
                                                                                                                           147583,0,240344,
                                                                                                                            147586,0,240344,
                                                                                                                             147589,0,240344,
                                                                                                                              147592,0,240344,
                                                                                                                               147595,0,240344,
                                                                                                                                147598,0,240344,
                                                                                                                                 147601,0,240344,
                                                                                                                                  147604,0,240344,
                                                                                                                                   147607,0,240344,
                                                                                                                                    147610,0,240344,
                                                                                                                                     147617,0,240344,
                                                                                                                                      147622,0,240344,
                                                                                                                                       147625,0,240344,
                                                                                                                                        147628,0,240344,
                                                                                                                                         147633,0,240344,
                                                                                                                                          147636,0,240344,
                                                                                                                                           147639,0,240344,
                                                                                                                                            147642,0,240344,
                                                                                                                                             147645,0,240344,
                                                                                                                                              147648,0,240344,
                                                                                                                                               147651,0,240344,
                                                                                                                                                147654,0,240344,
                                                                                                                                                 147657,0,240344,
                                                                                                                                                  147660,0,240344,
                                                                                                                                                   147663,0,240344,
                                                                                                                                                    147666,0,240344,
                                                                                                                                                     147669,0,240344,
                                                                                                                                                      147672,0,240344,
                                                                                                                                                       147675,0,240344,
                                                                                                                                                        147678,0,240344,
                                                                                                                                                         147681,0,240344,
                                                                                                                                                          147684,0,240344,
                                                                                                                                                           147687,0,240344,
                                                                                                                                                            147690,0,240344,
                                                                                                                                                             147693,0,240344,
                                                                                                                                                              147696,0,240344,
                                                                                                                                                               147699,0,240344,
                                                                                                                                                                147702,0,240344,
                                                                                                                                                                 147705,0,240344,
                                                                                                                                                                  147710,0,240344,
                                                                                                                                                                   147713,0,240344,
                                                                                                                                                                    147716,0,240344,
                                                                                                                                                                     147719,0,240344,
                                                                                                                                                                      147722,0,240344,
                                                                                                                                                                       147725,0,240344,
                                                                                                                                                                        147728,0,240344,
                                                                                                                                                                         147731,0,240344,
                                                                                                                                                                          147734,0,240344,
                                                                                                                                                                           147737,0,240344,
                                                                                                                                                                            147740,0,240344,
                                                                                                                                                                             147743,0,240344,
                                                                                                                                                                              147746,0,240344,
                                                                                                                                                                               147749,0,240344,
                                                                                                                                                                                147752,0,240344,
                                                                                                                                                                                 147755,0,240344,
                                                                                                                                                                                  147758,0,240344,
                                                                                                                                                                                   147761,0,240344,
                                                                                                                                                                                    147764,0,240344,
                                                                                                                                                                                     147768,0,240344,
                                                                                                                                                                                      147771,0,240344,
                                                                                                                                                                                       147775,0,240344,
                                                                                                                                                                                        147779,0,240344,
                                                                                                                                                                                         147782,0,240344,
                                                                                                                                                                                          147785,0,240344,
                                                                                                                                                                                           147788,0,240344,
                                                                                                                                                                                            147791,0,240344,
                                                                                                                                                                                             147794,0,240344,
                                                                                                                                                                                              147797,0,240344,
                                                                                                                                                                                               147800,0,240344,
                                                                                                                                                                                                147803,0,240344,
                                                                                                                                                                                                 147806,0,240344,
                                                                                                                                                                                                  147809,0,240344,
                                                                                                                                                                                                   147813,0,240344,
                                                                                                                                                                                                    147816,0,240344,
                                                                                                                                                                                                     147819,0,240344,
                                                                                                                                                                                                      147822,0,240344,
                                                                                                                                                                                                       147825,0,240344,
                                                                                                                                                                                                        147828,0,240344,
                                                                                                                                                                                                         147831,0,240344,
                                                                                                                                                                                                          147834,0,240344,
                                                                                                                                                                                                           147839,0,240344,
                                                                                                                                                                                                            147842,0,240344,
                                                                                                                                                                                                             147845,0,240344,
                                                                                                                                                                                                              147848,0,240344,
                                                                                                                                                                                                               147852,0,240344,
                                                                                                                                                                                                                147855,0,240344,
                                                                                                                                                                                                                 147858,0,240344,
                                                                                                                                                                                                                  147861,0,240344,
                                                                                                                                                                                                                   147864,0,240344,
                                                                                                                                                                                                                    147867,0,240344,
                                                                                                                                                                                                                     147870,0,240344,
                                                                                                                                                                                                                      147874,0,240344,
                                                                                                                                                                                                                       147877,0,240344,
                                                                                                                                                                                                                        147880,0,240344,
                                                                                                                                                                                                                         147883,0,240344,
                                                                                                                                                                                                                          147886,0,240344,
                                                                                                                                                                                                                           147889,0,240344,
                                                                                                                                                                                                                            147893,0,240344,
                                                                                                                                                                                                                             147898,0,240344,
                                                                                                                                                                                                                              147901,0,240344,
                                                                                                                                                                                                                               147904,0,240344,
                                                                                                                                                                                                                                147907,0,240344,
                                                                                                                                                                                                                                 147910,0,240344,
                                                                                                                                                                                                                                  147913,0,240344,
                                                                                                                                                                                                                                   147917,0,240344,
                                                                                                                                                                                                                                    147920,0,240344,
                                                                                                                                                                                                                                     147923,0,240344,
                                                                                                                                                                                                                                      147926,0,240344,
                                                                                                                                                                                                                                       147929,0,240344,
                                                                                                                                                                                                                                        147932,0,240344,
                                                                                                                                                                                                                                         147936,0,240344,
                                                                                                                                                                                                                                          147939,0,240344,
                                                                                                                                                                                                                                           147942,0,240344,
                                                                                                                                                                                                                                            147945,0,240344,
                                                                                                                                                                                                                                             147948,0,240344,
                                                                                                                                                                                                                                              147954,0,240344,
                                                                                                                                                                                                                                               147957,0,240344,
                                                                                                                                                                                                                                                147960,0,240344,
                                                                                                                                                                                                                                                 147963,0,240344,
                                                                                                                                                                                                                                                  147966,0,240344,
                                                                                                                                                                                                                                                   147970,0,240344,
                                                                                                                                                                                                                                                    147973,0,240344,
                                                                                                                                                                                                                                                     147976,0,240344,
                                                                                                                                                                                                                                                      147979,0,240344,
                                                                                                                                                                                                                                                       147982,0,240344,
                                                                                                                                                                                                                                                        147986,0,240344,
                                                                                                                                                                                                                                                         147989,0,240344,
                                                                                                                                                                                                                                                          147992,0,240344,
                                                                                                                                                                                                                                                           147995,0,240344,
                                                                                                                                                                                                                                                            147999,0,240344,
                                                                                                                                                                                                                                                             148005,0,240344,
                                                                                                                                                                                                                                                              148008,0,240344,
                                                                                                                                                                                                                                                               148011,0,240344,
                                                                                                                                                                                                                                                                148014,0,240344,
                                                                                                                                                                                                                                                                 148018,0,240344,
                                                                                                                                                                                                                                                                  148021,0,240344,
                                                                                                                                                                                                                                                                   148024,0,240344,
                                                                                                                                                                                                                                                                    148027,0,240344,
                                                                                                                                                                                                                                                                     148030,0,240344,
                                                                                                                                                                                                                                                                      148034,0,240344,
                                                                                                                                                                                                                                                                       148037,0,240344,
                                                                                                                                                                                                                                                                        148040,0,240344,
                                                                                                                                                                                                                                                                         148043,0,240344,
                                                                                                                                                                                                                                                                          148047,0,240344,
                                                                                                                                                                                                                                                                           148050,0,240344,
                                                                                                                                                                                                                                                                            148055,0,240344,
                                                                                                                                                                                                                                                                             148058,0,240344,
                                                                                                                                                                                                                                                                              148062,0,240344,
                                                                                                                                                                                                                                                                               148065,0,240344,
                                                                                                                                                                                                                                                                                148068,0,240344,
                                                                                                                                                                                                                                                                                 148072,0,240344,
                                                                                                                                                                                                                                                                                  148075,0,240344,
                                                                                                                                                                                                                                                                                   148078,0,240344,
                                                                                                                                                                                                                                                                                    148081,0,240344,
                                                                                                                                                                                                                                                                                     148085,0,240344,
                                                                                                                                                                                                                                                                                      148088,0,240344,
                                                                                                                                                                                                                                                                                       148092,0,240344,
                                                                                                                                                                                                                                                                                        148095,0,240344,
                                                                                                                                                                                                                                                                                         148098,0,240344,
                                                                                                                                                                                                                                                                                          148103,0,240344,
                                                                                                                                                                                                                                                                                           148106,0,240344,
                                                                                                                                                                                                                                                                                            148110,0,240344,
                                                                                                                                                                                                                                                                                             148113,0,240344,
                                                                                                                                                                                                                                                                                              148116,0,240344,
                                                                                                                                                                                                                                                                                               148120,0,240344,
                                                                                                                                                                                                                                                                                                148123,0,240344,
                                                                                                                                                                                                                                                                                                 148126,0,240344,
                                                                                                                                                                                                                                                                                                  148129,0,240344,
                                                                                                                                                                                                                                                                                                   148133,0,240344,
                                                                                                                                                                                                                                                                                                    148136,0,240344,
                                                                                                                                                                                                                                                                                                     148140,0,240344,
                                                                                                                                                                                                                                                                                                      148143,0,240344,
                                                                                                                                                                                                                                                                                                       148146,0,240344,
                                                                                                                                                                                                                                                                                                        148151,0,240344,
                                                                                                                                                                                                                                                                                                         148155,0,240344,
                                                                                                                                                                                                                                                                                                          148158,0,240344,
                                                                                                                                                                                                                                                                                                           148161,0,240344,
                                                                                                                                                                                                                                                                                                            148165,0,240344,
                                                                                                                                                                                                                                                                                                             148168,0,240344,
                                                                                                                                                                                                                                                                                                              148171,0,240344,
                                                                                                                                                                                                                                                                                                               148175,0,240344,
                                                                                                                                                                                                                                                                                                                148178,0,240344,
                                                                                                                                                                                                                                                                                                                 148181,0,240344,
                                                                                                                                                                                                                                                                                                                  148185,0,240344,
                                                                                                                                                                                                                                                                                                                   148188,0,240344,
                                                                                                                                                                                                                                                                                                                    148193,0,240344,
                                                                                                                                                                                                                                                                                                                     148196,0,240344,
                                                                                                                                                                                                                                                                                                                      148200,0,240344,
                                                                                                                                                                                                                                                                                                                       148203,0,240344,
                                                                                                                                                                                                                                                                                                                        148207,0,240344,
                                                                                                                                                                                                                                                                                                                         148210,0,240344,
                                                                                                                                                                                                                                                                                                                          148213,0,240344,
                                                                                                                                                                                                                                                                                                                           148217,0,240344,
                                                                                                                                                                                                                                                                                                                            148220,0,240344,
                                                                                                                                                                                                                                                                                                                             148223,0,240344,
                                                                                                                                                                                                                                                                                                                              148227,0,240344,
                                                                                                                                                                                                                                                                                                                               148230,0,240344,
                                                                                                                                                                                                                                                                                                                                148233,0,240344,
                                                                                                                                                                                                                                                                                                                                 148238,0,240344,
                                                                                                                                                                                                                                                                                                                                  148242,0,240344,
                                                                                                                                                                                                                                                                                                                                   148245,0,240344,
                                                                                                                                                                                                                                                                                                                                    148249,0,240344,
                                                                                                                                                                                                                                                                                                                                     148252,0,240344,
                                                                                                                                                                                                                                                                                                                                      148255,0,240344,
                                                                                                                                                                                                                                                                                                                                       148259,0,240344,
                                                                                                                                                                                                                                                                                                                                        148262,0,240344,
                                                                                                                                                                                                                                                                                                                                         148266,0,240344,
                                                                                                                                                                                                                                                                                                                                          148269,0,240344,
                                                                                                                                                                                                                                                                                                                                           148272,0,240344,
                                                                                                                                                                                                                                                                                                                                            148276,0,240344,
                                                                                                                                                                                                                                                                                                                                             148281,0,240344,
                                                                                                                                                                                                                                                                                                                                              148284,0,240344,
                                                                                                                                                                                                                                                                                                                                               148288,0,240344,
                                                                                                                                                                                                                                                                                                                                                148291,0,240344,
                                                                                                                                                                                                                                                                                                                                                 148295,0,240344,
                                                                                                                                                                                                                                                                                                                                                  148298,0,240344,
                                                                                                                                                                                                                                                                                                                                                   148301,0,240344,
                                                                                                                                                                                                                                                                                                                                                    148305,0,240344,
                                                                                                                                                                                                                                                                                                                                                     148308,0,240344,
                                                                                                                                                                                                                                                                                                                                                      148312,0,240344,
                                                                                                                                                                                                                                                                                                                                                       148315,0,240344,
                                                                                                                                                                                                                                                                                                                                                        148320,0,240344,
                                                                                                                                                                                                                                                                                                                                                         148324,0,240344,
                                                                                                                                                                                                                                                                                                                                                          148327,0,240344,
                                                                                                                                                                                                                                                                                                                                                           148330,0,240344,
                                                                                                                                                                                                                                                                                                                                                            148334,0,240344,
                                                                                                                                                                                                                                                                                                                                                             148337,0,240344,
                                                                                                                                                                                                                                                                                                                                                              148341,0,240344,
                                                                                                                                                                                                                                                                                                                                                               148344,0,240344,
                                                                                                                                                                                                                                                                                                                                                                148348,0,240344,
                                                                                                                                                                                                                                                                                                                                                                 148351,0,240344,
                                                                                                                                                                                                                                                                                                                                                                  148354,0,240344,
                                                                                                                                                                                                                                                                                                                                                                   148358,0,240344,
                                                                                                                                                                                                                                                                                                                                                                    148363,0,240344,
                                                                                                                                                                                                                                                                                                                                                                     148367,0,240344,
                                                                                                                                                                                                                                                                                                                                                                      148370,0,240344,
                                                                                                                                                                                                                                                                                                                                                                       148374,0,240344,
                                                                                                                                                                                                                                                                                                                                                                        148377,0,240344,
                                                                                                                                                                                                                                                                                                                                                                         148381,0,240344,
                                                                                                                                                                                                                                                                                                                                                                          148384,0,240344,
                                                                                                                                                                                                                                                                                                                                                                           148388,0,240344,
                                                                                                                                                                                                                                                                                                                                                                            148391,0,240344,
                                                                                                                                                                                                                                                                                                                                                                             148395,0,240344,
                                                                                                                                                                                                                                                                                                                                                                              148400,0,240344,
                                                                                                                                                                                                                                                                                                                                                                               148404,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                148407,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                 148411,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                  148414,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                   148417,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                    148426,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                     148429,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                      148433,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                       148436,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                        148440,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                         148445,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                          148449,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                           148452,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                            148456,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                             148459,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                              148463,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                               148466,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                148470,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                 148473,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                  148477,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                   148482,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                    148486,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                     148489,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                      148493,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                       148496,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                        148500,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                         148503,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                          148507,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                           148510,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                            148514,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                             148519,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                              148523,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                               148526,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                148530,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                 148533,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                  148537,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                   148541,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                    148544,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                     148548,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                      148551,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                       148557,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                        148560,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                         148564,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                          148568,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                           148571,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                            148575,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                             148578,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                              148582,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                               148585,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                148589,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                 148595,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                  148599,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                   148602,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                    148606,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                     148610,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                      148613,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                       148617,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                        148620,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                         148624,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                          148629,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                           148633,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                            148637,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                             148640,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                              148644,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                               148647,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                148651,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 148655,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  148658,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   148664,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    148667,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                     148671,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      148674,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       148678,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        148682,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         148685,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          148689,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                           148693,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            148701,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             148705,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              148709,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               148712,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                148716,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 148720,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  148723,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   148727,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    148731,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     148736,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      148740,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       148744,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        148747,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         148751,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          148754,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           148758,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            148762,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             148765,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              148771,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               148775,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                148778,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 148782,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  148786,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   148790,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    148793,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     148797,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      148803,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       148806,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        148810,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         148814,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          148818,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           148821,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            148825,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             148829,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              148832,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               148838,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                148842,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 148845,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  148849,0,240344,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   148853,0,240344,








                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       148889,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      148893,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     148896,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    148902,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   148906,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  148909,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 148913,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                148917,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               148920,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              148924,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             148928,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            148933,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           148937,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          148941,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         148944,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        148948,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       148952,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      148961,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     148964,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    148968,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   148973,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  148977,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 148981,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                148984,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               148988,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              148992,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             148995,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            148999,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           149004,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          149008,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         149012,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        149015,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       149019,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      149022,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     149026,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    149030,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   149033,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  149039,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 149042,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                149046,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                               149050,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                              149053,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             149057,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            149060,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                           149064,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          149067,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         149074,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        149078,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                       149081,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                      149085,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                     149088,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    149092,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   149095,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  149099,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 149102,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                149108,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                               149112,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                              149115,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                             149119,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                            149122,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                           149126,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                          149129,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                         149133,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                        149136,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                       149142,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                      149146,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                     149150,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                    149153,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                   149157,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                  149160,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 149164,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                                149167,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                               149171,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                              149174,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                             149180,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                            149183,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                           149187,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                          149190,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                         149194,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                        149197,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                       149201,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                      149204,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                     149208,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                    149213,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                   149217,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                  149220,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                 149224,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                                149227,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                               149231,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                              149234,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                             149238,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                            149241,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                           149245,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                          149250,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                         149254,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                        149257,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                       149261,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                      149264,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                     149268,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                    149271,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                   149275,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                  149278,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                 149281,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                                149287,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                               149290,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                              149294,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                             149297,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                            149301,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                           149304,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                          149308,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                         149311,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                        149314,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                       149318,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                      149321,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                     149327,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                    149330,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                   149334,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                  149337,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                 149341,0,-1,
                                                                                                                                                                                                                                                                                                                                                                                149344,0,-1,
                                                                                                                                                                                                                                                                                                                                                                               149348,0,-1,
                                                                                                                                                                                                                                                                                                                                                                              149351,0,-1,
                                                                                                                                                                                                                                                                                                                                                                             149355,0,-1,
                                                                                                                                                                                                                                                                                                                                                                            149358,0,-1,
                                                                                                                                                                                                                                                                                                                                                                           149362,0,-1,
                                                                                                                                                                                                                                                                                                                                                                          149367,0,-1,
                                                                                                                                                                                                                                                                                                                                                                         149371,0,-1,
                                                                                                                                                                                                                                                                                                                                                                        149374,0,-1,
                                                                                                                                                                                                                                                                                                                                                                       149378,0,-1,
                                                                                                                                                                                                                                                                                                                                                                      149381,0,-1,
                                                                                                                                                                                                                                                                                                                                                                     149384,0,-1,
                                                                                                                                                                                                                                                                                                                                                                    149388,0,-1,
                                                                                                                                                                                                                                                                                                                                                                   149391,0,-1,
                                                                                                                                                                                                                                                                                                                                                                  149395,0,-1,
                                                                                                                                                                                                                                                                                                                                                                 149398,0,-1,
                                                                                                                                                                                                                                                                                                                                                                149401,0,-1,
                                                                                                                                                                                                                                                                                                                                                               149407,0,-1,
                                                                                                                                                                                                                                                                                                                                                              149410,0,-1,
                                                                                                                                                                                                                                                                                                                                                             149413,0,-1,
                                                                                                                                                                                                                                                                                                                                                            149417,0,-1,
                                                                                                                                                                                                                                                                                                                                                           149420,0,-1,
                                                                                                                                                                                                                                                                                                                                                          149424,0,-1,
                                                                                                                                                                                                                                                                                                                                                         149427,0,-1,
                                                                                                                                                                                                                                                                                                                                                        149430,0,-1,
                                                                                                                                                                                                                                                                                                                                                       149434,0,-1,
                                                                                                                                                                                                                                                                                                                                                      149437,0,-1,
                                                                                                                                                                                                                                                                                                                                                     149440,0,-1,
                                                                                                                                                                                                                                                                                                                                                    149446,0,-1,
                                                                                                                                                                                                                                                                                                                                                   149449,0,-1,
                                                                                                                                                                                                                                                                                                                                                  149453,0,-1,
                                                                                                                                                                                                                                                                                                                                                 149456,0,-1,
                                                                                                                                                                                                                                                                                                                                                149459,0,-1,
                                                                                                                                                                                                                                                                                                                                               149463,0,-1,
                                                                                                                                                                                                                                                                                                                                              149466,0,-1,
                                                                                                                                                                                                                                                                                                                                             149469,0,-1,
                                                                                                                                                                                                                                                                                                                                            149473,0,-1,
                                                                                                                                                                                                                                                                                                                                           149476,0,-1,
                                                                                                                                                                                                                                                                                                                                          149479,0,-1,
                                                                                                                                                                                                                                                                                                                                         149483,0,-1,
                                                                                                                                                                                                                                                                                                                                        149488,0,-1,
                                                                                                                                                                                                                                                                                                                                       149491,0,-1,
                                                                                                                                                                                                                                                                                                                                      149495,0,-1,
                                                                                                                                                                                                                                                                                                                                     149498,0,-1,
                                                                                                                                                                                                                                                                                                                                    149501,0,-1,
                                                                                                                                                                                                                                                                                                                                   149505,0,-1,
                                                                                                                                                                                                                                                                                                                                  149508,0,-1,
                                                                                                                                                                                                                                                                                                                                 149511,0,-1,
                                                                                                                                                                                                                                                                                                                                149515,0,-1,
                                                                                                                                                                                                                                                                                                                               149518,0,-1,
                                                                                                                                                                                                                                                                                                                              149521,0,-1,
                                                                                                                                                                                                                                                                                                                             149525,0,-1,
                                                                                                                                                                                                                                                                                                                            149530,0,-1,
                                                                                                                                                                                                                                                                                                                           149533,0,-1,
                                                                                                                                                                                                                                                                                                                          149536,0,-1,
                                                                                                                                                                                                                                                                                                                         149540,0,-1,
                                                                                                                                                                                                                                                                                                                        149543,0,-1,
                                                                                                                                                                                                                                                                                                                       149546,0,-1,
                                                                                                                                                                                                                                                                                                                      149550,0,-1,
                                                                                                                                                                                                                                                                                                                     149553,0,-1,
                                                                                                                                                                                                                                                                                                                    149556,0,-1,
                                                                                                                                                                                                                                                                                                                   149559,0,-1,
                                                                                                                                                                                                                                                                                                                  149563,0,-1,
                                                                                                                                                                                                                                                                                                                 149566,0,-1,
                                                                                                                                                                                                                                                                                                                149569,0,-1,
                                                                                                                                                                                                                                                                                                               149574,0,-1,
                                                                                                                                                                                                                                                                                                              149578,0,-1,
                                                                                                                                                                                                                                                                                                             149581,0,-1,
                                                                                                                                                                                                                                                                                                            149584,0,-1,
                                                                                                                                                                                                                                                                                                           149588,0,-1,
                                                                                                                                                                                                                                                                                                          149591,0,-1,
                                                                                                                                                                                                                                                                                                         149594,0,-1,
                                                                                                                                                                                                                                                                                                        149597,0,-1,
                                                                                                                                                                                                                                                                                                       149601,0,-1,
                                                                                                                                                                                                                                                                                                      149604,0,-1,
                                                                                                                                                                                                                                                                                                     149607,0,-1,
                                                                                                                                                                                                                                                                                                    149610,0,-1,
                                                                                                                                                                                                                                                                                                   149614,0,-1,
                                                                                                                                                                                                                                                                                                  149620,0,-1,
                                                                                                                                                                                                                                                                                                 149623,0,-1,
                                                                                                                                                                                                                                                                                                149626,0,-1,
                                                                                                                                                                                                                                                                                               149630,0,-1,
                                                                                                                                                                                                                                                                                              149633,0,-1,
                                                                                                                                                                                                                                                                                             149636,0,-1,
                                                                                                                                                                                                                                                                                            149639,0,-1,
                                                                                                                                                                                                                                                                                           149643,0,-1,
                                                                                                                                                                                                                                                                                          149646,0,-1,
                                                                                                                                                                                                                                                                                         149649,0,-1,
                                                                                                                                                                                                                                                                                        149652,0,-1,
                                                                                                                                                                                                                                                                                       149655,0,-1,
                                                                                                                                                                                                                                                                                      149659,0,-1,
                                                                                                                                                                                                                                                                                     149662,0,-1,
                                                                                                                                                                                                                                                                                    149667,0,-1,
                                                                                                                                                                                                                                                                                   149670,0,-1,
                                                                                                                                                                                                                                                                                  149674,0,-1,
                                                                                                                                                                                                                                                                                 149677,0,-1,
                                                                                                                                                                                                                                                                                149680,0,-1,
                                                                                                                                                                                                                                                                               149683,0,-1,
                                                                                                                                                                                                                                                                              149687,0,-1,
                                                                                                                                                                                                                                                                             149690,0,-1,
                                                                                                                                                                                                                                                                            149693,0,-1,
                                                                                                                                                                                                                                                                           149696,0,-1,
                                                                                                                                                                                                                                                                          149699,0,-1,
                                                                                                                                                                                                                                                                         149703,0,-1,
                                                                                                                                                                                                                                                                        149706,0,-1,
                                                                                                                                                                                                                                                                       149709,0,-1,
                                                                                                                                                                                                                                                                      149714,0,-1,
                                                                                                                                                                                                                                                                     149717,0,-1,
                                                                                                                                                                                                                                                                    149721,0,-1,
                                                                                                                                                                                                                                                                   149724,0,-1,
                                                                                                                                                                                                                                                                  149727,0,-1,
                                                                                                                                                                                                                                                                 149730,0,-1,
                                                                                                                                                                                                                                                                149733,0,-1,
                                                                                                                                                                                                                                                               149736,0,-1,
                                                                                                                                                                                                                                                              149740,0,-1,
                                                                                                                                                                                                                                                             149743,0,-1,
                                                                                                                                                                                                                                                            149746,0,-1,
                                                                                                                                                                                                                                                           149749,0,-1,
                                                                                                                                                                                                                                                          149752,0,-1,
                                                                                                                                                                                                                                                         149755,0,-1,
                                                                                                                                                                                                                                                        149759,0,-1,
                                                                                                                                                                                                                                                       149764,0,-1,
                                                                                                                                                                                                                                                      149767,0,-1,
                                                                                                                                                                                                                                                     149770,0,-1,
                                                                                                                                                                                                                                                    149773,0,-1,
                                                                                                                                                                                                                                                   149777,0,-1,
                                                                                                                                                                                                                                                  149780,0,-1,
                                                                                                                                                                                                                                                 149783,0,-1,
                                                                                                                                                                                                                                                149786,0,-1,
                                                                                                                                                                                                                                               149789,0,-1,
                                                                                                                                                                                                                                              149792,0,-1,
                                                                                                                                                                                                                                             149795,0,-1,
                                                                                                                                                                                                                                            149799,0,-1,
                                                                                                                                                                                                                                           149802,0,-1,
                                                                                                                                                                                                                                          149805,0,-1,
                                                                                                                                                                                                                                         149808,0,-1,
                                                                                                                                                                                                                                        149811,0,-1,
                                                                                                                                                                                                                                       149814,0,-1,
                                                                                                                                                                                                                                      149820,0,-1,
                                                                                                                                                                                                                                     149823,0,-1,
                                                                                                                                                                                                                                    149826,0,-1,
                                                                                                                                                                                                                                   149829,0,-1,
                                                                                                                                                                                                                                  149832,0,-1,
                                                                                                                                                                                                                                 149835,0,-1,
                                                                                                                                                                                                                                149838,0,-1,
                                                                                                                                                                                                                               149842,0,-1,
                                                                                                                                                                                                                              149845,0,-1,
                                                                                                                                                                                                                             149848,0,-1,
                                                                                                                                                                                                                            149851,0,-1,
                                                                                                                                                                                                                           149854,0,-1,
                                                                                                                                                                                                                          149857,0,-1,
                                                                                                                                                                                                                         149860,0,-1,
                                                                                                                                                                                                                        149863,0,-1,
                                                                                                                                                                                                                       149866,0,-1,
                                                                                                                                                                                                                      149869,0,-1,
                                                                                                                                                                                                                     149875,0,-1,
                                                                                                                                                                                                                    149878,0,-1,
                                                                                                                                                                                                                   149881,0,-1,
                                                                                                                                                                                                                  149884,0,-1,
                                                                                                                                                                                                                 149887,0,-1,
                                                                                                                                                                                                                149890,0,-1,
                                                                                                                                                                                                               149893,0,-1,
                                                                                                                                                                                                              149896,0,-1,
                                                                                                                                                                                                             149899,0,-1,
                                                                                                                                                                                                            149902,0,-1,
                                                                                                                                                                                                           149905,0,-1,
                                                                                                                                                                                                          149909,0,-1,
                                                                                                                                                                                                         149912,0,-1,
                                                                                                                                                                                                        149915,0,-1,
                                                                                                                                                                                                       149918,0,-1,
                                                                                                                                                                                                      149921,0,-1,
                                                                                                                                                                                                     149924,0,-1,
                                                                                                                                                                                                    149927,0,-1,
                                                                                                                                                                                                   149930,0,-1,
                                                                                                                                                                                                  149938,0,-1,
                                                                                                                                                                                                 149941,0,-1,
                                                                                                                                                                                                149944,0,-1,
                                                                                                                                                                                               149947,0,-1,
                                                                                                                                                                                              149950,0,-1,
                                                                                                                                                                                             149953,0,-1,
                                                                                                                                                                                            149956,0,-1,
                                                                                                                                                                                           149959,0,-1,
                                                                                                                                                                                          149963,0,-1,
                                                                                                                                                                                         149966,0,-1,
                                                                                                                                                                                        149969,0,-1,
                                                                                                                                                                                       149972,0,-1,
                                                                                                                                                                                      149975,0,-1,
                                                                                                                                                                                     149978,0,-1,
                                                                                                                                                                                    149981,0,-1,
                                                                                                                                                                                   149984,0,-1,
                                                                                                                                                                                  149987,0,-1,
                                                                                                                                                                                 149990,0,-1,
                                                                                                                                                                                149993,0,-1,
                                                                                                                                                                               149996,0,-1,
                                                                                                                                                                              149999,0,-1,
                                                                                                                                                                             150004,0,-1,
                                                                                                                                                                            150007,0,-1,
                                                                                                                                                                           150010,0,-1,
                                                                                                                                                                          150013,0,-1,
                                                                                                                                                                         150016,0,-1,
                                                                                                                                                                        150019,0,-1,
                                                                                                                                                                       150022,0,-1,
                                                                                                                                                                      150025,0,-1,
                                                                                                                                                                     150028,0,-1,
                                                                                                                                                                    150031,0,-1,
                                                                                                                                                                   150034,0,-1,
                                                                                                                                                                  150037,0,-1,
                                                                                                                                                                 150040,0,-1,
                                                                                                                                                                150043,0,-1,
                                                                                                                                                               150046,0,-1,
                                                                                                                                                              150049,0,-1,
                                                                                                                                                             150052,0,-1,
                                                                                                                                                            150055,0,-1,
                                                                                                                                                           150058,0,-1,
                                                                                                                                                          150061,0,-1,
                                                                                                                                                         150064,0,-1,
                                                                                                                                                        150067,0,-1,
                                                                                                                                                       150070,0,-1,
                                                                                                                                                      150075,0,-1,
                                                                                                                                                     150078,0,-1,
                                                                                                                                                    150081,0,-1,
                                                                                                                                                   150083,0,-1,
                                                                                                                                                  150086,0,-1,
                                                                                                                                                 150089,0,-1,
                                                                                                                                                150092,0,-1,
                                                                                                                                               150095,0,-1,
                                                                                                                                              150098,0,-1,
                                                                                                                                             150101,0,-1,
                                                                                                                                            150104,0,-1,
                                                                                                                                           150107,0,-1,
                                                                                                                                          150110,0,-1,
                                                                                                                                         150113,0,-1,
                                                                                                                                        150116,0,-1,
                                                                                                                                       150119,0,-1,
                                                                                                                                      150122,0,-1,
                                                                                                                                     150125,0,-1,
                                                                                                                                    150128,0,-1,
                                                                                                                                   150130,0,-1,
                                                                                                                                  150133,0,-1,
                                                                                                                                 150136,0,-1,
                                                                                                                                150139,0,-1,
                                                                                                                               150142,0,-1,
                                                                                                                              150145,0,-1,
                                                                                                                             150148,0,-1,
                                                                                                                            150151,0,-1,
                                                                                                                           150156,0,-1,
                                                                                                                          150159,0,-1,
                                                                                                                         150161,0,-1,
                                                                                                                        150164,0,-1,
                                                                                                                       150167,0,-1,
                                                                                                                      150170,0,-1,
                                                                                                                     150173,0,-1,
                                                                                                                    150176,0,-1,
                                                                                                                   150179,0,-1,
                                                                                                                  150182,0,-1,
                                                                                                                 150185,0,-1,
                                                                                                                150188,0,-1,
                                                                                                               150190,0,-1,
                                                                                                              150193,0,-1,
                                                                                                             150196,0,-1,
                                                                                                            150199,0,-1,
                                                                                                           150202,0,-1,
                                                                                                          150205,0,-1,
                                                                                                         150208,0,-1,
                                                                                                        150211,0,-1,
                                                                                                       150213,0,-1,
                                                                                                      150216,0,-1,
                                                                                                     150219,0,-1,
                                                                                                    150222,0,-1,
                                                                                                   150225,0,-1,
                                                                                                  150228,0,-1,
                                                                                                 150231,0,-1,
                                                                                                150233,0,-1,
                                                                                               150236,0,-1,
                                                                                              150239,0,-1,
                                                                                             150242,0,-1,
                                                                                            150245,0,-1,
                                                                                           150248,0,-1,
                                                                                          150251,0,-1,
                                                                                         150255,0,-1,
                                                                                        150258,0,-1,
                                                                                       150261,0,-1,
                                                                                      150264,0,-1,
                                                                                     150267,0,-1,
                                                                                    150269,0,-1,
                                                                                   150272,0,-1,
                                                                                  150275,0,-1,
                                                                                 150278,0,-1,
                                                                                150281,0,-1,
                                                                               150283,0,-1,
                                                                              150286,0,-1,
                                                                             150289,0,-1,
                                                                            150292,0,-1,
                                                                           150295,0,-1,
                                                                          150297,0,-1,
                                                                         150300,0,-1,
                                                                        150303,0,-1,
                                                                       150306,0,-1,
                                                                      150309,0,-1,
                                                                     150311,0,-1,
                                                                    150314,0,-1,
                                                                   150317,0,-1,
                                                                  150320,0,-1,
                                                                 150322,0,-1,
                                                                150325,0,-1,
                                                               150328,0,-1,
                                                              150331,0,-1,
                                                             150334,0,-1,
                                                            150336,0,-1,
                                                           150339,0,-1,
                                                          150342,0,-1,
                                                         150345,0,-1,
                                                        150348,0,-1,
                                                       150351,0,-1,
                                                      150353,0,-1,
                                                     150356,0,-1,
                                                    150359,0,-1,
                                                   150362,0,-1,
                                                  150364,0,-1,
                                                 150367,0,-1,
                                                150370,0,-1,
                                               150373,0,-1,
                                              150375,0,-1,
                                             150378,0,-1,
                                            150381,0,-1,
                                           150384,0,-1,
                                          150386,0,-1,
                                         150389,0,-1,
                                        150392,0,-1,
                                       150394,0,-1,
                                      150397,0,-1,
                                     150400,0,-1,
                                    150403,0,-1,
                                   150407,0,-1,
                                  150410,0,-1,
                                 150413,0,-1,
                                150415,0,-1,
                               150418,0,-1,
                              150421,0,-1,
                             150424,0,-1,
                            150426,0,-1,
                           150429,0,-1,
                          150432,0,-1,
                         150434,0,-1,
                        150437,0,-1,
                       150440,0,-1,
                      150442,0,-1,
                     150445,0,-1,
                    150448,0,-1,
                   150450,0,-1,
                  150453,0,-1,
                 150456,0,-1,
                150459,0,-1,
               150461,0,-1,
              150464,0,-1,
             150467,0,-1,
            150469,0,-1,
           150472,0,-1,
          150475,0,-1,
         150477,0,-1,
        150480,0,-1,
       150483,0,-1,
      150485,0,-1,
     150488,0,-1,
    150491,0,-1,
   150493,0,-1,
  150496,0,-1,
 150499,0,-1,
 150501,0,27120,
  150506,0,240368,
  150509,0,-1,
 150512,0,-1,
 150515,0,27120,
  150518,0,240464,
  150521,0,-1,
 150524,0,-1,
 150526,0,27120,
  150530,0,240448,
  150533,0,-1,
 150535,0,-1,
 150538,0,27120,
  150541,0,240384,
   150544,0,25072,
   150579,0,-1,
  150582,0,-1,
 150585,0,-1,
 150588,0,29224,
 150591,0,-1,
 150594,0,25072,
 150622,0,-1,
 150625,0,25072,
 150652,0,-1,
 150655,0,25072,
 150669,0,-1,
 150671,0,25072,
 150685,0,-1,
 150688,0,25072,
 150701,0,-1,
 150704,0,25072,
 150716,0,-1,
 150719,0,236488,
 150722,0,-1,
 150725,0,236488,
 150728,0,-1,
 150730,0,236488,
 150733,0,-1,
 150736,0,240472,
 150738,0,-1,
 150741,0,236488,
 150744,0,-1,
 150746,0,240472,
 150749,0,-1,
 150752,0,236488,
 150754,0,-1,
 150757,0,240472,
 150760,0,-1,
 150762,0,236488,
 150765,0,-1,
 150767,0,240472,
 150770,0,-1,
 150773,0,236488,
 150775,0,-1,
 150778,0,240472,
 150781,0,-1,
 150783,0,236488,
 150786,0,-1,
 150789,0,240480,
 150792,0,-1,
 150795,0,240480,
 150797,0,-1,
 150800,0,240480,
 150803,0,-1,
 150805,0,240496,
 150808,0,-1,
 150811,0,240496,
 150813,0,-1,
 150816,0,240496,
 150819,0,-1,
 150822,0,240512,
 150824,0,-1,
 150827,0,240512,
 150830,0,-1,
 150833,0,240480,
 150835,0,-1,
 150838,0,240480,
 150841,0,-1,
 150843,0,240480,
 150846,0,-1,
 150849,0,240496,
 150852,0,-1,
 150854,0,240496,
 150857,0,-1,
 150860,0,240496,
 150862,0,-1,
 150865,0,240512,
 150868,0,-1,
 150870,0,240512,
 150873,0,-1,
 150876,0,240480,
 150879,0,-1,
 150882,0,240480,
 150884,0,-1,
 150887,0,240480,
 150890,0,-1,
 150892,0,240496,
 150895,0,-1,
 150898,0,240496,
 150900,0,-1,
 150903,0,240496,
 150906,0,-1,
 150908,0,240512,
 150911,0,-1,
 150914,0,240512,
 150916,0,-1,
 150919,0,240480,
 150922,0,-1,
 150925,0,240480,
 150928,0,-1,
 150930,0,240480,
 150933,0,-1,
 150936,0,240496,
 150938,0,-1,
 150941,0,240496,
 150944,0,-1,
 150946,0,240496,
 150949,0,-1,
 150952,0,240512,
 150954,0,-1,
 150957,0,240512,
 150960,0,-1,
 150963,0,240480,
 150966,0,-1,
 150968,0,240480,
 150971,0,-1,
 150974,0,240480,
 150976,0,-1,
 150979,0,240496,
 150982,0,-1,
 150984,0,240496,
 150987,0,-1,
 150990,0,240496,
 150992,0,-1,
 150995,0,240512,
 150998,0,-1,
 151000,0,240512,
 151003,0,-1,
 151006,0,240480,
 151009,0,-1,
 151011,0,240480,
 151014,0,-1,
 151017,0,240480,
 151020,0,-1,
 151022,0,240496,
 151025,0,-1,
 151028,0,240496,
 151030,0,-1,
 151033,0,240496,
 151036,0,-1,
 151038,0,240512,
 151041,0,-1,
 151044,0,240512,
 151046,0,-1,
 151049,0,240480,
 151052,0,-1,
 151055,0,240480,
 151057,0,-1,
 151060,0,240480,
 151063,0,-1,
 151066,0,240496,
 151068,0,-1,
 151071,0,240496,
 151074,0,-1,
 151076,0,240496,
 151079,0,-1,
 151082,0,240512,
 151084,0,-1,
 151087,0,240512,
 151090,0,-1,
 151093,0,240608,
  151096,0,25072,
  151154,0,-1,
 151157,0,-1,
 151160,0,240696,
  151163,0,25072,
  151212,0,-1,
 151215,0,-1,
 151218,0,240648,
  151221,0,25072,
  151271,0,-1,
 151274,0,-1,
 151277,0,240736,
  151279,0,25072,
  151329,0,-1,
 151332,0,-1,
 151335,0,240776,
  151338,0,25072,
  151391,0,-1,
 151394,0,-1,
 151397,0,240736,
  151399,0,25072,
  151448,0,-1,
 151451,0,-1,
 151454,0,240608,
  151457,0,25072,
  151506,0,-1,
 151509,0,-1,
 151512,0,240648,
  151515,0,25072,
  151564,0,-1,
 151567,0,-1,
 151570,0,240608,
  151573,0,25072,
  151627,0,-1,
 151632,0,-1,
 151646,0,25072,
 151658,0,-1,
 151661,0,25072,
 151673,0,-1,
 151676,0,25072,
 151687,0,-1,
 151690,0,25072,
 151705,0,-1,
 151708,0,25072,
 151722,0,-1,
 151725,0,25072,
 151739,0,-1,
 151742,0,25072,
 151756,0,-1,
 151759,0,25072,
 151767,0,-1,
 151770,0,25072,
 151780,0,-1,
 151782,0,25072,
 151792,0,-1,
 151795,0,25072,
 151805,0,-1,
 151807,0,25072,
 151818,0,-1,
 151820,0,25072,
 151830,0,-1,
 151833,0,25072,
 151843,0,-1,
 151845,0,25072,
 151855,0,-1,
 151858,0,25072,
 151867,0,-1,
 151870,0,25072,
 151880,0,-1,
 151883,0,25072,
 151892,0,-1,
 151895,0,25072,
 151905,0,-1,
 151907,0,25072,
 151917,0,-1,
 151920,0,21168,
 151923,0,-1,
151925,0,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21168
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21928
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 3
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22392
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22856
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 23320
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 2
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25072
		, "static": true
		, "const": true
		, "time": 865
		, "total": 865
		, "hits": 40
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27120
		, "static": true
		, "const": true
		, "time": 3372
		, "total": 3372
		, "hits": 7
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27728
		, "static": true
		, "const": true
		, "time": 25
		, "total": 25
		, "hits": 8
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28480
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29224
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29960
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33576
		, "static": true
		, "const": true
		, "time": 17
		, "total": 17
		, "hits": 6
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34312
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 6
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39024
		, "static": true
		, "const": true
		, "time": 17
		, "total": 17
		, "hits": 2
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39488
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39952
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40416
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40880
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41488
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41952
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42552
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43008
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43464
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43920
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44376
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44832
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45424
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45880
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46472
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "assertEq"
		, "type": "function"
		, "file": "stdlib.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "expected"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "expected"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "returned"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "returned"
			, "type": "int32"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "file": "stdlib.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 69
		, "offs": 236488
		, "static": true
		, "const": true
		, "time": 21
		, "total": 21
		, "hits": 8
		, "fails": 0
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 6
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 6
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 240264
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang.function.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 240272
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "test/lang.function.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "test/lang.function.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "test/lang.function.ci"
			, "line": 37
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 55
		, "offs": 240280
		, "static": true
		, "const": true
		, "time": 4098
		, "total": 4098
		, "hits": 753
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 240336
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 240344
		, "static": true
		, "const": true
		, "time": 3257
		, "total": 3257
		, "hits": 488
		, "fails": -488
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 19
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 19
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 19
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 240368
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": -1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 23
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 23
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 23
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 64
		, "offs": 240384
		, "static": true
		, "const": true
		, "time": 6
		, "total": 40
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 37
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 240448
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "test/stdc.execute.ci"
		, "line": 42
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc.execute.ci"
			, "line": 42
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc.execute.ci"
			, "line": 42
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 240464
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": -1
	}, {
		"": "lenSlice(values: int64[]): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "lenSlice"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 103
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 103
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang.array.ci"
			, "line": 103
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 5
		, "offs": 240472
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 5
		, "fails": 0
	}, {
		"": "nthFixed(idx: int32, values: int64[7]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthFixed"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 104
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[7]"
			, "file": "test/lang.array.ci"
			, "line": 104
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 240480
		, "static": true
		, "const": true
		, "time": 55
		, "total": 55
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthArray(idx: int32, values: int64[*]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthArray"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 105
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[*]"
			, "file": "test/lang.array.ci"
			, "line": 105
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 240496
		, "static": true
		, "const": true
		, "time": 54
		, "total": 54
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthSlice(idx: int32, values: int64[]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthSlice"
		, "type": "function"
		, "file": "test/lang.array.ci"
		, "line": 106
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang.array.ci"
			, "line": 106
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 240512
		, "static": true
		, "const": true
		, "time": 37
		, "total": 37
		, "hits": 14
		, "fails": 0
	}, {
		"": "RecordMethodTest.print(this: RecordMethodTest): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "print"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 40
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 40
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang.method.ci"
			, "line": 40
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 240608
		, "static": true
		, "const": true
		, "time": 18
		, "total": 181
		, "hits": 3
		, "fails": 0
	}, {
		"": "RecordMethodTest.printStatic(this: RecordMethodTest): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "printStatic"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 44
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 44
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang.method.ci"
			, "line": 44
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 240648
		, "static": true
		, "const": true
		, "time": 10
		, "total": 110
		, "hits": 2
		, "fails": 0
	}, {
		"": "customPrint(this: RecordMethodTest): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "customPrint"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 59
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 59
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang.method.ci"
			, "line": 59
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 240696
		, "static": true
		, "const": true
		, "time": 6
		, "total": 55
		, "hits": 1
		, "fails": 0
	}, {
		"": "print(this: RecordMethodTest): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "print"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 75
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 75
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang.method.ci"
			, "line": 75
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 240736
		, "static": true
		, "const": true
		, "time": 14
		, "total": 111
		, "hits": 2
		, "fails": 0
	}, {
		"": "printStatic(this: RecordMethodTest): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "printStatic"
		, "type": "function"
		, "file": "test/lang.method.ci"
		, "line": 79
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang.method.ci"
			, "line": 79
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang.method.ci"
			, "line": 79
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 240776
		, "static": true
		, "const": true
		, "time": 6
		, "total": 59
		, "hits": 1
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 7233
		, "offs": 240816
		, "static": true
		, "const": false
		, "time": 498
		, "total": 9239
		, "hits": 1
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 109
	, "statementCount": 965
}
}

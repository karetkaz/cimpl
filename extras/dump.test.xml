<main token="{}" type="void" kind="static const typename(void)">
	<stmt token="{}" type="void" kind="static const typename(void)" file="test.ci:4">
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="xrgb"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="color"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="type"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack0"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack1"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack2"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack4"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack8"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_packDef"/>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="zero(a: int32, b: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="first(a: int32, b: int32): int32">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="last(a: int32, b: int32): int32">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sum(a: int32, b: int32): int32">
			<init token="+" type="int32" kind="static const typename(i32)" value="a + b">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="any(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="(a) ? a : b">
				<test token="()" type="bool" kind="static const typename(bool)" value="(a)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="a &lt; b ? a : b">
				<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(a: int32, b: int32, c: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(min(a, b), c)">
				<push token="," type="void" kind="static const typename(void)" value="min(a, b), c">
					<left token="()" type="int32" kind="static const typename(i32)" value="min(a, b)">
						<push token="," type="void" kind="static const typename(void)" value="a, b">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
						</push>
						<call token=".variable" type="int32" kind="static const typename(i32)" value="min">
							<init token="?:" type="int32" kind="static const typename(i32)" value="a &lt; b ? a : b">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
								</test>
								<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
							</init>
						</call>
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="c"/>
				</push>
				<call token=".variable" type="int32" kind="static const typename(i32)" value="min">
					<init token="?:" type="int32" kind="static const typename(i32)" value="a &lt; b ? a : b">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
						</test>
						<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="ma">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="mb">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="6"/>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="mc">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="9"/>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2var">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(ma, mb)">
				<push token="," type="void" kind="static const typename(void)" value="ma, mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="6"/>
					</right>
				</push>
				<call token=".variable" type="int32" kind="static const typename(i32)" value="min">
					<init token="?:" type="int32" kind="static const typename(i32)" value="a &lt; b ? a : b">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
						</test>
						<left token=".variable" type="int32" kind="static const typename(i32)" value="a"/>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitldz32">
			<init token="()" type="function" kind="static const typename(ref)" value="emit(load.z32)">
				<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
					<left token=".variable" type="void" kind="static const typename(void)" value="load"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="z32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="load.z32"/>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitldz64">
			<init token="()" type="function" kind="static const typename(ref)" value="emit(load.z64)">
				<push token="." type="int64" kind="static const typename(i64)" value="load.z64">
					<left token=".variable" type="void" kind="static const typename(void)" value="load"/>
					<right token=".variable" type="int64" kind="static const typename(i64)" value="z64">
						<init token="emit" type="int64" kind="static const typename(i64)" value="load.z64"/>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitA">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitB">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="96"/>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitAddi32">
			<init token="()" type="function" kind="static const typename(ref)" value="emit(add.i32, int32(emitA), emitB)">
				<push token="," type="void" kind="static const typename(void)" value="add.i32, int32(emitA), emitB">
					<left token="," type="void" kind="static const typename(void)" value="add.i32, int32(emitA)">
						<left token="." type="int32" kind="static const typename(i32)" value="add.i32">
							<left token=".variable" type="void" kind="static const typename(void)" value="add"/>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="i32">
								<init token="emit" type="int32" kind="static const typename(i32)" value="add.i32"/>
							</right>
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="int32(emitA)">
							<push token=".variable" type="int32" kind="static const typename(i32)" value="emitA">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
							</push>
							<call token=".variable" type="int32" kind="static const typename(i32)" value="int32"/>
						</right>
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="emitB">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="96"/>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="a">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="b">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="shift">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
			<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
				<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
			<init token="!" type="bool" kind="static const typename(bool)" value="!false">
				<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
					<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolAnd">
			<init token="&amp;" type="bool" kind="static const typename(bool)" value="boolA &amp; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolIor">
			<init token="|" type="bool" kind="static const typename(bool)" value="boolA | boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolXor">
			<init token="^" type="bool" kind="static const typename(bool)" value="boolA ^ boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolNot">
			<init token="!" type="bool" kind="static const typename(bool)" value="!boolB">
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="boolA == boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="boolA != boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolClt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="boolA &lt; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="boolA &lt;= boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="boolA &gt; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="boolA &gt;= boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
					<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
						<init token=".literal" type="bool" kind="static const typename(bool)" value="1"/>
					</init>
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
					<init token="!" type="bool" kind="static const typename(bool)" value="!false">
						<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0"/>
						</right>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrA">
			<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrB">
			<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrPls">
			<init token="+" type="char" kind="static const typename(u32)" value="+chrB">
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrNeg">
			<init token="-" type="char" kind="static const typename(u32)" value="-chrB">
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrCmt">
			<init token="~" type="char" kind="static const typename(u32)" value="~chrB">
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrAdd">
			<init token="+" type="char" kind="static const typename(u32)" value="chrA + chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrSub">
			<init token="-" type="char" kind="static const typename(u32)" value="chrA - chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrMul">
			<init token="*" type="char" kind="static const typename(u32)" value="chrA * chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrDiv">
			<init token="/" type="char" kind="static const typename(u32)" value="chrA / chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrMod">
			<init token="%" type="char" kind="static const typename(u32)" value="chrA % chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrAnd">
			<init token="&amp;" type="char" kind="static const typename(u32)" value="chrA &amp; chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrIor">
			<init token="|" type="char" kind="static const typename(u32)" value="chrA | chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrXor">
			<init token="^" type="char" kind="static const typename(u32)" value="chrA ^ chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrShl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(chrA) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(chrA)">
					<push token=".variable" type="char" kind="static const typename(u32)" value="chrA">
						<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(u32)" value="chrShr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(chrA) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(chrA)">
					<push token=".variable" type="char" kind="static const typename(u32)" value="chrA">
						<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrNot">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(chrB)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(chrB)">
					<push token=".variable" type="char" kind="static const typename(u32)" value="chrB">
						<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="chrA == chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="chrA != chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrClt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="chrA &lt; chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="chrA &lt;= chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="chrA &gt; chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="chrA &gt;= chrB">
				<left token=".variable" type="char" kind="static const typename(u32)" value="chrA">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;a&apos;"/>
				</left>
				<right token=".variable" type="char" kind="static const typename(u32)" value="chrB">
					<init token=".literal" type="char" kind="static const typename(u32)" value="&apos;b&apos;"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Pls">
			<init token="+" type="int8" kind="static const typename(i32)" value="+i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Neg">
			<init token="-" type="int8" kind="static const typename(i32)" value="-i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Cmt">
			<init token="~" type="int8" kind="static const typename(i32)" value="~i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Add">
			<init token="+" type="int8" kind="static const typename(i32)" value="i8A + i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Sub">
			<init token="-" type="int8" kind="static const typename(i32)" value="i8A - i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Mul">
			<init token="*" type="int8" kind="static const typename(i32)" value="i8A * i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Div">
			<init token="/" type="int8" kind="static const typename(i32)" value="i8A / i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Mod">
			<init token="%" type="int8" kind="static const typename(i32)" value="i8A % i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8And">
			<init token="&amp;" type="int8" kind="static const typename(i32)" value="i8A &amp; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Ior">
			<init token="|" type="int8" kind="static const typename(i32)" value="i8A | i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Xor">
			<init token="^" type="int8" kind="static const typename(i32)" value="i8A ^ i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(i8A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i8A)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(i8A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i8A)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i8B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i8B)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i8A == i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i8A != i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i8A &lt; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i8A &lt;= i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i8A &gt; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i8A &gt;= i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Pls">
			<init token="+" type="uint8" kind="static const typename(u32)" value="+u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Neg">
			<init token="-" type="uint8" kind="static const typename(u32)" value="-u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Cmt">
			<init token="~" type="uint8" kind="static const typename(u32)" value="~u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Add">
			<init token="+" type="uint8" kind="static const typename(u32)" value="u8A + u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Sub">
			<init token="-" type="uint8" kind="static const typename(u32)" value="u8A - u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Mul">
			<init token="*" type="uint8" kind="static const typename(u32)" value="u8A * u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Div">
			<init token="/" type="uint8" kind="static const typename(u32)" value="u8A / u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Mod">
			<init token="%" type="uint8" kind="static const typename(u32)" value="u8A % u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8And">
			<init token="&amp;" type="uint8" kind="static const typename(u32)" value="u8A &amp; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Ior">
			<init token="|" type="uint8" kind="static const typename(u32)" value="u8A | u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Xor">
			<init token="^" type="uint8" kind="static const typename(u32)" value="u8A ^ u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(u8A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u8A)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(u8A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u8A)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u8B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u8B)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u8A == u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u8A != u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u8A &lt; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u8A &lt;= u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u8A &gt; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u8A &gt;= u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Pls">
			<init token="+" type="int16" kind="static const typename(i32)" value="+i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Neg">
			<init token="-" type="int16" kind="static const typename(i32)" value="-i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Cmt">
			<init token="~" type="int16" kind="static const typename(i32)" value="~i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Add">
			<init token="+" type="int16" kind="static const typename(i32)" value="i16A + i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Sub">
			<init token="-" type="int16" kind="static const typename(i32)" value="i16A - i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Mul">
			<init token="*" type="int16" kind="static const typename(i32)" value="i16A * i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Div">
			<init token="/" type="int16" kind="static const typename(i32)" value="i16A / i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Mod">
			<init token="%" type="int16" kind="static const typename(i32)" value="i16A % i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16And">
			<init token="&amp;" type="int16" kind="static const typename(i32)" value="i16A &amp; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Ior">
			<init token="|" type="int16" kind="static const typename(i32)" value="i16A | i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Xor">
			<init token="^" type="int16" kind="static const typename(i32)" value="i16A ^ i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(i16A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i16A)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(i16A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i16A)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i16B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i16B)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i16A == i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i16A != i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i16A &lt; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i16A &lt;= i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i16A &gt; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i16A &gt;= i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Pls">
			<init token="+" type="uint16" kind="static const typename(u32)" value="+u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Neg">
			<init token="-" type="uint16" kind="static const typename(u32)" value="-u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Cmt">
			<init token="~" type="uint16" kind="static const typename(u32)" value="~u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Add">
			<init token="+" type="uint16" kind="static const typename(u32)" value="u16A + u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Sub">
			<init token="-" type="uint16" kind="static const typename(u32)" value="u16A - u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Mul">
			<init token="*" type="uint16" kind="static const typename(u32)" value="u16A * u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Div">
			<init token="/" type="uint16" kind="static const typename(u32)" value="u16A / u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Mod">
			<init token="%" type="uint16" kind="static const typename(u32)" value="u16A % u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16And">
			<init token="&amp;" type="uint16" kind="static const typename(u32)" value="u16A &amp; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Ior">
			<init token="|" type="uint16" kind="static const typename(u32)" value="u16A | u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Xor">
			<init token="^" type="uint16" kind="static const typename(u32)" value="u16A ^ u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(u16A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u16A)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(u16A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u16A)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
						</init>
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u16B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u16B)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u16A == u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u16A != u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u16A &lt; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u16A &lt;= u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u16A &gt; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u16A &gt;= u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Pls">
			<init token="+" type="int32" kind="static const typename(i32)" value="+i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Neg">
			<init token="-" type="int32" kind="static const typename(i32)" value="-i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Cmt">
			<init token="~" type="int32" kind="static const typename(i32)" value="~i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Add">
			<init token="+" type="int32" kind="static const typename(i32)" value="i32A + i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Sub">
			<init token="-" type="int32" kind="static const typename(i32)" value="i32A - i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Mul">
			<init token="*" type="int32" kind="static const typename(i32)" value="i32A * i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Div">
			<init token="/" type="int32" kind="static const typename(i32)" value="i32A / i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Mod">
			<init token="%" type="int32" kind="static const typename(i32)" value="i32A % i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32And">
			<init token="&amp;" type="int32" kind="static const typename(i32)" value="i32A &amp; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ior">
			<init token="|" type="int32" kind="static const typename(i32)" value="i32A | i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Xor">
			<init token="^" type="int32" kind="static const typename(i32)" value="i32A ^ i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="i32A &lt;&lt; shift">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="i32A &gt;&gt; shift">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i32B)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i32A == i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i32A != i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i32A &lt; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i32A &lt;= i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i32A &gt; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i32A &gt;= i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Pls">
			<init token="+" type="uint32" kind="static const typename(u32)" value="+u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Neg">
			<init token="-" type="uint32" kind="static const typename(u32)" value="-u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Cmt">
			<init token="~" type="uint32" kind="static const typename(u32)" value="~u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Add">
			<init token="+" type="uint32" kind="static const typename(u32)" value="u32A + u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Sub">
			<init token="-" type="uint32" kind="static const typename(u32)" value="u32A - u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Mul">
			<init token="*" type="uint32" kind="static const typename(u32)" value="u32A * u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Div">
			<init token="/" type="uint32" kind="static const typename(u32)" value="u32A / u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Mod">
			<init token="%" type="uint32" kind="static const typename(u32)" value="u32A % u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32And">
			<init token="&amp;" type="uint32" kind="static const typename(u32)" value="u32A &amp; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Ior">
			<init token="|" type="uint32" kind="static const typename(u32)" value="u32A | u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Xor">
			<init token="^" type="uint32" kind="static const typename(u32)" value="u32A ^ u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Shl">
			<init token="&lt;&lt;" type="uint32" kind="static const typename(u32)" value="u32A &lt;&lt; shift">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Shr">
			<init token="&gt;&gt;" type="uint32" kind="static const typename(u32)" value="u32A &gt;&gt; shift">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u32B)">
					<push token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u32A == u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u32A != u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u32A &lt; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u32A &lt;= u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u32A &gt; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u32A &gt;= u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Pls">
			<init token="+" type="int64" kind="static const typename(i64)" value="+i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Neg">
			<init token="-" type="int64" kind="static const typename(i64)" value="-i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Cmt">
			<init token="~" type="int64" kind="static const typename(i64)" value="~i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Add">
			<init token="+" type="int64" kind="static const typename(i64)" value="i64A + i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Sub">
			<init token="-" type="int64" kind="static const typename(i64)" value="i64A - i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Mul">
			<init token="*" type="int64" kind="static const typename(i64)" value="i64A * i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Div">
			<init token="/" type="int64" kind="static const typename(i64)" value="i64A / i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Mod">
			<init token="%" type="int64" kind="static const typename(i64)" value="i64A % i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64And">
			<init token="&amp;" type="int64" kind="static const typename(i64)" value="i64A &amp; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Ior">
			<init token="|" type="int64" kind="static const typename(i64)" value="i64A | i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Xor">
			<init token="^" type="int64" kind="static const typename(i64)" value="i64A ^ i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Shl">
			<init token="&lt;&lt;" type="int64" kind="static const typename(i64)" value="i64A &lt;&lt; shift">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Shr">
			<init token="&gt;&gt;" type="int64" kind="static const typename(i64)" value="i64A &gt;&gt; shift">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i64B)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i64A == i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i64A != i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i64A &lt; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i64A &lt;= i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i64A &gt; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i64A &gt;= i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Pls">
			<init token="+" type="uint64" kind="static const typename(u64)" value="+u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Neg">
			<init token="-" type="uint64" kind="static const typename(u64)" value="-u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Cmt">
			<init token="~" type="uint64" kind="static const typename(u64)" value="~u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Add">
			<init token="+" type="uint64" kind="static const typename(u64)" value="u64A + u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Sub">
			<init token="-" type="uint64" kind="static const typename(u64)" value="u64A - u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Mul">
			<init token="*" type="uint64" kind="static const typename(u64)" value="u64A * u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Div">
			<init token="/" type="uint64" kind="static const typename(u64)" value="u64A / u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Mod">
			<init token="%" type="uint64" kind="static const typename(u64)" value="u64A % u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64And">
			<init token="&amp;" type="uint64" kind="static const typename(u64)" value="u64A &amp; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Ior">
			<init token="|" type="uint64" kind="static const typename(u64)" value="u64A | u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Xor">
			<init token="^" type="uint64" kind="static const typename(u64)" value="u64A ^ u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Shl">
			<init token="&lt;&lt;" type="uint64" kind="static const typename(u64)" value="u64A &lt;&lt; shift">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Shr">
			<init token="&gt;&gt;" type="uint64" kind="static const typename(u64)" value="u64A &gt;&gt; shift">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u64B)">
					<push token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u64A == u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u64A != u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u64A &lt; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u64A &lt;= u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u64A &gt; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u64A &gt;= u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Pls">
			<init token="+" type="float32" kind="static const typename(f32)" value="+f32B">
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Neg">
			<init token="-" type="float32" kind="static const typename(f32)" value="-f32B">
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Add">
			<init token="+" type="float32" kind="static const typename(f32)" value="f32A + f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Sub">
			<init token="-" type="float32" kind="static const typename(f32)" value="f32A - f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Mul">
			<init token="*" type="float32" kind="static const typename(f32)" value="f32A * f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Div">
			<init token="/" type="float32" kind="static const typename(f32)" value="f32A / f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Mod">
			<init token="%" type="float32" kind="static const typename(f32)" value="f32A % f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(f32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(f32B)">
					<push token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="f32A == f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="f32A != f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="f32A &lt; f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="f32A &lt;= f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="f32A &gt; f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="f32A &gt;= f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Pls">
			<init token="+" type="float64" kind="static const typename(f64)" value="+f64B">
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Neg">
			<init token="-" type="float64" kind="static const typename(f64)" value="-f64B">
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Add">
			<init token="+" type="float64" kind="static const typename(f64)" value="f64A + f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Sub">
			<init token="-" type="float64" kind="static const typename(f64)" value="f64A - f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Mul">
			<init token="*" type="float64" kind="static const typename(f64)" value="f64A * f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Div">
			<init token="/" type="float64" kind="static const typename(f64)" value="f64A / f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Mod">
			<init token="%" type="float64" kind="static const typename(f64)" value="f64A % f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(f64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(f64B)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
						</init>
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="f64A == f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="f64A != f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="f64A &lt; f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="f64A &lt;= f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="f64A &gt; f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="f64A &gt;= f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000"/>
					</init>
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(shift)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
				</push>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="ptrCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="ptrA == ptrB">
				<left token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
					<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
					</init>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(shift)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="shift">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
						</push>
						<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="ptrCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="ptrA != ptrB">
				<left token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
					<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
					</init>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(shift)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="shift">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
						</push>
						<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
					</init>
				</right>
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 == 0)">
			<test token="==" type="bool" kind="static const typename(bool)" value="0 == 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:3">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;0 == 0&quot;, null, 1);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;0 == 0&quot;, null, 1)">
						<push token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;, null, 1">
							<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;, null">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;">
									<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
									</left>
									<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;"/>
								</left>
								<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1"/>
						</push>
						<call token=".variable" type="void" kind="static const typename(void)" value="raise">
							<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
								<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
									<left token="," type="(null)" value="nfc(5), level, message, inspect">
										<left token="," type="(null)" value="nfc(5), level, message">
											<left token="," type="(null)" value="nfc(5), level">
												<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
								</push>
								<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
							</init>
						</call>
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 != 0)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="0 != 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:7">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;0 != 0&quot;, null, 2);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;0 != 0&quot;, null, 2)">
						<push token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;, null, 2">
							<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;, null">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;">
									<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
									</left>
									<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;"/>
								</left>
								<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
						</push>
						<call token=".variable" type="void" kind="static const typename(void)" value="raise">
							<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
								<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
									<left token="," type="(null)" value="nfc(5), level, message, inspect">
										<left token="," type="(null)" value="nfc(5), level, message">
											<left token="," type="(null)" value="nfc(5), level">
												<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
								</push>
								<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
							</init>
						</call>
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 == 0)">
			<test token="==" type="bool" kind="static const typename(bool)" value="0 == 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:11">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;0 == 0&quot;, null, 3);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;0 == 0&quot;, null, 3)">
						<push token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;, null, 3">
							<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;, null">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;">
									<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
									</left>
									<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;"/>
								</left>
								<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
						</push>
						<call token=".variable" type="void" kind="static const typename(void)" value="raise">
							<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
								<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
									<left token="," type="(null)" value="nfc(5), level, message, inspect">
										<left token="," type="(null)" value="nfc(5), level, message">
											<left token="," type="(null)" value="nfc(5), level">
												<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
								</push>
								<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
							</init>
						</call>
					</expr>
				</stmt>
			</then>
			<else token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:14">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;0 != 0&quot;, null, 4);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;0 != 0&quot;, null, 4)">
						<push token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;, null, 4">
							<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;, null">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;">
									<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
									</left>
									<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;"/>
								</left>
								<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="4"/>
						</push>
						<call token=".variable" type="void" kind="static const typename(void)" value="raise">
							<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
								<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
									<left token="," type="(null)" value="nfc(5), level, message, inspect">
										<left token="," type="(null)" value="nfc(5), level, message">
											<left token="," type="(null)" value="nfc(5), level">
												<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
								</push>
								<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
							</init>
						</call>
					</expr>
				</stmt>
			</else>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 != 0)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="0 != 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:18">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;0 != 0&quot;, null, 5);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;0 != 0&quot;, null, 5)">
						<push token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;, null, 5">
							<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;, null">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 != 0&quot;">
									<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
									</left>
									<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;"/>
								</left>
								<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
						</push>
						<call token=".variable" type="void" kind="static const typename(void)" value="raise">
							<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
								<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
									<left token="," type="(null)" value="nfc(5), level, message, inspect">
										<left token="," type="(null)" value="nfc(5), level, message">
											<left token="," type="(null)" value="nfc(5), level">
												<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
								</push>
								<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
							</init>
						</call>
					</expr>
				</stmt>
			</then>
			<else token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:21">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;0 == 0&quot;, null, 6);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;0 == 0&quot;, null, 6)">
						<push token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;, null, 6">
							<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;, null">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;0 == 0&quot;">
									<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
									</left>
									<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;"/>
								</left>
								<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="6"/>
						</push>
						<call token=".variable" type="void" kind="static const typename(void)" value="raise">
							<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
								<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
									<left token="," type="(null)" value="nfc(5), level, message, inspect">
										<left token="," type="(null)" value="nfc(5), level, message">
											<left token="," type="(null)" value="nfc(5), level">
												<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
								</push>
								<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
							</init>
						</call>
					</expr>
				</stmt>
			</else>
		</stmt>
		<stmt token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:25">
			<stmt token=".variable" type="int32" kind="static const typename(i32)" value="t">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:28">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;t == 0&quot;, variant(t), 7);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;t == 0&quot;, variant(t), 7)">
							<push token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;, variant(t), 7">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;, variant(t)">
									<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;">
										<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
											<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
										</left>
										<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;"/>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="variant(t)">
										<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
										</push>
										<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="7"/>
							</push>
							<call token=".variable" type="void" kind="static const typename(void)" value="raise">
								<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
									<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
										<left token="," type="(null)" value="nfc(5), level, message, inspect">
											<left token="," type="(null)" value="nfc(5), level, message">
												<left token="," type="(null)" value="nfc(5), level">
													<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
												</left>
												<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</call>
						</expr>
					</stmt>
				</then>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:32">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;t != 0&quot;, variant(t), 8);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;t != 0&quot;, variant(t), 8)">
							<push token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;, variant(t), 8">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;, variant(t)">
									<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;">
										<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
											<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
										</left>
										<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;"/>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="variant(t)">
										<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
										</push>
										<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
							</push>
							<call token=".variable" type="void" kind="static const typename(void)" value="raise">
								<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
									<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
										<left token="," type="(null)" value="nfc(5), level, message, inspect">
											<left token="," type="(null)" value="nfc(5), level, message">
												<left token="," type="(null)" value="nfc(5), level">
													<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
												</left>
												<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</call>
						</expr>
					</stmt>
				</then>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:36">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;t != 0&quot;, variant(t), 9);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;t != 0&quot;, variant(t), 9)">
							<push token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;, variant(t), 9">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;, variant(t)">
									<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;">
										<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
											<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
										</left>
										<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;"/>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="variant(t)">
										<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
										</push>
										<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="9"/>
							</push>
							<call token=".variable" type="void" kind="static const typename(void)" value="raise">
								<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
									<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
										<left token="," type="(null)" value="nfc(5), level, message, inspect">
											<left token="," type="(null)" value="nfc(5), level, message">
												<left token="," type="(null)" value="nfc(5), level">
													<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
												</left>
												<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</call>
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:39">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;t == 0&quot;, variant(t), 10);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;t == 0&quot;, variant(t), 10)">
							<push token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;, variant(t), 10">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;, variant(t)">
									<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;">
										<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
											<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
										</left>
										<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;"/>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="variant(t)">
										<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
										</push>
										<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="10"/>
							</push>
							<call token=".variable" type="void" kind="static const typename(void)" value="raise">
								<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
									<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
										<left token="," type="(null)" value="nfc(5), level, message, inspect">
											<left token="," type="(null)" value="nfc(5), level, message">
												<left token="," type="(null)" value="nfc(5), level">
													<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
												</left>
												<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</call>
						</expr>
					</stmt>
				</else>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:43">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;t != 0&quot;, variant(t), 11);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;t != 0&quot;, variant(t), 11)">
							<push token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;, variant(t), 11">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;, variant(t)">
									<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t != 0&quot;">
										<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
											<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
										</left>
										<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;"/>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="variant(t)">
										<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
										</push>
										<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="11"/>
							</push>
							<call token=".variable" type="void" kind="static const typename(void)" value="raise">
								<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
									<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
										<left token="," type="(null)" value="nfc(5), level, message, inspect">
											<left token="," type="(null)" value="nfc(5), level, message">
												<left token="," type="(null)" value="nfc(5), level">
													<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
												</left>
												<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</call>
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.statementIf.ci:46">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(debug, &quot;t == 0&quot;, variant(t), 12);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(debug, &quot;t == 0&quot;, variant(t), 12)">
							<push token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;, variant(t), 12">
								<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;, variant(t)">
									<left token="," type="void" kind="static const typename(void)" value="debug, &quot;t == 0&quot;">
										<left token=".variable" type="int64" kind="static const typename(i64)" value="debug">
											<init token=".literal" type="int64" kind="static const typename(i64)" value="3"/>
										</left>
										<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;"/>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="variant(t)">
										<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
										</push>
										<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="12"/>
							</push>
							<call token=".variable" type="void" kind="static const typename(void)" value="raise">
								<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
									<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
										<left token="," type="(null)" value="nfc(5), level, message, inspect">
											<left token="," type="(null)" value="nfc(5), level, message">
												<left token="," type="(null)" value="nfc(5), level">
													<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
												</left>
												<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</call>
						</expr>
					</stmt>
				</else>
			</stmt>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(int64) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="typename(int64) == null">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.varInitArray.ci:3">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32"/>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit"/>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceNoInit"/>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrPtrNoInit"/>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrPtrInitNull">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
			<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit"/>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrPtrInitFixed">
			<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit"/>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
			<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrPtrInitSlice">
			<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrPtrInitPtr">
			<init token=".variable" type="int64[*]" kind="static typename(arr)" value="arrPtrInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit"/>
			</init>
		</stmt>
		<stmt token=".variable" type="char[]" kind="static typename(arr)" value="arrSliceInitString">
			<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;"/>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="arrPtrInitString">
			<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;"/>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(int64) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="typename(int64) == null">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.varInitByRef.ci:3">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32"/>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="value">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromVar">
			<init token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="nullRef">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="nullPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="nullVar">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="nullTyp">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nullFun">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="object" kind="static const typename(ref)" value="nullObj">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="typePtr">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="typeVar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeTyp">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="local">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="copyVal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="local">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="copyRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="copyPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="copyVar">
			<init token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="copyTyp">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typeTyp">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant"/>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant"/>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object"/>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="valueOfPtr">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</push>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="valueOfVar">
			<init token="()" type="variant" kind="static const typename(var)" value="variant(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</push>
				<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="valueOfTyp">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeOfValue">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="copyPtrFloat64">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat64">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="copyVarFloat64">
			<init token=".variable" type="variant" kind="static const typename(var)" value="varFloat64">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(int64) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="typename(int64) == null">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64"/>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename"/>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="extras/Tests/lang.varInitStatic.ci:3">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32"/>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="localNoInit"/>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="globalNoInit"/>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="localInitValue">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="globalInitValue">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="localInitLocal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="localInitValue">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="globalInitLocal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="localInitValue">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="localInitGlobal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="globalInitValue">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="globalInitGlobal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="globalInitValue">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="e64">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="e32">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="e64">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgb888(r: int32, g: int32, b: int32): int32">
			<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
				<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
					<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
					</left>
					<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
					</right>
				</left>
				<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgb565(r: int32, g: int32, b: int32): int32">
			<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
				<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
					<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
					</left>
					<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
					</right>
				</left>
				<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
					<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
			<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
				<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
					<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
							</init>
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
							</init>
						</right>
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
						<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
							<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
						</init>
					</right>
				</push>
				<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
					<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
						<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
							<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
								<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
							</left>
							<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
								<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
							</right>
						</left>
						<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
							<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
						</right>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
			<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
				<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
					<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
							</init>
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
							</init>
						</right>
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
						<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
							<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
						</init>
					</right>
				</push>
				<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
					<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
						<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
							<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
								<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
							</left>
							<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
								<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
							</right>
						</left>
						<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
						</right>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zextR5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 11, 5)">
				<push token="," type="void" kind="static const typename(void)" value="r5g6b5, 11, 5">
					<left token="," type="void" kind="static const typename(void)" value="r5g6b5, 11">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
											<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="11"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="zxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(17), value, offs, count)">
							<push token="," type="(null)" value="nfc(17), value, offs, count">
								<left token="," type="(null)" value="nfc(17), value, offs">
									<left token="," type="(null)" value="nfc(17), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(17)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zextG6">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 5, 6)">
				<push token="," type="void" kind="static const typename(void)" value="r5g6b5, 5, 6">
					<left token="," type="void" kind="static const typename(void)" value="r5g6b5, 5">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
											<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="6"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="zxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(17), value, offs, count)">
							<push token="," type="(null)" value="nfc(17), value, offs, count">
								<left token="," type="(null)" value="nfc(17), value, offs">
									<left token="," type="(null)" value="nfc(17), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(17)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zextB5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 0, 5)">
				<push token="," type="void" kind="static const typename(void)" value="r5g6b5, 0, 5">
					<left token="," type="void" kind="static const typename(void)" value="r5g6b5, 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
											<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="zxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(17), value, offs, count)">
							<push token="," type="(null)" value="nfc(17), value, offs, count">
								<left token="," type="(null)" value="nfc(17), value, offs">
									<left token="," type="(null)" value="nfc(17), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(17)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sextR5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 11, 5)">
				<push token="," type="void" kind="static const typename(void)" value="r5g6b5, 11, 5">
					<left token="," type="void" kind="static const typename(void)" value="r5g6b5, 11">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
											<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="11"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="sxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(18), value, offs, count)">
							<push token="," type="(null)" value="nfc(18), value, offs, count">
								<left token="," type="(null)" value="nfc(18), value, offs">
									<left token="," type="(null)" value="nfc(18), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(18)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sextG6">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 5, 6)">
				<push token="," type="void" kind="static const typename(void)" value="r5g6b5, 5, 6">
					<left token="," type="void" kind="static const typename(void)" value="r5g6b5, 5">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
											<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="6"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="sxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(18), value, offs, count)">
							<push token="," type="(null)" value="nfc(18), value, offs, count">
								<left token="," type="(null)" value="nfc(18), value, offs">
									<left token="," type="(null)" value="nfc(18), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(18)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sextB5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 0, 5)">
				<push token="," type="void" kind="static const typename(void)" value="r5g6b5, 0, 5">
					<left token="," type="void" kind="static const typename(void)" value="r5g6b5, 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb565">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="63488"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2016"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
											<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="5"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="sxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(18), value, offs, count)">
							<push token="," type="(null)" value="nfc(18), value, offs, count">
								<left token="," type="(null)" value="nfc(18), value, offs">
									<left token="," type="(null)" value="nfc(18), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(18)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zextR8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 16, 8)">
				<push token="," type="void" kind="static const typename(void)" value="r8g8b8, 16, 8">
					<left token="," type="void" kind="static const typename(void)" value="r8g8b8, 16">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="zxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(17), value, offs, count)">
							<push token="," type="(null)" value="nfc(17), value, offs, count">
								<left token="," type="(null)" value="nfc(17), value, offs">
									<left token="," type="(null)" value="nfc(17), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(17)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zextG8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 8, 8)">
				<push token="," type="void" kind="static const typename(void)" value="r8g8b8, 8, 8">
					<left token="," type="void" kind="static const typename(void)" value="r8g8b8, 8">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="zxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(17), value, offs, count)">
							<push token="," type="(null)" value="nfc(17), value, offs, count">
								<left token="," type="(null)" value="nfc(17), value, offs">
									<left token="," type="(null)" value="nfc(17), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(17)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zextB8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 0, 8)">
				<push token="," type="void" kind="static const typename(void)" value="r8g8b8, 0, 8">
					<left token="," type="void" kind="static const typename(void)" value="r8g8b8, 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="zxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(17), value, offs, count)">
							<push token="," type="(null)" value="nfc(17), value, offs, count">
								<left token="," type="(null)" value="nfc(17), value, offs">
									<left token="," type="(null)" value="nfc(17), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(17)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sextR8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 16, 8)">
				<push token="," type="void" kind="static const typename(void)" value="r8g8b8, 16, 8">
					<left token="," type="void" kind="static const typename(void)" value="r8g8b8, 16">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="sxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(18), value, offs, count)">
							<push token="," type="(null)" value="nfc(18), value, offs, count">
								<left token="," type="(null)" value="nfc(18), value, offs">
									<left token="," type="(null)" value="nfc(18), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(18)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sextG8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 8, 8)">
				<push token="," type="void" kind="static const typename(void)" value="r8g8b8, 8, 8">
					<left token="," type="void" kind="static const typename(void)" value="r8g8b8, 8">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="sxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(18), value, offs, count)">
							<push token="," type="(null)" value="nfc(18), value, offs, count">
								<left token="," type="(null)" value="nfc(18), value, offs">
									<left token="," type="(null)" value="nfc(18), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(18)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sextB8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 0, 8)">
				<push token="," type="void" kind="static const typename(void)" value="r8g8b8, 0, 8">
					<left token="," type="void" kind="static const typename(void)" value="r8g8b8, 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
							<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
								<push token="," type="void" kind="static const typename(void)" value="r_comp, g_comp, b_comp">
									<left token="," type="void" kind="static const typename(void)" value="r_comp, g_comp">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="14"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
											</init>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
											<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
												<left token=".literal" type="int32" kind="static const typename(i32)" value="63"/>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
											</init>
										</right>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
										<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
											<left token=".literal" type="int32" kind="static const typename(i32)" value="31"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3"/>
										</init>
									</right>
								</push>
								<call token=".variable" type="int32" kind="static const typename(i32)" value="rgb888">
									<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
										<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
											<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="r"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="16"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680"/>
											</left>
											<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
												<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="g"/>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="65280"/>
											</right>
										</left>
										<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="b"/>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="255"/>
										</right>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32"/>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="sxt">
						<init token="()" type="int32" kind="static const typename(i32)" value="emit(nfc(18), value, offs, count)">
							<push token="," type="(null)" value="nfc(18), value, offs, count">
								<left token="," type="(null)" value="nfc(18), value, offs">
									<left token="," type="(null)" value="nfc(18), value">
										<left token="emit" type="int32" kind="static const typename(i32)" value="nfc(18)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="offs"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="count"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="sinF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sin(pi64 / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (2)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="sin">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(29), x)">
							<push token="," type="(null)" value="nfc(29), x">
								<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(29)"/>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="cosF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.cos(pi64 / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (2)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="cos">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(30), x)">
							<push token="," type="(null)" value="nfc(30), x">
								<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(30)"/>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="tanF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.tan(pi64 / (4))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (4)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="tan">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(31), x)">
							<push token="," type="(null)" value="nfc(31), x">
								<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(31)"/>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="logF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.log(e64 * e64 * e64)">
				<push token="*" type="float64" kind="static const typename(f64)" value="e64 * e64 * e64">
					<left token="*" type="float64" kind="static const typename(f64)" value="e64 * e64">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="e64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="e64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
						</right>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="e64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.log">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="log">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(32), x)">
							<push token="," type="(null)" value="nfc(32), x">
								<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(32)"/>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="expF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.exp(1.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000"/>
				<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="exp">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(33), x)">
							<push token="," type="(null)" value="nfc(33), x">
								<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(33)"/>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="powF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.pow(pi64 * pi64, 0.500000)">
				<push token="," type="void" kind="static const typename(void)" value="pi64 * pi64, 0.500000">
					<left token="*" type="float64" kind="static const typename(f64)" value="pi64 * pi64">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</right>
					</left>
					<right token=".literal" type="float64" kind="static const typename(f64)" value="0.500000"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.pow">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="pow">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(34), x, y)">
							<push token="," type="(null)" value="nfc(34), x, y">
								<left token="," type="(null)" value="nfc(34), x">
									<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(34)"/>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="y"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="sqrtF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sqrt(pi64 * pi64)">
				<push token="*" type="float64" kind="static const typename(f64)" value="pi64 * pi64">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="sqrt">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(35), x)">
							<push token="," type="(null)" value="nfc(35), x">
								<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(35)"/>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="atanF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(pi64, 1.000000)">
				<push token="," type="void" kind="static const typename(void)" value="pi64, 1.000000">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
					</left>
					<right token=".literal" type="float64" kind="static const typename(f64)" value="1.000000"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64"/>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="atan2">
						<init token="()" type="float64" kind="static const typename(f64)" value="emit(nfc(36), x, y)">
							<push token="," type="(null)" value="nfc(36), x, y">
								<left token="," type="(null)" value="nfc(36), x">
									<left token="emit" type="float64" kind="static const typename(f64)" value="nfc(36)"/>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x"/>
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="y"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="sinF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sin(pi32 / (2))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (2)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</init>
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="sin">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(21), x)">
							<push token="," type="(null)" value="nfc(21), x">
								<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(21)"/>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="cosF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.cos(pi32 / (2))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (2)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</init>
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="cos">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(22), x)">
							<push token="," type="(null)" value="nfc(22), x">
								<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(22)"/>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="tanF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.tan(pi32 / (4))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (4)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</init>
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4"/>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="tan">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(23), x)">
							<push token="," type="(null)" value="nfc(23), x">
								<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(23)"/>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="logF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.log(e32 * e32 * e32)">
				<push token="*" type="float32" kind="static const typename(f32)" value="e32 * e32 * e32">
					<left token="*" type="float32" kind="static const typename(f32)" value="e32 * e32">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="e32">
							<init token=".variable" type="float64" kind="static const typename(f64)" value="e64">
								<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
							</init>
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="e32">
							<init token=".variable" type="float64" kind="static const typename(f64)" value="e64">
								<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
							</init>
						</right>
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="e32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="e64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282"/>
						</init>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.log">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="log">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(24), x)">
							<push token="," type="(null)" value="nfc(24), x">
								<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(24)"/>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="expF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.exp(1.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000"/>
				<call token="." type="function" kind="static const typename(ref)" value="float32.exp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="exp">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(25), x)">
							<push token="," type="(null)" value="nfc(25), x">
								<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(25)"/>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="powF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.pow(pi32 * pi32, 0.500000)">
				<push token="," type="void" kind="static const typename(void)" value="pi32 * pi32, 0.500000">
					<left token="*" type="float32" kind="static const typename(f32)" value="pi32 * pi32">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
							<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
								<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
							</init>
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
							<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
								<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
							</init>
						</right>
					</left>
					<right token=".literal" type="float32" kind="static const typename(f32)" value="0.500000"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.pow">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="pow">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(26), x, y)">
							<push token="," type="(null)" value="nfc(26), x, y">
								<left token="," type="(null)" value="nfc(26), x">
									<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(26)"/>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
								</left>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="y"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="sqrtF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sqrt(pi32 * pi32)">
				<push token="*" type="float32" kind="static const typename(f32)" value="pi32 * pi32">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</init>
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</init>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="sqrt">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(27), x)">
							<push token="," type="(null)" value="nfc(27), x">
								<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(27)"/>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="atanF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.atan2(pi32, 1.000000)">
				<push token="," type="void" kind="static const typename(void)" value="pi32, 1.000000">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
							<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593"/>
						</init>
					</left>
					<right token=".literal" type="float32" kind="static const typename(f32)" value="1.000000"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32"/>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="atan2">
						<init token="()" type="float32" kind="static const typename(f32)" value="emit(nfc(28), x, y)">
							<push token="," type="(null)" value="nfc(28), x, y">
								<left token="," type="(null)" value="nfc(28), x">
									<left token="emit" type="float32" kind="static const typename(f32)" value="nfc(28)"/>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="x"/>
								</left>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="y"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="free(data: pointer): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
				<push token="," type="void" kind="static const typename(void)" value="data, 0">
					<left token=".variable" type="pointer" kind="static const typename(ref)" value="data"/>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
					<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
						<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
							<push token="," type="(null)" value="nfc(7), ptr, size">
								<left token="," type="(null)" value="nfc(7), ptr">
									<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="malloc(size: int32): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
				<push token="," type="void" kind="static const typename(void)" value="null, size">
					<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
					<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
						<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
							<push token="," type="(null)" value="nfc(7), ptr, size">
								<left token="," type="(null)" value="nfc(7), ptr">
									<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
						<push token="," type="void" kind="static const typename(void)" value="null, size">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
								<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p2">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(80)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="80"/>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
						<push token="," type="void" kind="static const typename(void)" value="null, size">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
								<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="160"/>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
						<push token="," type="void" kind="static const typename(void)" value="null, size">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
								<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p4">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(820)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="820"/>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
						<push token="," type="void" kind="static const typename(void)" value="null, size">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
								<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.fill(p1, 0, 1024);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.fill(p1, 0, 1024)">
				<push token="," type="void" kind="static const typename(void)" value="p1, 0, 1024">
					<left token="," type="void" kind="static const typename(void)" value="p1, 0">
						<left token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
							<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
								<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
									<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
										<push token="," type="void" kind="static const typename(void)" value="null, size">
											<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
												<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
										</push>
										<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
											<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
												<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
													<push token="," type="(null)" value="nfc(7), ptr, size">
														<left token="," type="(null)" value="nfc(7), ptr">
															<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
															<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
														</left>
														<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
													</push>
													<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
												</init>
											</right>
										</call>
									</init>
								</call>
							</init>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.fill">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
					<right token=".variable" type="pointer" kind="static const typename(ref)" value="fill">
						<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(8), dst, value, size)">
							<push token="," type="(null)" value="nfc(8), dst, value, size">
								<left token="," type="(null)" value="nfc(8), dst, value">
									<left token="," type="(null)" value="nfc(8), dst">
										<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)"/>
										<right token=".variable" type="pointer" kind="static const typename(ref)" value="dst"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.copy(p1, p3, 160);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.copy(p1, p3, 160)">
				<push token="," type="void" kind="static const typename(void)" value="p1, p3, 160">
					<left token="," type="void" kind="static const typename(void)" value="p1, p3">
						<left token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
							<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
								<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
									<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
										<push token="," type="void" kind="static const typename(void)" value="null, size">
											<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
												<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
										</push>
										<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
											<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
												<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
													<push token="," type="(null)" value="nfc(7), ptr, size">
														<left token="," type="(null)" value="nfc(7), ptr">
															<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
															<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
														</left>
														<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
													</push>
													<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
												</init>
											</right>
										</call>
									</init>
								</call>
							</init>
						</left>
						<right token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
							<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="160"/>
								<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
									<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
										<push token="," type="void" kind="static const typename(void)" value="null, size">
											<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
												<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
										</push>
										<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
											<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
												<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
													<push token="," type="(null)" value="nfc(7), ptr, size">
														<left token="," type="(null)" value="nfc(7), ptr">
															<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
															<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
														</left>
														<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
													</push>
													<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
												</init>
											</right>
										</call>
									</init>
								</call>
							</init>
						</right>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="160"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.copy">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
					<right token=".variable" type="pointer" kind="static const typename(ref)" value="copy">
						<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(9), dst, src, size)">
							<push token="," type="(null)" value="nfc(9), dst, src, size">
								<left token="," type="(null)" value="nfc(9), dst, src">
									<left token="," type="(null)" value="nfc(9), dst">
										<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(9)"/>
										<right token=".variable" type="pointer" kind="static const typename(ref)" value="dst"/>
									</left>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="src"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p1);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p1)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024"/>
						<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
							<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
								<push token="," type="void" kind="static const typename(void)" value="null, size">
									<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
										<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
										<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
											<push token="," type="(null)" value="nfc(7), ptr, size">
												<left token="," type="(null)" value="nfc(7), ptr">
													<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
													<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
											</push>
											<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
										</init>
									</right>
								</call>
							</init>
						</call>
					</init>
				</push>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="free">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
						<push token="," type="void" kind="static const typename(void)" value="data, 0">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="data"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p2);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p2)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p2">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(80)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="80"/>
						<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
							<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
								<push token="," type="void" kind="static const typename(void)" value="null, size">
									<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
										<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
										<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
											<push token="," type="(null)" value="nfc(7), ptr, size">
												<left token="," type="(null)" value="nfc(7), ptr">
													<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
													<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
											</push>
											<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
										</init>
									</right>
								</call>
							</init>
						</call>
					</init>
				</push>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="free">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
						<push token="," type="void" kind="static const typename(void)" value="data, 0">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="data"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p3);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p3)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="160"/>
						<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
							<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
								<push token="," type="void" kind="static const typename(void)" value="null, size">
									<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
										<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
										<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
											<push token="," type="(null)" value="nfc(7), ptr, size">
												<left token="," type="(null)" value="nfc(7), ptr">
													<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
													<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
											</push>
											<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
										</init>
									</right>
								</call>
							</init>
						</call>
					</init>
				</push>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="free">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
						<push token="," type="void" kind="static const typename(void)" value="data, 0">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="data"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p4);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p4)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p4">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(820)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="820"/>
						<call token=".variable" type="pointer" kind="static const typename(ref)" value="malloc">
							<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
								<push token="," type="void" kind="static const typename(void)" value="null, size">
									<left token=".variable" type="pointer" kind="static const typename(ref)" value="null">
										<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
										<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
											<push token="," type="(null)" value="nfc(7), ptr, size">
												<left token="," type="(null)" value="nfc(7), ptr">
													<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
													<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
											</push>
											<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
										</init>
									</right>
								</call>
							</init>
						</call>
					</init>
				</push>
				<call token=".variable" type="pointer" kind="static const typename(ref)" value="free">
					<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
						<push token="," type="void" kind="static const typename(void)" value="data, 0">
							<left token=".variable" type="pointer" kind="static const typename(ref)" value="data"/>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
							<right token=".variable" type="pointer" kind="static const typename(ref)" value="alloc">
								<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(7), ptr, size)">
									<push token="," type="(null)" value="nfc(7), ptr, size">
										<left token="," type="(null)" value="nfc(7), ptr">
											<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)"/>
											<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptr"/>
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
									</push>
									<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
								</init>
							</right>
						</call>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="val1">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="val2">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="96"/>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(1, &quot;val1&quot;, variant(val1), 0);">
			<expr token="()" type="void" kind="static const typename(void)" value="raise(1, &quot;val1&quot;, variant(val1), 0)">
				<push token="," type="void" kind="static const typename(void)" value="1, &quot;val1&quot;, variant(val1), 0">
					<left token="," type="void" kind="static const typename(void)" value="1, &quot;val1&quot;, variant(val1)">
						<left token="," type="void" kind="static const typename(void)" value="1, &quot;val1&quot;">
							<left token=".literal" type="int32" kind="static const typename(i32)" value="1"/>
							<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val1&quot;"/>
						</left>
						<right token="()" type="variant" kind="static const typename(var)" value="variant(val1)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
							</push>
							<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
						</right>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</push>
				<call token=".variable" type="void" kind="static const typename(void)" value="raise">
					<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
						<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
							<left token="," type="(null)" value="nfc(5), level, message, inspect">
								<left token="," type="(null)" value="nfc(5), level, message">
									<left token="," type="(null)" value="nfc(5), level">
										<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
									</left>
									<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
								</left>
								<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
						</push>
						<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(1, &quot;val2&quot;, variant(val2), 0);">
			<expr token="()" type="void" kind="static const typename(void)" value="raise(1, &quot;val2&quot;, variant(val2), 0)">
				<push token="," type="void" kind="static const typename(void)" value="1, &quot;val2&quot;, variant(val2), 0">
					<left token="," type="void" kind="static const typename(void)" value="1, &quot;val2&quot;, variant(val2)">
						<left token="," type="void" kind="static const typename(void)" value="1, &quot;val2&quot;">
							<left token=".literal" type="int32" kind="static const typename(i32)" value="1"/>
							<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val2&quot;"/>
						</left>
						<right token="()" type="variant" kind="static const typename(var)" value="variant(val2)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="96"/>
							</push>
							<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
						</right>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</push>
				<call token=".variable" type="void" kind="static const typename(void)" value="raise">
					<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
						<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
							<left token="," type="(null)" value="nfc(5), level, message, inspect">
								<left token="," type="(null)" value="nfc(5), level, message">
									<left token="," type="(null)" value="nfc(5), level">
										<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
									</left>
									<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
								</left>
								<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
						</push>
						<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.copy(pointer(val2), pointer(val1), 8);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.copy(pointer(val2), pointer(val1), 8)">
				<push token="," type="void" kind="static const typename(void)" value="pointer(val2), pointer(val1), 8">
					<left token="," type="void" kind="static const typename(void)" value="pointer(val2), pointer(val1)">
						<left token="()" type="pointer" kind="static const typename(ref)" value="pointer(val2)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="96"/>
							</push>
							<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
						</left>
						<right token="()" type="pointer" kind="static const typename(ref)" value="pointer(val1)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
							</push>
							<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
						</right>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.copy">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
					<right token=".variable" type="pointer" kind="static const typename(ref)" value="copy">
						<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(9), dst, src, size)">
							<push token="," type="(null)" value="nfc(9), dst, src, size">
								<left token="," type="(null)" value="nfc(9), dst, src">
									<left token="," type="(null)" value="nfc(9), dst">
										<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(9)"/>
										<right token=".variable" type="pointer" kind="static const typename(ref)" value="dst"/>
									</left>
									<right token=".variable" type="pointer" kind="static const typename(ref)" value="src"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.fill(pointer(val1), 0, 8);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.fill(pointer(val1), 0, 8)">
				<push token="," type="void" kind="static const typename(void)" value="pointer(val1), 0, 8">
					<left token="," type="void" kind="static const typename(void)" value="pointer(val1), 0">
						<left token="()" type="pointer" kind="static const typename(ref)" value="pointer(val1)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
							</push>
							<call token=".variable" type="pointer" kind="static const typename(ref)" value="pointer"/>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="8"/>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.fill">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer"/>
					<right token=".variable" type="pointer" kind="static const typename(ref)" value="fill">
						<init token="()" type="pointer" kind="static const typename(ref)" value="emit(nfc(8), dst, value, size)">
							<push token="," type="(null)" value="nfc(8), dst, value, size">
								<left token="," type="(null)" value="nfc(8), dst, value">
									<left token="," type="(null)" value="nfc(8), dst">
										<left token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)"/>
										<right token=".variable" type="pointer" kind="static const typename(ref)" value="dst"/>
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="value"/>
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="size"/>
							</push>
							<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
						</init>
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(1, &quot;val1&quot;, variant(val1), 0);">
			<expr token="()" type="void" kind="static const typename(void)" value="raise(1, &quot;val1&quot;, variant(val1), 0)">
				<push token="," type="void" kind="static const typename(void)" value="1, &quot;val1&quot;, variant(val1), 0">
					<left token="," type="void" kind="static const typename(void)" value="1, &quot;val1&quot;, variant(val1)">
						<left token="," type="void" kind="static const typename(void)" value="1, &quot;val1&quot;">
							<left token=".literal" type="int32" kind="static const typename(i32)" value="1"/>
							<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val1&quot;"/>
						</left>
						<right token="()" type="variant" kind="static const typename(var)" value="variant(val1)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="42"/>
							</push>
							<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
						</right>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</push>
				<call token=".variable" type="void" kind="static const typename(void)" value="raise">
					<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
						<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
							<left token="," type="(null)" value="nfc(5), level, message, inspect">
								<left token="," type="(null)" value="nfc(5), level, message">
									<left token="," type="(null)" value="nfc(5), level">
										<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
									</left>
									<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
								</left>
								<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
						</push>
						<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
					</init>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(1, &quot;val2&quot;, variant(val2), 0);">
			<expr token="()" type="void" kind="static const typename(void)" value="raise(1, &quot;val2&quot;, variant(val2), 0)">
				<push token="," type="void" kind="static const typename(void)" value="1, &quot;val2&quot;, variant(val2), 0">
					<left token="," type="void" kind="static const typename(void)" value="1, &quot;val2&quot;, variant(val2)">
						<left token="," type="void" kind="static const typename(void)" value="1, &quot;val2&quot;">
							<left token=".literal" type="int32" kind="static const typename(i32)" value="1"/>
							<right token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val2&quot;"/>
						</left>
						<right token="()" type="variant" kind="static const typename(var)" value="variant(val2)">
							<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="96"/>
							</push>
							<call token=".variable" type="variant" kind="static const typename(var)" value="variant"/>
						</right>
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0"/>
				</push>
				<call token=".variable" type="void" kind="static const typename(void)" value="raise">
					<init token="()" type="void" kind="static const typename(void)" value="emit(nfc(5), level, message, inspect, maxTrace)">
						<push token="," type="(null)" value="nfc(5), level, message, inspect, maxTrace">
							<left token="," type="(null)" value="nfc(5), level, message, inspect">
								<left token="," type="(null)" value="nfc(5), level, message">
									<left token="," type="(null)" value="nfc(5), level">
										<left token="emit" type="void" kind="static const typename(void)" value="nfc(5)"/>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="level"/>
									</left>
									<right token=".variable" type="char[*]" kind="static typename(arr)" value="message"/>
								</left>
								<right token=".variable" type="variant" kind="static const typename(var)" value="inspect"/>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="maxTrace"/>
						</push>
						<call token=".variable" type="emit" kind="static const typename(void)" value="emit"/>
					</init>
				</call>
			</expr>
		</stmt>
	</stmt>
</main>

typename
typename.size
typename.offset
typename.file(type: typename): .cstr
typename.line(type: typename): int32
typename.name(type: typename): .cstr
typename.base(type: typename): typename
void
bool
char
int8
int16
int32
int64
uint8
uint16
uint32
uint32.zxt(value: int32, offs: int32, count: int32): int32
uint32.sxt(value: int32, offs: int32, count: int32): int32
uint64
uint64.zxt(value: int64, offs: int32, count: int32): int64
uint64.sxt(value: int64, offs: int32, count: int32): int64
float32
float32.sin(x: float32): float32
float32.cos(x: float32): float32
float32.tan(x: float32): float32
float32.log(x: float32): float32
float32.exp(x: float32): float32
float32.pow(x: float32, y: float32): float32
float32.sqrt(x: float32): float32
float32.atan2(x: float32, y: float32): float32
float64
float64.sin(x: float64): float64
float64.cos(x: float64): float64
float64.tan(x: float64): float64
float64.log(x: float64): float64
float64.exp(x: float64): float64
float64.pow(x: float64, y: float64): float64
float64.sqrt(x: float64): float64
float64.atan2(x: float64, y: float64): float64
pointer
null
variant
object
function
int
byte
long
float
double
true
false
emit
emit.nop
emit.not
emit.set
emit.join
emit.ret
emit.call
emit.p4x
emit.p4x.dp3
emit.p4x.dp4
emit.p4x.dph
emit.dup
emit.dup.x1
emit.dup.x2
emit.dup.x4
emit.load
emit.load.z32
emit.load.z64
emit.load.z128
emit.load.i8
emit.load.i16
emit.load.i32
emit.load.i64
emit.load.i128
emit.store
emit.store.i8
emit.store.i16
emit.store.i32
emit.store.i64
emit.store.i128
emit.cmt
emit.cmt.u32
emit.cmt.u64
emit.and
emit.and.u32
emit.and.u64
emit.or
emit.or.u32
emit.or.u64
emit.xor
emit.xor.u32
emit.xor.u64
emit.shl
emit.shl.u32
emit.shl.u64
emit.shr
emit.shr.i32
emit.shr.i64
emit.shr.u32
emit.shr.u64
emit.neg
emit.neg.i32
emit.neg.i64
emit.neg.f32
emit.neg.f64
emit.neg.p4f
emit.neg.p2d
emit.add
emit.add.i32
emit.add.i64
emit.add.f32
emit.add.f64
emit.add.p4f
emit.add.p2d
emit.sub
emit.sub.i32
emit.sub.i64
emit.sub.f32
emit.sub.f64
emit.sub.p4f
emit.sub.p2d
emit.mul
emit.mul.i32
emit.mul.i64
emit.mul.u32
emit.mul.u64
emit.mul.f32
emit.mul.f64
emit.mul.p4f
emit.mul.p2d
emit.div
emit.div.i32
emit.div.i64
emit.div.u32
emit.div.u64
emit.div.f32
emit.div.f64
emit.div.p4f
emit.div.p2d
emit.mod
emit.mod.i32
emit.mod.i64
emit.mod.u32
emit.mod.u64
emit.mod.f32
emit.mod.f64
emit.ceq
emit.ceq.i32
emit.ceq.i64
emit.ceq.f32
emit.ceq.f64
emit.ceq.p4f
emit.ceq.p2d
emit.clt
emit.clt.i32
emit.clt.i64
emit.clt.u32
emit.clt.u64
emit.clt.f32
emit.clt.f64
emit.cgt
emit.cgt.i32
emit.cgt.i64
emit.cgt.u32
emit.cgt.u64
emit.cgt.f32
emit.cgt.f64
emit.min
emit.min.p4f
emit.min.p2d
emit.max
emit.max.p4f
emit.max.p2d
halt(): void
CLOCKS_PER_SEC
RAND_MAX
raise(level: int32, message: char[*], inspect: variant, maxTrace: int32): void
raise.abort
raise.error
raise.warn
raise.info
raise.debug
raise.verbose
raise.noTrace
raise.defTrace
tryExec(args: pointer, action(args: pointer): void): int32
memmgr(ptr: pointer, size: int32): pointer
memset(dest: pointer, value: int32, size: int32): pointer
memcpy(dest: pointer, src: pointer, size: int32): pointer
System
System.exit(code: int32): void
System.srand(seed: int32): void
System.rand(): int32
System.time(): int32
System.clock(): int32
System.millis(): int64
System.sleep(millis: int64): void
File
File.open(path: char[*]): File
File.create(path: char[*]): File
File.append(path: char[*]): File
File.peek(file: File): int32
File.read(file: File): int32
File.read(file: File, buff: uint8[]): int32
File.readLine(file: File, buff: uint8[]): int32
File.write(file: File, byte: uint8): int32
File.write(file: File, buff: uint8[]): int32
File.flush(file: File): void
File.close(file: File): void
File.in
File.out
File.err
File.dbg

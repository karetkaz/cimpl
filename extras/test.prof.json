{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 136
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(1)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 22856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23320
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(4)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 160
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 304
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 448
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 592
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 736
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 880
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1168
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1312
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1456
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(18)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34312
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34776
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(20)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(21)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36632
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37096
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1600
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(26)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(27)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 1744
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39024
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(28)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(29)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(30)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40416
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(31)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(32)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41488
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(33)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41952
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42552
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 1888
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43008
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(36)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(37)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(38)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(39)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44832
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(40)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(41)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29224
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29960
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(10)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2176
	, "static": true
	, "const": true
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2320
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2472
	, "static": true
	, "const": true
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "true"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "false"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "uint8"
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "float32"
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "float64"
		, "value": "float64"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3768
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3912
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x1 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x1 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4776
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 4920
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x1 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x1 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x2 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x2 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x4 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x4 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 5496
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 6792
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 7616
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8464
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8880
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9296
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9712
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10400
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 11392
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 12352
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 13312
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 14544
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 15776
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 16736
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 17696
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 18656
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 19616
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 20032
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 21168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25072
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(5)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-2"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "13"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "13"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "14"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "14"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "15"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "15"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27120
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "typename"
	, "size": 0
	, "offs": 30008
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30576
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31048
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(12)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31376
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(13)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 31704
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(14)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32032
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(15)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32360
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(16)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 5
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 5
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 5
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 5
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 5
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 5
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 5
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 5
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 8
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 8
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 8
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 8
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 8
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 8
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 8
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 8
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 8
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 9
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 9
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 11
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 11
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 12
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 12
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 12
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 12
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 12
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 12
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 12
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 14
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 14
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 15
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 15
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 15
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 15
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 15
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 15
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 15
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 17
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 17
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 17
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 17
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 18
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 18
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 18
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 18
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 18
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 18
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 20
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 20
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 20
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 20
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 20
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 20
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 20
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 21
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 21
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 23
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 23
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 23
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 23
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 23
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 23
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/stdlib.ci"
			, "line": 23
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 24
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 24
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 24
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 25
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/stdlib.ci"
			, "line": 25
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/stdlib.ci"
				, "line": 25
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/stdlib.ci"
				, "line": 25
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "lib/stdlib.ci"
			, "line": 25
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 25
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 27
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "lib/stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/stdlib.ci"
		, "line": 27
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 27
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 27
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/stdlib.ci"
				, "line": 27
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 27
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/stdlib.ci"
					, "line": 27
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 27
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/stdlib.ci"
					, "line": 27
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "lib/stdlib.ci"
					, "line": 27
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 28
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "lib/stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 28
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 28
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/stdlib.ci"
				, "line": 28
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 28
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/stdlib.ci"
					, "line": 28
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 28
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/stdlib.ci"
					, "line": 28
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "lib/stdlib.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 29
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 29
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/stdlib.ci"
				, "line": 29
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 29
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/stdlib.ci"
					, "line": 29
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 29
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "lib/stdlib.ci"
					, "line": 29
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "NotEquals"
	, "kind": "typename"
	, "cast": "val"
	, "name": "NotEquals"
	, "type": "typename"
	, "file": "lib/stdlib.ci"
	, "line": 31
	, "size": 32
	, "offs": 57480
	, "static": true
	, "const": true
}, {
	"": "NotEquals.expected"
	, "kind": "variable"
	, "cast": "var"
	, "name": "expected"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "lib/stdlib.ci"
	, "line": 32
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "NotEquals.returned"
	, "kind": "variable"
	, "cast": "var"
	, "name": "returned"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "lib/stdlib.ci"
	, "line": 33
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
}, {
	"": "NotEquals.argument"
	, "kind": "variable"
	, "cast": "var"
	, "name": "argument"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "lib/stdlib.ci"
	, "line": 34
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": true
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "lib/stdlib.ci"
		, "line": 34
		, "value": "null"
	}
}, {
	"": "NotEquals.message"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "message"
	, "owner": "NotEquals"
	, "type": "char[*]"
	, "file": "lib/stdlib.ci"
	, "line": 35
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": true
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "lib/stdlib.ci"
		, "line": 35
		, "value": "null"
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 39
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/stdlib.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 94
	, "offs": 288312
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 39
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 40
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/stdlib.ci"
				, "line": 40
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/stdlib.ci"
					, "line": 40
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/stdlib.ci"
					, "line": 40
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 40
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/stdlib.ci"
					, "line": 41
				}]
			}
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "NotEquals"
			, "file": "lib/stdlib.ci"
			, "line": 43
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 48
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288312
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288314
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 288316
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288317
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288321
		, "size": 1
	}, {
		"instruction": "inc.sp(+32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288322
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288326
		, "size": 5
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 288331
		, "size": 4
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288335
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288337
		, "size": 5
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 288342
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288346
		, "size": 2
	}, {
		"instruction": "mov.x1 sp(6, 9)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288348
		, "size": 3
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288351
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288356
		, "size": 5
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288361
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288363
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288368
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288373
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288378
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288383
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288388
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 288393
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 288397
		, "size": 4
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288401
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288405
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 50
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 50
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 50
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 50
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/stdlib.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/stdlib.ci"
			, "line": 50
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/stdlib.ci"
			, "line": 50
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/stdlib.ci"
			, "line": 50
			, "value": "null"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 54
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "lib/stdlib.ci"
		, "line": 54
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(type.size)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 54
		, "args": [{
			"": "type.size"
			, "kind": "."
			, "type": "int32"
			, "file": "lib/stdlib.ci"
			, "line": 54
			, "left": {
				"": "type"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 54
				, "value": "type"
			}
			, "right": {
				"": "size"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/stdlib.ci"
				, "line": 54
				, "value": "size"
			}
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "void"
	, "name": "Math"
	, "type": "typename"
	, "file": "lib/std/math.ci"
	, "line": 3
	, "size": 0
	, "offs": 60584
	, "static": true
	, "const": true
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 7
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 7
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 8
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 8
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 9
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 9
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.000000 / ln2"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 10
		, "left": {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 10
			, "value": "1.000000"
		}
		, "right": {
			"": "ln2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 10
			, "value": "ln2"
		}
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 11
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 11
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 12
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.000000 / ln10"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 12
		, "left": {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 12
			, "value": "1.000000"
		}
		, "right": {
			"": "ln10"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 12
			, "value": "ln10"
		}
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 13
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 13
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 14
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 14
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 15
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 16
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 17
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 17
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 18
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "(0) / 0.000000"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 18
		, "left": {
			"": "(0)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 18
			, "args": [{
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 18
				, "value": "0"
			}]
		}
		, "right": {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 18
			, "value": "0.000000"
		}
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 19
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "(1) / 0.000000"
		, "kind": "/"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 19
		, "left": {
			"": "(1)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 19
			, "args": [{
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 19
				, "value": "1"
			}]
		}
		, "right": {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 19
			, "value": "0.000000"
		}
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 86
	, "offs": 288408
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288408
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 288410
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288419
		, "size": 1
	}, {
		"instruction": "jz +51"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288420
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288424
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288426
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288427
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288428
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288432
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288433
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 288435
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288436
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288438
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 288443
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288444
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 288448
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288449
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288451
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 288452
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288453
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 288455
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288456
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288458
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288459
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288463
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288464
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 288466
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(4, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288467
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288470
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288471
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 288473
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 288482
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288483
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288485
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 288487
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288488
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 288490
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288491
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288493
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 46
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 46
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 46
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 288496
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 46
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 47
			, "value": "result"
		}, {
			"": "modf(x, result);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 48
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 49
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 49
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 288496
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288497
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 288499
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 288503
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 288508
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288509
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288513
		, "size": 4
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288517
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288519
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 51
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 51
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 51
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 51
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 51
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 51
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 51
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 52
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 52
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 52
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 52
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 52
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 52
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 288520
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 58
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 59
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 59
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 59
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 59
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 59
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 59
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 60
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 60
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 62
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 62
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 62
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 62
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 62
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 62
				, "stmt": [{
					"": "return .result := -1;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 63
					, "stmt": {
						"": ".result := -1"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "-1"
							, "kind": "-"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 63
							, "right": {
								"": "1"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 63
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := 1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 65
			, "stmt": {
				"": ".result := 1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 65
					, "value": "1"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288520
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288522
		, "size": 1
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 288523
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288524
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288528
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288529
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288531
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288532
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288534
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 288535
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288536
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288540
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288545
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288547
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288548
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288553
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288555
		, "size": 1
	}]
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 288560
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 68
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 68
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 68
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 68
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 68
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 68
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 69
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 69
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 71
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 71
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 71
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 71
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 71
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 71
				, "stmt": [{
					"": "return .result := -1;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 72
					, "stmt": {
						"": ".result := -1"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "-1"
							, "kind": "-"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 72
							, "right": {
								"": "1"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 72
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := 1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 74
			, "stmt": {
				"": ".result := 1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 74
					, "value": "1"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288560
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288562
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 288563
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288564
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288568
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288569
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288571
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288572
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288574
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288575
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288576
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288580
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288585
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288587
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288588
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288593
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288595
		, "size": 1
	}]
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 83
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 83
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 83
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 18
	, "offs": 288600
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 83
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 84
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 84
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 84
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 84
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 84
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 84
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 85
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 85
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 85
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 87
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 87
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288600
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288602
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 288603
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288604
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288608
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 288610
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288611
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288613
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(2, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288614
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288617
		, "size": 1
	}]
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 89
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 89
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 89
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 18
	, "offs": 288624
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 89
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 90
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 90
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 90
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 90
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 90
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 90
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 91
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 91
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 91
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 93
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 93
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288624
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288626
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288627
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288628
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288632
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 288634
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288635
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288637
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(3, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288638
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288641
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float32, mod: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 95
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 95
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 95
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "mod"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 95
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 288648
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 95
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 96
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 96
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 96
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 96
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 96
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 96
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 96
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 96
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 96
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 96
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 96
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 97
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 97
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 97
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 97
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 99
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 99
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288648
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288650
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 288652
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288653
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288655
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288657
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 288658
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288659
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288663
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288665
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 288667
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 288668
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288670
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(3, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288671
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288674
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float64, mod: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "val"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "mod"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 288680
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 102
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 102
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 102
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 102
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 102
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 102
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 102
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 102
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 102
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 102
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 102
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 103
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 103
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 103
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 103
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 105
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 105
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288680
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288682
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 288684
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288685
		, "size": 2
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288687
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 288689
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288690
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288691
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288695
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288697
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 288699
		, "size": 1
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288700
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288702
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(5, 3)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288703
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288706
		, "size": 1
	}]
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 114
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 114
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 114
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 114
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 288712
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 114
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 115
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 115
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 115
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 115
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 115
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 116
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 116
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 118
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 118
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288712
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288714
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 288716
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288717
		, "size": 4
	}, {
		"instruction": "mov.x1 sp(3, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288721
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288724
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(3, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288725
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288728
		, "size": 1
	}]
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 120
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 120
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 120
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 120
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 288736
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 120
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 121
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 121
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 121
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 121
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 121
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 122
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 122
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 124
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 124
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288736
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288738
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288740
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288741
		, "size": 4
	}, {
		"instruction": "mov.x2 sp(5, 3)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288745
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288748
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(5, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288749
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288752
		, "size": 1
	}]
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 132
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 132
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 132
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 288760
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 132
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 133
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 133
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 133
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 133
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 133
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 134
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 134
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 136
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 136
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288760
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288762
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 288764
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288765
		, "size": 4
	}, {
		"instruction": "mov.x1 sp(3, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288769
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288772
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(3, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288773
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288776
		, "size": 1
	}]
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 138
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 138
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 288784
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 138
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 139
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 139
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 139
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 139
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 139
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 140
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 140
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 142
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 142
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288784
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288786
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 288788
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288789
		, "size": 4
	}, {
		"instruction": "mov.x2 sp(5, 3)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288793
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288796
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(5, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288797
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288800
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 150
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 150
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 150
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 150
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 150
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 288808
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 150
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 151
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 151
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 151
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 151
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 151
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 152
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 152
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 154
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 154
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 154
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 154
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 154
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 155
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 155
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 157
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 157
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288808
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288810
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 288812
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288813
		, "size": 4
	}, {
		"instruction": "mov.x1 sp(4, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288817
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288820
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288821
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288823
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 288825
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288826
		, "size": 4
	}, {
		"instruction": "mov.x1 sp(4, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288830
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288833
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(4, 3)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 288834
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288837
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 159
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 288840
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 160
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 160
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 160
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 160
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 160
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 161
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 161
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 163
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 163
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 163
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 163
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 163
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 164
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 164
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 166
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 166
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288840
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288842
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288844
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288845
		, "size": 4
	}, {
		"instruction": "mov.x2 sp(7, 3)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288849
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288852
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288853
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288855
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 288857
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288858
		, "size": 4
	}, {
		"instruction": "mov.x2 sp(7, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288862
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288865
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(7, 5)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 288866
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288869
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 173
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 173
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 173
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 173
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 173
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 173
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 173
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 173
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 173
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 173
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 173
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 173
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 174
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 174
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 174
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 174
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 174
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 174
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 174
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 174
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 174
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 174
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 174
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 174
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 174
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.smooth(t: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 176
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 176
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 176
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 176
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 176
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 176
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 176
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 176
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 176
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 176
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 176
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 176
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 176
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 176
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 176
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 177
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 177
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 177
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 177
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 177
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 177
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 177
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 177
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 177
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 177
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 177
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 177
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 177
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 177
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 177
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 178
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 178
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 178
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 178
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 178
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), float32(0), float32(1)))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 178
		, "args": [{
			"": "clamp((t - a) / (b - a), float32(0), float32(1))"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 178
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 178
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 178
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 178
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 178
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 178
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 178
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 178
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 178
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 178
							, "value": "a"
						}
					}]
				}
			}, {
				"": "float32(0)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 178
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 178
					, "value": "0"
				}]
			}, {
				"": "float32(1)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 178
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 178
					, "value": "1"
				}]
			}]
		}]
	}
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 179
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 179
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 179
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 179
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 179
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), float64(0), float64(1)))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 179
		, "args": [{
			"": "clamp((t - a) / (b - a), float64(0), float64(1))"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 179
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 179
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 179
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 179
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 179
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 179
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 179
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 179
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 179
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 179
							, "value": "a"
						}
					}]
				}
			}, {
				"": "float64(0)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 179
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 179
					, "value": "0"
				}]
			}, {
				"": "float64(1)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 179
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 179
					, "value": "1"
				}]
			}]
		}]
	}
}, {
	"": "Math.min(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 185
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 185
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 185
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 72
	, "offs": 288872
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 185
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 186
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 186
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 186
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "lib/std/math.ci"
						, "line": 186
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 186
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 186
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 186
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 186
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 187
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 187
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 189
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 190
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 190
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 190
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 190
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 190
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 190
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 190
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 190
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 190
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 190
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 190
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 190
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 190
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 190
				, "stmt": [{
					"": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 191
					, "test": {
						"": "result > data[i]"
						, "kind": ">"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 191
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 191
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 191
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "lib/std/math.ci"
								, "line": 191
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 191
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 191
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 192
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 195
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 195
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288872
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288874
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 288875
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288876
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 288880
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 288881
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288882
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288884
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288885
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288887
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288888
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 288893
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288897
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288899
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288901
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 288903
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288907
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 288908
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288909
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288913
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288915
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 288917
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288921
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288922
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 288924
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288928
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288930
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 288932
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 288933
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 288937
		, "size": 4
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288941
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288943
		, "size": 1
	}]
}, {
	"": "Math.max(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 197
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 197
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 197
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 72
	, "offs": 288944
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 197
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 198
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 198
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 198
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "lib/std/math.ci"
						, "line": 198
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 198
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 198
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 198
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 198
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 199
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 199
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 201
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 202
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 202
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 202
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 202
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 202
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 202
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 202
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 202
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 202
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 202
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 202
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 202
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 202
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 202
				, "stmt": [{
					"": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 203
					, "test": {
						"": "result < data[i]"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 203
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 203
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 203
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "lib/std/math.ci"
								, "line": 203
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 203
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 203
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 204
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 207
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 207
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288944
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 288946
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 288947
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288948
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 288952
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 288953
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288954
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 288956
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288957
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288959
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 288960
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 288965
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 288969
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288971
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288973
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 288975
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288979
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 288980
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 288981
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288985
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 288987
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 288989
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 288993
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 288994
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 288996
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289000
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289002
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 289004
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 289005
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289009
		, "size": 4
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289013
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289015
		, "size": 1
	}]
}, {
	"": "Math.sum(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sum"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 210
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 210
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 210
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 289016
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 210
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 211
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 212
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 212
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 212
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 212
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 212
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 212
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 212
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 212
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 212
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 212
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 212
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 212
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 212
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 212
				, "stmt": [{
					"": "result := result + data[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 213
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 215
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 215
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 289016
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 289017
		, "size": 1
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289018
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289022
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289024
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289026
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 289028
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 289032
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289033
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289034
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 289036
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289040
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289042
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 289044
		, "size": 1
	}, {
		"instruction": "jnz -23"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 289045
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289049
		, "size": 4
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289053
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289055
		, "size": 1
	}]
}, {
	"": "Math.eval(x: float64, a0: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 224
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 224
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 224
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 224
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 224
		, "args": [{
			"": "a0"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 224
			, "value": "a0"
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 225
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 225
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 225
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 225
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 225
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a0 + x * a1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 225
		, "args": [{
			"": "a0 + x * a1"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 225
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 225
				, "value": "a0"
			}
			, "right": {
				"": "x * a1"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 225
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 225
					, "value": "x"
				}
				, "right": {
					"": "a1"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 225
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 226
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 226
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 226
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 226
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 226
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 226
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 226
		, "args": [{
			"": "a0 + x * eval(x, a1, a2)"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 226
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 226
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 226
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 226
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 226
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 226
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 226
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 226
						, "value": "a2"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 227
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "a3"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a3"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "size": 8
		, "offs": 40
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2, a3))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 227
		, "args": [{
			"": "a0 + x * eval(x, a1, a2, a3)"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 227
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 227
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2, a3)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 227
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 227
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2, a3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 227
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 227
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 227
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 227
						, "value": "a2"
					}, {
						"": "a3"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 227
						, "value": "a3"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, polynomial: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 228
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 228
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 228
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "polynomial"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "polynomial"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 228
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 47
	, "offs": 289056
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 228
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 229
			, "value": "result"
		}, {
			"": "for (i; i >= 0; i := i - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 230
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 230
				, "value": "i"
			}
			, "test": {
				"": "i >= 0"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 230
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 230
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 230
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 230
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 230
					, "value": "i"
				}
				, "right": {
					"": "i - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 230
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 230
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 230
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 230
				, "stmt": [{
					"": "result := result * x + polynomial[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 231
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 233
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 233
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 289056
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289057
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 289059
		, "size": 4
	}, {
		"instruction": "jmp +25"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289063
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289067
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289069
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289071
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289072
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289074
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 289076
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 289080
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289081
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289082
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 289084
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289088
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289090
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 289091
		, "size": 1
	}, {
		"instruction": "jz -25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289092
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289096
		, "size": 4
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289100
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289102
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 236
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 236
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 236
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 236
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 236
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 289104
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 236
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 237
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 237
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 237
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 237
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 237
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 238
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 238
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 238
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 238
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 238
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 238
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 238
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 238
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 239
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 239
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 239
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 242
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 243
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 243
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 243
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 243
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 243
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 243
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 243
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 243
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 244
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 244
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 244
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 247
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 247
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289104
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289106
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 289108
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289109
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289113
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289115
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289117
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 289119
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 289120
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289121
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289125
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289130
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289132
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289133
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289137
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289139
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289141
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 289143
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 289144
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289145
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289149
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289154
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289156
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289157
		, "size": 1
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289158
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289160
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 249
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 289168
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 250
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 250
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 250
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 250
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 250
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 251
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 251
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 251
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 251
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 251
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 251
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 251
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 251
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 252
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 252
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 252
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 255
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 256
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 256
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 256
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 256
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 256
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 256
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 256
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 256
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 257
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 257
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 257
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 260
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 260
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289168
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289170
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 289172
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289173
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289177
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289179
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289181
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289183
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 289184
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289185
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289189
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289194
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289196
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289197
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289201
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289203
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289205
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289207
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 289208
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289209
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289213
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289218
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289220
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289221
		, "size": 1
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289222
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289224
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 263
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 263
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 263
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 263
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 335
	, "offs": 289232
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 263
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 277
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 278
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 278
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 278
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 278
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 278
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 278
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 279
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 280
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 283
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 284
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 285
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 285
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 285
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 285
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 285
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 285
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 286
					, "value": "e"
				}, {
					"": "y := modf(x, e);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 287
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 288
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 290
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, f);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 291
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 292
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 294
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 295
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 296
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 297
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 298
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 300
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 300
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 300
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 300
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 300
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 301
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 303
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 303
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 303
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 303
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 303
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 304
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 307
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 308
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 309
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 310
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 310
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 310
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 310
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289232
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289234
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 289236
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 289237
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289238
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 289242
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289243
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 289245
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289249
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 289251
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289252
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289254
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289263
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289272
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289273
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289274
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289276
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289278
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 289287
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289288
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 289292
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289293
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289295
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 289299
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 289304
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289305
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289309
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289311
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 289313
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289314
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 289315
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289316
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289325
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289327
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289328
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 289332
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 289337
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289338
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289342
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289346
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289348
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289357
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289359
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289360
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 289361
		, "size": 1
	}, {
		"instruction": "set.x1 sp(10)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289362
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289364
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289368
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289372
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 289374
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289375
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289377
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 289379
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289380
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289381
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289383
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289385
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 289387
		, "size": 1
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289388
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289390
		, "size": 2
	}, {
		"instruction": "b32.and 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 289392
		, "size": 2
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 289394
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289396
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289400
		, "size": 2
	}, {
		"instruction": "b32.and 0x001"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 289402
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289404
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289408
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289417
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289419
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289420
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289422
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289424
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 289429
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289430
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 289434
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289435
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289437
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289439
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289440
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289449
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289451
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289452
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289461
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289462
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289464
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289465
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289474
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289475
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289477
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289478
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289487
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289488
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289490
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289491
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289500
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289501
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289503
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289504
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289506
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289515
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289516
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289518
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289519
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289528
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289529
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289531
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289532
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289541
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289542
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289544
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289545
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289554
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289555
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289557
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289559
		, "size": 1
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289560
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289562
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289566
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 314
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 314
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 314
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 314
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 314
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 314
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 317
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 317
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 317
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 317
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 317
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 317
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 317
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 320
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 320
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 320
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 371
	, "offs": 289568
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 320
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 333
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 334
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 336
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 336
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 336
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 336
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 336
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 336
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 337
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 338
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 340
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 342
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 343
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 344
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 346
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 346
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 346
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 346
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 347
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 347
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 347
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 347
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 347
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 347
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 348
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 349
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 351
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 351
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "lib/std/math.ci"
								, "line": 351
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 351
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 351
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/std/math.ci"
								, "line": 351
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/math.ci"
									, "line": 352
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/math.ci"
									, "line": 353
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/std/math.ci"
								, "line": 355
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "lib/std/math.ci"
									, "line": 355
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "lib/std/math.ci"
										, "line": 355
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/std/math.ci"
											, "line": 355
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "lib/std/math.ci"
											, "line": 355
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "lib/std/math.ci"
										, "line": 355
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "lib/std/math.ci"
											, "line": 356
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "lib/std/math.ci"
											, "line": 357
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 360
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 361
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 362
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 364
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 364
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 364
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 365
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 365
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 365
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 365
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 365
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 365
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 366
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 366
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 368
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 370
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 370
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 370
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 371
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 371
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 371
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 373
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 373
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289568
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289569
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289570
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 289572
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 289573
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289574
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289578
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 289580
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289581
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289583
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289588
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 289592
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289593
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289602
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289604
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289605
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289614
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289615
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 289617
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289618
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289620
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 289624
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 289629
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289630
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289634
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 289636
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289637
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 289642
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289643
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289645
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 289646
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 289647
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289651
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289653
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 289658
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289659
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289663
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289672
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289674
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289675
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289677
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289682
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 289686
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289687
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289691
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289693
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 289698
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289699
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289703
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 289707
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 289708
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289709
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 289713
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289714
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289719
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 289723
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 289724
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 289728
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289730
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 289735
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289736
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289740
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289749
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 289751
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289752
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289754
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 289758
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 289759
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289760
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 289764
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289765
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289767
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289769
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289770
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289779
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289781
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289782
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289791
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289792
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289794
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289795
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289804
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289805
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289807
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289808
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289817
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289818
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289820
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289821
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289830
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289831
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289833
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289834
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289836
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289845
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289846
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289848
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289849
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289858
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289859
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 289861
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289862
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 289871
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289872
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289873
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 289877
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289878
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289882
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 289884
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 289885
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289886
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 289890
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289891
		, "size": 1
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289892
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289894
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289898
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289899
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289908
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289910
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289911
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289913
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 289917
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289918
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289922
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 289924
		, "size": 1
	}, {
		"instruction": "set.x2 sp(16)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289925
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289927
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289931
		, "size": 1
	}, {
		"instruction": "set.x2 sp(14)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289932
		, "size": 2
	}, {
		"instruction": "inc.sp(-36)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 289934
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 289938
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 377
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 377
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 377
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 241
	, "offs": 289944
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 377
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 389
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 390
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 390
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 390
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 390
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 390
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 390
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 391
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 392
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 395
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 395
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 395
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 395
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 395
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 395
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 396
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 396
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 396
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 396
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 396
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 396
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 399
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 400
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 400
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 400
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 400
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 400
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 401
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 403
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 404
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 405
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 406
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 409
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 409
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 409
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 410
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 410
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 410
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 412
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 412
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 289944
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289945
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 289947
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 289948
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289949
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289953
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 289955
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 289956
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 289958
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 289963
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 289967
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289968
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289970
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 289979
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 289980
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 289984
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 289986
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 289990
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 289999
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290000
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290002
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290006
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290007
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290008
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290010
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 290019
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290020
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290024
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290026
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290030
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290032
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290033
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 290037
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290038
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290047
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290048
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290050
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290054
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290056
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290058
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290059
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290068
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290070
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290071
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290080
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290081
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290083
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290084
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290093
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290094
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290096
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290097
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290106
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290107
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290109
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290110
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290112
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290114
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290116
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290125
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290126
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290128
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290129
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290138
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290139
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290141
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290142
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290151
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290152
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290153
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290155
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290159
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290163
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290164
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290168
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290170
		, "size": 1
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290171
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290173
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290177
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290178
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290180
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290184
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 416
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 416
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 416
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 290192
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 416
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 417
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 417
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 417
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 417
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 417
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 417
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 418
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 420
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 420
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 420
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 420
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 420
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 420
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 421
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 421
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 421
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 421
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 421
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 421
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 423
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 423
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 423
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 423
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 423
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 423
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 423
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 423
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "lib/std/math.ci"
										, "line": 423
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 423
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 423
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290192
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290194
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 290195
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290196
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290200
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290202
		, "size": 1
	}, {
		"instruction": "set.x2 sp(3)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290203
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290205
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290207
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 290216
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290217
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290221
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290223
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290227
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290236
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290237
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290239
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290240
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290242
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290246
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290248
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290249
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290253
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290254
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290263
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290264
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290266
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 432
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 432
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 432
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 166
	, "offs": 290272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 432
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 433
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 433
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 433
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 433
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 433
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 433
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 435
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 435
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 438
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 439
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 439
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 439
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 439
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 439
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 439
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 440
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 441
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 444
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 444
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 444
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 444
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 444
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 444
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 446
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 446
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 449
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 450
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 450
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 450
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 450
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 450
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 451
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 453
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 454
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 457
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 457
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 457
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 458
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 458
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 458
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 460
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 460
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290272
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290274
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 290275
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290276
		, "size": 4
	}, {
		"instruction": "mov.x2 sp(3, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 290280
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290283
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290284
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290285
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290287
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 290288
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290289
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 290293
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290298
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 290302
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290303
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290305
		, "size": 1
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290306
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290308
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290310
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 290319
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290320
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 290324
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290325
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290326
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290328
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290332
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290333
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290342
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290344
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290346
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 290347
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290348
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290352
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290354
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 290363
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290364
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290368
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 290377
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290386
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290387
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290389
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290391
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 290395
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290396
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290398
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290402
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290404
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290406
		, "size": 4
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290410
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290412
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290416
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290417
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290421
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290423
		, "size": 1
	}, {
		"instruction": "set.x2 sp(8)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290424
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290426
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290430
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290431
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290433
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290437
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 467
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 467
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 467
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 467
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 467
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 467
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 467
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 467
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 467
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 467
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 467
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.deg2rad(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "deg2rad"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 490
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 490
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 490
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64(x * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 490
		, "args": [{
			"": "x * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 490
			, "left": {
				"": "x * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 490
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 490
					, "value": "x"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 490
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 490
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 490
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.rad2deg(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rad2deg"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 491
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 491
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 491
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64(x * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 491
		, "args": [{
			"": "x * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 491
			, "left": {
				"": "x * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 491
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 491
					, "value": "x"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 491
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 491
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 491
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "lib/std/math.Complex.ci"
	, "line": 3
	, "size": 16
	, "offs": 92792
	, "static": true
	, "const": true
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "lib/std/math.Complex.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "lib/std/math.Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/math.Complex.ci"
		, "line": 5
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 20
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 20
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 290440
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.Complex.ci"
		, "line": 20
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.Complex.ci"
			, "line": 21
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 22
					}, {
						"": ".result.im := (0)"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result.im"
							, "kind": "."
							, "type": "float64"
							, "left": {
								"": ".result"
								, "kind": ".variable"
								, "type": "Complex"
								, "file": "lib/std/math.Complex.ci"
								, "line": 20
								, "value": ".result"
							}
							, "right": {
								"": "im"
								, "kind": ".variable"
								, "type": "float64"
								, "value": "im"
							}
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.Complex.ci"
							, "line": 5
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.Complex.ci"
								, "line": 5
								, "value": "0"
							}]
						}
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x2 sp(3, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 290440
		, "size": 3
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290443
		, "size": 1
	}, {
		"instruction": "set.x2 sp(7)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290444
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290446
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 25
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 25
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 290448
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.Complex.ci"
		, "line": 25
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.Complex.ci"
			, "line": 26
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 27
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 28
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x2 sp(5, 3)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 290448
		, "size": 3
	}, {
		"instruction": "mov.x2 sp(7, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 290451
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290454
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 52
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 52
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 52
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(-a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "-a.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 52
			, "right": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 52
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 52
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 52
					, "value": "re"
				}
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 52
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 52
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 52
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 52
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 54
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 54
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 54
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re + b.re, a.im + b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "a.re + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 54
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "re"
				}
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "re"
				}
			}
		}, {
			"": "a.im + b.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 54
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "im"
				}
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 54
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 54
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 55
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 55
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 55
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 55
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 55
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 55
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 55
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 55
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 55
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 55
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 55
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 55
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 56
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 56
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 56
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 56
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 56
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 56
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 56
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 56
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 56
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 56
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 56
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 56
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 56
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 58
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 58
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 58
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re - b.re, a.im - b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "a.re - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 58
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "re"
				}
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "re"
				}
			}
		}, {
			"": "a.im - b.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 58
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "im"
				}
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 58
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 58
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 59
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 59
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 59
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 59
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 59
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 59
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 59
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 59
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 59
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 60
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 60
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 60
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 60
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 60
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 60
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 60
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 60
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 60
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 60
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 60
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 60
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "a.re * b.re - a.im * b.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 62
			, "left": {
				"": "a.re * b.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
				, "right": {
					"": "b.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * b.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
				, "right": {
					"": "b.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
			}
		}, {
			"": "a.re * b.im + a.im * b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 62
			, "left": {
				"": "a.re * b.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
				, "right": {
					"": "b.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
			}
			, "right": {
				"": "a.im * b.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 62
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "im"
					}
				}
				, "right": {
					"": "b.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 62
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "b"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 62
						, "value": "re"
					}
				}
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 63
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 63
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 63
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 63
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 63
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 63
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 63
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 63
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 63
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 63
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 63
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 63
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 63
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 63
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 64
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 64
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 64
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 64
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 64
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 123
	, "offs": 290456
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.Complex.ci"
		, "line": 66
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.Complex.ci"
			, "line": 70
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/math.Complex.ci"
				, "line": 70
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 70
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 70
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math.Complex.ci"
							, "line": 70
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.Complex.ci"
							, "line": 70
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 70
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 70
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math.Complex.ci"
							, "line": 70
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.Complex.ci"
							, "line": 70
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.Complex.ci"
				, "line": 70
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 71
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 72
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.Complex.ci"
					, "line": 73
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math.Complex.ci"
								, "line": 74
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math.Complex.ci"
								, "line": 75
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 78
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 79
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.Complex.ci"
			, "line": 80
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 81
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 82
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290456
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290457
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 290459
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 290464
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290465
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 290469
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290470
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 290472
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 290477
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290478
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 290482
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 290483
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290487
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290489
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290491
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290492
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290494
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290496
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290498
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290499
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290500
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290502
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(15)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290504
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290506
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290507
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290508
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290510
		, "size": 1
	}, {
		"instruction": "set.x2 sp(15)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290511
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290513
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290515
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(13)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290517
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290519
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 290520
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290521
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290523
		, "size": 1
	}, {
		"instruction": "set.x2 sp(17)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290524
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290526
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290530
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290531
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290535
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290537
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290539
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290540
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290542
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290544
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290546
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290547
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290548
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290550
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290552
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(13)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290553
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290555
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290556
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290558
		, "size": 1
	}, {
		"instruction": "set.x2 sp(15)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290559
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290561
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290563
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290565
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290566
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 290568
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290569
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290571
		, "size": 1
	}, {
		"instruction": "set.x2 sp(17)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290572
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290574
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290578
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 86
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 86
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 86
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 86
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 87
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 87
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 87
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 87
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 87
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 87
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 89
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 89
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 89
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 89
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 89
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 89
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 89
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 89
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 89
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 90
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 90
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 90
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 90
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 90
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 90
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 90
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 93
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 93
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 290584
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.Complex.ci"
		, "line": 93
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 94
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.Complex.ci"
			, "line": 95
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 96
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 97
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290584
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290586
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290588
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290589
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(7)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290591
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290593
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290594
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(3)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290595
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290597
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290599
		, "size": 1
	}, {
		"instruction": "set.x2 sp(9)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290600
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290602
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290604
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290605
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 290607
		, "size": 1
	}, {
		"instruction": "set.x2 sp(11)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290608
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290610
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290614
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 101
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 101
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 101
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 101
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 101
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 101
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 101
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 101
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 101
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 101
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 103
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 103
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 103
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 103
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 103
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 103
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 103
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 103
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 105
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 105
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 105
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 105
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 105
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 105
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 105
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 105
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 100
	, "offs": 290616
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.Complex.ci"
		, "line": 107
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 108
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 109
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 110
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 111
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.Complex.ci"
			, "line": 112
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 113
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math.Complex.ci"
						, "line": 114
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x4 sp(5)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 290616
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290618
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290620
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290622
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290623
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290625
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290627
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290628
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290629
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290633
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290635
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(7)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 290639
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290641
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290643
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290645
		, "size": 4
	}, {
		"instruction": "set.x2 sp(4)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290649
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290651
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290655
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290657
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290659
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290660
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290662
		, "size": 2
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290664
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290668
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 290669
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290670
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(9)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290672
		, "size": 2
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290674
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290678
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 290680
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290681
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290683
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290684
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290688
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290689
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290691
		, "size": 2
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290693
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290697
		, "size": 1
	}, {
		"instruction": "set.x2 sp(19)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290698
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290700
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 290702
		, "size": 2
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 290704
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 290708
		, "size": 1
	}, {
		"instruction": "set.x2 sp(21)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 290709
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290711
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290715
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.Complex.ci"
		, "line": 117
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 117
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 117
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 117
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 117
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 119
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 119
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 119
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 119
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 119
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 119
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 119
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 119
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 119
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 119
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 119
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 119
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math.Complex.ci"
							, "line": 119
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.Complex.ci"
							, "line": 119
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 119
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 119
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 119
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 120
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 120
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 120
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 120
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 120
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 120
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 120
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 120
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 120
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 120
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 120
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 120
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math.Complex.ci"
							, "line": 120
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.Complex.ci"
							, "line": 120
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 120
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 120
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 120
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 132
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 133
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 133
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 133
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 133
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 133
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 133
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 133
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 133
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 135
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 135
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 135
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 135
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 135
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 135
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 135
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 135
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math.Complex.ci"
			, "line": 135
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 136
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 136
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 136
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 136
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 136
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 136
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 136
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 136
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 136
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 136
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math.Complex.ci"
			, "line": 136
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 137
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 137
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 137
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 137
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 137
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 137
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 137
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.Complex.ci"
						, "line": 137
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 137
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math.Complex.ci"
				, "line": 137
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 137
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 137
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 137
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.Complex.ci"
						, "line": 137
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 137
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math.Complex.ci"
				, "line": 137
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 138
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 138
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 138
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 138
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 138
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 138
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 138
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.Complex.ci"
						, "line": 138
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 138
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math.Complex.ci"
				, "line": 138
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 138
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 138
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 138
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.Complex.ci"
						, "line": 138
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 138
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math.Complex.ci"
				, "line": 138
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 140
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 140
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 140
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 140
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 140
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 140
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 141
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 141
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 141
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 141
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 141
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 141
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 142
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 142
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 142
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 142
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 142
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 142
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 143
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 143
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 143
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 143
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math.Complex.ci"
			, "line": 143
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 143
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 145
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 145
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 145
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 145
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 145
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 145
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 145
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 145
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 145
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 145
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 145
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 145
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 145
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 145
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math.Complex.ci"
					, "line": 145
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 145
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.Complex.ci"
				, "line": 145
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math.Complex.ci"
					, "line": 145
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math.Complex.ci"
						, "line": 145
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.Complex.ci"
						, "line": 145
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "lib/std/math.Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math.Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 146
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 146
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.Complex.ci"
			, "line": 146
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math.Complex.ci"
				, "line": 146
				, "value": "x"
			}]
		}]
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 38
	, "offs": 290720
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 3
		, "stmt": [{
			"": "if ((str) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 4
			, "test": {
				"": "(str) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 4
				, "left": {
					"": "(str)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "lib/std/string.ci"
					, "line": 4
					, "args": [{
						"": "str"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "lib/std/string.ci"
						, "line": 4
						, "value": "str"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "lib/std/string.ci"
					, "line": 4
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 4
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 5
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 5
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 7
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 8
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 8
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 8
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 8
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 8
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 8
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 8
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 8
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 8
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 10
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 10
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290720
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 290722
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 290727
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290728
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290732
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 290733
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290735
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290736
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290737
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 290741
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290745
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290747
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290749
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290750
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 290751
		, "size": 4
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 290755
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290757
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 14
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 14
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 290760
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 14
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 15
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 15
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 15
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 15
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 15
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 15
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 15
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 15
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 15
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 15
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 15
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 16
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 16
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 16
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "lib/std/string.ci"
								, "line": 16
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/string.ci"
								, "line": 16
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 16
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 16
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 17
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 17
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 20
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 20
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 20
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290760
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290761
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290765
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290767
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290769
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290770
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290771
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290775
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 290776
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290777
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 290781
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290783
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 290784
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290788
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290790
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290792
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290793
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 290794
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290798
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 290802
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 290807
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290809
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 24
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 24
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 290816
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 24
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 25
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 26
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 26
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 26
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 26
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 26
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 26
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 26
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 26
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 26
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 26
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 26
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 27
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 27
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 27
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "lib/std/string.ci"
								, "line": 27
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/string.ci"
								, "line": 27
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 27
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 27
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 28
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 31
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 31
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 290816
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290821
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290822
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290826
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290828
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290830
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290831
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290832
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290836
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 290837
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290838
		, "size": 4
	}, {
		"instruction": "mov.x1 sp(1, 0)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 290842
		, "size": 3
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 290845
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290849
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290851
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290853
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290854
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 290855
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290859
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 290863
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290865
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 35
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 35
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 35
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 35
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/std/string.ci"
		, "line": 35
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 35
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 35
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 35
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 290872
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 35
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 36
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 36
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 36
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 36
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 36
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "lib/std/string.ci"
							, "line": 36
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 36
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 36
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 36
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 36
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 36
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 36
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 36
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 36
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 37
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 37
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 37
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 37
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 37
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 37
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 37
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 37
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 37
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 37
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 37
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 38
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "lib/std/string.ci"
									, "line": 38
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 41
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 41
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290872
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290873
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290877
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290878
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290880
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290882
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290883
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290884
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290886
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290888
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290889
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290890
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 290892
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290893
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290897
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 290898
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 290899
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290903
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290904
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 290908
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290909
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290913
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 290914
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290918
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290920
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 290922
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 290923
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290924
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 290925
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290926
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290930
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 290934
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290939
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 290943
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290944
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 44
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 44
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 44
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 44
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/std/string.ci"
		, "line": 44
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 44
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 44
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 44
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 126
	, "offs": 290952
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 44
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 45
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 46
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 47
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 47
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 47
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 47
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 47
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 48
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "lib/std/string.ci"
							, "line": 48
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 50
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 50
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 50
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 50
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 50
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 50
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 50
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 50
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 50
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 50
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 50
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 51
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 51
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 51
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 51
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 51
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 51
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 51
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/std/string.ci"
											, "line": 51
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/std/string.ci"
											, "line": 51
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 51
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 51
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 51
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 51
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 51
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 51
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 52
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "lib/std/string.ci"
									, "line": 52
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 55
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 55
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290952
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290953
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 290955
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 290960
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290961
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290965
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290966
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 290968
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 290973
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290974
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290978
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 290980
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 290982
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 290983
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290987
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 290988
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 290992
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 290993
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 290997
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 290998
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 290999
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291003
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291004
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291006
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291008
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 291010
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291011
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291013
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291014
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291015
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291016
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291018
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291020
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291021
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291022
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 291024
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291025
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291029
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 291030
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291031
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291035
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291036
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291040
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291041
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 291045
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291046
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291050
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291052
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291054
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291055
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291059
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291063
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291068
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291072
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291073
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 291077
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/std/string.ci"
		, "line": 58
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 58
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 58
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 58
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 291080
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 58
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 59
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 60
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 60
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 60
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 60
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 60
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 60
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 60
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 60
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 60
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 60
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 60
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 61
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 62
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 62
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 62
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 62
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 62
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 62
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 62
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 62
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 63
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 66
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 66
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291080
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291081
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291082
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291086
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291087
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291089
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291091
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291092
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291093
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291095
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291097
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291098
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291099
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 291101
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291102
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291106
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291108
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291110
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291112
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291113
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291114
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 291115
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291116
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291120
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291124
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291128
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291130
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 291131
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291132
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291136
		, "size": 4
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291140
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 291142
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 70
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 70
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 70
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 70
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 291216
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 70
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 71
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 81
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 81
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 81
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 81
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 81
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 81
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291216
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291217
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291221
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291222
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 291227
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291228
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291232
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291233
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291237
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291238
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 291243
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291244
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 291248
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291249
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 291251
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 84
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 84
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 84
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 291256
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 84
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 85
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 85
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 85
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 85
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291256
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291260
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291261
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291265
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 291266
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291267
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 291269
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 88
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 88
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 88
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 89
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 89
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 89
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 89
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 89
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 89
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 89
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 89
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 90
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 90
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 90
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 90
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 90
			, "value": "caseCmp"
		}]
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 92
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "lib/std/string.ci"
				, "line": 92
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 92
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 92
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "lib/std/string.ci"
	, "line": 106
	, "size": 16
	, "offs": 123848
	, "static": true
	, "const": true
}, {
	"": "FormatFlags.radix"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "radix"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/std/string.ci"
	, "line": 107
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 107
		, "value": "10"
	}
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "lib/std/string.ci"
	, "line": 108
	, "size": 1
	, "offs": 4
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 108
		, "value": "0"
	}
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/std/string.ci"
	, "line": 109
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 109
		, "value": "0"
	}
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/std/string.ci"
	, "line": 110
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 110
		, "value": "0"
	}
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 113
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 113
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 113
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 113
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 113
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 84
	, "offs": 291272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 113
		, "stmt": [{
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 114
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 114
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 114
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 114
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 114
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 114
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 114
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 114
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 114
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 114
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 114
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 115
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 115
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 115
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 115
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "lib/std/string.ci"
								, "line": 115
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "lib/std/string.ci"
									, "line": 115
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "lib/std/string.ci"
									, "line": 115
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 115
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 116
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 118
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 119
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 122
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 122
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 122
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 122
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 122
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/std/string.ci"
							, "line": 122
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/string.ci"
							, "line": 122
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 122
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 123
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 125
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 126
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 126
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291272
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291273
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291277
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291279
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291281
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291282
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291286
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291290
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291292
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291294
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291295
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291296
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291298
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291300
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291301
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291302
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291304
		, "size": 4
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291308
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291310
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291314
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291316
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291318
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291319
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291320
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291324
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291328
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291330
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291332
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291333
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291337
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291339
		, "size": 4
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291343
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291345
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291346
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291348
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291350
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291351
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(5, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 291352
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 291355
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, sign: char, value: uint32, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "sign"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "sign"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 657
	, "offs": 291376
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 129
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 130
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 131
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 133
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "lib/std/string.ci"
			, "line": 134
			, "value": "digits"
		}, {
			"": "radix"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 136
			, "value": "radix"
		}, {
			"": "assert(radix > 1, \"radix is too small\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 137
		}, {
			"": "assert(radix < (radixDigits.length), \"radix is too big\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 138
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 141
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 141
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "lib/std/string.ci"
					, "line": 141
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "lib/std/string.ci"
					, "line": 141
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 141
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint32"
				, "file": "lib/std/string.ci"
				, "line": 141
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "lib/std/string.ci"
					, "line": 141
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint32"
					, "file": "lib/std/string.ci"
					, "line": 141
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 141
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 141
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 141
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 141
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 142
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 144
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 144
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 144
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 144
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 144
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 145
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 148
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 150
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 151
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 151
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 151
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 151
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 151
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 152
				}]
			}
		}, {
			"": "if ((sign) != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 156
			, "test": {
				"": "(sign) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 156
				, "left": {
					"": "(sign)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 156
					, "args": [{
						"": "sign"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 156
						, "value": "sign"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 156
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 156
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 157
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 158
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 158
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/std/string.ci"
							, "line": 158
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 158
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 158
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 160
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "lib/std/string.ci"
								, "line": 160
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 160
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 160
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "lib/std/string.ci"
								, "line": 160
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 160
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 160
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 160
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 160
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/std/string.ci"
								, "line": 160
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/string.ci"
									, "line": 161
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/string.ci"
									, "line": 162
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/string.ci"
									, "line": 163
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 166
				}, {
					"": "output[pos] := sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 167
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 168
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 172
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 172
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 172
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 172
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 172
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 172
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 172
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 172
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 172
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 172
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 173
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 174
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 175
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 179
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 179
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 179
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 179
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 179
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 179
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 179
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 179
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 179
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 179
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 179
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 180
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 181
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 182
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 185
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 185
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 185
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 185
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 185
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/std/string.ci"
							, "line": 185
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/string.ci"
							, "line": 185
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 185
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 186
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 188
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 189
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 189
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291376
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291377
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291381
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 291383
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291384
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291386
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 291391
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291392
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291396
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291400
		, "size": 5
	}, {
		"instruction": "load.c32 137"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291405
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291410
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291415
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291420
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291425
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291430
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 291434
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291438
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 291440
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291444
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291445
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291449
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291453
		, "size": 5
	}, {
		"instruction": "load.c32 138"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291458
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291463
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291468
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291473
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291478
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291483
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 291487
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291491
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 291495
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291499
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291501
		, "size": 2
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 291503
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291504
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291505
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291506
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291510
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291512
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291516
		, "size": 2
	}, {
		"instruction": "set.x1 sp(25)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291518
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291520
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291521
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291522
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291524
		, "size": 2
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 291526
		, "size": 1
	}, {
		"instruction": "set.x1 sp(25)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291527
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291529
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291531
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 291532
		, "size": 1
	}, {
		"instruction": "jnz -38"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291533
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(21)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291537
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291539
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 291540
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291541
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291545
		, "size": 5
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291550
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291554
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291556
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291560
		, "size": 2
	}, {
		"instruction": "set.x1 sp(25)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291562
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291564
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291565
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291566
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291568
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 291572
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291573
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 291575
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291576
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291578
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291582
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291583
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291587
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291588
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 291589
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291590
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291594
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291599
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291603
		, "size": 1
	}, {
		"instruction": "load.sp(+108)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291604
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291608
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291609
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 291610
		, "size": 1
	}, {
		"instruction": "jnz +200"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291611
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291615
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291617
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291621
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291623
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 291624
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291628
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291632
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291633
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 291638
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291639
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291643
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291644
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291645
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291649
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291653
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291655
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291657
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291658
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291662
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291666
		, "size": 5
	}, {
		"instruction": "load.c32 161"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291671
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291676
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291681
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291686
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291691
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291696
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 291701
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291705
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291709
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291710
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291712
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291714
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291715
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291716
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291718
		, "size": 4
	}, {
		"instruction": "set.x1 sp(29)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291722
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291724
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291726
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291730
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291732
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291734
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 291735
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291736
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291740
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291742
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291744
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291745
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291749
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291753
		, "size": 5
	}, {
		"instruction": "load.c32 166"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291758
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291763
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291768
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291773
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291778
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291783
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 291788
		, "size": 4
	}, {
		"instruction": "load.sp(+108)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291792
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291796
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291797
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291799
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291801
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291802
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291803
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291805
		, "size": 4
	}, {
		"instruction": "set.x1 sp(29)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291809
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291811
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291815
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291817
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291819
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291820
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291824
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291828
		, "size": 5
	}, {
		"instruction": "load.c32 173"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291833
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291838
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291843
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291848
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291853
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291858
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 291863
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291867
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291871
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291872
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291874
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291876
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291877
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291878
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291880
		, "size": 4
	}, {
		"instruction": "set.x1 sp(29)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291884
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291886
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291888
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291892
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291894
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291896
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 291897
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291898
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 291902
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291903
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291907
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(32)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291909
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291911
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 291912
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 291916
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291920
		, "size": 5
	}, {
		"instruction": "load.c32 180"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291925
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291930
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 291935
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291940
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291945
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 291950
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 291955
		, "size": 4
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 291959
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291963
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291965
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 291967
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291968
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 291969
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291970
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291972
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 291974
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 291975
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291976
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291978
		, "size": 4
	}, {
		"instruction": "set.x1 sp(30)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 291982
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 291984
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291988
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 291990
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 291992
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 291993
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 291997
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292001
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292003
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 292005
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 292006
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292010
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292012
		, "size": 4
	}, {
		"instruction": "set.x1 sp(29)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292016
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292018
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292019
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292021
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 292023
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 292024
		, "size": 1
	}, {
		"instruction": "mov.x1 sp(31, 28)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292025
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292028
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292032
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 192
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 192
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 192
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 192
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "lib/std/string.ci"
		, "line": 192
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 192
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 23
	, "offs": 292040
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 192
		, "stmt": [{
			"": "return .result := append(output, pos, 0, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 193
			, "stmt": {
				"": ".result := append(output, pos, 0, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, 0, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 193
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "lib/std/string.ci"
						, "line": 193
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 193
						, "value": "pos"
					}, {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 193
						, "value": "0"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 193
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "lib/std/string.ci"
						, "line": 193
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292040
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(5)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 292041
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292043
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292045
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292046
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292048
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292050
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292055
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292056
		, "size": 4
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292060
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292062
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 196
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 196
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 196
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 196
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 196
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 196
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 292064
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 196
		, "stmt": [{
			"": "sign"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 197
			, "value": "sign"
		}, {
			"": "if (value < 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 198
			, "test": {
				"": "value < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 198
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 198
					, "value": "value"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 198
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 198
				, "stmt": [{
					"": "sign := ('-');"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 199
				}, {
					"": "value := -value;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 200
				}]
			}
		}, {
			"": "return .result := append(output, pos, sign, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 202
			, "stmt": {
				"": ".result := append(output, pos, sign, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, sign, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 202
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "lib/std/string.ci"
						, "line": 202
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 202
						, "value": "pos"
					}, {
						"": "sign"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 202
						, "value": "sign"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 202
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "lib/std/string.ci"
						, "line": 202
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292064
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292065
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292067
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 292068
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 292069
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292073
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292078
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292080
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 292082
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292083
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292085
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 292086
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292088
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292090
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292092
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292094
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292096
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292101
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292102
		, "size": 4
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292106
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292108
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292112
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 205
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 205
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 205
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 205
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "lib/std/string.ci"
		, "line": 205
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 25
	, "offs": 292136
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 205
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 206
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 207
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 207
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "lib/std/string.ci"
						, "line": 207
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 207
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 207
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "lib/std/string.ci"
						, "line": 207
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292136
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 292137
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292139
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292141
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292143
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292148
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292153
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292154
		, "size": 4
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292158
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292160
		, "size": 1
	}]
}, {
	"": "vec2d"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "lib/vec/vec2d.ci"
	, "line": 3
	, "size": 16
	, "offs": 131360
	, "static": true
	, "const": true
}, {
	"": "vec2d.x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "x"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "lib/vec/vec2d.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec2d.y"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "y"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "lib/vec/vec2d.ci"
	, "line": 5
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "vec2d(x: float64, y: float64): vec2d"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec2d"
	, "type": "function"
	, "file": "lib/vec/vec2d.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 8
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/vec/vec2d.ci"
		, "line": 8
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "file": "lib/vec/vec2d.ci"
		, "line": 8
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 292168
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/vec/vec2d.ci"
		, "line": 8
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/vec/vec2d.ci"
			, "line": 9
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec2d"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/vec2d.ci"
						, "line": 10
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/vec2d.ci"
						, "line": 11
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x2 sp(5, 3)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 292168
		, "size": 3
	}, {
		"instruction": "mov.x2 sp(7, 1)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 292171
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292174
		, "size": 1
	}]
}, {
	"": "sub(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/vec/vec2d.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 15
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 15
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 15
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 15
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec2d.ci"
			, "line": 15
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/vec/vec2d.ci"
				, "line": 15
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/vec/vec2d.ci"
					, "line": 15
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/vec/vec2d.ci"
				, "line": 15
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/vec/vec2d.ci"
					, "line": 15
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec2d.ci"
				, "line": 15
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec2d.ci"
					, "line": 15
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec2d.ci"
					, "line": 15
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "dot(a: vec2d, b: vec2d): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dot"
	, "type": "function"
	, "file": "lib/vec/vec2d.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/vec/vec2d.ci"
		, "line": 16
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/vec/vec2d.ci"
		, "line": 16
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a.x * b.x + a.y * b.y"
		, "kind": "+"
		, "type": "float64"
		, "file": "lib/vec/vec2d.ci"
		, "line": 16
		, "left": {
			"": "a.x * b.x"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/vec/vec2d.ci"
			, "line": 16
			, "left": {
				"": "a.x"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/vec/vec2d.ci"
				, "line": 16
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "a"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "x"
				}
			}
			, "right": {
				"": "b.x"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/vec/vec2d.ci"
				, "line": 16
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "b"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "x"
				}
			}
		}
		, "right": {
			"": "a.y * b.y"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/vec/vec2d.ci"
			, "line": 16
			, "left": {
				"": "a.y"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/vec/vec2d.ci"
				, "line": 16
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "a"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "y"
				}
			}
			, "right": {
				"": "b.y"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/vec/vec2d.ci"
				, "line": 16
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "b"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/vec/vec2d.ci"
					, "line": 16
					, "value": "y"
				}
			}
		}
	}
}, {
	"": "vec4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "lib/vec/vec4f.ci"
	, "line": 3
	, "size": 16
	, "offs": 133456
	, "static": true
	, "const": true
}, {
	"": "vec4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec4f"
	, "type": "float32[4]"
	, "file": "lib/vec/vec4f.ci"
	, "line": 4
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f..anonymous"
	, "kind": "variable"
	, "cast": "val"
	, "name": ".anonymous"
	, "owner": "vec4f"
	, "type": "vec4f..anonymous"
	, "file": "lib/vec/vec4f.ci"
	, "line": 84
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f..anonymous.x"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "x"
	, "owner": "vec4f..anonymous"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f..anonymous.y"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "y"
	, "owner": "vec4f..anonymous"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "vec4f..anonymous.z"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "z"
	, "owner": "vec4f..anonymous"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 8
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "vec4f..anonymous.w"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "w"
	, "owner": "vec4f..anonymous"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 9
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "vec4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 6
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 6
		, "value": "x"
	}
}, {
	"": "vec4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 8
		, "value": "z"
	}
}, {
	"": "vec4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/vec/vec4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 9
		, "value": "w"
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 21
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 21
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 21
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 21
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 21
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 292176
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/vec/vec4f.ci"
		, "line": 21
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/vec/vec4f.ci"
			, "line": 22
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/vec4f.ci"
						, "line": 22
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/vec4f.ci"
						, "line": 22
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/vec4f.ci"
						, "line": 22
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/vec4f.ci"
						, "line": 22
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x1 sp(5, 4)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292176
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(6, 3)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292179
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(7, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292182
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(8, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292185
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292188
		, "size": 1
	}]
}, {
	"": "vec4f(x: float32, y: float32, z: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 24
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 24
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 24
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(x, y, z, 0.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 24
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 24
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 24
			, "value": "z"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 24
			, "value": "0.000000"
		}]
	}
}, {
	"": "vec4f(xyz: vec4f, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 25
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "xyz"
		, "kind": "variable"
		, "cast": "val"
		, "name": "xyz"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 25
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(xyz.x, xyz.y, xyz.z, w)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "xyz.x"
			, "kind": "."
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 25
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 25
				, "value": "xyz"
			}
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 25
				, "value": "x"
			}
		}, {
			"": "xyz.y"
			, "kind": "."
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 25
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 25
				, "value": "xyz"
			}
			, "right": {
				"": "y"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 25
				, "value": "y"
			}
		}, {
			"": "xyz.z"
			, "kind": "."
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 25
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 25
				, "value": "xyz"
			}
			, "right": {
				"": "z"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 25
				, "value": "z"
			}
		}, {
			"": "w"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 25
			, "value": "w"
		}]
	}
}, {
	"": "vec4f(val: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 26
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(val, val, val, val)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 26
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 26
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 26
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 26
			, "value": "val"
		}]
	}
}, {
	"": "neg(rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 56
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 56
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 56
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(emit(struct(rhs), neg.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 56
		, "args": [{
			"": "emit(struct(rhs), neg.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 56
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 56
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 56
					, "value": "rhs"
				}]
			}, {
				"": "neg.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 56
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 56
					, "value": "neg"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 56
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 57
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 57
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 57
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), add.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 57
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), add.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 57
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 57
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 57
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 57
					, "value": "rhs"
				}]
			}, {
				"": "add.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 57
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 57
					, "value": "add"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 57
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 58
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 58
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 58
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), sub.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 58
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), sub.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 58
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 58
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 58
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 58
					, "value": "rhs"
				}]
			}, {
				"": "sub.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 58
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 58
					, "value": "sub"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 58
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 59
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), mul.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 59
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), mul.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 59
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 59
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 59
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 59
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 59
					, "value": "rhs"
				}]
			}, {
				"": "mul.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 59
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 59
					, "value": "mul"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 59
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "div(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 60
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 60
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 60
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 60
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), div.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 60
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), div.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 60
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 60
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 60
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 60
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 60
					, "value": "rhs"
				}]
			}, {
				"": "div.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 60
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 60
					, "value": "div"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 60
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "min(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32(emit(struct(rhs), struct(lhs), min.p4f))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 62
		, "args": [{
			"": "emit(struct(rhs), struct(lhs), min.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 62
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 62
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 62
					, "value": "rhs"
				}]
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 62
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 62
					, "value": "lhs"
				}]
			}, {
				"": "min.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 62
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 62
					, "value": "min"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 62
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "max(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 63
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 63
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 63
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32(emit(struct(rhs), struct(lhs), max.p4f))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 63
		, "args": [{
			"": "emit(struct(rhs), struct(lhs), max.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 63
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 63
					, "value": "rhs"
				}]
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 63
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 63
					, "value": "lhs"
				}]
			}, {
				"": "max.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/vec/vec4f.ci"
				, "line": 63
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 63
					, "value": "max"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/vec/vec4f.ci"
					, "line": 63
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "dp3(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 68
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 68
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 68
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 68
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32(emit(struct(rhs), struct(lhs), p4x.dp3))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 68
		, "args": [{
			"": "emit(struct(rhs), struct(lhs), p4x.dp3)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 68
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 68
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 68
					, "value": "rhs"
				}]
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 68
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 68
					, "value": "lhs"
				}]
			}, {
				"": "p4x.dp3"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 68
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 68
					, "value": "p4x"
				}
				, "right": {
					"": "dp3"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 68
					, "value": "dp3"
				}
			}]
		}]
	}
}, {
	"": "dph(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 69
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32(emit(struct(rhs), struct(lhs), p4x.dph))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(rhs), struct(lhs), p4x.dph)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 69
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 69
					, "value": "rhs"
				}]
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 69
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 69
					, "value": "lhs"
				}]
			}, {
				"": "p4x.dph"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 69
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 69
					, "value": "p4x"
				}
				, "right": {
					"": "dph"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 69
					, "value": "dph"
				}
			}]
		}]
	}
}, {
	"": "dp4(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 70
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 70
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 70
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 70
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32(emit(struct(rhs), struct(lhs), p4x.dp4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 70
		, "args": [{
			"": "emit(struct(rhs), struct(lhs), p4x.dp4)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/vec/vec4f.ci"
			, "line": 70
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 70
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 70
					, "value": "rhs"
				}]
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 70
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 70
					, "value": "lhs"
				}]
			}, {
				"": "p4x.dp4"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 70
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/vec/vec4f.ci"
					, "line": 70
					, "value": "p4x"
				}
				, "right": {
					"": "dp4"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 70
					, "value": "dp4"
				}
			}]
		}]
	}
}, {
	"": "cross(a: vec4f, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cross"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 72
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 72
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 72
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 72
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "a.y * b.z - a.z * b.y"
			, "kind": "-"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 72
			, "left": {
				"": "a.y * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 72
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "y"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "z"
					}
				}
			}
			, "right": {
				"": "a.z * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 72
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "z"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "y"
					}
				}
			}
		}, {
			"": "a.z * b.x - a.x * b.z"
			, "kind": "-"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 72
			, "left": {
				"": "a.z * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 72
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "z"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "x"
					}
				}
			}
			, "right": {
				"": "a.x * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 72
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "x"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "z"
					}
				}
			}
		}, {
			"": "a.x * b.y - a.y * b.x"
			, "kind": "-"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 72
			, "left": {
				"": "a.x * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 72
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "x"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "y"
					}
				}
			}
			, "right": {
				"": "a.y * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 72
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "y"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 72
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"": "len(v: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "len"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 74
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 74
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "val"
		, "name": "v"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 74
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sqrt(dp3(v, v))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 74
		, "args": [{
			"": "dp3(v, v)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 74
			, "args": [{
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 74
				, "value": "v"
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/vec4f.ci"
				, "line": 74
				, "value": "v"
			}]
		}]
	}
}, {
	"": "normalize(v: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "normalize"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "div(v, vec4f(len(v)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 75
		, "args": [{
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "lib/vec/vec4f.ci"
			, "line": 75
			, "value": "v"
		}, {
			"": "vec4f(len(v))"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "lib/vec/vec4f.ci"
			, "line": 75
			, "args": [{
				"": "len(v)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 75
				, "args": [{
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 75
					, "value": "v"
				}]
			}]
		}]
	}
}, {
	"": "eval(v: vec4f, x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "type": "function"
	, "file": "lib/vec/vec4f.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 77
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "lib/vec/vec4f.ci"
		, "line": 77
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 77
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "float32((((v.w * x + v.z) * x + v.y) * x) + v.x)"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/vec/vec4f.ci"
		, "line": 77
		, "args": [{
			"": "(((v.w * x + v.z) * x + v.y) * x) + v.x"
			, "kind": "+"
			, "type": "float32"
			, "file": "lib/vec/vec4f.ci"
			, "line": 77
			, "left": {
				"": "(((v.w * x + v.z) * x + v.y) * x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 77
				, "args": [{
					"": "((v.w * x + v.z) * x + v.y) * x"
					, "kind": "*"
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 77
					, "left": {
						"": "((v.w * x + v.z) * x + v.y)"
						, "kind": "()"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 77
						, "args": [{
							"": "(v.w * x + v.z) * x + v.y"
							, "kind": "+"
							, "type": "float32"
							, "file": "lib/vec/vec4f.ci"
							, "line": 77
							, "left": {
								"": "(v.w * x + v.z) * x"
								, "kind": "*"
								, "type": "float32"
								, "file": "lib/vec/vec4f.ci"
								, "line": 77
								, "left": {
									"": "(v.w * x + v.z)"
									, "kind": "()"
									, "type": "float32"
									, "file": "lib/vec/vec4f.ci"
									, "line": 77
									, "args": [{
										"": "v.w * x + v.z"
										, "kind": "+"
										, "type": "float32"
										, "file": "lib/vec/vec4f.ci"
										, "line": 77
										, "left": {
											"": "v.w * x"
											, "kind": "*"
											, "type": "float32"
											, "file": "lib/vec/vec4f.ci"
											, "line": 77
											, "left": {
												"": "v.w"
												, "kind": "."
												, "type": "float32"
												, "file": "lib/vec/vec4f.ci"
												, "line": 77
												, "left": {
													"": "v"
													, "kind": ".variable"
													, "type": "vec4f"
													, "file": "lib/vec/vec4f.ci"
													, "line": 77
													, "value": "v"
												}
												, "right": {
													"": "w"
													, "kind": ".variable"
													, "type": "float32"
													, "file": "lib/vec/vec4f.ci"
													, "line": 77
													, "value": "w"
												}
											}
											, "right": {
												"": "x"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "lib/vec/vec4f.ci"
												, "line": 77
												, "value": "x"
											}
										}
										, "right": {
											"": "v.z"
											, "kind": "."
											, "type": "float32"
											, "file": "lib/vec/vec4f.ci"
											, "line": 77
											, "left": {
												"": "v"
												, "kind": ".variable"
												, "type": "vec4f"
												, "file": "lib/vec/vec4f.ci"
												, "line": 77
												, "value": "v"
											}
											, "right": {
												"": "z"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "lib/vec/vec4f.ci"
												, "line": 77
												, "value": "z"
											}
										}
									}]
								}
								, "right": {
									"": "x"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/vec/vec4f.ci"
									, "line": 77
									, "value": "x"
								}
							}
							, "right": {
								"": "v.y"
								, "kind": "."
								, "type": "float32"
								, "file": "lib/vec/vec4f.ci"
								, "line": 77
								, "left": {
									"": "v"
									, "kind": ".variable"
									, "type": "vec4f"
									, "file": "lib/vec/vec4f.ci"
									, "line": 77
									, "value": "v"
								}
								, "right": {
									"": "y"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/vec/vec4f.ci"
									, "line": 77
									, "value": "y"
								}
							}
						}]
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/vec/vec4f.ci"
						, "line": 77
						, "value": "x"
					}
				}]
			}
			, "right": {
				"": "v.x"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/vec/vec4f.ci"
				, "line": 77
				, "left": {
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/vec4f.ci"
					, "line": 77
					, "value": "v"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/vec/vec4f.ci"
					, "line": 77
					, "value": "x"
				}
			}
		}]
	}
}, {
	"": "mat4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "lib/vec/mat4f.ci"
	, "line": 3
	, "size": 64
	, "offs": 144992
	, "static": true
	, "const": true
}, {
	"": "mat4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "mat4f"
	, "type": "float32[16]"
	, "file": "lib/vec/mat4f.ci"
	, "line": 4
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f..anonymous"
	, "kind": "variable"
	, "cast": "val"
	, "name": ".anonymous"
	, "owner": "mat4f"
	, "type": "mat4f..anonymous"
	, "file": "lib/vec/mat4f.ci"
	, "line": 59
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f..anonymous.x"
	, "kind": "variable"
	, "cast": "val"
	, "name": "x"
	, "owner": "mat4f..anonymous"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 6
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f..anonymous.y"
	, "kind": "variable"
	, "cast": "val"
	, "name": "y"
	, "owner": "mat4f..anonymous"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 7
	, "size": 16
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "mat4f..anonymous.z"
	, "kind": "variable"
	, "cast": "val"
	, "name": "z"
	, "owner": "mat4f..anonymous"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 8
	, "size": 16
	, "offs": 32
	, "static": false
	, "const": false
}, {
	"": "mat4f..anonymous.w"
	, "kind": "variable"
	, "cast": "val"
	, "name": "w"
	, "owner": "mat4f..anonymous"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 9
	, "size": 16
	, "offs": 48
	, "static": false
	, "const": false
}, {
	"": "mat4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 6
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 6
		, "value": "x"
	}
}, {
	"": "mat4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "mat4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 8
		, "value": "z"
	}
}, {
	"": "mat4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/vec/mat4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 9
		, "value": "w"
	}
}, {
	"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "lib/vec/mat4f.ci"
	, "line": 13
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 13
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "xx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xx"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 13
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": false
	}, {
		"": "xy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xy"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 13
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}, {
		"": "xz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xz"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 13
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}, {
		"": "xw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xw"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 13
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": false
	}, {
		"": "yx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yx"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 14
		, "size": 4
		, "offs": 84
		, "static": false
		, "const": false
	}, {
		"": "yy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yy"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 14
		, "size": 4
		, "offs": 88
		, "static": false
		, "const": false
	}, {
		"": "yz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yz"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 14
		, "size": 4
		, "offs": 92
		, "static": false
		, "const": false
	}, {
		"": "yw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yw"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 14
		, "size": 4
		, "offs": 96
		, "static": false
		, "const": false
	}, {
		"": "zx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zx"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 15
		, "size": 4
		, "offs": 100
		, "static": false
		, "const": false
	}, {
		"": "zy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zy"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 15
		, "size": 4
		, "offs": 104
		, "static": false
		, "const": false
	}, {
		"": "zz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zz"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 15
		, "size": 4
		, "offs": 108
		, "static": false
		, "const": false
	}, {
		"": "zw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zw"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 15
		, "size": 4
		, "offs": 112
		, "static": false
		, "const": false
	}, {
		"": "wx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wx"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 16
		, "size": 4
		, "offs": 116
		, "static": false
		, "const": false
	}, {
		"": "wy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wy"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 16
		, "size": 4
		, "offs": 120
		, "static": false
		, "const": false
	}, {
		"": "wz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wz"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 16
		, "size": 4
		, "offs": 124
		, "static": false
		, "const": false
	}, {
		"": "ww"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "ww"
		, "type": "float32"
		, "file": "lib/vec/mat4f.ci"
		, "line": 16
		, "size": 4
		, "offs": 128
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 292192
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/vec/mat4f.ci"
		, "line": 16
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/vec/mat4f.ci"
			, "line": 17
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x.x := xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 18
					}, {
						"": ".result.x.y := xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 18
					}, {
						"": ".result.x.z := xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 18
					}, {
						"": ".result.x.w := xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 18
					}, {
						"": ".result.y.x := yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 19
					}, {
						"": ".result.y.y := yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 19
					}, {
						"": ".result.y.z := yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 19
					}, {
						"": ".result.y.w := yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 19
					}, {
						"": ".result.z.x := zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 20
					}, {
						"": ".result.z.y := zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 20
					}, {
						"": ".result.z.z := zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 20
					}, {
						"": ".result.z.w := zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 20
					}, {
						"": ".result.w.x := wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 21
					}, {
						"": ".result.w.y := wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 21
					}, {
						"": ".result.w.z := wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 21
					}, {
						"": ".result.w.w := ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 21
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x1 sp(17, 16)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292192
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(18, 15)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292195
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(19, 14)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292198
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(20, 13)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292201
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(21, 12)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292204
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(22, 11)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292207
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(23, 10)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292210
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(24, 9)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292213
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(25, 8)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292216
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(26, 7)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292219
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(27, 6)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292222
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(28, 5)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292225
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(29, 4)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292228
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(30, 3)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292231
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(31, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292234
		, "size": 3
	}, {
		"instruction": "mov.x1 sp(32, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292237
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292240
		, "size": 1
	}]
}, {
	"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "lib/vec/mat4f.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 25
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "x"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 25
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "y"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 25
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "z"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 25
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": true
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "w"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 25
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": true
	}]
	, "size": 21
	, "offs": 292248
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/vec/mat4f.ci"
		, "line": 25
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/vec/mat4f.ci"
			, "line": 26
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 26
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 26
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 26
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 26
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292248
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292250
		, "size": 1
	}, {
		"instruction": "set.x4 sp(9)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292251
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292253
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292255
		, "size": 1
	}, {
		"instruction": "set.x4 sp(13)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292256
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292258
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292260
		, "size": 1
	}, {
		"instruction": "set.x4 sp(17)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292261
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292263
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292265
		, "size": 1
	}, {
		"instruction": "set.x4 sp(21)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292266
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292268
		, "size": 1
	}]
}, {
	"": "dp3(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "lib/vec/mat4f.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 29
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "dp3(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 29
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 29
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 29
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 29
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 29
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 29
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 29
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 29
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 29
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 29
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 29
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 29
				, "value": "vec"
			}]
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "dp4(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "lib/vec/mat4f.ci"
	, "line": 30
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 30
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 30
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 30
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "dp4(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 30
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 30
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 30
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 30
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 30
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 30
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "dph(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "lib/vec/mat4f.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 31
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "dph(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/vec/mat4f.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/vec/mat4f.ci"
					, "line": 31
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/vec/mat4f.ci"
				, "line": 31
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/vec/mat4f.ci"
	, "line": 33
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 33
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "lhs"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 33
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "rhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "rhs"
		, "type": "mat4f"
		, "file": "lib/vec/mat4f.ci"
		, "line": 33
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}]
	, "size": 417
	, "offs": 292272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/vec/mat4f.ci"
		, "line": 33
		, "stmt": [{
			"": "transposed"
			, "kind": ".variable"
			, "type": "mat4f"
			, "file": "lib/vec/mat4f.ci"
			, "line": 34
			, "value": "transposed"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/vec/mat4f.ci"
			, "line": 41
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := dp4(transposed, lhs.x);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 42
					}, {
						"": ".result.y := dp4(transposed, lhs.y);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 43
					}, {
						"": ".result.z := dp4(transposed, lhs.z);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 44
					}, {
						"": ".result.w := dp4(transposed, lhs.w);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/vec/mat4f.ci"
						, "line": 45
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292272
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292276
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292278
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292279
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292281
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292283
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292287
		, "size": 1
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292288
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292290
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292292
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292296
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292297
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292299
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292301
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292305
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292306
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292308
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292310
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292314
		, "size": 1
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292315
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292317
		, "size": 2
	}, {
		"instruction": "inc.i32(+20)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292319
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292323
		, "size": 1
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292324
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292326
		, "size": 2
	}, {
		"instruction": "inc.i32(+36)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292328
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292332
		, "size": 1
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292333
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292335
		, "size": 2
	}, {
		"instruction": "inc.i32(+52)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292337
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292341
		, "size": 1
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292342
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292344
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292346
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292350
		, "size": 1
	}, {
		"instruction": "set.x1 sp(9)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292351
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292353
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292355
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292359
		, "size": 1
	}, {
		"instruction": "set.x1 sp(10)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292360
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292362
		, "size": 2
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292364
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292368
		, "size": 1
	}, {
		"instruction": "set.x1 sp(11)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292369
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292371
		, "size": 2
	}, {
		"instruction": "inc.i32(+56)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292373
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292377
		, "size": 1
	}, {
		"instruction": "set.x1 sp(12)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292378
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292380
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292382
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292386
		, "size": 1
	}, {
		"instruction": "set.x1 sp(13)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292387
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292389
		, "size": 2
	}, {
		"instruction": "inc.i32(+28)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292391
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292395
		, "size": 1
	}, {
		"instruction": "set.x1 sp(14)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292396
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292398
		, "size": 2
	}, {
		"instruction": "inc.i32(+44)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292400
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292404
		, "size": 1
	}, {
		"instruction": "set.x1 sp(15)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292405
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292407
		, "size": 2
	}, {
		"instruction": "inc.i32(+60)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292409
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292413
		, "size": 1
	}, {
		"instruction": "set.x1 sp(16)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292414
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 292416
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292420
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292422
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292426
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292428
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292429
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292431
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292432
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292433
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292435
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292436
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292438
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292442
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292443
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292444
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292446
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292447
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292449
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292453
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292454
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292455
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292457
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292458
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292460
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292464
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292465
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292466
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292471
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292472
		, "size": 4
	}, {
		"instruction": "set.x4 sp(2)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292476
		, "size": 2
	}, {
		"instruction": "set.x4 sp(23)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292478
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 292480
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292484
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292486
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292490
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292494
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292496
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292497
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292499
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292500
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292501
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292503
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292504
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292506
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292510
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292511
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292512
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292514
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292515
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292517
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292521
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292522
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292523
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292525
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292526
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292528
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292532
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292533
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292534
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292539
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292540
		, "size": 4
	}, {
		"instruction": "set.x4 sp(2)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292544
		, "size": 2
	}, {
		"instruction": "set.x4 sp(27)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292546
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 292548
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292552
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292554
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292558
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292562
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292564
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292565
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292567
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292568
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292569
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292571
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292572
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292574
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292578
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292579
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292580
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292582
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292583
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292585
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292589
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292590
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292591
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292593
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292594
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292596
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292600
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292601
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292602
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292607
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292608
		, "size": 4
	}, {
		"instruction": "set.x4 sp(2)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292612
		, "size": 2
	}, {
		"instruction": "set.x4 sp(31)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292614
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 292616
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292620
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292622
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292626
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292630
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292632
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292633
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292635
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292636
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292637
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292639
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292640
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292642
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292646
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292647
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292648
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292650
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292651
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292653
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292657
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292658
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292659
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292661
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292662
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292664
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 292668
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 292669
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292670
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292675
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292676
		, "size": 4
	}, {
		"instruction": "set.x4 sp(2)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292680
		, "size": 2
	}, {
		"instruction": "set.x4 sp(35)"
		, "name": "set.x4"
		, "code": "0x15"
		, "offs": 292682
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292684
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292688
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "test/test.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/test.ci"
		, "line": 5
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 3
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "test/lang/emit.ci"
	, "line": 4
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "test/lang/emit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 6
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 7
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 9
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 9
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 9
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 9
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 10
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 10
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "test/lang/emit.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 14
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "test/lang/emit.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 14
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/emit.ci"
			, "line": 14
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/lang/emit.ci"
				, "line": 14
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/lang/emit.ci"
					, "line": 14
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "test/lang/emit.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 15
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang/emit.ci"
		, "line": 15
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 15
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/emit.ci"
			, "line": 15
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/emit.ci"
				, "line": 15
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang/emit.ci"
					, "line": 15
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 17
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 17
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 17
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "test/lang/emit.ci"
	, "line": 18
	, "size": 8
	, "offs": 40
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 18
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 18
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 19
	, "size": 4
	, "offs": 44
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 19
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 19
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "test/lang/emit.ci"
	, "line": 20
	, "size": 8
	, "offs": 52
	, "static": false
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 20
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 20
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "test/lang/emit.ci"
	, "line": 23
	, "size": 8
	, "offs": 60
	, "static": false
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 23
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 23
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "test/lang/emit.ci"
			, "line": 23
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "test/lang/emit.ci"
				, "line": 23
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 8
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "b"
		}
	}
}, {
	"": "i3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i3"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 10
	, "size": 4
	, "offs": 64
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 10
		, "value": "3"
	}
}, {
	"": "i6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i6"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 11
	, "size": 4
	, "offs": 68
	, "static": false
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 11
		, "value": "6"
	}
}, {
	"": "i2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i2"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 12
	, "size": 4
	, "offs": 72
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 12
		, "value": "2"
	}
}, {
	"": "i8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 76
	, "static": false
	, "const": false
	, "ast": {
		"": "8"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 13
		, "value": "8"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 80
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "6"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 16
	, "size": 4
	, "offs": 84
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i6"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 88
	, "static": false
	, "const": false
	, "ast": {
		"": "zero(i3 + 1, i6 + 1)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "i3 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i3"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}, {
			"": "i6 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i6"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 92
	, "static": false
	, "const": false
	, "ast": {
		"": "last(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "6"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 20
	, "size": 4
	, "offs": 96
	, "static": false
	, "const": false
	, "ast": {
		"": "last(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i6"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 100
	, "static": false
	, "const": false
	, "ast": {
		"": "last(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 21
		, "left": {
			"": "last(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 21
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 21
			, "value": "1"
		}
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 104
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 24
	, "size": 4
	, "offs": 108
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i6"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 112
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(i3 + 1, i6 + 1) - 2"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 25
		, "left": {
			"": "sum(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 25
			, "value": "2"
		}
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 116
	, "static": false
	, "const": false
	, "ast": {
		"": "any(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "6"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 28
	, "size": 4
	, "offs": 120
	, "static": false
	, "const": false
	, "ast": {
		"": "any(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 28
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i6"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 124
	, "static": false
	, "const": false
	, "ast": {
		"": "any(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 29
		, "left": {
			"": "any(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 29
			, "value": "1"
		}
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 128
	, "static": false
	, "const": false
	, "ast": {
		"": "min(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "6"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 32
	, "size": 4
	, "offs": 132
	, "static": false
	, "const": false
	, "ast": {
		"": "min(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i6"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 136
	, "static": false
	, "const": false
	, "ast": {
		"": "min(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 33
		, "left": {
			"": "min(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 33
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 33
			, "value": "1"
		}
	}
}, {
	"": "max2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 140
	, "static": false
	, "const": false
	, "ast": {
		"": "max(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "6"
		}]
	}
}, {
	"": "max2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 36
	, "size": 4
	, "offs": 144
	, "static": false
	, "const": false
	, "ast": {
		"": "max(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i6"
		}]
	}
}, {
	"": "max2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 148
	, "static": false
	, "const": false
	, "ast": {
		"": "max(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 37
		, "left": {
			"": "max(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 37
			, "value": "1"
		}
	}
}, {
	"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(a, sum(b, sum(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 39
			, "value": "a"
		}, {
			"": "sum(b, sum(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 39
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "b"
			}, {
				"": "sum(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 39
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "sum(sum(sum(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "sum(sum(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "sum(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 40
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 40
			, "value": "d"
		}]
	}
}, {
	"": "sumRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 152
	, "static": false
	, "const": false
	, "ast": {
		"": "sumLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "8"
		}]
	}
}, {
	"": "sumLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 156
	, "static": false
	, "const": false
	, "ast": {
		"": "sumRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "8"
		}]
	}
}, {
	"": "sumRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 160
	, "static": false
	, "const": false
	, "ast": {
		"": "sumLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i8"
		}]
	}
}, {
	"": "sumLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 44
	, "size": 4
	, "offs": 164
	, "static": false
	, "const": false
	, "ast": {
		"": "sumRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i8"
		}]
	}
}, {
	"": "sumRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 168
	, "static": false
	, "const": false
	, "ast": {
		"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 45
		, "left": {
			"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 45
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 45
			, "value": "4"
		}
	}
}, {
	"": "sumLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 172
	, "static": false
	, "const": false
	, "ast": {
		"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 46
		, "left": {
			"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 46
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 46
			, "value": "4"
		}
	}
}, {
	"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "any(a, any(b, any(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 48
			, "value": "a"
		}, {
			"": "any(b, any(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 48
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "b"
			}, {
				"": "any(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 48
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "any(any(any(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "any(any(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 49
			, "args": [{
			}, {
				"": "any(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 49
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 49
			, "value": "d"
		}]
	}
}, {
	"": "anyRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 50
	, "size": 4
	, "offs": 176
	, "static": false
	, "const": false
	, "ast": {
		"": "anyLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "8"
		}]
	}
}, {
	"": "anyLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 51
	, "size": 4
	, "offs": 180
	, "static": false
	, "const": false
	, "ast": {
		"": "anyRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "8"
		}]
	}
}, {
	"": "anyRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 52
	, "size": 4
	, "offs": 184
	, "static": false
	, "const": false
	, "ast": {
		"": "anyLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i8"
		}]
	}
}, {
	"": "anyLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 53
	, "size": 4
	, "offs": 188
	, "static": false
	, "const": false
	, "ast": {
		"": "anyRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i8"
		}]
	}
}, {
	"": "anyRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 54
	, "size": 4
	, "offs": 192
	, "static": false
	, "const": false
	, "ast": {
		"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 54
		, "left": {
			"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 54
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 54
			, "value": "1"
		}
	}
}, {
	"": "anyLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 55
	, "size": 4
	, "offs": 196
	, "static": false
	, "const": false
	, "ast": {
		"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 55
		, "left": {
			"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 55
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 55
			, "value": "1"
		}
	}
}, {
	"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "min(a, min(b, min(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 57
			, "value": "a"
		}, {
			"": "min(b, min(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "b"
			}, {
				"": "min(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 57
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "min(min(min(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "min(min(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "min(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 58
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 58
			, "value": "d"
		}]
	}
}, {
	"": "minRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 59
	, "size": 4
	, "offs": 200
	, "static": false
	, "const": false
	, "ast": {
		"": "minLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "8"
		}]
	}
}, {
	"": "minLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 60
	, "size": 4
	, "offs": 204
	, "static": false
	, "const": false
	, "ast": {
		"": "minRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "8"
		}]
	}
}, {
	"": "minRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 61
	, "size": 4
	, "offs": 208
	, "static": false
	, "const": false
	, "ast": {
		"": "minLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 61
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i8"
		}]
	}
}, {
	"": "minLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 62
	, "size": 4
	, "offs": 212
	, "static": false
	, "const": false
	, "ast": {
		"": "minRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i8"
		}]
	}
}, {
	"": "minRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 63
	, "size": 4
	, "offs": 216
	, "static": false
	, "const": false
	, "ast": {
		"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 63
		, "left": {
			"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 63
			, "value": "1"
		}
	}
}, {
	"": "minLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 64
	, "size": 4
	, "offs": 220
	, "static": false
	, "const": false
	, "ast": {
		"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 64
		, "left": {
			"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 64
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 64
			, "value": "1"
		}
	}
}, {
	"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "max(a, max(b, max(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 66
			, "value": "a"
		}, {
			"": "max(b, max(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 66
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "b"
			}, {
				"": "max(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 66
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "max(max(max(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "args": [{
		}, {
			"": "max(max(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "max(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 67
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 67
			, "value": "d"
		}]
	}
}, {
	"": "maxRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 68
	, "size": 4
	, "offs": 224
	, "static": false
	, "const": false
	, "ast": {
		"": "maxLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 68
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "8"
		}]
	}
}, {
	"": "maxLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 69
	, "size": 4
	, "offs": 228
	, "static": false
	, "const": false
	, "ast": {
		"": "maxRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 69
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "8"
		}]
	}
}, {
	"": "maxRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 70
	, "size": 4
	, "offs": 232
	, "static": false
	, "const": false
	, "ast": {
		"": "maxLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i8"
		}]
	}
}, {
	"": "maxLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 71
	, "size": 4
	, "offs": 236
	, "static": false
	, "const": false
	, "ast": {
		"": "maxRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i8"
		}]
	}
}, {
	"": "maxRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 72
	, "size": 4
	, "offs": 240
	, "static": false
	, "const": false
	, "ast": {
		"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 72
		, "left": {
			"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 72
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 72
			, "value": "1"
		}
	}
}, {
	"": "maxLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 73
	, "size": 4
	, "offs": 244
	, "static": false
	, "const": false
	, "ast": {
		"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 73
		, "left": {
			"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 73
			, "value": "1"
		}
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "test/lang/overload.inline.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 9
	, "size": 4
	, "offs": 248
	, "static": false
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 10
	, "size": 4
	, "offs": 252
	, "static": false
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 11
	, "size": 4
	, "offs": 256
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/overload.inline.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 12
	, "size": 4
	, "offs": 260
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 13
	, "size": 4
	, "offs": 264
	, "static": false
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 174528
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 174800
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/overload.inline.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/overload.inline.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "test/lang/overload.inline.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "test/lang/overload.inline.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "test/lang/overload.inline.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "test/lang/overload.inline.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/overload.inline.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "test/lang/overload.inline.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "test/lang/overload.inline.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/overload.inline.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "test/lang/overload.inline.ci"
	, "line": 28
	, "size": 8
	, "offs": 272
	, "static": false
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "test/lang/overload.inline.ci"
	, "line": 29
	, "size": 8
	, "offs": 280
	, "static": false
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "test/lang/overload.inline.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 7
	, "size": 8
	, "offs": 292696
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/initByRef.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 8
	, "size": 4
	, "offs": 284
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 9
	, "size": 4
	, "offs": 288
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 10
	, "size": 8
	, "offs": 296
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 12
	, "size": 8
	, "offs": 304
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 13
	, "size": 4
	, "offs": 308
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 14
	, "size": 4
	, "offs": 312
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 16
	, "size": 4
	, "offs": 316
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 17
	, "size": 4
	, "offs": 320
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 18
	, "size": 8
	, "offs": 328
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 19
	, "size": 4
	, "offs": 332
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "test/lang/initByRef.ci"
	, "line": 20
	, "size": 4
	, "offs": 336
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "test/lang/initByRef.ci"
	, "line": 21
	, "size": 4
	, "offs": 340
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 23
	, "size": 4
	, "offs": 344
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 24
	, "size": 8
	, "offs": 352
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 25
	, "size": 4
	, "offs": 356
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 27
	, "size": 8
	, "offs": 364
	, "static": false
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 28
	, "size": 8
	, "offs": 372
	, "static": false
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 29
	, "size": 4
	, "offs": 376
	, "static": false
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 30
	, "size": 4
	, "offs": 380
	, "static": false
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 31
	, "size": 8
	, "offs": 388
	, "static": false
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 32
	, "size": 4
	, "offs": 392
	, "static": false
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 35
	, "size": 4
	, "offs": 396
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 36
	, "size": 4
	, "offs": 400
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 37
	, "size": 4
	, "offs": 404
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 38
	, "size": 4
	, "offs": 408
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 39
	, "size": 4
	, "offs": 412
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 40
	, "size": 4
	, "offs": 416
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 41
	, "size": 4
	, "offs": 420
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 42
	, "size": 4
	, "offs": 424
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 43
	, "size": 4
	, "offs": 428
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 44
	, "size": 4
	, "offs": 432
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 45
	, "size": 4
	, "offs": 436
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 46
	, "size": 4
	, "offs": 440
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 47
	, "size": 4
	, "offs": 444
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 48
	, "size": 4
	, "offs": 448
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 49
	, "size": 4
	, "offs": 452
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 50
	, "size": 4
	, "offs": 456
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 51
	, "size": 4
	, "offs": 460
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 52
	, "size": 4
	, "offs": 464
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 55
	, "size": 8
	, "offs": 472
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 56
	, "size": 8
	, "offs": 480
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 57
	, "size": 8
	, "offs": 488
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 58
	, "size": 8
	, "offs": 496
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 59
	, "size": 8
	, "offs": 504
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 60
	, "size": 8
	, "offs": 512
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 61
	, "size": 8
	, "offs": 520
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 62
	, "size": 8
	, "offs": 528
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 63
	, "size": 8
	, "offs": 536
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 64
	, "size": 8
	, "offs": 544
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 65
	, "size": 8
	, "offs": 552
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 66
	, "size": 8
	, "offs": 560
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 67
	, "size": 8
	, "offs": 568
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 68
	, "size": 8
	, "offs": 576
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 69
	, "size": 8
	, "offs": 584
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 70
	, "size": 8
	, "offs": 592
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 71
	, "size": 8
	, "offs": 600
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 72
	, "size": 8
	, "offs": 608
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 75
	, "size": 4
	, "offs": 612
	, "static": false
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 76
	, "size": 4
	, "offs": 616
	, "static": false
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 77
	, "size": 4
	, "offs": 620
	, "static": false
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 78
	, "size": 4
	, "offs": 624
	, "static": false
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 79
	, "size": 4
	, "offs": 628
	, "static": false
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 80
	, "size": 4
	, "offs": 632
	, "static": false
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 81
	, "size": 4
	, "offs": 636
	, "static": false
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 82
	, "size": 4
	, "offs": 640
	, "static": false
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 83
	, "size": 4
	, "offs": 644
	, "static": false
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 84
	, "size": 4
	, "offs": 648
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 85
	, "size": 4
	, "offs": 652
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 86
	, "size": 4
	, "offs": 656
	, "static": false
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 87
	, "size": 4
	, "offs": 660
	, "static": false
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 88
	, "size": 4
	, "offs": 664
	, "static": false
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 89
	, "size": 4
	, "offs": 668
	, "static": false
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 90
	, "size": 4
	, "offs": 672
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 91
	, "size": 4
	, "offs": 676
	, "static": false
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 92
	, "size": 4
	, "offs": 680
	, "static": false
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 95
	, "size": 4
	, "offs": 684
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 96
	, "size": 8
	, "offs": 692
	, "static": false
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 97
	, "size": 4
	, "offs": 696
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 99
	, "size": 4
	, "offs": 700
	, "static": false
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 105
	, "size": 8
	, "offs": 708
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 108
	, "size": 4
	, "offs": 712
	, "static": false
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 3
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 292704
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292704
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 6
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 292712
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 6
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 7
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang/function.ci"
					, "line": 7
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 7
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 7
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292712
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292714
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 292716
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292717
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292719
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 11
	, "size": 4
	, "offs": 716
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 11
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 11
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 14
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 14
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 720
	, "static": false
	, "const": false
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 14
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 17
	, "size": 4
	, "offs": 724
	, "static": false
	, "const": false
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 17
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 17
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 20
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 20
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 728
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 23
	, "size": 4
	, "offs": 732
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 23
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 736
	, "static": false
	, "const": false
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 26
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 29
	, "size": 4
	, "offs": 740
	, "static": false
	, "const": false
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 29
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 29
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 32
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 292720
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 32
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 33
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang/function.ci"
					, "line": 33
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 33
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 33
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292720
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292722
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 292724
		, "size": 1
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292725
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292727
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "test/lang/function.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "test/lang/function.ci"
		, "line": 37
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 54
	, "offs": 292728
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 37
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 38
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "test/lang/function.ci"
				, "line": 38
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "test/lang/function.ci"
					, "line": 38
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "test/lang/function.ci"
					, "line": 38
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 38
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/function.ci"
				, "line": 38
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "test/lang/function.ci"
					, "line": 39
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "test/lang/function.ci"
							, "line": 39
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 41
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "test/lang/function.ci"
					, "line": 41
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang/function.ci"
						, "line": 41
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang/function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 41
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang/function.ci"
									, "line": 41
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang/function.ci"
						, "line": 41
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang/function.ci"
							, "line": 41
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 41
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 41
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang/function.ci"
									, "line": 41
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292728
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292730
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 292735
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 292736
		, "size": 4
	}, {
		"instruction": "mov.x1 sp(2, 1)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292740
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292743
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292744
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292745
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292747
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292751
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292756
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292757
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292761
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292762
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 292764
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292768
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292773
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292774
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 292778
		, "size": 1
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292779
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292781
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "test/lang/function.ci"
	, "line": 45
	, "size": 4
	, "offs": 744
	, "static": false
	, "const": false
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "test/lang/function.ci"
		, "line": 45
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 45
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 748
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 752
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 756
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 760
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 764
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 768
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 772
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 776
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 780
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 784
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 788
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 792
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 796
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 800
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 804
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 808
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 812
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 816
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "test/lang/reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 196240
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "test/lang/reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 196512
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 820
	, "static": false
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "test/lang/reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 824
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 828
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 832
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 33
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 836
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 840
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 844
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 848
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 852
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 856
	, "static": false
	, "const": false
	, "ast": {
		"": "sizeof(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 40
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}]
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 860
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 864
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 868
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 872
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 876
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 880
	, "static": false
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 884
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 888
	, "static": false
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 3
	, "size": 8
	, "offs": 896
	, "static": false
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 4
	, "size": 8
	, "offs": 904
	, "static": false
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 6
	, "size": 4
	, "offs": 908
	, "static": false
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 7
	, "size": 4
	, "offs": 912
	, "static": false
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "test/stdc/number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "test/stdc/number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/stdc/number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 14
	, "size": 4
	, "offs": 916
	, "static": false
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 15
	, "size": 4
	, "offs": 920
	, "static": false
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 16
	, "size": 4
	, "offs": 924
	, "static": false
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 18
	, "size": 4
	, "offs": 928
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 19
	, "size": 4
	, "offs": 932
	, "static": false
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 21
	, "size": 4
	, "offs": 936
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 22
	, "size": 4
	, "offs": 940
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 23
	, "size": 4
	, "offs": 944
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 25
	, "size": 4
	, "offs": 948
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 26
	, "size": 4
	, "offs": 952
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 27
	, "size": 4
	, "offs": 956
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 29
	, "size": 4
	, "offs": 960
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 30
	, "size": 4
	, "offs": 964
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 31
	, "size": 4
	, "offs": 968
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 33
	, "size": 4
	, "offs": 972
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 34
	, "size": 4
	, "offs": 976
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 35
	, "size": 4
	, "offs": 980
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "testSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSin_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 37
	, "size": 8
	, "offs": 988
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testCos_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 38
	, "size": 8
	, "offs": 996
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testTan_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 39
	, "size": 8
	, "offs": 1004
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testLog_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 40
	, "size": 8
	, "offs": 1012
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "testExp_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testExp_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 41
	, "size": 8
	, "offs": 1020
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testPow_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 42
	, "size": 8
	, "offs": 1028
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSqrt_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 43
	, "size": 8
	, "offs": 1036
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "testAtan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testAtan_f64"
	, "type": "float64"
	, "file": "test/stdc/number.ci"
	, "line": 44
	, "size": 8
	, "offs": 1044
	, "static": false
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "testSin_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSin_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 46
	, "size": 4
	, "offs": 1048
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testCos_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 47
	, "size": 4
	, "offs": 1052
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testTan_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 48
	, "size": 4
	, "offs": 1056
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testLog_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 49
	, "size": 4
	, "offs": 1060
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc/number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/stdc/number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "testExp_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testExp_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 50
	, "size": 4
	, "offs": 1064
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testPow_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 51
	, "size": 4
	, "offs": 1068
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSqrt_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 52
	, "size": 4
	, "offs": 1072
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "testAtan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testAtan_f32"
	, "type": "float32"
	, "file": "test/stdc/number.ci"
	, "line": 53
	, "size": 4
	, "offs": 1076
	, "static": false
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPopulation_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testPopulation_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 55
	, "size": 4
	, "offs": 1080
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.pop(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 55
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 55
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testSwapBits_u32"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "testSwapBits_u32"
	, "type": "uint32"
	, "file": "test/stdc/number.ci"
	, "line": 56
	, "size": 4
	, "offs": 1084
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.swap(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 56
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 56
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanReverse_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanReverse_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 57
	, "size": 4
	, "offs": 1088
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.bsr(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 57
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 57
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanForward_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanForward_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 58
	, "size": 4
	, "offs": 1092
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.bsf(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 58
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 58
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testHighBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testHighBit_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 59
	, "size": 4
	, "offs": 1096
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.hib(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 59
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 59
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testLowBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testLowBit_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 60
	, "size": 4
	, "offs": 1100
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.lob(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 60
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 60
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testZeroExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 62
	, "size": 4
	, "offs": 1104
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 62
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 62
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 62
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u32"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 63
	, "size": 4
	, "offs": 1108
	, "static": false
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/number.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 63
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 63
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 63
			, "value": "5"
		}]
	}
}, {
	"": "testZeroExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u64"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 65
	, "size": 4
	, "offs": 1112
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/stdc/number.ci"
		, "line": 65
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 65
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 65
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 65
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u64"
	, "type": "int32"
	, "file": "test/stdc/number.ci"
	, "line": 66
	, "size": 4
	, "offs": 1116
	, "static": false
	, "const": false
	, "ast": {
		"": "uint64.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/stdc/number.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 66
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 66
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/number.ci"
			, "line": 66
			, "value": "5"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "test/stdc/memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "test/stdc/memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/stdc/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "test/stdc/memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "test/stdc/memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 1120
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "test/stdc/memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 1124
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "test/stdc/memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 1128
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "test/stdc/memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 1132
	, "static": false
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/stdc/memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "test/stdc/memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 1140
	, "static": false
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc/memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "test/stdc/memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 1148
	, "static": false
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc/memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "test/stdc/tryExec.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc/tryExec.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 292784
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292784
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "test/stdc/tryExec.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/stdc/tryExec.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 292792
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[8192]"
			, "file": "test/stdc/tryExec.ci"
			, "line": 15
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 16
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292792
		, "size": 4
	}, {
		"instruction": "load.sp(+8196)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 292796
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292800
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292801
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 292806
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292807
		, "size": 4
	}, {
		"instruction": "inc.sp(-8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292811
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292815
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "test/stdc/tryExec.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc/tryExec.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 292816
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 19
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/tryExec.ci"
			, "line": 20
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292816
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292821
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 292822
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292823
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292827
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "test/stdc/tryExec.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc/tryExec.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 68
	, "offs": 292832
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 23
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/stdc/tryExec.ci"
			, "line": 24
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "test/stdc/tryExec.ci"
			, "line": 29
			, "value": "details"
		}, {
			"": "abort(\"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 34
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292832
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292836
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292841
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292843
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292848
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292850
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 292855
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292857
		, "size": 5
	}, {
		"instruction": "load.c32 34"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292862
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292867
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 292872
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292877
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292882
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 292887
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 292891
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292895
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292899
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "test/stdc/tryExec.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 37
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc/tryExec.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 292904
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 37
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/tryExec.ci"
			, "line": 38
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/stdc/tryExec.ci"
			, "line": 39
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 292904
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292909
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 292911
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 292912
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292916
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "test/stdc/tryExec.ci"
	, "line": 42
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 42
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/stdc/tryExec.ci"
		, "line": 42
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 292920
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/stdc/tryExec.ci"
		, "line": 42
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 43
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 292920
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292921
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 46
	, "size": 4
	, "offs": 1152
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 46
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc/tryExec.ci"
			, "line": 46
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 47
	, "size": 4
	, "offs": 1156
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 47
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 48
	, "size": 4
	, "offs": 1160
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc/tryExec.ci"
			, "line": 48
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 49
	, "size": 4
	, "offs": 1164
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc/tryExec.ci"
			, "line": 49
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 50
	, "size": 4
	, "offs": 1168
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc/tryExec.ci"
			, "line": 50
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 51
	, "size": 4
	, "offs": 1172
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc/tryExec.ci"
			, "line": 51
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "test/stdc/tryExec.ci"
	, "line": 52
	, "size": 4
	, "offs": 1176
	, "static": false
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/tryExec.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/stdc/tryExec.ci"
			, "line": 52
			, "value": "abortExecution"
		}]
	}
}, {
	"": "arrFixedNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "arrFixedNoInit"
	, "type": "int64[7]"
	, "file": "test/lang/array.ci"
	, "line": 49
	, "size": 56
	, "offs": 1232
	, "static": false
	, "const": false
}, {
	"": "arrArrayNoInit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayNoInit"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 50
	, "size": 4
	, "offs": 1236
	, "static": false
	, "const": false
}, {
	"": "arrSliceNoInit"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceNoInit"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 51
	, "size": 8
	, "offs": 1244
	, "static": false
	, "const": false
}, {
	"": "arrArrayInitNull"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitNull"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 59
	, "size": 4
	, "offs": 1248
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/array.ci"
		, "line": 59
		, "value": "null"
	}
}, {
	"": "arrSliceInitNull"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitNull"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 60
	, "size": 8
	, "offs": 1256
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/array.ci"
		, "line": 60
		, "value": "null"
	}
}, {
	"": "arrArrayInitFixed"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitFixed"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 63
	, "size": 4
	, "offs": 1260
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang/array.ci"
		, "line": 63
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrSliceInitFixed"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitFixed"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 64
	, "size": 8
	, "offs": 1268
	, "static": false
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang/array.ci"
		, "line": 64
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrArrayInitSlice"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitSlice"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 67
	, "size": 4
	, "offs": 1272
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 67
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrSliceInitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitSlice"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 68
	, "size": 8
	, "offs": 1280
	, "static": false
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 68
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrArrayInitPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitPtr"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 71
	, "size": 4
	, "offs": 1284
	, "static": false
	, "const": false
	, "ast": {
		"": "arrArrayInitFixed"
		, "kind": ".variable"
		, "type": "int64[*]"
		, "file": "test/lang/array.ci"
		, "line": 71
		, "value": "arrArrayInitFixed"
	}
}, {
	"": "strFixed"
	, "kind": "variable"
	, "cast": "val"
	, "name": "strFixed"
	, "type": "char[7]"
	, "file": "test/lang/array.ci"
	, "line": 81
	, "size": 7
	, "offs": 1292
	, "static": false
	, "const": false
}, {
	"": "strArray"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "strArray"
	, "type": "char[*]"
	, "file": "test/lang/array.ci"
	, "line": 86
	, "size": 4
	, "offs": 1296
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang/array.ci"
		, "line": 86
		, "value": "\"string\""
	}
}, {
	"": "strSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "strSlice"
	, "type": "char[]"
	, "file": "test/lang/array.ci"
	, "line": 90
	, "size": 8
	, "offs": 1304
	, "static": false
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang/array.ci"
		, "line": 90
		, "value": "\"string\""
	}
}, {
	"": "lenSlice(values: int64[]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lenSlice"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 292928
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "stmt": [{
			"": "return .result := values.length;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 103
			, "stmt": {
				"": ".result := values.length"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "values.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "test/lang/array.ci"
					, "line": 103
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang/array.ci"
						, "line": 103
						, "value": "values"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "test/lang/array.ci"
						, "line": 103
						, "value": "length"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x1 sp(3, 2)"
		, "name": "mov.x1"
		, "code": "0x16"
		, "offs": 292928
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292931
		, "size": 1
	}]
}, {
	"": "nthFixed(idx: int32, values: int64[7]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthFixed"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[7]"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 292936
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang/array.ci"
					, "line": 104
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[7]"
						, "file": "test/lang/array.ci"
						, "line": 104
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 104
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292936
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292938
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 292940
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 292944
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 292945
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292947
		, "size": 1
	}]
}, {
	"": "nthArray(idx: int32, values: int64[*]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthArray"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[*]"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 292952
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang/array.ci"
					, "line": 105
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[*]"
						, "file": "test/lang/array.ci"
						, "line": 105
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 105
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292952
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292954
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 292956
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 292960
		, "size": 1
	}, {
		"instruction": "set.x2 sp(5)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 292961
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292963
		, "size": 1
	}]
}, {
	"": "nthSlice(idx: int32, values: int64[]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthSlice"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 106
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 292968
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang/array.ci"
					, "line": 106
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang/array.ci"
						, "line": 106
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 106
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292968
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 292970
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 292972
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 292976
		, "size": 1
	}, {
		"instruction": "set.x2 sp(6)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 292977
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 292979
		, "size": 1
	}]
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang/member.ci"
	, "line": 3
	, "size": 32
	, "offs": 223136
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang/member.ci"
	, "line": 5
	, "size": 8
	, "offs": 223272
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 11
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 14
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 17
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 17
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 20
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 20
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 23
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 26
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 35
	, "size": 4
	, "offs": 292984
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 38
	, "size": 4
	, "offs": 292992
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 38
		, "value": "1"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 41
	, "size": 4
	, "offs": 293000
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 41
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 44
	, "size": 8
	, "offs": 293008
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 47
	, "size": 8
	, "offs": 293016
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 47
		}, {
			"": "globalRecInit.constant := 5;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 47
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 50
	, "size": 8
	, "offs": 293024
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 50
		}, {
			"": "globalConstantRec.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 50
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "test/lang/member.ci"
	, "line": 53
	, "size": 32
	, "offs": 1336
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 10;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.constant := 11;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.memberInit := 12;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.constantInit := 13;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 57
		}, {
			"": "recordMemberTest.memberRec.member := 14;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.memberRec.constant := 15;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 61
		}, {
			"": "recordMemberTest.constantRec.member := 16;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 65
		}, {
			"": "recordMemberTest.constantRec.constant := 17;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 66
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "test/lang/method.ci"
	, "line": 3
	, "size": 16
	, "offs": 225640
	, "static": true
	, "const": true
}, {
	"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 6
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 293032
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 6
		, "stmt": [{
			"": "trace(\"staticMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 7
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293032
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293037
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293042
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293047
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293052
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293057
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 293062
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 293066
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 293070
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 293072
	, "static": true
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 15
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 15
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMethodTest.delegateMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 19
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 293080
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "stmt": [{
			"": "trace(\"virtualMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 26
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293080
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293085
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293090
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293095
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293100
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293105
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 293110
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 293114
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 293118
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 30
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 30
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 30
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 30
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 293120
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 30
		, "stmt": [{
			"": "trace(\"forwardMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 31
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293120
		, "size": 5
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293125
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293130
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293135
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293140
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293145
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 293150
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 293154
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 293158
		, "size": 1
	}]
}, {
	"": "globalFunction(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 293160
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"globalFunction\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293160
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293165
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293170
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293175
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293180
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293185
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 293190
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 293194
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 293198
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "test/lang/method.ci"
	, "line": 44
	, "size": 16
	, "offs": 1352
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 46
		}, {
			"": "recordMethodTest.delegateMethod := forwardMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.delegateMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang/method.ci"
					, "line": 44
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "delegateMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "delegateMethod"
				}
			}
			, "right": {
				"": "forwardMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 19
				, "value": "forwardMethod"
			}
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang/method.ci"
					, "line": 44
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}]
	}
}, {
	"": "staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 62
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 62
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 66
	, "offs": 293200
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 62
		, "stmt": [{
			"": "debug(\"extension.staticMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 63
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 64
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "test/lang/method.ci"
				, "line": 64
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 64
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "test/lang/method.ci"
						, "line": 64
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 64
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 64
				, "stmt": [{
					"": "RecordMethodTest.staticMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "test/lang/method.ci"
					, "line": 65
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293200
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293205
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293210
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293215
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293216
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293221
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293226
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 293231
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 293235
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293239
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 293244
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 293245
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(2)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 293249
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293251
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293253
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293255
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 293260
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293261
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 293265
		, "size": 1
	}]
}, {
	"": "virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 68
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 68
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 68
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 68
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 293272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 68
		, "stmt": [{
			"": "debug(\"extension.virtualMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 69
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 70
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "test/lang/method.ci"
				, "line": 70
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 70
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "test/lang/method.ci"
						, "line": 70
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 70
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 70
				, "stmt": [{
					"": "this.virtualMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "test/lang/method.ci"
					, "line": 71
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293272
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293277
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293282
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293287
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293288
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293293
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293298
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 293303
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 293307
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293311
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 293316
		, "size": 1
	}, {
		"instruction": "jnz +17"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 293317
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(2)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 293321
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293323
		, "size": 2
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293325
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293327
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 293329
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293330
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 293334
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "test/lang/recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 231032
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang/recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang/recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang/recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "test/lang/recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 231576
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang/recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang/recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang/recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "test/lang/recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 232120
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "test/lang/recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "test/lang/recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 232528
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "test/lang/recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 1356
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 1360
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 1364
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "test/lang/recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 1368
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "test/lang/recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 1372
	, "static": false
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 233600
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 234552
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 235504
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 236456
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 237408
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 238360
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "test/lang/useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "test/lang/useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 1376
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 1380
	, "static": false
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 1384
	, "static": false
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 1388
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 1392
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 1396
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 1400
	, "static": false
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 1404
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 1408
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 1412
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 1416
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 1420
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 1424
	, "static": false
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 1428
	, "static": false
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 1432
	, "static": false
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 1436
	, "static": false
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 1440
	, "static": false
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 1444
	, "static": false
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 1448
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 1452
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 1456
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 1460
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 1464
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 1468
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 1472
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 1476
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 1480
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 1484
	, "static": false
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 1488
	, "static": false
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 1492
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 1496
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 1500
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 1504
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 1508
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 1512
	, "static": false
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 1516
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 1520
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 1524
	, "static": false
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 1528
	, "static": false
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 1532
	, "static": false
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 1536
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 1540
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 1544
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 1548
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 1552
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 1556
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 1560
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 1564
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 1568
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 1572
	, "static": false
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 1576
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 1580
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 1584
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 1588
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 1592
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 1596
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 1600
	, "static": false
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 1604
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 1608
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 1612
	, "static": false
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 1616
	, "static": false
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 1620
	, "static": false
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 1624
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 1628
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 1632
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 1636
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 1640
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 1644
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 1648
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 1652
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 1656
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 1660
	, "static": false
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 1664
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 1668
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 1672
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 1676
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 1680
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 1684
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 1688
	, "static": false
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 1692
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 1696
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 1700
	, "static": false
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 1704
	, "static": false
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 1708
	, "static": false
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 1712
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 1716
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 1720
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 1724
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 1728
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 1732
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 1736
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 1740
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 1744
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 1748
	, "static": false
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 1752
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 1756
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 1760
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 1764
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 1768
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 1772
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 1776
	, "static": false
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 1780
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 1784
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 1788
	, "static": false
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 1792
	, "static": false
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 1796
	, "static": false
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 1800
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 1804
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 1808
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 1812
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 1816
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 1820
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 1824
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 1828
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 1832
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 1836
	, "static": false
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 1840
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 1844
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 1848
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 1852
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 1856
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 1860
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 1864
	, "static": false
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 1868
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 1872
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 1876
	, "static": false
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 1880
	, "static": false
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 1884
	, "static": false
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 1888
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 1892
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 1896
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 1900
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 1904
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 1908
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 1912
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 1916
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 1920
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 1924
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 1928
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 1932
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 1936
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 1940
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 1944
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 1948
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 1952
	, "static": false
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 1956
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 1960
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 1964
	, "static": false
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 1968
	, "static": false
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 1972
	, "static": false
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 1976
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 1980
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 1984
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 1988
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 1992
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 1996
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 2000
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 2004
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 2008
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 2012
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 2016
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 2020
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 2024
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 2028
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 2032
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 2036
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 2040
	, "static": false
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 2048
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 2056
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 2064
	, "static": false
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 2072
	, "static": false
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 2080
	, "static": false
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 2088
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 2096
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 2104
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 2112
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 2120
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 2128
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 2136
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 2144
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 2152
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 2160
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 2164
	, "static": false
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 2168
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 2172
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 2176
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 2180
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 2184
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 2188
	, "static": false
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 2196
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 2204
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 2212
	, "static": false
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 2220
	, "static": false
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 2228
	, "static": false
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 2236
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 2244
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 2252
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 2260
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 2268
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 2276
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 2284
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 2292
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 2300
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 2308
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 2312
	, "static": false
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 2316
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 2320
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 2324
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 2328
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 2332
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 2336
	, "static": false
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 2340
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 2344
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 2348
	, "static": false
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 2352
	, "static": false
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 2356
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 2360
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 2364
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 2368
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 2372
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 2376
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 2380
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 2384
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 2388
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 2392
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 2396
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 2400
	, "static": false
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 2408
	, "static": false
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 2416
	, "static": false
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 2424
	, "static": false
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 2432
	, "static": false
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 2440
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 2448
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 2456
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 2464
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 2472
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 2476
	, "static": false
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 2480
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 2484
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 2488
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 2492
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 2496
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 2500
	, "static": false
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "test/lang/useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 2504
	, "static": false
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "test/lang/useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 2508
	, "static": false
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang/useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 2512
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 2516
	, "static": false
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "test/lang/statementIf.ci"
	, "line": 26
	, "size": 4
	, "offs": 2520
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/statementIf.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "test/lang/statementFor.ci"
	, "line": 12
	, "size": 4
	, "offs": 2524
	, "static": false
	, "const": false
}, {
	"": "testMathFloor_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_1"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 3
	, "size": 8
	, "offs": 2532
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.floor(3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 3
		, "args": [{
			"": "3.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 3
			, "value": "3.200000"
		}]
	}
}, {
	"": "testMathFloor_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_2"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 4
	, "size": 8
	, "offs": 2540
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.floor(3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 4
		, "args": [{
			"": "3.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 4
			, "value": "3.500000"
		}]
	}
}, {
	"": "testMathFloor_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_3"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 5
	, "size": 8
	, "offs": 2548
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.floor(3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 5
		, "args": [{
			"": "3.600000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 5
			, "value": "3.600000"
		}]
	}
}, {
	"": "testMathFloor_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_4"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 6
	, "size": 8
	, "offs": 2556
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.floor(-3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 6
		, "args": [{
			"": "-3.200000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 6
			, "right": {
				"": "3.200000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 6
				, "value": "3.200000"
			}
		}]
	}
}, {
	"": "testMathFloor_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_5"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 7
	, "size": 8
	, "offs": 2564
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.floor(-3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 7
		, "args": [{
			"": "-3.500000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 7
			, "right": {
				"": "3.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 7
				, "value": "3.500000"
			}
		}]
	}
}, {
	"": "testMathFloor_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_6"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 8
	, "size": 8
	, "offs": 2572
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.floor(-3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 8
		, "args": [{
			"": "-3.600000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 8
			, "right": {
				"": "3.600000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 8
				, "value": "3.600000"
			}
		}]
	}
}, {
	"": "testMathSign_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 10
	, "size": 8
	, "offs": 2580
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 10
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 10
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 11
	, "size": 8
	, "offs": 2588
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 11
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 11
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 12
	, "size": 8
	, "offs": 2596
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 12
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 12
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 12
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathSign_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 13
	, "size": 8
	, "offs": 2604
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 13
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 13
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 14
	, "size": 8
	, "offs": 2612
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 14
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 14
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 15
	, "size": 8
	, "offs": 2620
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 15
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 15
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 15
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 17
	, "size": 8
	, "offs": 2628
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 17
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 17
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 18
	, "size": 8
	, "offs": 2636
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 18
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 18
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 19
	, "size": 8
	, "offs": 2644
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 19
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 19
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 19
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 20
	, "size": 8
	, "offs": 2652
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 20
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 20
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 21
	, "size": 8
	, "offs": 2660
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 21
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 21
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 22
	, "size": 8
	, "offs": 2668
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 22
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 22
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 22
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathMin_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 24
	, "size": 8
	, "offs": 2676
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 24
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 24
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 25
	, "size": 8
	, "offs": 2684
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 25
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 25
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMin_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 26
	, "size": 8
	, "offs": 2692
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 26
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 26
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 27
	, "size": 8
	, "offs": 2700
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 27
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 27
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathClamp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 29
	, "size": 8
	, "offs": 2708
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 29
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 29
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathClamp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 30
	, "size": 8
	, "offs": 2716
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 30
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 30
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 30
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathLerp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 32
	, "size": 8
	, "offs": 2724
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 32
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 32
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathLerp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 33
	, "size": 8
	, "offs": 2732
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 33
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 33
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 33
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathSmooth_0f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_0f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 35
	, "size": 8
	, "offs": 2740
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.smooth(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 35
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 35
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSmooth_0F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_0F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 36
	, "size": 8
	, "offs": 2748
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.smooth(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 36
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 36
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSmooth_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1f"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 37
	, "size": 8
	, "offs": 2756
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 37
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 37
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 37
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 37
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSmooth_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1F"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 38
	, "size": 8
	, "offs": 2764
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 38
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 38
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 38
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathMin_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_nan"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 40
	, "size": 8
	, "offs": 2772
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.min()"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 40
		, "args": [{
		}]
	}
}, {
	"": "testMathMin_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 41
	, "size": 8
	, "offs": 2780
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "testMathMax_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_nan"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 42
	, "size": 8
	, "offs": 2788
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.max()"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 42
		, "args": [{
		}]
	}
}, {
	"": "testMathMax_9"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_9"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 43
	, "size": 8
	, "offs": 2796
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 43
			, "value": "6"
		}]
	}
}, {
	"": "testMathSum_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_0"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 45
	, "size": 8
	, "offs": 2804
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sum()"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 45
		, "args": [{
		}]
	}
}, {
	"": "testMathSum_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_1"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 46
	, "size": 8
	, "offs": 2812
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sum(1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 46
		, "args": [{
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 46
			, "value": "1"
		}]
	}
}, {
	"": "testMathSum_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_3"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 47
	, "size": 8
	, "offs": 2820
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 47
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 47
			, "value": "2"
		}]
	}
}, {
	"": "testMathSum_55"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_55"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 48
	, "size": 8
	, "offs": 2828
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "3"
		}, {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "4"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "6"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "7"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "8"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "9"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 48
			, "value": "10"
		}]
	}
}, {
	"": "testMathEval_x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_x"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 50
	, "size": 8
	, "offs": 2836
	, "static": false
	, "const": false
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/stdc/test.math.ci"
		, "line": 50
		, "value": "10"
	}
}, {
	"": "testMathEval_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_0"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 51
	, "size": 8
	, "offs": 2844
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 51
		, "args": [{
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 51
			, "value": "testMathEval_x"
		}]
	}
}, {
	"": "testMathEval_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_1"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 52
	, "size": 8
	, "offs": 2852
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 52
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_2"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 53
	, "size": 8
	, "offs": 2860
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 53
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_3"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 54
	, "size": 8
	, "offs": 2868
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 54
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_4"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 55
	, "size": 8
	, "offs": 2876
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 55
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_5"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 56
	, "size": 8
	, "offs": 2884
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 56
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 56
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 56
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 56
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 56
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 56
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 56
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_6"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 57
	, "size": 8
	, "offs": 2892
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 57
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSin_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 59
	, "size": 8
	, "offs": 2900
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sin(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 59
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 59
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 59
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/stdc/test.math.ci"
					, "line": 59
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/test.math.ci"
					, "line": 59
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 59
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/test.math.ci"
					, "line": 59
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCos_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 60
	, "size": 8
	, "offs": 2908
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.cos(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 60
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 60
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 60
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/stdc/test.math.ci"
					, "line": 60
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/test.math.ci"
					, "line": 60
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 60
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/test.math.ci"
					, "line": 60
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathTan_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 61
	, "size": 8
	, "offs": 2916
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.tan(Math.pi / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 61
		, "args": [{
			"": "Math.pi / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 61
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 61
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/stdc/test.math.ci"
					, "line": 61
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/test.math.ci"
					, "line": 61
					, "value": "pi"
				}
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 61
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/test.math.ci"
					, "line": 61
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testMathSinh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSinh_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 62
	, "size": 8
	, "offs": 2924
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.sinh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 62
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 62
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 62
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/stdc/test.math.ci"
					, "line": 62
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/test.math.ci"
					, "line": 62
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 62
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/test.math.ci"
					, "line": 62
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCosh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCosh_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 63
	, "size": 8
	, "offs": 2932
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.cosh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 63
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 63
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 63
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/stdc/test.math.ci"
					, "line": 63
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/stdc/test.math.ci"
					, "line": 63
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 63
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/stdc/test.math.ci"
					, "line": 63
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathAsin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAsin_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 65
	, "size": 8
	, "offs": 2940
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.asin(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 65
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 65
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAcos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAcos_f64"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 66
	, "size": 8
	, "offs": 2948
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.acos(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 66
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 66
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathCmp_f32"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f32"
	, "type": "bool"
	, "file": "test/stdc/test.math.ci"
	, "line": 69
	, "size": 1
	, "offs": 2952
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/stdc/test.math.ci"
		, "line": 69
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 69
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 69
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 69
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 69
			, "value": "0"
		}
	}
}, {
	"": "testMathCmp_f64"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f64"
	, "type": "bool"
	, "file": "test/stdc/test.math.ci"
	, "line": 70
	, "size": 1
	, "offs": 2956
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/stdc/test.math.ci"
		, "line": 70
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 70
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 70
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 70
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 70
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/stdc/test.math.ci"
			, "line": 70
			, "value": "0"
		}
	}
}, {
	"": "testMathAbsMod_f64_0a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0a"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 72
	, "size": 8
	, "offs": 2964
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0b"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 73
	, "size": 8
	, "offs": 2972
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 73
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 73
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 73
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0c"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 74
	, "size": 8
	, "offs": 2980
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 74
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 74
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 74
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9a"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 76
	, "size": 8
	, "offs": 2988
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 76
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 76
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9b"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 77
	, "size": 8
	, "offs": 2996
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 77
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 77
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 77
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9c"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 78
	, "size": 8
	, "offs": 3004
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 78
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 78
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 78
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 78
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9d"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 79
	, "size": 8
	, "offs": 3012
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 79
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 79
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 79
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 79
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8a"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 81
	, "size": 8
	, "offs": 3020
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 81
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 81
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8b"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 82
	, "size": 8
	, "offs": 3028
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 82
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 82
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8c"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 83
	, "size": 8
	, "offs": 3036
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 83
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 83
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 83
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 83
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8d"
	, "type": "float64"
	, "file": "test/stdc/test.math.ci"
	, "line": 84
	, "size": 8
	, "offs": 3044
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/stdc/test.math.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 84
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 84
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/stdc/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0a"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 86
	, "size": 4
	, "offs": 3048
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0b"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 87
	, "size": 4
	, "offs": 3052
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 87
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 87
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0c"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 88
	, "size": 4
	, "offs": 3056
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 88
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 88
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 88
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9a"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 90
	, "size": 4
	, "offs": 3060
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 90
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 90
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9b"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 91
	, "size": 4
	, "offs": 3064
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 91
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 91
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 91
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9c"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 92
	, "size": 4
	, "offs": 3068
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 92
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 92
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 92
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 92
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9d"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 93
	, "size": 4
	, "offs": 3072
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 93
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 93
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 93
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8a"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 95
	, "size": 4
	, "offs": 3076
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 95
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 95
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8b"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 96
	, "size": 4
	, "offs": 3080
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 96
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 96
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8c"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 97
	, "size": 4
	, "offs": 3084
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 97
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 97
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 97
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 97
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8d"
	, "type": "float32"
	, "file": "test/stdc/test.math.ci"
	, "line": 98
	, "size": 4
	, "offs": 3088
	, "static": false
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/stdc/test.math.ci"
		, "line": 98
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 98
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 98
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/stdc/test.math.ci"
			, "line": 98
			, "value": "10.000000"
		}]
	}
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 10927
	, "offs": 293335
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 3
			, "stmt": [{
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 3
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "lib/stdlib.ci"
					, "line": 3
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 3
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "function"
							, "file": "lib/stdlib.ci"
							, "line": 3
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 3
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "lib/stdlib.ci"
					, "line": 3
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 5
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 8
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 9
						, "value": "trace(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 11
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 12
						, "value": "debug(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 14
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 15
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 17
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 18
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 20
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 21
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 23
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 24
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 25
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 27
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 28
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 29
						, "value": "assert(condition: bool): void"
					}, {
						"": "NotEquals"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 31
						, "value": "NotEquals"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/stdlib.ci"
						, "line": 39
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 50
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 54
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.ci"
				, "line": 3
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 3
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math.Complex.ci"
				, "line": 20
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math.Complex.ci"
				, "line": 25
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 52
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 54
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 55
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 56
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 58
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 59
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 60
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 62
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 63
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 64
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math.Complex.ci"
				, "line": 66
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 87
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 89
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 90
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math.Complex.ci"
				, "line": 93
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 101
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 103
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 105
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math.Complex.ci"
				, "line": 107
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 117
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 119
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 120
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 132
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 133
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 135
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 136
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 137
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 138
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 140
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 141
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 142
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 143
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 145
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.Complex.ci"
				, "line": 146
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 3
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 14
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 24
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 35
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 44
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 58
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 70
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 84
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 88
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 89
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 90
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 92
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 106
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 113
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, sign: char, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 129
				, "value": "append(output: char[], pos: int32, sign: char, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 192
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 196
				, "value": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 205
				, "value": "append(output: char[], pos: int32, value: uint32): int32"
			}, {
				"": "static if ((null) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "lib/vec/vec2d.ci"
				, "line": 1
				, "test": {
					"": "(null) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "lib/vec/vec2d.ci"
					, "line": 1
					, "left": {
						"": "(null)"
						, "kind": "()"
						, "type": "pointer"
						, "file": "lib/vec/vec2d.ci"
						, "line": 1
						, "args": [{
							"": "null"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "lib/vec/vec2d.ci"
							, "line": 1
							, "value": "null"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "lib/vec/vec2d.ci"
						, "line": 1
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "lib/vec/vec2d.ci"
					, "line": 1
					, "stmt": [{
						"": "vec2d"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec2d.ci"
						, "line": 3
						, "value": "vec2d"
					}, {
						"": "vec2d(x: float64, y: float64): vec2d"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/vec/vec2d.ci"
						, "line": 8
						, "value": "vec2d(x: float64, y: float64): vec2d"
					}, {
						"": "sub(a: vec2d, b: vec2d): vec2d"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec2d.ci"
						, "line": 15
						, "value": "sub(a: vec2d, b: vec2d): vec2d"
					}, {
						"": "dot(a: vec2d, b: vec2d): float64"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec2d.ci"
						, "line": 16
						, "value": "dot(a: vec2d, b: vec2d): float64"
					}]
				}
			}, {
				"": "static if ((null) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "lib/vec/vec4f.ci"
				, "line": 1
				, "test": {
					"": "(null) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "lib/vec/vec4f.ci"
					, "line": 1
					, "left": {
						"": "(null)"
						, "kind": "()"
						, "type": "pointer"
						, "file": "lib/vec/vec4f.ci"
						, "line": 1
						, "args": [{
							"": "null"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "lib/vec/vec4f.ci"
							, "line": 1
							, "value": "null"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "lib/vec/vec4f.ci"
						, "line": 1
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "lib/vec/vec4f.ci"
					, "line": 1
					, "stmt": [{
						"": "vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 3
						, "value": "vec4f"
					}, {
						"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/vec/vec4f.ci"
						, "line": 21
						, "value": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
					}, {
						"": "vec4f(x: float32, y: float32, z: float32): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 24
						, "value": "vec4f(x: float32, y: float32, z: float32): vec4f"
					}, {
						"": "vec4f(xyz: vec4f, w: float32): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 25
						, "value": "vec4f(xyz: vec4f, w: float32): vec4f"
					}, {
						"": "vec4f(val: float32): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 26
						, "value": "vec4f(val: float32): vec4f"
					}, {
						"": "neg(rhs: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 56
						, "value": "neg(rhs: vec4f): vec4f"
					}, {
						"": "add(lhs: vec4f, rhs: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 57
						, "value": "add(lhs: vec4f, rhs: vec4f): vec4f"
					}, {
						"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 58
						, "value": "sub(lhs: vec4f, rhs: vec4f): vec4f"
					}, {
						"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 59
						, "value": "mul(lhs: vec4f, rhs: vec4f): vec4f"
					}, {
						"": "div(lhs: vec4f, rhs: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 60
						, "value": "div(lhs: vec4f, rhs: vec4f): vec4f"
					}, {
						"": "min(lhs: vec4f, rhs: vec4f): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 62
						, "value": "min(lhs: vec4f, rhs: vec4f): float32"
					}, {
						"": "max(lhs: vec4f, rhs: vec4f): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 63
						, "value": "max(lhs: vec4f, rhs: vec4f): float32"
					}, {
						"": "dp3(lhs: vec4f, rhs: vec4f): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 68
						, "value": "dp3(lhs: vec4f, rhs: vec4f): float32"
					}, {
						"": "dph(lhs: vec4f, rhs: vec4f): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 69
						, "value": "dph(lhs: vec4f, rhs: vec4f): float32"
					}, {
						"": "dp4(lhs: vec4f, rhs: vec4f): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 70
						, "value": "dp4(lhs: vec4f, rhs: vec4f): float32"
					}, {
						"": "cross(a: vec4f, b: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 72
						, "value": "cross(a: vec4f, b: vec4f): vec4f"
					}, {
						"": "len(v: vec4f): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 74
						, "value": "len(v: vec4f): float32"
					}, {
						"": "normalize(v: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 75
						, "value": "normalize(v: vec4f): vec4f"
					}, {
						"": "eval(v: vec4f, x: float32): float32"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/vec4f.ci"
						, "line": 77
						, "value": "eval(v: vec4f, x: float32): float32"
					}]
				}
			}, {
				"": "static if ((null) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "lib/vec/mat4f.ci"
				, "line": 1
				, "test": {
					"": "(null) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "lib/vec/mat4f.ci"
					, "line": 1
					, "left": {
						"": "(null)"
						, "kind": "()"
						, "type": "pointer"
						, "file": "lib/vec/mat4f.ci"
						, "line": 1
						, "args": [{
							"": "null"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "lib/vec/mat4f.ci"
							, "line": 1
							, "value": "null"
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "lib/vec/mat4f.ci"
						, "line": 1
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "lib/vec/mat4f.ci"
					, "line": 1
					, "stmt": [{
						"": "mat4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/mat4f.ci"
						, "line": 3
						, "value": "mat4f"
					}, {
						"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/vec/mat4f.ci"
						, "line": 13
						, "value": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
					}, {
						"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/vec/mat4f.ci"
						, "line": 25
						, "value": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
					}, {
						"": "dp3(mat: mat4f, vec: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/mat4f.ci"
						, "line": 29
						, "value": "dp3(mat: mat4f, vec: vec4f): vec4f"
					}, {
						"": "dp4(mat: mat4f, vec: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/mat4f.ci"
						, "line": 30
						, "value": "dp4(mat: mat4f, vec: vec4f): vec4f"
					}, {
						"": "dph(mat: mat4f, vec: vec4f): vec4f"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/vec/mat4f.ci"
						, "line": 31
						, "value": "dph(mat: mat4f, vec: vec4f): vec4f"
					}, {
						"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/vec/mat4f.ci"
						, "line": 33
						, "value": "mul(lhs: mat4f, rhs: mat4f): mat4f"
					}]
				}
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "test/test.ci"
			, "line": 5
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.ci"
				, "line": 5
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "emitDivI32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 14
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 15
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 17
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 18
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 19
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 20
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang/emit.ci"
				, "line": 23
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "max(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "max(a: int32, b: int32): int32"
			}, {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 10
				, "value": "i3"
			}, {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 11
				, "value": "i6"
			}, {
				"": "i2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 12
				, "value": "i2"
			}, {
				"": "i8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 13
				, "value": "i8"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 15
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 16
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 19
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 20
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 21
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 23
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 24
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 25
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 27
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 28
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 29
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 31
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 32
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 33
				, "value": "min2Xpr"
			}, {
				"": "max2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 35
				, "value": "max2Val"
			}, {
				"": "max2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 36
				, "value": "max2Var"
			}, {
				"": "max2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 37
				, "value": "max2Xpr"
			}, {
				"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 41
				, "value": "sumRlVal"
			}, {
				"": "sumLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 42
				, "value": "sumLrVal"
			}, {
				"": "sumRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 43
				, "value": "sumRlVar"
			}, {
				"": "sumLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 44
				, "value": "sumLrVar"
			}, {
				"": "sumRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "value": "sumRlXpr"
			}, {
				"": "sumLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "value": "sumLrXpr"
			}, {
				"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 50
				, "value": "anyRlVal"
			}, {
				"": "anyLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 51
				, "value": "anyLrVal"
			}, {
				"": "anyRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 52
				, "value": "anyRlVar"
			}, {
				"": "anyLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 53
				, "value": "anyLrVar"
			}, {
				"": "anyRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "value": "anyRlXpr"
			}, {
				"": "anyLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "value": "anyLrXpr"
			}, {
				"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 59
				, "value": "minRlVal"
			}, {
				"": "minLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 60
				, "value": "minLrVal"
			}, {
				"": "minRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 61
				, "value": "minRlVar"
			}, {
				"": "minLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 62
				, "value": "minLrVar"
			}, {
				"": "minRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "value": "minRlXpr"
			}, {
				"": "minLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "value": "minLrXpr"
			}, {
				"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 68
				, "value": "maxRlVal"
			}, {
				"": "maxLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 69
				, "value": "maxLrVal"
			}, {
				"": "maxRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 70
				, "value": "maxRlVar"
			}, {
				"": "maxLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 71
				, "value": "maxLrVar"
			}, {
				"": "maxRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "value": "maxRlXpr"
			}, {
				"": "maxLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "value": "maxLrXpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "test/lang/overload.inline.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "test/lang/overload.inline.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/initByRef.ci"
				, "line": 3
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/initByRef.ci"
					, "line": 3
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "test/lang/initByRef.ci"
						, "line": 3
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "test/lang/initByRef.ci"
							, "line": 3
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "test/lang/initByRef.ci"
								, "line": 3
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang/initByRef.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/initByRef.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang/initByRef.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/initByRef.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "test/lang/initByRef.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 3
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 6
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 11
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 14
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 17
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 20
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 23
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 26
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 29
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 32
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 37
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/function.ci"
				, "line": 45
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc/number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc/number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "testSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 37
				, "value": "testSin_f64"
			}, {
				"": "testCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 38
				, "value": "testCos_f64"
			}, {
				"": "testTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 39
				, "value": "testTan_f64"
			}, {
				"": "testLog_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 40
				, "value": "testLog_f64"
			}, {
				"": "testExp_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 41
				, "value": "testExp_f64"
			}, {
				"": "testPow_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 42
				, "value": "testPow_f64"
			}, {
				"": "testSqrt_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 43
				, "value": "testSqrt_f64"
			}, {
				"": "testAtan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/number.ci"
				, "line": 44
				, "value": "testAtan_f64"
			}, {
				"": "testSin_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 46
				, "value": "testSin_f32"
			}, {
				"": "testCos_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 47
				, "value": "testCos_f32"
			}, {
				"": "testTan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 48
				, "value": "testTan_f32"
			}, {
				"": "testLog_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 49
				, "value": "testLog_f32"
			}, {
				"": "testExp_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 50
				, "value": "testExp_f32"
			}, {
				"": "testPow_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 51
				, "value": "testPow_f32"
			}, {
				"": "testSqrt_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 52
				, "value": "testSqrt_f32"
			}, {
				"": "testAtan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/number.ci"
				, "line": 53
				, "value": "testAtan_f32"
			}, {
				"": "testPopulation_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 55
				, "value": "testPopulation_u32"
			}, {
				"": "testSwapBits_u32"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/stdc/number.ci"
				, "line": 56
				, "value": "testSwapBits_u32"
			}, {
				"": "testBitScanReverse_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 57
				, "value": "testBitScanReverse_u32"
			}, {
				"": "testBitScanForward_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 58
				, "value": "testBitScanForward_u32"
			}, {
				"": "testHighBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 59
				, "value": "testHighBit_u32"
			}, {
				"": "testLowBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 60
				, "value": "testLowBit_u32"
			}, {
				"": "testZeroExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 62
				, "value": "testZeroExtend_u32"
			}, {
				"": "testSignExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 63
				, "value": "testSignExtend_u32"
			}, {
				"": "testZeroExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 65
				, "value": "testZeroExtend_u64"
			}, {
				"": "testSignExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/number.ci"
				, "line": 66
				, "value": "testSignExtend_u64"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc/memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc/memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/stdc/memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc/memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc/memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc/memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/stdc/memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc/memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/stdc/memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/stdc/memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc/tryExec.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc/tryExec.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc/tryExec.ci"
				, "line": 19
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc/tryExec.ci"
				, "line": 23
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc/tryExec.ci"
				, "line": 37
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/stdc/tryExec.ci"
				, "line": 42
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 46
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 47
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 48
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 49
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 50
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 51
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/stdc/tryExec.ci"
				, "line": 52
				, "value": "tryExecErr6"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 44
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/array.ci"
					, "line": 44
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "test/lang/array.ci"
						, "line": 44
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "test/lang/array.ci"
							, "line": 44
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "test/lang/array.ci"
								, "line": 44
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang/array.ci"
						, "line": 44
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/array.ci"
					, "line": 44
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang/array.ci"
						, "line": 45
						, "value": "integer"
					}]
				}
			}, {
				"": "arrFixedNoInit"
				, "kind": ".variable"
				, "type": "int64[7]"
				, "file": "test/lang/array.ci"
				, "line": 49
				, "value": "arrFixedNoInit"
			}, {
				"": "arrArrayNoInit"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 50
				, "value": "arrArrayNoInit"
			}, {
				"": "arrSliceNoInit"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 51
				, "value": "arrSliceNoInit"
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 54
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "stmt": [{
						"": "arrFixedNoInit[i] := (42 + i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 55
					}]
				}
			}, {
				"": "arrArrayInitNull"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 59
				, "value": "arrArrayInitNull"
			}, {
				"": "arrSliceInitNull"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 60
				, "value": "arrSliceInitNull"
			}, {
				"": "arrArrayInitFixed"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 63
				, "value": "arrArrayInitFixed"
			}, {
				"": "arrSliceInitFixed"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 64
				, "value": "arrSliceInitFixed"
			}, {
				"": "arrArrayInitSlice"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 67
				, "value": "arrArrayInitSlice"
			}, {
				"": "arrSliceInitSlice"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 68
				, "value": "arrSliceInitSlice"
			}, {
				"": "arrArrayInitPtr"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 71
				, "value": "arrArrayInitPtr"
			}, {
				"": "strFixed"
				, "kind": ".variable"
				, "type": "char[7]"
				, "file": "test/lang/array.ci"
				, "line": 81
				, "value": "strFixed"
			}, {
				"": "pointer.copy(strFixed, pointer(\"string\"), 7);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 82
			}, {
				"": "debug(\"string as variant\", strFixed);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 83
			}, {
				"": "debug(\"string to variant\", variant(strFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 84
			}, {
				"": "strArray"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/array.ci"
				, "line": 86
				, "value": "strArray"
			}, {
				"": "debug(\"string as variant\", strArray);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 87
			}, {
				"": "debug(\"string to variant\", variant(strArray));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 88
			}, {
				"": "strSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang/array.ci"
				, "line": 90
				, "value": "strSlice"
			}, {
				"": "debug(\"string as variant\", strSlice);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 91
			}, {
				"": "debug(\"string to variant\", variant(strSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 92
			}, {
				"": "assert(arrSliceNoInit.length >= (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 98
			}, {
				"": "assert(arrSliceInitNull.length == (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 99
			}, {
				"": "assert(arrFixedNoInit[0] == (42));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 101
			}, {
				"": "lenSlice(values: int64[]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 103
				, "value": "lenSlice(values: int64[]): int32"
			}, {
				"": "nthFixed(idx: int32, values: int64[7]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 104
				, "value": "nthFixed(idx: int32, values: int64[7]): int64"
			}, {
				"": "nthArray(idx: int32, values: int64[*]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 105
				, "value": "nthArray(idx: int32, values: int64[*]): int64"
			}, {
				"": "nthSlice(idx: int32, values: int64[]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 106
				, "value": "nthSlice(idx: int32, values: int64[]): int64"
			}, {
				"": "assertEq(7, arrFixedNoInit.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 108
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 109
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 110
			}, {
				"": "assertEq(0, lenSlice(null));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 112
			}, {
				"": "assertEq(0, lenSlice(arrSliceInitNull));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 113
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 114
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 115
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 116
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 118
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "stmt": [{
						"": "expected"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "test/lang/array.ci"
						, "line": 119
						, "value": "expected"
					}, {
						"": "assert(expected == arrFixedNoInit[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 120
					}, {
						"": "assert(expected == arrArrayInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 121
					}, {
						"": "assert(expected == arrSliceInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 122
					}, {
						"": "assert(expected == nthFixed(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 124
					}, {
						"": "assert(expected == nthFixed(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 125
					}, {
						"": "assert(expected == nthFixed(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 126
					}, {
						"": "assert(expected == nthArray(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 128
					}, {
						"": "assert(expected == nthArray(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 129
					}, {
						"": "assert(expected == nthArray(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 130
					}, {
						"": "assert(expected == nthSlice(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 132
					}, {
						"": "assert(expected == nthSlice(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 134
					}, {
						"": "assert(expected == arrSliceInitSlice[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 136
					}]
				}
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/member.ci"
				, "line": 3
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "test/lang/member.ci"
				, "line": 53
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/method.ci"
				, "line": 3
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 40
				, "value": "globalFunction(this: RecordMethodTest, x: int32): void"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "test/lang/method.ci"
				, "line": 44
				, "value": "recordMethodTest"
			}, {
				"": "recordMethodTest.staticMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 58
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 59
			}, {
				"": "staticMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 62
				, "value": "staticMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "virtualMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 68
				, "value": "virtualMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "staticMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 75
			}, {
				"": "virtualMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 76
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 79
			}, {
				"": "RecordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 80
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 81
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang/recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang/recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang/recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang/recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang/recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementIf.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "test/lang/statementIf.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "test/lang/statementIf.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang/statementIf.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang/statementIf.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "test/lang/statementIf.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang/statementIf.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "test/lang/statementIf.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "test/lang/statementIf.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "test/lang/statementIf.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "test/lang/statementIf.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang/statementIf.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "test/lang/statementIf.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang/statementIf.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "test/lang/statementIf.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "test/lang/statementIf.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "test/lang/statementIf.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "test/lang/statementIf.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang/statementIf.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "test/lang/statementIf.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang/statementIf.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "test/lang/statementIf.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "test/lang/statementIf.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "test/lang/statementIf.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "test/lang/statementIf.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang/statementIf.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "test/lang/statementIf.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang/statementIf.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "test/lang/statementIf.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "test/lang/statementIf.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang/statementIf.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang/statementIf.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 73
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 73
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "test/lang/statementIf.ci"
						, "line": 73
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "test/lang/statementIf.ci"
							, "line": 73
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "test/lang/statementIf.ci"
								, "line": 73
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang/statementIf.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang/statementIf.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang/statementIf.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang/statementIf.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/statementFor.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "test/lang/statementFor.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang/statementFor.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "test/lang/statementFor.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "test/lang/statementFor.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang/statementFor.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "test/lang/statementFor.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 28
					}]
				}
			}, {
				"": "testMathFloor_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 3
				, "value": "testMathFloor_1"
			}, {
				"": "testMathFloor_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 4
				, "value": "testMathFloor_2"
			}, {
				"": "testMathFloor_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 5
				, "value": "testMathFloor_3"
			}, {
				"": "testMathFloor_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 6
				, "value": "testMathFloor_4"
			}, {
				"": "testMathFloor_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 7
				, "value": "testMathFloor_5"
			}, {
				"": "testMathFloor_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 8
				, "value": "testMathFloor_6"
			}, {
				"": "testMathSign_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 10
				, "value": "testMathSign_1F"
			}, {
				"": "testMathSign_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 11
				, "value": "testMathSign_2F"
			}, {
				"": "testMathSign_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 12
				, "value": "testMathSign_3F"
			}, {
				"": "testMathSign_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 13
				, "value": "testMathSign_1f"
			}, {
				"": "testMathSign_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 14
				, "value": "testMathSign_2f"
			}, {
				"": "testMathSign_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 15
				, "value": "testMathSign_3f"
			}, {
				"": "testMathAbs_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 17
				, "value": "testMathAbs_1F"
			}, {
				"": "testMathAbs_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 18
				, "value": "testMathAbs_2F"
			}, {
				"": "testMathAbs_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 19
				, "value": "testMathAbs_3F"
			}, {
				"": "testMathAbs_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 20
				, "value": "testMathAbs_1f"
			}, {
				"": "testMathAbs_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 21
				, "value": "testMathAbs_2f"
			}, {
				"": "testMathAbs_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 22
				, "value": "testMathAbs_3f"
			}, {
				"": "testMathMin_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 24
				, "value": "testMathMin_1f"
			}, {
				"": "testMathMax_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 25
				, "value": "testMathMax_2f"
			}, {
				"": "testMathMin_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 26
				, "value": "testMathMin_1F"
			}, {
				"": "testMathMax_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 27
				, "value": "testMathMax_2F"
			}, {
				"": "testMathClamp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 29
				, "value": "testMathClamp_1f"
			}, {
				"": "testMathClamp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 30
				, "value": "testMathClamp_1F"
			}, {
				"": "testMathLerp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 32
				, "value": "testMathLerp_1f"
			}, {
				"": "testMathLerp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 33
				, "value": "testMathLerp_1F"
			}, {
				"": "testMathSmooth_0f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 35
				, "value": "testMathSmooth_0f"
			}, {
				"": "testMathSmooth_0F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 36
				, "value": "testMathSmooth_0F"
			}, {
				"": "testMathSmooth_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 37
				, "value": "testMathSmooth_1f"
			}, {
				"": "testMathSmooth_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 38
				, "value": "testMathSmooth_1F"
			}, {
				"": "testMathMin_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 40
				, "value": "testMathMin_nan"
			}, {
				"": "testMathMin_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 41
				, "value": "testMathMin_1"
			}, {
				"": "testMathMax_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 42
				, "value": "testMathMax_nan"
			}, {
				"": "testMathMax_9"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 43
				, "value": "testMathMax_9"
			}, {
				"": "testMathSum_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 45
				, "value": "testMathSum_0"
			}, {
				"": "testMathSum_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 46
				, "value": "testMathSum_1"
			}, {
				"": "testMathSum_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 47
				, "value": "testMathSum_3"
			}, {
				"": "testMathSum_55"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 48
				, "value": "testMathSum_55"
			}, {
				"": "testMathEval_x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 50
				, "value": "testMathEval_x"
			}, {
				"": "testMathEval_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 51
				, "value": "testMathEval_0"
			}, {
				"": "testMathEval_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 52
				, "value": "testMathEval_1"
			}, {
				"": "testMathEval_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 53
				, "value": "testMathEval_2"
			}, {
				"": "testMathEval_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 54
				, "value": "testMathEval_3"
			}, {
				"": "testMathEval_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 55
				, "value": "testMathEval_4"
			}, {
				"": "testMathEval_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 56
				, "value": "testMathEval_5"
			}, {
				"": "testMathEval_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 57
				, "value": "testMathEval_6"
			}, {
				"": "testMathSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 59
				, "value": "testMathSin_f64"
			}, {
				"": "testMathCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 60
				, "value": "testMathCos_f64"
			}, {
				"": "testMathTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 61
				, "value": "testMathTan_f64"
			}, {
				"": "testMathSinh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 62
				, "value": "testMathSinh_f64"
			}, {
				"": "testMathCosh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 63
				, "value": "testMathCosh_f64"
			}, {
				"": "testMathAsin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 65
				, "value": "testMathAsin_f64"
			}, {
				"": "testMathAcos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 66
				, "value": "testMathAcos_f64"
			}, {
				"": "testMathCmp_f32"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/stdc/test.math.ci"
				, "line": 69
				, "value": "testMathCmp_f32"
			}, {
				"": "testMathCmp_f64"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/stdc/test.math.ci"
				, "line": 70
				, "value": "testMathCmp_f64"
			}, {
				"": "testMathAbsMod_f64_0a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 72
				, "value": "testMathAbsMod_f64_0a"
			}, {
				"": "testMathAbsMod_f64_0b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 73
				, "value": "testMathAbsMod_f64_0b"
			}, {
				"": "testMathAbsMod_f64_0c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 74
				, "value": "testMathAbsMod_f64_0c"
			}, {
				"": "testMathAbsMod_f64_9a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 76
				, "value": "testMathAbsMod_f64_9a"
			}, {
				"": "testMathAbsMod_f64_9b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 77
				, "value": "testMathAbsMod_f64_9b"
			}, {
				"": "testMathAbsMod_f64_9c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 78
				, "value": "testMathAbsMod_f64_9c"
			}, {
				"": "testMathAbsMod_f64_9d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 79
				, "value": "testMathAbsMod_f64_9d"
			}, {
				"": "testMathAbsMod_f64_8a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 81
				, "value": "testMathAbsMod_f64_8a"
			}, {
				"": "testMathAbsMod_f64_8b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 82
				, "value": "testMathAbsMod_f64_8b"
			}, {
				"": "testMathAbsMod_f64_8c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 83
				, "value": "testMathAbsMod_f64_8c"
			}, {
				"": "testMathAbsMod_f64_8d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/stdc/test.math.ci"
				, "line": 84
				, "value": "testMathAbsMod_f64_8d"
			}, {
				"": "testMathAbsMod_f32_0a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 86
				, "value": "testMathAbsMod_f32_0a"
			}, {
				"": "testMathAbsMod_f32_0b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 87
				, "value": "testMathAbsMod_f32_0b"
			}, {
				"": "testMathAbsMod_f32_0c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 88
				, "value": "testMathAbsMod_f32_0c"
			}, {
				"": "testMathAbsMod_f32_9a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 90
				, "value": "testMathAbsMod_f32_9a"
			}, {
				"": "testMathAbsMod_f32_9b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 91
				, "value": "testMathAbsMod_f32_9b"
			}, {
				"": "testMathAbsMod_f32_9c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 92
				, "value": "testMathAbsMod_f32_9c"
			}, {
				"": "testMathAbsMod_f32_9d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 93
				, "value": "testMathAbsMod_f32_9d"
			}, {
				"": "testMathAbsMod_f32_8a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 95
				, "value": "testMathAbsMod_f32_8a"
			}, {
				"": "testMathAbsMod_f32_8b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 96
				, "value": "testMathAbsMod_f32_8b"
			}, {
				"": "testMathAbsMod_f32_8c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 97
				, "value": "testMathAbsMod_f32_8c"
			}, {
				"": "testMathAbsMod_f32_8d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/stdc/test.math.ci"
				, "line": 98
				, "value": "testMathAbsMod_f32_8d"
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293335
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293340
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 293345
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293349
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293354
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 293359
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293363
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293368
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293372
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293373
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 293378
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293379
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293380
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293384
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293385
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 293389
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 293398
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293402
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293403
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293407
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293412
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293416
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293421
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293425
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293430
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293434
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293439
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293443
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293448
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293452
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293457
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293461
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 293466
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293470
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 293471
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293472
		, "size": 5
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293477
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293482
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293484
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293486
		, "size": 1
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293487
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293492
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 293497
		, "size": 1
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 293498
		, "size": 5
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 293503
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 293508
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 293509
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 293518
		, "size": 1
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 293519
		, "size": 9
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293528
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 293533
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293538
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293543
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293548
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293553
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293558
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293559
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 293560
		, "size": 1
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293561
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293566
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293568
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293570
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293574
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293578
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293583
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293587
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293589
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293591
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293592
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293594
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293598
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293600
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293604
		, "size": 1
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293605
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293609
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293614
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293616
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293620
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293622
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293626
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293631
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293633
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293635
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293637
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293641
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293643
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293647
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293649
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293651
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293653
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293657
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293659
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293663
		, "size": 2
	}, {
		"instruction": "jmp +10"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293665
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293669
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293671
		, "size": 4
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293675
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293677
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293681
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293686
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293691
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293693
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 293695
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293696
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293700
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293702
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293706
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293708
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293710
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293714
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293716
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293718
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293720
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 293722
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293723
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293727
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293729
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293733
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293735
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293737
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293741
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293743
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293747
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293749
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293753
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293755
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 293757
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293758
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293762
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293764
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293768
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293770
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293772
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293776
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293780
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293785
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293790
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293792
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 293794
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293795
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293799
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293801
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293805
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293807
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293809
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293813
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293815
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293817
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293819
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 293821
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293822
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293826
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293828
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293832
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293834
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293836
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293840
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293842
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293846
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293848
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293852
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293854
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 293856
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 293857
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293861
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 293863
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293867
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 293869
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 293871
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293875
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293879
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293884
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293889
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293894
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293898
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293899
		, "size": 1
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 293900
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293905
		, "size": 4
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293909
		, "size": 4
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293913
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293917
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293919
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293921
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293923
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293925
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293926
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293927
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293928
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293930
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293932
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(23)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293933
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293935
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293936
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293938
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293939
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293941
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293945
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293947
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293951
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293953
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293957
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293959
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293963
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293964
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293965
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293966
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(26)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293970
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293972
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(26)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293976
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293978
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293982
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(25)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293983
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293985
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293989
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(24)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 293990
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293992
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 293996
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 293997
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294001
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294006
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294008
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294012
		, "size": 2
	}, {
		"instruction": "jmp +47"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294014
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294018
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294023
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294025
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294029
		, "size": 2
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294031
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294035
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294040
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294042
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294046
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294048
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294052
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294057
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294059
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294061
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294063
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294068
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294070
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294074
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294076
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294080
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294085
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294087
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294089
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294093
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294095
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294099
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294104
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294106
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294108
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294112
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294114
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294118
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294123
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294125
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294127
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294129
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294133
		, "size": 2
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294135
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294139
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294141
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294143
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294147
		, "size": 2
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294149
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294153
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294155
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294157
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294161
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294163
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294167
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294169
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294171
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294173
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294175
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294177
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294179
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294183
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294185
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294189
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294191
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294193
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294195
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294199
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294201
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(29)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294205
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294207
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294209
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294211
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294215
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294217
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(28)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294221
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294223
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294225
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294227
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294231
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294233
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294237
		, "size": 2
	}, {
		"instruction": "jmp +50"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294239
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294243
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294245
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294249
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294251
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294255
		, "size": 2
	}, {
		"instruction": "jmp +30"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294257
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294261
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294263
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294267
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294269
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294273
		, "size": 2
	}, {
		"instruction": "jmp +10"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294275
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294279
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294281
		, "size": 4
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294285
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294287
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294289
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294291
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(32)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294295
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294297
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294301
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294303
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294307
		, "size": 2
	}, {
		"instruction": "jmp +10"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294309
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(32)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294313
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294315
		, "size": 4
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294319
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294321
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294323
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294327
		, "size": 2
	}, {
		"instruction": "jmp +10"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294329
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(31)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294333
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294335
		, "size": 4
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294339
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294341
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294343
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294347
		, "size": 2
	}, {
		"instruction": "jmp +10"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294349
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(30)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294353
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294355
		, "size": 4
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294359
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294361
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294365
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294370
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294375
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294380
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294385
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294387
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294389
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294390
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294394
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294396
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294400
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294402
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294404
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294408
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294410
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294412
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294413
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294417
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294419
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294423
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294425
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294427
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294431
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294433
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294435
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294436
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294440
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294442
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294446
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294448
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294450
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294454
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294459
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294464
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294466
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294468
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294469
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294473
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294475
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294479
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294481
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294483
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294487
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294492
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294494
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294496
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294497
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294501
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294503
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294507
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294509
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294511
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294515
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294520
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294522
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294524
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294525
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294529
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294531
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294535
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294537
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294539
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294543
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294545
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294547
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294549
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294551
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294553
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294555
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294556
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294560
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294562
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294566
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294568
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294570
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294574
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294576
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294578
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294579
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294583
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294585
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294589
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294591
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294593
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294597
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294599
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294601
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294602
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294606
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294608
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294612
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294614
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294616
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294620
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294622
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294624
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294626
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294628
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294629
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294633
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294635
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294639
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294641
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294643
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294647
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294649
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294651
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294653
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294654
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294658
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294660
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294664
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294666
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294668
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(34)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294672
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294674
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294676
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294678
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294679
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294683
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294685
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294689
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294691
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294693
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294697
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294699
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294703
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294705
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294709
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294711
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294715
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294717
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294721
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294723
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294725
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294726
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294730
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294732
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294736
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294738
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294740
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294744
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294746
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294748
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294749
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294753
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294755
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294759
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294761
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294763
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294767
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294769
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294771
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294772
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294776
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294778
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294782
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294784
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294786
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294790
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(38)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294794
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294796
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(38)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294800
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294802
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294806
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294808
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294810
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294811
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294815
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294817
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294821
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294823
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294825
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294829
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294831
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294835
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294837
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294839
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294840
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294844
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294846
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294850
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294852
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294854
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294858
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294860
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294864
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294866
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 294868
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294869
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294873
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294875
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294879
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294881
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294883
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 294887
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294891
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294896
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294901
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294906
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294911
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294913
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 294915
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294916
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294920
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294922
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294926
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294928
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294930
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294934
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294936
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 294938
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294939
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294943
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294945
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294949
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294951
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294953
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294957
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294959
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 294961
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294962
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294966
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 294968
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294972
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 294974
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 294976
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294980
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 294985
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294990
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294992
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 294994
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 294995
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 294999
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295001
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295005
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295007
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295009
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 295013
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295018
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295020
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295022
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295023
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295027
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295029
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295033
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295035
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295037
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 295041
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295046
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295048
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295050
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295051
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295055
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295057
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295061
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295063
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295065
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295069
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295071
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295073
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295075
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295077
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295079
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295081
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295082
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295086
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295088
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295092
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295094
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295096
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295100
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295102
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295104
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295105
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295109
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295111
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295115
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295117
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295119
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295123
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295125
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295127
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295128
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295132
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295134
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295138
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295140
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295142
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(42)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295146
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(42)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295148
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295150
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295152
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295154
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295155
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295159
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295161
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295165
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295167
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295169
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295173
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295175
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295177
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295179
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295180
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295184
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295186
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295190
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295192
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295194
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295198
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295200
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295202
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295204
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295205
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295209
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295211
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295215
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295217
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295219
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(43)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295223
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295225
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(43)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295229
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295231
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(43)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295235
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295237
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(43)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295241
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295243
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295247
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295249
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295251
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295252
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295256
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295258
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295262
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295264
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295266
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295270
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295272
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295274
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295275
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295279
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295281
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295285
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295287
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295289
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295293
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295295
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295297
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295298
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295302
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295304
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295308
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295310
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295312
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295316
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(44)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295320
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295322
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(44)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295326
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295328
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295332
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295334
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295336
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295337
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295341
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295343
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295347
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295349
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295351
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(43)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295355
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295357
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295361
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295363
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295365
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295366
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295370
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295372
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295376
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295378
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295380
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(42)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295384
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295386
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295390
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295392
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 295394
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 295395
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295399
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 295401
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295405
		, "size": 2
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 295407
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295409
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 295413
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 295417
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 295422
		, "size": 5
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 295427
		, "size": 5
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 295432
		, "size": 5
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 295437
		, "size": 5
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 295442
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 295451
		, "size": 2
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 295453
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 295462
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 295463
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 295472
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295473
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295478
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295483
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295488
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295493
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 295495
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295496
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295498
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295500
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295505
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295510
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295515
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295520
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295525
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295530
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295535
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295540
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295545
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295550
		, "size": 5
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 295555
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 295559
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295561
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(22)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295563
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 295565
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295567
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295569
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295574
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295579
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295584
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295589
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295594
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295599
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295604
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295609
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295614
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295619
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295624
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295629
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295634
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295639
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295644
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295649
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295654
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295659
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295664
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295669
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295674
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295679
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295684
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295689
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295694
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295699
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295704
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295709
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295714
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295719
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295724
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295729
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295734
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295739
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295744
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295749
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295754
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295759
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295764
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295769
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295774
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295779
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295784
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295789
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295794
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295799
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295804
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295809
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295814
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295819
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295824
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295829
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295834
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295839
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295844
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295849
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295854
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295859
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295864
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295869
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295874
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295879
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295884
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295889
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295894
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295899
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295904
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295909
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295914
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295919
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295924
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295929
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295934
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295939
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295944
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295949
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295954
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(65)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295959
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 295961
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 295963
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 295964
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 295969
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295974
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 295979
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 295980
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 295984
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 295989
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 295990
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 295995
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296000
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 296002
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296003
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296007
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296012
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296013
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296018
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296023
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 296025
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296026
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296030
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296032
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296033
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296038
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296043
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 296045
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296046
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296050
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296051
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296056
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 296061
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296062
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296066
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296070
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296074
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296078
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296082
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296086
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296090
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296094
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296098
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296102
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296106
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296110
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296114
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296118
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296122
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296126
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296130
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 296134
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296138
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296143
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296145
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296149
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296151
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296155
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296156
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296158
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296162
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296163
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296165
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296169
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296171
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296175
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296177
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296181
		, "size": 2
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296183
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296187
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296189
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296193
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296194
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296196
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296200
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296201
		, "size": 2
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296203
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296207
		, "size": 2
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296209
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296213
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296215
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296219
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296221
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296225
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296226
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296228
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296232
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296233
		, "size": 2
	}, {
		"instruction": "nfc(1)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296235
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296239
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296241
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296245
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296246
		, "size": 2
	}, {
		"instruction": "inc.i32(+24)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 296248
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 296252
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296253
		, "size": 9
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296262
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296271
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 296273
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296274
		, "size": 2
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8b"
		, "offs": 296276
		, "size": 1
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296277
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296282
		, "size": 2
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296284
		, "size": 5
	}, {
		"instruction": "b32.shl 0x002"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296289
		, "size": 2
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296291
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296296
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296298
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296300
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296302
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 296307
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296308
		, "size": 2
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296310
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296312
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 296317
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 296318
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296319
		, "size": 2
	}, {
		"instruction": "b32.sar 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296321
		, "size": 2
	}, {
		"instruction": "b32.and 0x01f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296323
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 296325
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296326
		, "size": 2
	}, {
		"instruction": "b32.shl 0x010"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296328
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296330
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 296335
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296336
		, "size": 2
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296338
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296340
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 296345
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 296346
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296347
		, "size": 2
	}, {
		"instruction": "b32.and 0x0ff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 296349
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 296351
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296352
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296354
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296359
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296364
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296368
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296370
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296375
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296380
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296384
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296386
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296387
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296392
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296396
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296398
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296403
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296408
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296412
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296414
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296419
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296424
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296428
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296430
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296431
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296436
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296440
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296442
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296447
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296452
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296456
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296458
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296463
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296468
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296472
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296474
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296475
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296480
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296484
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296486
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296491
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296496
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296500
		, "size": 2
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296502
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296507
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296512
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296516
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296518
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296519
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296524
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296528
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296530
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 296539
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296540
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(23)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296544
		, "size": 2
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296546
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 296555
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296556
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296560
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296562
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 296571
		, "size": 1
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296572
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(25)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296576
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296578
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 296580
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(27)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296581
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 296583
		, "size": 1
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296584
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296588
		, "size": 9
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296597
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296601
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296603
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 296605
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296606
		, "size": 9
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296615
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296619
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296621
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 296623
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296624
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(35)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 296628
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 296630
		, "size": 9
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296639
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(34)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296643
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 296645
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 296650
		, "size": 1
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296651
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(35)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296655
		, "size": 2
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 296657
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 296662
		, "size": 1
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296663
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296667
		, "size": 2
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 296669
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 296674
		, "size": 1
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296675
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(36)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296679
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296681
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 296683
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296684
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 296686
		, "size": 1
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296687
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 296691
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296696
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(39)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296700
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296702
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 296704
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 296705
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296710
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296714
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296716
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 296718
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296719
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296723
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 296725
		, "size": 5
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296730
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(37)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296734
		, "size": 2
	}, {
		"instruction": "nfc(20)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296736
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(38)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296740
		, "size": 2
	}, {
		"instruction": "nfc(21)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296742
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(39)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296746
		, "size": 2
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296748
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(40)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296752
		, "size": 2
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296754
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(41)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296758
		, "size": 2
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296760
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(42)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296764
		, "size": 2
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296766
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(43)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296770
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296772
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296773
		, "size": 5
	}, {
		"instruction": "nfc(18)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296778
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(44)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296782
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296784
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296785
		, "size": 5
	}, {
		"instruction": "nfc(19)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296790
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(45)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296794
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 296796
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296797
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296798
		, "size": 5
	}, {
		"instruction": "nfc(26)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296803
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 296807
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(46)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296808
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 296810
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296811
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296812
		, "size": 5
	}, {
		"instruction": "nfc(27)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296817
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 296821
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296822
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296827
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296832
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296836
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296841
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296846
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296850
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296855
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296860
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296864
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296869
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296874
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296878
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296880
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296881
		, "size": 5
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296886
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296890
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296894
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296896
		, "size": 2
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296898
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296903
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296907
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296911
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296913
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296914
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296918
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296922
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296924
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296925
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296929
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296933
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296935
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296936
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296940
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 296944
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296946
		, "size": 1
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 296947
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 296951
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 296955
		, "size": 9
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 296964
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296973
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296978
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 296983
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 296988
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296989
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 296994
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 296999
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297003
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297007
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297012
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297017
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297022
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297023
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297028
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297033
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297037
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297041
		, "size": 4
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297045
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 297049
		, "size": 4
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297053
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297057
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297061
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297065
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 297066
		, "size": 4
	}, {
		"instruction": "nfc(8)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297070
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297074
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297078
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297083
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297088
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297093
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297094
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297099
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297104
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297108
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297112
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297117
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297122
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297127
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297128
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297133
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297138
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297142
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297146
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297151
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297156
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297160
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297165
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297170
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297174
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297179
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297184
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297188
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297193
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297198
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297202
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297207
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297212
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297216
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297221
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297226
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297230
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297235
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297240
		, "size": 4
	}, {
		"instruction": "inc.sp(+56)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297244
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297248
		, "size": 4
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297252
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297256
		, "size": 1
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 297257
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297261
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297266
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 297268
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 297269
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297270
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297274
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 297276
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 297280
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 297281
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297285
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297287
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 297292
		, "size": 1
	}, {
		"instruction": "jnz -32"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 297293
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297297
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297301
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297306
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297307
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297312
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297316
		, "size": 5
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297321
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297325
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(1)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 297327
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297329
		, "size": 2
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297331
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297335
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297339
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297344
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297349
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297353
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297357
		, "size": 5
	}, {
		"instruction": "load.c32 83"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297362
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297367
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297372
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297373
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297378
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297383
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297387
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297391
		, "size": 5
	}, {
		"instruction": "load.c32 84"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297396
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297401
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297406
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297407
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297412
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297417
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297421
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297425
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297430
		, "size": 5
	}, {
		"instruction": "load.c32 87"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297435
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297440
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297445
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297446
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297451
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297456
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297458
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297462
		, "size": 5
	}, {
		"instruction": "load.c32 88"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297467
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297472
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297477
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297478
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297483
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297488
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297490
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297494
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297499
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297504
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297509
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297514
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297519
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297520
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297525
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297530
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297532
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297536
		, "size": 5
	}, {
		"instruction": "load.c32 92"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297541
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297546
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297551
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297552
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297557
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297562
		, "size": 2
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297564
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297568
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297570
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 297571
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 297572
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 297576
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297580
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297585
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297590
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297595
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297600
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297605
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297610
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297615
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297619
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297621
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 297622
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 297623
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 297627
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297631
		, "size": 5
	}, {
		"instruction": "load.c32 99"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297636
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297641
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297646
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297651
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297656
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297661
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297666
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 297670
		, "size": 2
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 297672
		, "size": 9
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 297681
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 297682
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 297686
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297690
		, "size": 5
	}, {
		"instruction": "load.c32 101"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297695
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297700
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297705
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297710
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297715
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297720
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 297725
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297729
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297734
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297739
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297744
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297749
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297750
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297754
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297759
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297761
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297766
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297771
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297772
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297776
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297781
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297783
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297788
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297793
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297794
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297798
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 297799
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297800
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297805
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297810
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297811
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297815
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297820
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297825
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297826
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297830
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297831
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 297832
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297834
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297839
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297840
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297844
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297849
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297854
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297855
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297859
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297864
		, "size": 1
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297865
		, "size": 5
	}, {
		"instruction": "load.sp(+84)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297870
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297874
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297879
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297880
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297884
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297889
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297894
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297895
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297899
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297904
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(11)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 297905
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297907
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297912
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297913
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297917
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297922
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297927
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297928
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297932
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297937
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 297938
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297940
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297945
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297946
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297950
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 297955
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 297960
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 297961
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 297965
		, "size": 1
	}, {
		"instruction": "jmp +790"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 297966
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 297970
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297975
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 297977
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5c"
		, "offs": 297978
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 297979
		, "size": 2
	}, {
		"instruction": "load.sp(+92)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 297981
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 297985
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 297987
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 297991
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 297992
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 297993
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 297997
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298001
		, "size": 5
	}, {
		"instruction": "load.c32 120"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298006
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298011
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298016
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298021
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298026
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298031
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298036
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298040
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298042
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298044
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 298046
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 298050
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298051
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298052
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298056
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298060
		, "size": 5
	}, {
		"instruction": "load.c32 121"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298065
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298070
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298075
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298080
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298085
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298090
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298095
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298099
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298101
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298103
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 298105
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 298109
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298110
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298111
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298115
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298119
		, "size": 5
	}, {
		"instruction": "load.c32 122"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298124
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298129
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298134
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298139
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298144
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298149
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298154
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298158
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298160
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298161
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 298163
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298167
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298172
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298173
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298177
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298178
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298182
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298186
		, "size": 5
	}, {
		"instruction": "load.c32 124"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298191
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298196
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298201
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298206
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298211
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298216
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298221
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298225
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298227
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298228
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298230
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298232
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298237
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298238
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298242
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298243
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298247
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298251
		, "size": 5
	}, {
		"instruction": "load.c32 125"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298256
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298261
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298266
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298271
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298276
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298281
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298286
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298290
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298292
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298293
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298295
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298297
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298302
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298303
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298307
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298308
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298312
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298316
		, "size": 5
	}, {
		"instruction": "load.c32 126"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298321
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298326
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298331
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298336
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298341
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298346
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298351
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298355
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298357
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298358
		, "size": 2
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 298360
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298364
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298369
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298370
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298374
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298375
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298379
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298383
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298388
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298393
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298398
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298403
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298408
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298413
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298418
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298422
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298424
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298425
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298427
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298429
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298434
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298435
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298439
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298440
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298444
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298448
		, "size": 5
	}, {
		"instruction": "load.c32 129"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298453
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298458
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298463
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298468
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298473
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298478
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298483
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298487
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298489
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298490
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298492
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298494
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298499
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298500
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298504
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298505
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298509
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298513
		, "size": 5
	}, {
		"instruction": "load.c32 130"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298518
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298523
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298528
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298533
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298538
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298543
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298548
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298552
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298554
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298555
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298557
		, "size": 5
	}, {
		"instruction": "load.sp(+108)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 298562
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298566
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298571
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298572
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298576
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298577
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298581
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298585
		, "size": 5
	}, {
		"instruction": "load.c32 132"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298590
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298595
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298600
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298605
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298610
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298615
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298620
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298624
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 298626
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298627
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298629
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298631
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298636
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298637
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298641
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298642
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298646
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298650
		, "size": 5
	}, {
		"instruction": "load.c32 134"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298655
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298660
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298665
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298670
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298675
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298680
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298685
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 298689
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298691
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298693
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 298695
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 298699
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 298700
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 298701
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 298705
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298709
		, "size": 5
	}, {
		"instruction": "load.c32 136"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298714
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298719
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298724
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298729
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298734
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298739
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 298744
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298748
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 298752
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298756
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298758
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 298763
		, "size": 1
	}, {
		"instruction": "jnz -794"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 298764
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298768
		, "size": 4
	}, {
		"instruction": "inc.sp(+32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298772
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298776
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298781
		, "size": 2
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298783
		, "size": 5
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298788
		, "size": 2
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298790
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298795
		, "size": 2
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298797
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298802
		, "size": 2
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298804
		, "size": 5
	}, {
		"instruction": "set.x1 sp(5)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298809
		, "size": 2
	}, {
		"instruction": "load.c32 15"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298811
		, "size": 5
	}, {
		"instruction": "set.x1 sp(6)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298816
		, "size": 2
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298818
		, "size": 5
	}, {
		"instruction": "set.x1 sp(7)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298823
		, "size": 2
	}, {
		"instruction": "load.c32 17"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298825
		, "size": 5
	}, {
		"instruction": "set.x1 sp(8)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298830
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298832
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298836
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298841
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 298843
		, "size": 4
	}, {
		"instruction": "set.x1 sp(2)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298847
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298849
		, "size": 5
	}, {
		"instruction": "set.x1 sp(3)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298854
		, "size": 2
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298856
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298858
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298863
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298865
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298870
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298871
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298875
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298877
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298882
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298884
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298886
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298887
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298891
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298893
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298898
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298903
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298904
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298908
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298910
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298915
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298920
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298921
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298925
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298927
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298932
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298934
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298939
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298940
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298944
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298946
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298951
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 298953
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298958
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298959
		, "size": 4
	}, {
		"instruction": "dup.x4 sp(0)"
		, "name": "dup.x4"
		, "code": "0x12"
		, "offs": 298963
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 298965
		, "size": 5
	}, {
		"instruction": "set.x1 sp(4)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 298970
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 298972
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 298974
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298975
		, "size": 4
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 298979
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 298983
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 298984
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 298988
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 298989
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 298990
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 298994
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 298995
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 298996
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299000
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 299001
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 299005
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299006
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299010
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299011
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299016
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299020
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 299021
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299022
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299026
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 299027
		, "size": 4
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299031
		, "size": 5
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299036
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299040
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299041
		, "size": 5
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299046
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299050
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299051
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299056
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299060
		, "size": 1
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 299061
		, "size": 4
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299065
		, "size": 5
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 299070
		, "size": 2
	}, {
		"instruction": "inc.sp(+4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 299072
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 299076
		, "size": 1
	}, {
		"instruction": "load.sp(+6)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299077
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299081
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 299082
		, "size": 1
	}, {
		"instruction": "load.sp(+5)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299083
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299087
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299088
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299093
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 299097
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299098
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299103
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299108
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299113
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299117
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299118
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299122
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 299123
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299124
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299128
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299129
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299133
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 299134
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299135
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299139
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299140
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299144
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 299145
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299146
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299150
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299151
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299152
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299156
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299157
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299161
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299162
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299163
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299167
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299168
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299172
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299173
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299174
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299175
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299179
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299180
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299184
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 299185
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299186
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299190
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299191
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299195
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 299196
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299197
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299198
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299202
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299203
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299207
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 299208
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299209
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299213
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299214
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299218
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 299219
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299220
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299221
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299226
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299231
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299235
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299236
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299240
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 299241
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299242
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299246
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 299247
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299248
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299252
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299253
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299257
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 299258
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299259
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299263
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299264
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299268
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 299269
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299270
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299274
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299275
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299279
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 299280
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299281
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299285
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299286
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299290
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 299291
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299292
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299296
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299297
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299301
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 299302
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299303
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299307
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299308
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299312
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 299313
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299314
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299318
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299319
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299323
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 299324
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299325
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299329
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299330
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299334
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 299335
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299336
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299340
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(26)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299341
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 299343
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299344
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299348
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(27)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299349
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 299351
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299352
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299356
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 299357
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299358
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299359
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299363
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299364
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299368
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299369
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299370
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299374
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299375
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299379
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299380
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299381
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299382
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299386
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299387
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299391
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 299392
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299393
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299397
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299398
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299402
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 299403
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299404
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299405
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299409
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299410
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299414
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 299415
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299416
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299420
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299421
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299425
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 299426
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299427
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299428
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299433
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299438
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299442
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299443
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299447
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 299448
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299449
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299453
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 299454
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299455
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299459
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299460
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299464
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 299465
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299466
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299470
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299471
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299475
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 299476
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299477
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299481
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299482
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299486
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 299487
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299488
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299492
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299493
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299497
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 299498
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299499
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299503
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299504
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299508
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 299509
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299510
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299514
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299515
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299519
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 299520
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299521
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299525
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299526
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299530
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 299531
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299532
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299536
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299537
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299541
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 299542
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299543
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299547
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(48)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299548
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 299550
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299551
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299555
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(49)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299556
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 299558
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299559
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299563
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 299564
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299565
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299566
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299570
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299571
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299575
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299576
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299577
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299581
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299582
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299586
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299587
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299588
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299589
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299593
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299594
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299598
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 299599
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299600
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299604
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299605
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299609
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 299610
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299611
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299612
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299616
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299617
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299621
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 299622
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299623
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299627
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299628
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299632
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 299633
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299634
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299635
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299640
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299645
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299649
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299650
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299654
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 299655
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299656
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299660
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 299661
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299662
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299666
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299667
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299671
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 299672
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299673
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299677
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299678
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299682
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 299683
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299684
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299688
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299689
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299693
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 299694
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299695
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299699
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299700
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299704
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 299705
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299706
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299710
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299711
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299715
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 299716
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299717
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299721
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299722
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299726
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 299727
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299728
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299732
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299733
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299737
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 299738
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299739
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299743
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299744
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299748
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 299749
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299750
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299754
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(70)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299755
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 299757
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299758
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299762
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(71)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299763
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 299765
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299766
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299770
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 299771
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299772
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299773
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299777
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299778
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299782
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299783
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299784
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299788
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299789
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299793
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299794
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299795
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299796
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299800
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299801
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299805
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 299806
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299807
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299811
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299812
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299816
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 299817
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299818
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299819
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299823
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299824
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299828
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 299829
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299830
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299834
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299835
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 299839
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 299840
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299841
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299842
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 299847
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299852
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299856
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299857
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299861
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 299862
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299863
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299867
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 299868
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299869
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299873
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299874
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299878
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 299879
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299880
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299884
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299885
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299889
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 299890
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299891
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299895
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299896
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299900
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 299901
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299902
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299906
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299907
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299911
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 299912
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299913
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299917
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299918
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299922
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 299923
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299924
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299928
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299929
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299933
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 299934
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299935
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299939
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299940
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299944
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 299945
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299946
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299950
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299951
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299955
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 299956
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299957
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299961
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(92)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299962
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 299964
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299965
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299969
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(93)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 299970
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 299972
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299973
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299977
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 299978
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 299979
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299980
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299984
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299985
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299989
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 299990
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299991
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 299995
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 299996
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300000
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300001
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300002
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300003
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300007
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300008
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300012
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 300013
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300014
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300018
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300019
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300023
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 300024
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300025
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300026
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300030
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300031
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300035
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 300036
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300037
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300041
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300042
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300046
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 300047
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300048
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300049
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300054
		, "size": 5
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300059
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300063
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300064
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300068
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 300069
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300070
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300074
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 300075
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300076
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300080
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300081
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300085
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 300086
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300087
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300091
		, "size": 1
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300092
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300096
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 300097
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300098
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300102
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300103
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300107
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 300108
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300109
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300113
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300114
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300118
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 300119
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300120
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300124
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300125
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300129
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 300130
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300131
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300135
		, "size": 1
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300136
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300140
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 300141
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300142
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300146
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300147
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300151
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 300152
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300153
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300157
		, "size": 1
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300158
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300162
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 300163
		, "size": 1
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300164
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300168
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(114)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300169
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 300171
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300172
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300176
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(115)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300177
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 300179
		, "size": 1
	}, {
		"instruction": "load.sp(+52)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300180
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300184
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 300185
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300186
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300187
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300191
		, "size": 1
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300192
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300196
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300197
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300198
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300202
		, "size": 1
	}, {
		"instruction": "load.sp(+64)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300203
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300207
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300208
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300209
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300210
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300214
		, "size": 1
	}, {
		"instruction": "load.sp(+68)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300215
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300219
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 300220
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300221
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300225
		, "size": 1
	}, {
		"instruction": "load.sp(+72)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300226
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300230
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 300231
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300232
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300233
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300237
		, "size": 1
	}, {
		"instruction": "load.sp(+76)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300238
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300242
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 300243
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300244
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300248
		, "size": 1
	}, {
		"instruction": "load.sp(+80)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300249
		, "size": 4
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 300253
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 300254
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300255
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300256
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300261
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300266
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300268
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 300270
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300271
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 300273
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300274
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300276
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 300278
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300279
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300281
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 300283
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300284
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300286
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 300288
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300289
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300291
		, "size": 2
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 300293
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300294
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300296
		, "size": 2
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 300298
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300299
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300301
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 300303
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300304
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300306
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 300308
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300309
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300311
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 300313
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300314
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(136)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300316
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 300318
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300319
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(137)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300321
		, "size": 2
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 300323
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300324
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 300326
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300327
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300328
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300330
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300332
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300333
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300335
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300337
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300338
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300339
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300341
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 300343
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300344
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300346
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 300348
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300349
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300350
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300352
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 300354
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300355
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300357
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 300359
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300360
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300361
		, "size": 5
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300366
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300371
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300373
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 300375
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300376
		, "size": 2
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 300378
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300379
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300381
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 300383
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300384
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300386
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 300388
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300389
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300391
		, "size": 2
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 300393
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300394
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300396
		, "size": 2
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 300398
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300399
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(8)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300401
		, "size": 2
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 300403
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300404
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300406
		, "size": 2
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 300408
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300409
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300411
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 300413
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300414
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300416
		, "size": 2
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 300418
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300419
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(158)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300421
		, "size": 2
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 300423
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300424
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(159)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300426
		, "size": 2
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 300428
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300429
		, "size": 2
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 300431
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300432
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300433
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(15)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300435
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300437
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300438
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(16)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300440
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300442
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300443
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300444
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(17)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300446
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 300448
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300449
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(18)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300451
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 300453
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300454
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300455
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(19)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300457
		, "size": 2
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 300459
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300460
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(20)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300462
		, "size": 2
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 300464
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300465
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 300466
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 300475
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300484
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300486
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 300488
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300489
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 300491
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300492
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300494
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 300496
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300497
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300499
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 300501
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300502
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300504
		, "size": 2
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 300506
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300507
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300509
		, "size": 2
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 300511
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300512
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300514
		, "size": 2
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 300516
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300517
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300519
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 300521
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300522
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300524
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 300526
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300527
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300529
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 300531
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300532
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(194)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300534
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 300536
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300537
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(196)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300539
		, "size": 2
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 300541
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300542
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 300544
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300545
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300546
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300548
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 300550
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300551
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300553
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 300555
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300556
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300557
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300559
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 300561
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300562
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300564
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 300566
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300567
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300568
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300570
		, "size": 2
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 300572
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300573
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300575
		, "size": 2
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 300577
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300578
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 300579
		, "size": 9
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 300588
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300597
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300599
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 300601
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300602
		, "size": 2
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 300604
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300605
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300607
		, "size": 2
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 300609
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300610
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300612
		, "size": 2
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 300614
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300615
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300617
		, "size": 2
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 300619
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300620
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300622
		, "size": 2
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 300624
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300625
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(16)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300627
		, "size": 2
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 300629
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300630
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300632
		, "size": 2
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 300634
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300635
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300637
		, "size": 2
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 300639
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300640
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300642
		, "size": 2
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 300644
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300645
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(231)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300647
		, "size": 2
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 300649
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300650
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(233)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300652
		, "size": 2
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 300654
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(26)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300655
		, "size": 2
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6c"
		, "offs": 300657
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300658
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300659
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(29)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300661
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 300663
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300664
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(30)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300666
		, "size": 2
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 300668
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300669
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300670
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(31)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300672
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 300674
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300675
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(32)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300677
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 300679
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300680
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300681
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(33)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300683
		, "size": 2
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 300685
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300686
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(34)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300688
		, "size": 2
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 300690
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300691
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 300692
		, "size": 5
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 300697
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300702
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300704
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 300706
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300707
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300709
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 300711
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300712
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(4)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300714
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 300716
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300717
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(5)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300719
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 300721
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300722
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(6)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300724
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 300726
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300727
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300729
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 300731
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(7)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300732
		, "size": 2
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7b"
		, "offs": 300734
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300735
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300736
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(9)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300738
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 300740
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300741
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(10)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300743
		, "size": 2
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 300745
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300746
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300747
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(11)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300749
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 300751
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300752
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(12)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300754
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 300756
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300757
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300758
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(13)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300760
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 300762
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300763
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(14)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300765
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 300767
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300768
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 300769
		, "size": 9
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 300778
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300787
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300789
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 300791
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300792
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300794
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 300796
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300797
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300799
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 300801
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300802
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(10)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300804
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 300806
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300807
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(12)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300809
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 300811
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300812
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300814
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 300816
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(14)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300817
		, "size": 2
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 300819
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300820
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300821
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(17)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300823
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 300825
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300826
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(18)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300828
		, "size": 2
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 300830
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300831
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300832
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(19)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300834
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 300836
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300837
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(20)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300839
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 300841
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300842
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300843
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(21)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300845
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 300847
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300848
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(22)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 300850
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 300852
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300853
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300854
		, "size": 5
	}, {
		"instruction": "load.sp(+1128)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 300859
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300863
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300865
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300867
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300868
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300870
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300872
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 300873
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300874
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300879
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300884
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300889
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300894
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300899
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300904
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 300909
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300913
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300918
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300923
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300928
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300933
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300938
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300943
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 300948
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300952
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300957
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300962
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 300967
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300972
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300977
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 300982
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 300987
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 300991
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 300992
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 300994
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 300995
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 300996
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301000
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301005
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301010
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301015
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301020
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301025
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301030
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301034
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301038
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301040
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301041
		, "size": 1
	}, {
		"instruction": "jnz +42"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 301042
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301046
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301051
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301056
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301061
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301066
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301071
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301076
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301080
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301084
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301086
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301087
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301088
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301092
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301097
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301102
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301107
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301112
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301117
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301122
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301126
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301130
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301134
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301139
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301144
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301149
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301154
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301159
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301164
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301168
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301172
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301174
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301175
		, "size": 1
	}, {
		"instruction": "jnz +46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 301176
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301180
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301185
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301190
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301195
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301200
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301205
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301210
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301214
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301218
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301222
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301227
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301232
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301237
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301242
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301247
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301252
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301256
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301260
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301262
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301263
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301264
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301268
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301273
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301278
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301283
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301288
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301293
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301298
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301302
		, "size": 4
	}, {
		"instruction": "jmp +312"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301306
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301310
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301312
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301317
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301318
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301322
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301327
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301332
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301337
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301342
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301347
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301352
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301356
		, "size": 4
	}, {
		"instruction": "jmp +258"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301360
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301364
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301366
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301371
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301372
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301376
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301381
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301386
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301391
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301396
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301401
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301406
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301410
		, "size": 4
	}, {
		"instruction": "jmp +204"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301414
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301418
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301420
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301425
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301426
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301430
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301435
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301440
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301445
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301450
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301455
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301460
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301464
		, "size": 4
	}, {
		"instruction": "jmp +150"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301468
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301472
		, "size": 2
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301474
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301479
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301480
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301484
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301489
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301494
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301499
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301504
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301509
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301514
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301518
		, "size": 4
	}, {
		"instruction": "jmp +96"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301522
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301526
		, "size": 2
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301528
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 301533
		, "size": 1
	}, {
		"instruction": "jz +46"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301534
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301538
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301543
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301548
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301553
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301558
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301563
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301568
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301572
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301576
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301580
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301585
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301590
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301595
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301600
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301605
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301610
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301614
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301618
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301622
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301627
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301632
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301637
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301638
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301643
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301648
		, "size": 5
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301653
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301657
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301661
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301665
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301666
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301670
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301675
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301680
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301685
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301686
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301691
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301696
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301700
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 301704
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301708
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301710
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 301715
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 301716
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 301720
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301724
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301725
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 301726
		, "size": 2
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301728
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301732
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301737
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301742
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301747
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301748
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301753
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301758
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301762
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 301766
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301770
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301772
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 301777
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 301778
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301782
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301783
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301787
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301789
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 301794
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301795
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301799
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301803
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301808
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301813
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301818
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301819
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301824
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301829
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301833
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 301837
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301841
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301843
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 301848
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 301849
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 301853
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301857
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301858
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301862
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301864
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 301869
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 301870
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 301874
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301878
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301883
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301888
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 301893
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301894
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301899
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 301904
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 301908
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 301912
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 301916
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 301918
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 301923
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 301924
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 301928
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 301932
		, "size": 1
	}, {
		"instruction": "load.f64 3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 301933
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301942
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 301947
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 301948
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 301952
		, "size": 1
	}, {
		"instruction": "load.f64 3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 301953
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301962
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 301967
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 301968
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 301972
		, "size": 1
	}, {
		"instruction": "load.f64 3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 301973
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 301982
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 301987
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 301988
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 301992
		, "size": 1
	}, {
		"instruction": "load.f64 -3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 301993
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302002
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302007
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302008
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302012
		, "size": 1
	}, {
		"instruction": "load.f64 -3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302013
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302022
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302027
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302028
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302032
		, "size": 1
	}, {
		"instruction": "load.f64 -3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302033
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302042
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302047
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302048
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302052
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302053
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302062
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302067
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302068
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 302072
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302073
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302074
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302075
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302080
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302081
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 302085
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302086
		, "size": 1
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302087
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302096
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302101
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302102
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 302106
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302107
		, "size": 1
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302108
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302113
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302118
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302119
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 302123
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302124
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302125
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302126
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302131
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302132
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 302136
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302137
		, "size": 1
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302138
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302143
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302148
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302149
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 302153
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302154
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302155
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302164
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302169
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302170
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 302174
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302175
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302180
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302181
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302185
		, "size": 1
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302186
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302195
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302200
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302201
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302205
		, "size": 1
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302206
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302211
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302216
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302217
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302221
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302222
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302223
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302224
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302229
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302230
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302234
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302235
		, "size": 1
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302236
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302241
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302246
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302247
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302251
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302252
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302253
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302258
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302263
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302268
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302269
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302273
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302274
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302275
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302280
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302285
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302290
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302291
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302295
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302296
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302297
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302306
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302315
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302320
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302321
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302325
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302326
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302335
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302344
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302349
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302350
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302354
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302355
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302360
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302361
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302366
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302371
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302372
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302376
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302377
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302378
		, "size": 9
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302387
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302388
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302397
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302402
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302403
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302407
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302408
		, "size": 2
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302410
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302415
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302420
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 302422
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302423
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 302424
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 302425
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302427
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302428
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302429
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302431
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302440
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302449
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 302451
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302452
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 302453
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 302454
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302456
		, "size": 1
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302457
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302459
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302461
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302462
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302467
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302472
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302474
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 302475
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302476
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 302477
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302479
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302480
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302481
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302483
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302485
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302486
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302495
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302504
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302506
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 302507
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302508
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 302509
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302511
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302512
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302513
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(2)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302518
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 302520
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302521
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302526
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 302528
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 302529
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302530
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302531
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302536
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302541
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302542
		, "size": 4
	}, {
		"instruction": "dup.x1 sp(0)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302546
		, "size": 2
	}, {
		"instruction": "dup.x1 sp(1)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302548
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302550
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302551
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 302556
		, "size": 5
	}, {
		"instruction": "dup.x1 sp(3)"
		, "name": "dup.x1"
		, "code": "0x10"
		, "offs": 302561
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302563
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 302564
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 302565
		, "size": 1
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 302566
		, "size": 2
	}, {
		"instruction": "set.x1 sp(1)"
		, "name": "set.x1"
		, "code": "0x13"
		, "offs": 302568
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 302570
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 302571
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302572
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302581
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 302583
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302584
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302593
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 302595
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 302596
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302597
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302598
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302607
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302612
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302613
		, "size": 4
	}, {
		"instruction": "dup.x2 sp(0)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302617
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302619
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302621
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302622
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302631
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302640
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302642
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 302643
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 302644
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 302645
		, "size": 2
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 302647
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302649
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302650
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302654
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302655
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302657
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302662
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(4, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302663
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302666
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302670
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302679
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302688
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302697
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302706
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302715
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302724
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302733
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302742
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 302751
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302756
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302760
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302761
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302763
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302768
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(22, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302769
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302772
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302776
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302777
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302781
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302782
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302784
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302789
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(4, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302790
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302793
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302797
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302806
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302815
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302824
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302833
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302842
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302851
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302860
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302869
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 302878
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302883
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302887
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302888
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302890
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302895
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(22, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302896
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302899
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 302903
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302904
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302908
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302909
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302911
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302916
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(4, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302917
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302920
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302924
		, "size": 9
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 302933
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302938
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302942
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302943
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302945
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302950
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(6, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302951
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302954
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302958
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 302967
		, "size": 9
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 302976
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 302981
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 302985
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 302986
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 302988
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 302993
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(8, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 302994
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 302997
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303001
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303010
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303019
		, "size": 9
	}, {
		"instruction": "load.f64 7.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303028
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303037
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303046
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303055
		, "size": 9
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303064
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303073
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303082
		, "size": 9
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 303091
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 303096
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303100
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303101
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303103
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303108
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(24, 2)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 303109
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303112
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303116
		, "size": 9
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 303125
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 303126
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303130
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303131
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303133
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303135
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303140
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(6, 4)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 303141
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303144
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303148
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303157
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303166
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303168
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 303177
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 303178
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303179
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303181
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303190
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303192
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303201
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303203
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 303212
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 303213
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 303214
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 303215
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 303216
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(8)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303218
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303220
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303229
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303231
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303233
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(2)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303242
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303244
		, "size": 9
	}, {
		"instruction": "dup.x2 sp(6)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303253
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303255
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 303264
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 303265
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 303266
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 303267
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 303268
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 303270
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 303271
		, "size": 1
	}, {
		"instruction": "set.x2 sp(2)"
		, "name": "set.x2"
		, "code": "0x14"
		, "offs": 303272
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303274
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303283
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303292
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303301
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303310
		, "size": 9
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 303319
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 303324
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303328
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(24)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303329
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303331
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303333
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303338
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(16, 4)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 303339
		, "size": 3
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303342
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303346
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303355
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303364
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303373
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303382
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303391
		, "size": 9
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 303400
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 303405
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303409
		, "size": 1
	}, {
		"instruction": "dup.x2 sp(28)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303410
		, "size": 2
	}, {
		"instruction": "dup.x2 sp(4)"
		, "name": "dup.x2"
		, "code": "0x11"
		, "offs": 303412
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303414
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303419
		, "size": 1
	}, {
		"instruction": "mov.x2 sp(18, 4)"
		, "name": "mov.x2"
		, "code": "0x17"
		, "offs": 303420
		, "size": 3
	}, {
		"instruction": "inc.sp(-72)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303423
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303427
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303428
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303437
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 303446
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 303447
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303448
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303453
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303454
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 303458
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303459
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303468
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 303477
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303478
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303483
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303484
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 303488
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303493
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303498
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303499
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303503
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303504
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303513
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 303522
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303523
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303528
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303529
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303533
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303534
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303543
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 303552
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303553
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303558
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303559
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303563
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303564
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303573
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 303582
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303583
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303588
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303589
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303593
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303594
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303603
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303608
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303609
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303613
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303622
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 303631
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303632
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303633
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303642
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303647
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303648
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 303652
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 303653
		, "size": 1
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 303654
		, "size": 5
	}, {
		"instruction": "load.f32 0.000012"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 303659
		, "size": 5
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 303664
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303669
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303674
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303675
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 303679
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 303680
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 303681
		, "size": 1
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303682
		, "size": 9
	}, {
		"instruction": "load.f64 0.000012"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303691
		, "size": 9
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303700
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303709
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303714
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303715
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 303719
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 303720
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303721
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303722
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303731
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303740
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303745
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303746
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 303750
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303751
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303760
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303765
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303766
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303770
		, "size": 1
	}, {
		"instruction": "load.f64 -10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303771
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303780
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303789
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303794
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303795
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303799
		, "size": 1
	}, {
		"instruction": "load.f64 19.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303800
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303809
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303818
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303823
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303824
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303828
		, "size": 1
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303829
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303838
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303847
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303852
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303853
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303857
		, "size": 1
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303858
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303867
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303876
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303881
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303882
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303886
		, "size": 1
	}, {
		"instruction": "load.f64 -11.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303887
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303896
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303905
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303910
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303911
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303915
		, "size": 1
	}, {
		"instruction": "load.f64 18.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303916
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303925
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303934
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303939
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303940
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303944
		, "size": 1
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303945
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303954
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303963
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303968
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303969
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 303973
		, "size": 1
	}, {
		"instruction": "load.f64 -2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303974
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 303983
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 303992
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 303997
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 303998
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 304002
		, "size": 1
	}, {
		"instruction": "load.f64 -12.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 304003
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 304012
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304021
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304026
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304027
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304031
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304032
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304037
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304042
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304047
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304048
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304052
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304053
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304054
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304059
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304064
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304065
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304069
		, "size": 1
	}, {
		"instruction": "load.f32 -10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304070
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304075
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304080
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304085
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304086
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304090
		, "size": 1
	}, {
		"instruction": "load.f32 19.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304091
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304096
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304101
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304106
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304107
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304111
		, "size": 1
	}, {
		"instruction": "load.f32 9.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304112
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304117
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304122
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304127
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304128
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304132
		, "size": 1
	}, {
		"instruction": "load.f32 -1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304133
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304138
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304143
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304148
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304149
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304153
		, "size": 1
	}, {
		"instruction": "load.f32 -11.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304154
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304159
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304164
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304169
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304170
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304174
		, "size": 1
	}, {
		"instruction": "load.f32 18.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304175
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304180
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304185
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304190
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304191
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304195
		, "size": 1
	}, {
		"instruction": "load.f32 8.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304196
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304201
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304206
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304211
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304212
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304216
		, "size": 1
	}, {
		"instruction": "load.f32 -2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304217
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304222
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304227
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304232
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304233
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 304237
		, "size": 1
	}, {
		"instruction": "load.f32 -12.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304238
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 304243
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 304248
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 304253
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 304254
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 304258
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
213502,0,293335,
 213513,0,292712,
 213516,0,-1,
 213519,0,292712,
 213522,0,-1,
 213524,0,292720,
 213527,0,-1,
 213530,0,292720,
 213532,0,-1,
 213535,0,292728,
  213537,0,292728,
   213540,0,292728,
    213543,0,292728,
     213545,0,292728,
      213548,0,292728,
       213551,0,292728,
        213553,0,292728,
         213556,0,292728,
          213559,0,292728,
           213561,0,292728,
            213564,0,292728,
             213566,0,292728,
             213569,0,-1,
             213572,0,292728,
             213575,0,-1,
            213579,0,-1,
            213582,0,292728,
            213585,0,-1,
           213589,0,-1,
           213592,0,292728,
            213596,0,292728,
            213599,0,-1,
            213603,0,292728,
            213606,0,-1,
           213609,0,-1,
          213612,0,-1,
          213616,0,292728,
           213619,0,292728,
            213622,0,292728,
            213626,0,-1,
            213629,0,292728,
            213632,0,-1,
           213635,0,-1,
           213638,0,292728,
           213642,0,-1,
          213645,0,-1,
         213649,0,-1,
         213652,0,292728,
          213655,0,292728,
           213658,0,292728,
            213660,0,292728,
            213663,0,-1,
            213665,0,292728,
            213668,0,-1,
           213671,0,-1,
           213674,0,292728,
           213676,0,-1,
          213679,0,-1,
          213696,0,292728,
           213699,0,292728,
           213701,0,-1,
           213704,0,292728,
           213707,0,-1,
          213710,0,-1,
         213712,0,-1,
        213715,0,-1,
        213718,0,292728,
         213720,0,292728,
          213724,0,292728,
           213727,0,292728,
            213729,0,292728,
            213732,0,-1,
            213735,0,292728,
            213737,0,-1,
           213740,0,-1,
           213756,0,292728,
           213759,0,-1,
          213762,0,-1,
          213784,0,292728,
           213787,0,292728,
           213790,0,-1,
           213793,0,292728,
           213795,0,-1,
          213798,0,-1,
         213801,0,-1,
         213804,0,292728,
          213807,0,292728,
           213810,0,292728,
           213813,0,-1,
           213829,0,292728,
           213832,0,-1,
          213835,0,-1,
          213838,0,292728,
          213841,0,-1,
         213844,0,-1,
        213846,0,-1,
       213849,0,-1,
       213852,0,292728,
        213855,0,292728,
         213858,0,292728,
          213860,0,292728,
           213863,0,292728,
            213866,0,292728,
            213869,0,-1,
            213872,0,292728,
            213874,0,-1,
           213877,0,-1,
           213880,0,292728,
           213883,0,-1,
          213886,0,-1,
          213888,0,292728,
           213891,0,292728,
           213894,0,-1,
           213897,0,292728,
           213900,0,-1,
          213902,0,-1,
         213905,0,-1,
         213908,0,292728,
          213911,0,292728,
           213913,0,292728,
           213916,0,-1,
           213919,0,292728,
           213922,0,-1,
          213924,0,-1,
          213927,0,292728,
          213930,0,-1,
         213933,0,-1,
        213936,0,-1,
        213938,0,292728,
         213941,0,292728,
          213944,0,292728,
           213946,0,292728,
           213949,0,-1,
           213952,0,292728,
           213960,0,-1,
          213962,0,-1,
          213965,0,292728,
          213968,0,-1,
         213971,0,-1,
         213973,0,292728,
          213976,0,292728,
          213979,0,-1,
          213982,0,292728,
          213984,0,-1,
         213987,0,-1,
        213990,0,-1,
       213993,0,-1,
      213996,0,-1,
      213998,0,292728,
       214001,0,292728,
        214004,0,292728,
         214007,0,292728,
          214009,0,292728,
           214012,0,292728,
            214015,0,292728,
            214017,0,-1,
            214020,0,292728,
            214023,0,-1,
           214026,0,-1,
           214028,0,292728,
           214031,0,-1,
          214034,0,-1,
          214037,0,292728,
           214039,0,292728,
           214042,0,-1,
           214045,0,292728,
           214048,0,-1,
          214050,0,-1,
         214053,0,-1,
         214056,0,292728,
          214059,0,292728,
           214061,0,292728,
           214064,0,-1,
           214067,0,292728,
           214069,0,-1,
          214072,0,-1,
          214087,0,292728,
          214090,0,-1,
         214093,0,-1,
        214095,0,-1,
        214098,0,292728,
         214101,0,292728,
          214103,0,292728,
           214106,0,292728,
           214109,0,-1,
           214111,0,292728,
           214114,0,-1,
          214117,0,-1,
          214119,0,292728,
          214122,0,-1,
         214125,0,-1,
         214127,0,292728,
          214130,0,292728,
          214133,0,-1,
          214135,0,292728,
          214138,0,-1,
         214141,0,-1,
        214143,0,-1,
       214146,0,-1,
       214149,0,292728,
        214151,0,292728,
         214154,0,292728,
          214157,0,292728,
           214159,0,292728,
           214162,0,-1,
           214164,0,292728,
           214167,0,-1,
          214170,0,-1,
          214173,0,292728,
          214175,0,-1,
         214178,0,-1,
         214180,0,292728,
          214183,0,292728,
          214186,0,-1,
          214188,0,292728,
          214191,0,-1,
         214194,0,-1,
        214197,0,-1,
        214199,0,292728,
         214215,0,292728,
          214218,0,292728,
          214221,0,-1,
          214223,0,292728,
          214226,0,-1,
         214229,0,-1,
         214232,0,292728,
         214234,0,-1,
        214237,0,-1,
       214240,0,-1,
      214243,0,-1,
     214245,0,-1,
     214248,0,292728,
      214251,0,292728,
       214267,0,292728,
        214269,0,292728,
         214272,0,292728,
          214274,0,292728,
           214277,0,292728,
            214280,0,292728,
            214282,0,-1,
            214285,0,292728,
            214288,0,-1,
           214290,0,-1,
           214293,0,292728,
           214296,0,-1,
          214298,0,-1,
          214301,0,292728,
           214304,0,292728,
           214306,0,-1,
           214309,0,292728,
           214311,0,-1,
          214314,0,-1,
         214317,0,-1,
         214319,0,292728,
          214322,0,292728,
           214325,0,292728,
           214327,0,-1,
           214330,0,292728,
           214332,0,-1,
          214335,0,-1,
          214338,0,292728,
          214340,0,-1,
         214343,0,-1,
        214346,0,-1,
        214348,0,292728,
         214351,0,292728,
          214353,0,292728,
           214356,0,292728,
           214359,0,-1,
           214362,0,292728,
           214364,0,-1,
          214367,0,-1,
          214370,0,292728,
          214372,0,-1,
         214375,0,-1,
         214378,0,292728,
          214380,0,292728,
          214383,0,-1,
          214386,0,292728,
          214388,0,-1,
         214391,0,-1,
        214394,0,-1,
       214396,0,-1,
       214399,0,292728,
        214402,0,292728,
         214404,0,292728,
          214407,0,292728,
           214409,0,292728,
           214412,0,-1,
           214415,0,292728,
           214417,0,-1,
          214420,0,-1,
          214423,0,292728,
          214425,0,-1,
         214428,0,-1,
         214431,0,292728,
          214433,0,292728,
          214436,0,-1,
          214438,0,292728,
          214441,0,-1,
         214446,0,-1,
        214448,0,-1,
        214451,0,292728,
         214454,0,292728,
          214456,0,292728,
          214459,0,-1,
          214461,0,292728,
          214464,0,-1,
         214467,0,-1,
         214483,0,292728,
         214486,0,-1,
        214489,0,-1,
       214491,0,-1,
      214494,0,-1,
      214497,0,292728,
       214499,0,292728,
        214502,0,292728,
         214505,0,292728,
          214521,0,292728,
           214523,0,292728,
           214526,0,-1,
           214529,0,292728,
           214531,0,-1,
          214534,0,-1,
          214537,0,292728,
          214539,0,-1,
         214542,0,-1,
         214545,0,292728,
          214561,0,292728,
          214564,0,-1,
          214566,0,292728,
          214569,0,-1,
         214572,0,-1,
        214575,0,-1,
        214577,0,292728,
         214580,0,292728,
          214583,0,292728,
          214599,0,-1,
          214602,0,292728,
          214604,0,-1,
         214621,0,-1,
         214624,0,292728,
         214626,0,-1,
        214629,0,-1,
       214645,0,-1,
       214648,0,292728,
        214651,0,292728,
         214653,0,292728,
          214656,0,292728,
          214659,0,-1,
          214661,0,292728,
          214664,0,-1,
         214667,0,-1,
         214670,0,292728,
         214672,0,-1,
        214675,0,-1,
        214678,0,292728,
         214680,0,292728,
         214683,0,-1,
         214686,0,292728,
         214689,0,-1,
        214691,0,-1,
       214694,0,-1,
      214697,0,-1,
     214700,0,-1,
    214702,0,-1,
    214705,0,292728,
     214708,0,292728,
      214710,0,292728,
       214713,0,292728,
        214716,0,292728,
         214719,0,292728,
          214721,0,292728,
           214724,0,292728,
            214727,0,292728,
            214730,0,-1,
            214732,0,292728,
            214735,0,-1,
           214738,0,-1,
           214740,0,292728,
           214743,0,-1,
          214746,0,-1,
          214749,0,292728,
           214751,0,292728,
           214754,0,-1,
           214757,0,292728,
           214759,0,-1,
          214762,0,-1,
         214765,0,-1,
         214768,0,292728,
          214770,0,292728,
           214773,0,292728,
           214788,0,-1,
           214791,0,292728,
           214794,0,-1,
          214796,0,-1,
          214799,0,292728,
          214801,0,-1,
         214804,0,-1,
        214807,0,-1,
        214809,0,292728,
         214812,0,292728,
          214815,0,292728,
           214817,0,292728,
           214820,0,-1,
           214822,0,292728,
           214825,0,-1,
          214828,0,-1,
          214830,0,292728,
          214833,0,-1,
         214836,0,-1,
         214838,0,292728,
          214841,0,292728,
          214844,0,-1,
          214846,0,292728,
          214849,0,-1,
         214852,0,-1,
        214854,0,-1,
       214857,0,-1,
       214859,0,292728,
        214862,0,292728,
         214865,0,292728,
          214867,0,292728,
           214870,0,292728,
           214873,0,-1,
           214875,0,292728,
           214878,0,-1,
          214894,0,-1,
          214897,0,292728,
          214899,0,-1,
         214902,0,-1,
         214905,0,292728,
          214908,0,292728,
          214911,0,-1,
          214913,0,292728,
          214916,0,-1,
         214919,0,-1,
        214921,0,-1,
        214924,0,292728,
         214940,0,292728,
          214943,0,292728,
          214945,0,-1,
          214948,0,292728,
          214951,0,-1,
         214953,0,-1,
         214956,0,292728,
         214958,0,-1,
        214961,0,-1,
       214964,0,-1,
      214966,0,-1,
      214969,0,292728,
       214972,0,292728,
        214974,0,292728,
         214977,0,292728,
          214979,0,292728,
           214982,0,292728,
           214985,0,-1,
           214987,0,292728,
           214990,0,-1,
          214993,0,-1,
          214995,0,292728,
          214998,0,-1,
         215001,0,-1,
         215003,0,292728,
          215006,0,292728,
          215009,0,-1,
          215011,0,292728,
          215014,0,-1,
         215016,0,-1,
        215021,0,-1,
        215024,0,292728,
         215026,0,292728,
          215029,0,292728,
          215032,0,-1,
          215034,0,292728,
          215037,0,-1,
         215040,0,-1,
         215042,0,292728,
         215045,0,-1,
        215048,0,-1,
       215050,0,-1,
       215053,0,292728,
        215056,0,292728,
         215058,0,292728,
          215061,0,292728,
          215064,0,-1,
          215066,0,292728,
          215069,0,-1,
         215072,0,-1,
         215074,0,292728,
         215077,0,-1,
        215079,0,-1,
        215082,0,292728,
         215085,0,292728,
         215087,0,-1,
         215090,0,292728,
         215093,0,-1,
        215095,0,-1,
       215098,0,-1,
      215101,0,-1,
     215103,0,-1,
     215106,0,292728,
      215108,0,292728,
       215111,0,292728,
        215114,0,292728,
         215116,0,292728,
          215119,0,292728,
           215121,0,292728,
           215124,0,-1,
           215127,0,292728,
           215129,0,-1,
          215132,0,-1,
          215135,0,292728,
          215137,0,-1,
         215140,0,-1,
         215142,0,292728,
          215145,0,292728,
          215148,0,-1,
          215150,0,292728,
          215153,0,-1,
         215156,0,-1,
        215158,0,-1,
        215161,0,292728,
         215163,0,292728,
          215166,0,292728,
          215169,0,-1,
          215171,0,292728,
          215174,0,-1,
         215177,0,-1,
         215179,0,292728,
         215182,0,-1,
        215185,0,-1,
       215187,0,-1,
       215190,0,292728,
        215192,0,292728,
         215195,0,292728,
          215198,0,292728,
          215200,0,-1,
          215203,0,292728,
          215206,0,-1,
         215222,0,-1,
         215224,0,292728,
         215227,0,-1,
        215230,0,-1,
        215233,0,292728,
         215236,0,292728,
         215238,0,-1,
         215241,0,292728,
         215244,0,-1,
        215246,0,-1,
       215249,0,-1,
      215252,0,-1,
      215255,0,292728,
       215271,0,292728,
        215273,0,292728,
         215276,0,292728,
          215278,0,292728,
          215281,0,-1,
          215284,0,292728,
          215286,0,-1,
         215289,0,-1,
         215292,0,292728,
         215294,0,-1,
        215297,0,-1,
        215300,0,292728,
         215302,0,292728,
         215305,0,-1,
         215307,0,292728,
         215310,0,-1,
        215313,0,-1,
       215315,0,-1,
       215318,0,292728,
        215321,0,292728,
         215323,0,292728,
         215326,0,-1,
         215329,0,292728,
         215331,0,-1,
        215334,0,-1,
        215337,0,292728,
        215339,0,-1,
       215342,0,-1,
      215345,0,-1,
     215347,0,-1,
    215350,0,-1,
   215353,0,-1,
   215355,0,292728,
    215358,0,292728,
     215361,0,292728,
      215363,0,292728,
       215366,0,292728,
        215369,0,292728,
         215371,0,292728,
          215374,0,292728,
           215376,0,292728,
            215379,0,292728,
            215381,0,-1,
            215384,0,292728,
            215387,0,-1,
           215389,0,-1,
           215392,0,292728,
           215395,0,-1,
          215397,0,-1,
          215400,0,292728,
           215403,0,292728,
           215405,0,-1,
           215408,0,292728,
           215410,0,-1,
          215413,0,-1,
         215416,0,-1,
         215418,0,292728,
          215421,0,292728,
           215424,0,292728,
           215426,0,-1,
           215429,0,292728,
           215432,0,-1,
          215434,0,-1,
          215437,0,292728,
          215440,0,-1,
         215442,0,-1,
        215445,0,-1,
        215447,0,292728,
         215450,0,292728,
          215453,0,292728,
           215455,0,292728,
           215458,0,-1,
           215461,0,292728,
           215463,0,-1,
          215466,0,-1,
          215468,0,292728,
          215471,0,-1,
         215474,0,-1,
         215476,0,292728,
          215479,0,292728,
          215482,0,-1,
          215484,0,292728,
          215487,0,-1,
         215490,0,-1,
        215492,0,-1,
       215495,0,-1,
       215497,0,292728,
        215502,0,292728,
         215505,0,292728,
          215507,0,292728,
           215510,0,292728,
           215513,0,-1,
           215515,0,292728,
           215518,0,-1,
          215521,0,-1,
          215524,0,292728,
          215526,0,-1,
         215529,0,-1,
         215532,0,292728,
          215534,0,292728,
          215537,0,-1,
          215540,0,292728,
          215542,0,-1,
         215545,0,-1,
        215548,0,-1,
        215550,0,292728,
         215553,0,292728,
          215555,0,292728,
          215558,0,-1,
          215561,0,292728,
          215563,0,-1,
         215566,0,-1,
         215568,0,292728,
         215571,0,-1,
        215574,0,-1,
       215576,0,-1,
      215579,0,-1,
      215582,0,292728,
       215584,0,292728,
        215587,0,292728,
         215590,0,292728,
          215592,0,292728,
           215595,0,292728,
           215597,0,-1,
           215614,0,292728,
           215616,0,-1,
          215619,0,-1,
          215622,0,292728,
          215625,0,-1,
         215627,0,-1,
         215630,0,292728,
          215633,0,292728,
          215635,0,-1,
          215638,0,292728,
          215641,0,-1,
         215644,0,-1,
        215660,0,-1,
        215662,0,292728,
         215665,0,292728,
          215668,0,292728,
          215670,0,-1,
          215673,0,292728,
          215675,0,-1,
         215678,0,-1,
         215681,0,292728,
         215683,0,-1,
        215686,0,-1,
       215689,0,-1,
       215691,0,292728,
        215694,0,292728,
         215697,0,292728,
          215699,0,292728,
          215702,0,-1,
          215704,0,292728,
          215707,0,-1,
         215710,0,-1,
         215712,0,292728,
         215715,0,-1,
        215718,0,-1,
        215720,0,292728,
         215723,0,292728,
         215726,0,-1,
         215728,0,292728,
         215731,0,-1,
        215734,0,-1,
       215736,0,-1,
      215739,0,-1,
     215742,0,-1,
     215744,0,292728,
      215747,0,292728,
       215750,0,292728,
        215752,0,292728,
         215755,0,292728,
          215758,0,292728,
           215760,0,292728,
           215763,0,-1,
           215765,0,292728,
           215768,0,-1,
          215771,0,-1,
          215774,0,292728,
          215776,0,-1,
         215779,0,-1,
         215782,0,292728,
          215784,0,292728,
          215787,0,-1,
          215790,0,292728,
          215792,0,-1,
         215795,0,-1,
        215798,0,-1,
        215800,0,292728,
         215803,0,292728,
          215806,0,292728,
          215808,0,-1,
          215811,0,292728,
          215814,0,-1,
         215816,0,-1,
         215819,0,292728,
         215822,0,-1,
        215824,0,-1,
       215827,0,-1,
       215830,0,292728,
        215832,0,292728,
         215835,0,292728,
          215838,0,292728,
          215840,0,-1,
          215843,0,292728,
          215846,0,-1,
         215848,0,-1,
         215864,0,292728,
         215867,0,-1,
        215870,0,-1,
        215872,0,292728,
         215875,0,292728,
         215878,0,-1,
         215881,0,292728,
         215883,0,-1,
        215900,0,-1,
       215902,0,-1,
      215905,0,-1,
      215908,0,292728,
       215910,0,292728,
        215913,0,292728,
         215915,0,292728,
          215918,0,292728,
          215921,0,-1,
          215923,0,292728,
          215926,0,-1,
         215942,0,-1,
         215945,0,292728,
         215948,0,-1,
        215950,0,-1,
        215953,0,292728,
         215956,0,292728,
         215959,0,-1,
         215961,0,292728,
         215964,0,-1,
        215980,0,-1,
       215983,0,-1,
       215985,0,292728,
        216001,0,292728,
         216004,0,292728,
         216007,0,-1,
         216010,0,292728,
         216012,0,-1,
        216015,0,-1,
        216018,0,292728,
        216021,0,-1,
       216023,0,-1,
      216026,0,-1,
     216029,0,-1,
    216031,0,-1,
    216034,0,292728,
     216037,0,292728,
      216040,0,292728,
       216042,0,292728,
        216045,0,292728,
         216061,0,292728,
          216064,0,292728,
           216067,0,292728,
           216071,0,-1,
           216074,0,292728,
           216077,0,-1,
          216080,0,-1,
          216082,0,292728,
          216085,0,-1,
         216088,0,-1,
         216090,0,292728,
          216093,0,292728,
          216096,0,-1,
          216099,0,292728,
          216101,0,-1,
         216104,0,-1,
        216107,0,-1,
        216110,0,292728,
         216112,0,292728,
          216115,0,292728,
          216118,0,-1,
          216120,0,292728,
          216123,0,-1,
         216126,0,-1,
         216129,0,292728,
         216131,0,-1,
        216134,0,-1,
       216137,0,-1,
       216152,0,292728,
        216155,0,292728,
         216158,0,292728,
          216160,0,292728,
          216163,0,-1,
          216166,0,292728,
          216168,0,-1,
         216171,0,-1,
         216173,0,292728,
         216176,0,-1,
        216179,0,-1,
        216181,0,292728,
         216184,0,292728,
         216187,0,-1,
         216189,0,292728,
         216192,0,-1,
        216195,0,-1,
       216197,0,-1,
      216200,0,-1,
      216203,0,292728,
       216205,0,292728,
        216208,0,292728,
         216210,0,292728,
          216213,0,292728,
          216216,0,-1,
          216218,0,292728,
          216221,0,-1,
         216224,0,-1,
         216226,0,292728,
         216229,0,-1,
        216232,0,-1,
        216234,0,292728,
         216237,0,292728,
         216240,0,-1,
         216242,0,292728,
         216245,0,-1,
        216247,0,-1,
       216264,0,-1,
       216266,0,292728,
        216269,0,292728,
         216285,0,292728,
         216288,0,-1,
         216291,0,292728,
         216293,0,-1,
        216296,0,-1,
        216299,0,292728,
        216302,0,-1,
       216304,0,-1,
      216307,0,-1,
     216310,0,-1,
     216312,0,292728,
      216315,0,292728,
       216318,0,292728,
        216321,0,292728,
         216323,0,292728,
          216326,0,292728,
          216329,0,-1,
          216331,0,292728,
          216334,0,-1,
         216337,0,-1,
         216340,0,292728,
         216342,0,-1,
        216345,0,-1,
        216348,0,292728,
         216350,0,292728,
         216366,0,-1,
         216369,0,292728,
         216371,0,-1,
        216387,0,-1,
       216390,0,-1,
       216393,0,292728,
        216396,0,292728,
         216398,0,292728,
         216401,0,-1,
         216417,0,292728,
         216420,0,-1,
        216423,0,-1,
        216426,0,292728,
        216429,0,-1,
       216432,0,-1,
      216434,0,-1,
      216437,0,292728,
       216454,0,292728,
        216457,0,292728,
         216460,0,292728,
         216463,0,-1,
         216465,0,292728,
         216468,0,-1,
        216471,0,-1,
        216487,0,292728,
        216490,0,-1,
       216493,0,-1,
       216496,0,292728,
        216499,0,292728,
        216501,0,-1,
        216504,0,292728,
        216507,0,-1,
       216510,0,-1,
      216513,0,-1,
     216516,0,-1,
    216518,0,-1,
   216521,0,-1,
  216524,0,-1,
  216527,0,292728,
   216529,0,292728,
    216532,0,292728,
     216535,0,292728,
      216538,0,292728,
       216540,0,292728,
        216543,0,292728,
         216546,0,292728,
          216549,0,292728,
           216551,0,292728,
            216554,0,292728,
            216557,0,-1,
            216560,0,292728,
            216563,0,-1,
           216566,0,-1,
           216568,0,292728,
           216571,0,-1,
          216574,0,-1,
          216577,0,292728,
           216579,0,292728,
           216582,0,-1,
           216585,0,292728,
           216588,0,-1,
          216591,0,-1,
         216593,0,-1,
         216596,0,292728,
          216599,0,292728,
           216602,0,292728,
           216605,0,-1,
           216608,0,292728,
           216610,0,-1,
          216613,0,-1,
          216616,0,292728,
          216619,0,-1,
         216622,0,-1,
        216625,0,-1,
        216628,0,292728,
         216631,0,292728,
          216633,0,292728,
           216636,0,292728,
           216639,0,-1,
           216641,0,292728,
           216644,0,-1,
          216652,0,-1,
          216656,0,292728,
          216661,0,-1,
         216664,0,-1,
         216667,0,292728,
          216669,0,292728,
          216672,0,-1,
          216675,0,292728,
          216678,0,-1,
         216681,0,-1,
        216683,0,-1,
       216686,0,-1,
       216689,0,292728,
        216692,0,292728,
         216695,0,292728,
          216698,0,292728,
           216701,0,292728,
           216703,0,-1,
           216706,0,292728,
           216709,0,-1,
          216712,0,-1,
          216714,0,292728,
          216717,0,-1,
         216720,0,-1,
         216723,0,292728,
          216726,0,292728,
          216729,0,-1,
          216732,0,292728,
          216735,0,-1,
         216738,0,-1,
        216741,0,-1,
        216744,0,292728,
         216746,0,292728,
          216749,0,292728,
          216752,0,-1,
          216755,0,292728,
          216758,0,-1,
         216761,0,-1,
         216764,0,292728,
         216767,0,-1,
        216769,0,-1,
       216772,0,-1,
      216775,0,-1,
      216778,0,292728,
       216781,0,292728,
        216784,0,292728,
         216787,0,292728,
          216789,0,292728,
           216792,0,292728,
           216795,0,-1,
           216798,0,292728,
           216801,0,-1,
          216804,0,-1,
          216807,0,292728,
          216810,0,-1,
         216813,0,-1,
         216815,0,292728,
          216818,0,292728,
          216821,0,-1,
          216824,0,292728,
          216826,0,-1,
         216829,0,-1,
        216832,0,-1,
        216835,0,292728,
         216838,0,292728,
          216840,0,292728,
          216843,0,-1,
          216846,0,292728,
          216849,0,-1,
         216852,0,-1,
         216854,0,292728,
         216858,0,-1,
        216860,0,-1,
       216863,0,-1,
       216866,0,292728,
        216869,0,292728,
         216871,0,292728,
          216874,0,292728,
          216877,0,-1,
          216879,0,292728,
          216882,0,-1,
         216885,0,-1,
         216888,0,292728,
         216890,0,-1,
        216893,0,-1,
        216896,0,292728,
         216899,0,292728,
         216902,0,-1,
         216904,0,292728,
         216907,0,-1,
        216910,0,-1,
       216913,0,-1,
      216915,0,-1,
     216918,0,-1,
     216921,0,292728,
      216924,0,292728,
       216926,0,292728,
        216929,0,292728,
         216932,0,292728,
          216935,0,292728,
           216937,0,292728,
           216940,0,-1,
           216943,0,292728,
           216945,0,-1,
          216948,0,-1,
          216951,0,292728,
          216954,0,-1,
         216956,0,-1,
         216959,0,292728,
          216962,0,292728,
          216965,0,-1,
          216967,0,292728,
          216970,0,-1,
         216973,0,-1,
        216976,0,-1,
        216979,0,292728,
         216981,0,292728,
          216984,0,292728,
          216987,0,-1,
          216990,0,292728,
          216992,0,-1,
         216995,0,-1,
         216998,0,292728,
         217001,0,-1,
        217004,0,-1,
       217006,0,-1,
       217009,0,292728,
        217012,0,292728,
         217014,0,292728,
          217017,0,292728,
          217020,0,-1,
          217023,0,292728,
          217026,0,-1,
         217028,0,-1,
         217031,0,292728,
         217034,0,-1,
        217037,0,-1,
        217040,0,292728,
         217042,0,292728,
         217045,0,-1,
         217048,0,292728,
         217051,0,-1,
        217053,0,-1,
       217056,0,-1,
      217059,0,-1,
      217062,0,292728,
       217064,0,292728,
        217067,0,292728,
         217070,0,292728,
          217073,0,292728,
          217076,0,-1,
          217078,0,292728,
          217081,0,-1,
         217084,0,-1,
         217086,0,292728,
         217089,0,-1,
        217092,0,-1,
        217095,0,292728,
         217098,0,292728,
         217100,0,-1,
         217103,0,292728,
         217106,0,-1,
        217109,0,-1,
       217111,0,-1,
       217114,0,292728,
        217117,0,292728,
         217119,0,292728,
         217122,0,-1,
         217125,0,292728,
         217128,0,-1,
        217130,0,-1,
        217133,0,292728,
        217136,0,-1,
       217144,0,-1,
      217147,0,-1,
     217149,0,-1,
    217152,0,-1,
    217169,0,292728,
     217172,0,292728,
      217175,0,292728,
       217178,0,292728,
        217180,0,292728,
         217183,0,292728,
          217186,0,292728,
           217189,0,292728,
           217192,0,-1,
           217195,0,292728,
           217198,0,-1,
          217200,0,-1,
          217204,0,292728,
          217207,0,-1,
         217210,0,-1,
         217213,0,292728,
          217216,0,292728,
          217233,0,-1,
          217235,0,292728,
          217238,0,-1,
         217241,0,-1,
        217244,0,-1,
        217247,0,292728,
         217250,0,292728,
          217252,0,292728,
          217255,0,-1,
          217258,0,292728,
          217261,0,-1,
         217264,0,-1,
         217266,0,292728,
         217269,0,-1,
        217272,0,-1,
       217275,0,-1,
       217277,0,292728,
        217280,0,292728,
         217283,0,292728,
          217286,0,292728,
          217288,0,-1,
          217291,0,292728,
          217294,0,-1,
         217297,0,-1,
         217300,0,292728,
         217302,0,-1,
        217305,0,-1,
        217308,0,292728,
         217311,0,292728,
         217314,0,-1,
         217316,0,292728,
         217319,0,-1,
        217322,0,-1,
       217325,0,-1,
      217328,0,-1,
      217330,0,292728,
       217333,0,292728,
        217336,0,292728,
         217338,0,292728,
          217341,0,292728,
          217344,0,-1,
          217360,0,292728,
          217363,0,-1,
         217366,0,-1,
         217369,0,292728,
         217372,0,-1,
        217375,0,-1,
        217378,0,292728,
         217381,0,292728,
         217384,0,-1,
         217386,0,292728,
         217403,0,-1,
        217406,0,-1,
       217408,0,-1,
       217411,0,292728,
        217414,0,292728,
         217417,0,292728,
         217419,0,-1,
         217422,0,292728,
         217425,0,-1,
        217442,0,-1,
        217445,0,292728,
        217448,0,-1,
       217465,0,-1,
      217467,0,-1,
     217470,0,-1,
     217473,0,292728,
      217489,0,292728,
       217492,0,292728,
        217494,0,292728,
         217511,0,292728,
          217514,0,292728,
          217517,0,-1,
          217520,0,292728,
          217522,0,-1,
         217539,0,-1,
         217542,0,292728,
         217545,0,-1,
        217548,0,-1,
        217550,0,292728,
         217553,0,292728,
         217556,0,-1,
         217559,0,292728,
         217562,0,-1,
        217565,0,-1,
       217568,0,-1,
       217570,0,292728,
        217573,0,292728,
         217576,0,292728,
         217579,0,-1,
         217582,0,292728,
         217584,0,-1,
        217587,0,-1,
        217590,0,292728,
        217593,0,-1,
       217596,0,-1,
      217599,0,-1,
      217602,0,292728,
       217605,0,292728,
        217608,0,292728,
         217610,0,292728,
         217613,0,-1,
         217616,0,292728,
         217619,0,-1,
        217622,0,-1,
        217624,0,292728,
        217627,0,-1,
       217630,0,-1,
       217633,0,292728,
        217636,0,292728,
        217639,0,-1,
        217641,0,292728,
        217644,0,-1,
       217647,0,-1,
      217650,0,-1,
     217653,0,-1,
    217670,0,-1,
   217673,0,-1,
   217676,0,292728,
    217679,0,292728,
     217682,0,292728,
      217685,0,292728,
       217687,0,292728,
        217690,0,292728,
         217693,0,292728,
          217696,0,292728,
           217699,0,292728,
           217702,0,-1,
           217705,0,292728,
           217708,0,-1,
          217711,0,-1,
          217714,0,292728,
          217717,0,-1,
         217720,0,-1,
         217723,0,292728,
          217726,0,292728,
          217728,0,-1,
          217731,0,292728,
          217734,0,-1,
         217737,0,-1,
        217740,0,-1,
        217743,0,292728,
         217746,0,292728,
          217749,0,292728,
          217752,0,-1,
          217755,0,292728,
          217758,0,-1,
         217761,0,-1,
         217763,0,292728,
         217766,0,-1,
        217769,0,-1,
       217772,0,-1,
       217775,0,292728,
        217778,0,292728,
         217783,0,292728,
          217786,0,292728,
          217789,0,-1,
          217792,0,292728,
          217795,0,-1,
         217798,0,-1,
         217801,0,292728,
         217804,0,-1,
        217807,0,-1,
        217809,0,292728,
         217812,0,292728,
         217815,0,-1,
         217818,0,292728,
         217821,0,-1,
        217824,0,-1,
       217827,0,-1,
      217830,0,-1,
      217833,0,292728,
       217836,0,292728,
        217839,0,292728,
         217841,0,292728,
          217844,0,292728,
          217847,0,-1,
          217850,0,292728,
          217854,0,-1,
         217857,0,-1,
         217860,0,292728,
         217862,0,-1,
        217865,0,-1,
        217868,0,292728,
         217871,0,292728,
         217874,0,-1,
         217877,0,292728,
         217879,0,-1,
        217882,0,-1,
       217885,0,-1,
       217888,0,292728,
        217891,0,292728,
         217894,0,292728,
         217897,0,-1,
         217900,0,292728,
         217903,0,-1,
        217906,0,-1,
        217909,0,292728,
        217912,0,-1,
       217915,0,-1,
      217919,0,-1,
     217921,0,-1,
     217924,0,292728,
      217927,0,292728,
       217930,0,292728,
        217933,0,292728,
         217935,0,292728,
          217938,0,292728,
          217941,0,-1,
          217944,0,292728,
          217947,0,-1,
         217950,0,-1,
         217953,0,292728,
         217956,0,-1,
        217959,0,-1,
        217962,0,292728,
         217965,0,292728,
         217968,0,-1,
         217971,0,292728,
         217974,0,-1,
        217976,0,-1,
       217979,0,-1,
       217982,0,292728,
        217985,0,292728,
         217988,0,292728,
         217991,0,-1,
         217994,0,292728,
         217997,0,-1,
        217999,0,-1,
        218002,0,292728,
        218005,0,-1,
       218009,0,-1,
      218011,0,-1,
      218014,0,292728,
       218017,0,292728,
        218020,0,292728,
         218023,0,292728,
         218026,0,-1,
         218029,0,292728,
         218032,0,-1,
        218035,0,-1,
        218038,0,292728,
        218041,0,-1,
       218044,0,-1,
       218047,0,292728,
        218050,0,292728,
        218053,0,-1,
        218056,0,292728,
        218059,0,-1,
       218062,0,-1,
      218065,0,-1,
     218068,0,-1,
    218071,0,-1,
    218074,0,292728,
     218077,0,292728,
      218080,0,292728,
       218083,0,292728,
        218086,0,292728,
         218089,0,292728,
          218092,0,292728,
          218095,0,-1,
          218098,0,292728,
          218100,0,-1,
         218103,0,-1,
         218106,0,292728,
         218109,0,-1,
        218112,0,-1,
        218115,0,292728,
         218117,0,292728,
         218120,0,-1,
         218123,0,292728,
         218126,0,-1,
        218129,0,-1,
       218132,0,-1,
       218135,0,292728,
        218138,0,292728,
         218140,0,292728,
         218143,0,-1,
         218146,0,292728,
         218149,0,-1,
        218152,0,-1,
        218154,0,292728,
        218157,0,-1,
       218160,0,-1,
      218163,0,-1,
      218166,0,292728,
       218169,0,292728,
        218172,0,292728,
         218175,0,292728,
         218178,0,-1,
         218180,0,292728,
         218183,0,-1,
        218187,0,-1,
        218189,0,292728,
        218192,0,-1,
       218195,0,-1,
       218198,0,292728,
        218201,0,292728,
        218203,0,-1,
        218206,0,292728,
        218209,0,-1,
       218212,0,-1,
      218215,0,-1,
     218232,0,-1,
     218234,0,292728,
      218237,0,292728,
       218254,0,292728,
        218256,0,292728,
         218259,0,292728,
         218262,0,-1,
         218264,0,292728,
         218267,0,-1,
        218270,0,-1,
        218272,0,292728,
        218275,0,-1,
       218278,0,-1,
       218281,0,292728,
        218283,0,292728,
        218286,0,-1,
        218289,0,292728,
        218292,0,-1,
       218295,0,-1,
      218297,0,-1,
      218300,0,292728,
       218303,0,292728,
        218306,0,292728,
        218309,0,-1,
        218311,0,292728,
        218314,0,-1,
       218317,0,-1,
       218319,0,292728,
       218322,0,-1,
      218325,0,-1,
     218331,0,-1,
    218333,0,-1,
   218336,0,-1,
  218339,0,-1,
 218342,0,-1,
 218345,0,23320,
 218356,0,-1,
 218377,0,22392,
 218381,0,-1,
 218385,0,22856,
 218388,0,-1,
 218391,0,21928,
 218395,0,-1,
 218398,0,23320,
 218402,0,-1,
 218404,0,22392,
 218408,0,-1,
 218426,0,22856,
 218430,0,-1,
 218432,0,21928,
 218436,0,-1,
 218439,0,21928,
 218441,0,-1,
 218445,0,33576,
 218448,0,-1,
 218450,0,33576,
 218453,0,-1,
 218456,0,33576,
 218459,0,-1,
 218461,0,34312,
 218464,0,-1,
 218467,0,34312,
 218469,0,-1,
 218472,0,34312,
 218475,0,-1,
 218477,0,33576,
 218480,0,-1,
 218482,0,33576,
 218485,0,-1,
 218488,0,33576,
 218491,0,-1,
 218493,0,34312,
 218496,0,-1,
 218499,0,34312,
 218501,0,-1,
 218504,0,34312,
 218507,0,-1,
 218509,0,43008,
 218526,0,-1,
 218529,0,43464,
 218536,0,-1,
 218539,0,43920,
 218542,0,-1,
 218545,0,44376,
 218553,0,-1,
 218555,0,44832,
 218559,0,-1,
 218561,0,45424,
 218565,0,-1,
 218567,0,45880,
 218570,0,-1,
 218573,0,46472,
 218578,0,-1,
 218581,0,39024,
 218585,0,-1,
 218588,0,39488,
 218591,0,-1,
 218594,0,39952,
 218597,0,-1,
 218600,0,40416,
 218603,0,-1,
 218605,0,40880,
 218608,0,-1,
 218611,0,41488,
 218614,0,-1,
 218616,0,41952,
 218619,0,-1,
 218622,0,42552,
 218627,0,-1,
 218629,0,34776,
 218632,0,-1,
 218635,0,35240,
 218637,0,-1,
 218640,0,35704,
 218643,0,-1,
 218646,0,36168,
 218648,0,-1,
 218651,0,36632,
 218654,0,-1,
 218656,0,37096,
 218659,0,-1,
 218661,0,33576,
 218664,0,-1,
 218667,0,34312,
 218669,0,-1,
 218672,0,37824,
 218675,0,-1,
 218678,0,38552,
 218680,0,-1,
 218683,0,27728,
 218686,1024,-1,
 218689,1024,27728,
 218692,1104,-1,
 218694,1104,27728,
 218697,1264,-1,
 218700,1264,27728,
 218702,2096,-1,
 218705,2096,28480,
 218708,2096,-1,
 218711,2096,29224,
 218714,2096,-1,
 218717,2096,27728,
 218720,1072,-1,
 218722,1072,27728,
 218725,992,-1,
 218728,992,27728,
 218730,832,-1,
 218733,832,27728,
 218736,0,-1,
 218739,0,25072,
 218768,0,-1,
 218791,0,25072,
 218830,0,-1,
 218834,0,29960,
 218856,0,-1,
 218859,0,28480,
 218863,0,-1,
 218867,0,25072,
 218926,0,-1,
 218930,0,25072,
 218972,0,-1,
 218976,0,27120,
  218986,0,292784,
  218990,0,-1,
  218994,0,21168,
  218997,0,-1,
 219000,0,-1,
 219003,0,27120,
 219016,0,-1,
 219019,0,27120,
  219023,0,292792,
   219026,0,292792,
    219029,0,292792,
     219031,0,292792,
      219034,0,292792,
       219037,0,292792,
        219040,0,292792,
         219064,0,292792,
          219068,0,292792,
           219071,0,292792,
            219074,0,292792,
             219078,0,292792,
              219081,0,292792,
               219084,0,292792,
                219088,0,292792,
                 219090,0,292792,
                  219107,0,292792,
                   219110,0,292792,
                    219113,0,292792,
                     219115,0,292792,
                      219118,0,292792,
                       219121,0,292792,
                        219124,0,292792,
                         219127,0,292792,
                          219129,0,292792,
                           219132,0,292792,
                            219135,0,292792,
                             219138,0,292792,
                              219141,0,292792,
                               219144,0,292792,
                                219146,0,292792,
                                 219149,0,292792,
                                  219152,0,292792,
                                   219155,0,292792,
                                    219158,0,292792,
                                     219160,0,292792,
                                      219163,0,292792,
                                       219166,0,292792,
                                        219169,0,292792,
                                         219172,0,292792,
                                          219175,0,292792,
                                           219178,0,292792,
                                            219193,0,292792,
                                             219196,0,292792,
                                              219199,0,292792,
                                               219202,0,292792,
                                                219210,0,292792,
                                                 219213,0,292792,
                                                  219215,0,292792,
                                                   219218,0,292792,
                                                    219221,0,292792,
                                                     219224,0,292792,
                                                      219227,0,292792,
                                                       219229,0,292792,
                                                        219232,0,292792,
                                                         219235,0,292792,
                                                          219238,0,292792,
                                                           219241,0,292792,
                                                            219243,0,292792,
                                                             219246,0,292792,
                                                              219249,0,292792,
                                                               219252,0,292792,
                                                                219255,0,292792,
                                                                 219257,0,292792,
                                                                 219260,0,-1,
                                                                219263,0,-1,
                                                               219266,0,-1,
                                                              219269,0,-1,
                                                             219272,0,-1,
                                                            219275,0,-1,
                                                           219278,0,-1,
                                                          219280,0,-1,
                                                         219283,0,-1,
                                                        219286,0,-1,
                                                       219289,0,-1,
                                                      219292,0,-1,
                                                     219294,0,-1,
                                                    219297,0,-1,
                                                   219300,0,-1,
                                                  219303,0,-1,
                                                 219306,0,-1,
                                                219309,0,-1,
                                               219311,0,-1,
                                              219314,0,-1,
                                             219317,0,-1,
                                            219320,0,-1,
                                           219322,0,-1,
                                          219325,0,-1,
                                         219328,0,-1,
                                        219331,0,-1,
                                       219334,0,-1,
                                      219336,0,-1,
                                     219339,0,-1,
                                    219342,0,-1,
                                   219345,0,-1,
                                  219347,0,-1,
                                 219350,0,-1,
                                219353,0,-1,
                               219356,0,-1,
                              219358,0,-1,
                             219361,0,-1,
                            219364,0,-1,
                           219367,0,-1,
                          219369,0,-1,
                         219372,0,-1,
                        219375,0,-1,
                       219378,0,-1,
                      219380,0,-1,
                     219383,0,-1,
                    219386,0,-1,
                   219388,0,-1,
                  219391,0,-1,
                 219394,0,-1,
                219396,0,-1,
               219399,0,-1,
              219402,0,-1,
             219406,0,-1,
            219409,0,-1,
           219412,0,-1,
          219415,0,-1,
         219417,0,-1,
        219420,0,-1,
       219423,0,-1,
      219425,0,-1,
     219428,0,-1,
    219431,0,-1,
   219433,0,-1,
  219436,0,-1,
 219439,0,-1,
 219441,0,27120,
  219446,0,292816,
  219449,0,-1,
 219452,0,-1,
 219454,0,27120,
  219458,0,292920,
  219461,0,-1,
 219464,0,-1,
 219466,0,27120,
  219470,0,292904,
  219473,0,-1,
 219475,0,-1,
 219478,0,27120,
  219481,0,292832,
   219484,0,25072,
   219695,0,-1,
  219701,0,-1,
 219705,0,-1,
 219711,0,29224,
 219715,0,-1,
 219718,0,25072,
 219821,0,-1,
 219826,0,25072,
 219933,0,-1,
 219938,0,25072,
 219993,0,-1,
 219998,0,25072,
 220043,0,-1,
 220048,0,25072,
 220087,0,-1,
 220092,0,25072,
 220128,0,-1,
 220134,0,288312,
 220138,0,-1,
 220143,0,288312,
 220147,0,-1,
 220150,0,288312,
 220152,0,-1,
 220155,0,292928,
 220158,0,-1,
 220161,0,288312,
 220164,0,-1,
 220167,0,292928,
 220169,0,-1,
 220172,0,288312,
 220175,0,-1,
 220178,0,292928,
 220181,0,-1,
 220183,0,288312,
 220186,0,-1,
 220189,0,292928,
 220192,0,-1,
 220194,0,288312,
 220197,0,-1,
 220200,0,292928,
 220203,0,-1,
 220205,0,288312,
 220208,0,-1,
 220211,0,292936,
 220214,0,-1,
 220217,0,292936,
 220220,0,-1,
 220223,0,292936,
 220226,0,-1,
 220228,0,292952,
 220231,0,-1,
 220234,0,292952,
 220237,0,-1,
 220240,0,292952,
 220242,0,-1,
 220245,0,292968,
 220248,0,-1,
 220251,0,292968,
 220254,0,-1,
 220257,0,292936,
 220260,0,-1,
 220263,0,292936,
 220265,0,-1,
 220268,0,292936,
 220271,0,-1,
 220274,0,292952,
 220277,0,-1,
 220279,0,292952,
 220282,0,-1,
 220285,0,292952,
 220288,0,-1,
 220291,0,292968,
 220293,0,-1,
 220296,0,292968,
 220299,0,-1,
 220302,0,292936,
 220305,0,-1,
 220308,0,292936,
 220311,0,-1,
 220313,0,292936,
 220316,0,-1,
 220319,0,292952,
 220322,0,-1,
 220325,0,292952,
 220328,0,-1,
 220330,0,292952,
 220333,0,-1,
 220336,0,292968,
 220339,0,-1,
 220342,0,292968,
 220344,0,-1,
 220348,0,292936,
 220350,0,-1,
 220353,0,292936,
 220356,0,-1,
 220359,0,292936,
 220362,0,-1,
 220364,0,292952,
 220367,0,-1,
 220370,0,292952,
 220373,0,-1,
 220376,0,292952,
 220378,0,-1,
 220381,0,292968,
 220384,0,-1,
 220387,0,292968,
 220390,0,-1,
 220393,0,292936,
 220396,0,-1,
 220399,0,292936,
 220401,0,-1,
 220404,0,292936,
 220407,0,-1,
 220410,0,292952,
 220413,0,-1,
 220415,0,292952,
 220418,0,-1,
 220421,0,292952,
 220424,0,-1,
 220427,0,292968,
 220429,0,-1,
 220432,0,292968,
 220435,0,-1,
 220438,0,292936,
 220441,0,-1,
 220444,0,292936,
 220447,0,-1,
 220449,0,292936,
 220452,0,-1,
 220455,0,292952,
 220458,0,-1,
 220460,0,292952,
 220463,0,-1,
 220466,0,292952,
 220469,0,-1,
 220472,0,292968,
 220475,0,-1,
 220477,0,292968,
 220480,0,-1,
 220483,0,292936,
 220486,0,-1,
 220489,0,292936,
 220492,0,-1,
 220495,0,292936,
 220497,0,-1,
 220500,0,292952,
 220503,0,-1,
 220506,0,292952,
 220509,0,-1,
 220512,0,292952,
 220514,0,-1,
 220517,0,292968,
 220520,0,-1,
 220523,0,292968,
 220526,0,-1,
 220529,0,293032,
  220532,0,25072,
  220694,0,-1,
 220700,0,-1,
 220705,0,293080,
  220709,0,25072,
  220861,0,-1,
 220866,0,-1,
 220871,0,293200,
  220874,0,25072,
  220893,0,-1,
  220898,0,293032,
   220902,0,25072,
   221153,0,-1,
  221159,0,-1,
 221163,0,-1,
 221167,0,293272,
  221170,0,25072,
  221187,0,-1,
  221192,0,293080,
   221196,0,25072,
   221443,0,-1,
  221448,0,-1,
 221452,0,-1,
 221457,0,293032,
  221461,0,25072,
  221599,0,-1,
 221605,0,-1,
 221609,0,293080,
  221613,0,25072,
  221708,0,-1,
 221712,0,-1,
 221715,0,293080,
  221718,0,25072,
  221839,0,-1,
 221845,0,-1,
 221864,0,25072,
 221902,0,-1,
 221906,0,25072,
 221938,0,-1,
 221943,0,25072,
 221974,0,-1,
 221978,0,25072,
 222015,0,-1,
 222020,0,25072,
 222058,0,-1,
 222063,0,25072,
 222101,0,-1,
 222106,0,25072,
 222143,0,-1,
 222147,0,25072,
 222166,0,-1,
 222171,0,25072,
 222198,0,-1,
 222202,0,25072,
 222228,0,-1,
 222233,0,25072,
 222256,0,-1,
 222261,0,25072,
 222287,0,-1,
 222293,0,25072,
 222319,0,-1,
 222323,0,25072,
 222349,0,-1,
 222353,0,25072,
 222379,0,-1,
 222384,0,25072,
 222411,0,-1,
 222415,0,25072,
 222465,0,-1,
 222484,0,25072,
 222512,0,-1,
 222516,0,25072,
 222545,0,-1,
 222550,0,25072,
 222583,0,-1,
 222587,0,288496,
  222592,0,288408,
  222597,0,-1,
 222601,0,-1,
 222604,0,288496,
  222607,0,288408,
  222610,0,-1,
 222612,0,-1,
 222615,0,288496,
  222618,0,288408,
  222621,0,-1,
 222623,0,-1,
 222626,0,288496,
  222629,0,288408,
   222632,0,288408,
   222635,0,-1,
  222638,0,-1,
 222640,0,-1,
 222643,0,288496,
  222646,0,288408,
   222649,0,288408,
   222652,0,-1,
  222654,0,-1,
 222657,0,-1,
 222660,0,288496,
  222663,0,288408,
   222665,0,288408,
   222668,0,-1,
  222671,0,-1,
 222674,0,-1,
 222676,0,288560,
 222679,0,-1,
 222682,0,288560,
 222685,0,-1,
 222688,0,288560,
 222691,0,-1,
 222694,0,288520,
 222696,0,-1,
 222699,0,288520,
 222702,0,-1,
 222705,0,288520,
 222708,0,-1,
 222711,0,288624,
 222714,0,-1,
 222717,0,288624,
 222719,0,-1,
 222722,0,288624,
 222725,0,-1,
 222728,0,288600,
 222731,0,-1,
 222733,0,288600,
 222736,0,-1,
 222739,0,288600,
 222742,0,-1,
 222744,0,288712,
 222747,0,-1,
 222750,0,288760,
 222753,0,-1,
 222756,0,288736,
 222758,0,-1,
 222761,0,288784,
 222764,0,-1,
 222767,0,288808,
 222770,0,-1,
 222772,0,288840,
 222775,0,-1,
 222779,0,288808,
 222782,0,-1,
 222785,0,288840,
 222788,0,-1,
 222790,0,288872,
 222793,0,-1,
 222796,0,288872,
 222800,0,-1,
 222803,0,288944,
 222806,0,-1,
 222809,0,288944,
 222812,0,-1,
 222815,0,289016,
 222818,0,-1,
 222821,0,289016,
 222824,0,-1,
 222826,0,289016,
 222830,0,-1,
 222832,0,289016,
 222836,0,-1,
 222839,0,289056,
 222842,0,-1,
 222845,0,289056,
 222848,0,-1,
 222851,0,289056,
 222854,0,-1,
 222857,0,289232,
 222861,0,-1,
 222864,0,288624,
 222867,0,-1,
 222869,0,289232,
 222873,0,-1,
 222876,0,289568,
  222879,0,288408,
  222882,0,-1,
 222885,0,-1,
 222888,0,289944,
  222891,0,44832,
  222895,0,-1,
  222897,0,44832,
  222900,0,-1,
 222903,0,-1,
 222906,0,290192,
  222909,0,44832,
  222912,0,-1,
  222914,0,44832,
  222917,0,-1,
 222920,0,-1,
 222923,0,290272,
  222926,0,45880,
  222928,0,-1,
  222931,0,46472,
  222935,0,-1,
 222938,0,-1,
 222941,0,290272,
  222944,0,45880,
  222947,0,-1,
  222949,0,46472,
  222952,0,-1,
 222955,0,-1,
 222958,0,289104,
 222961,0,-1,
 222964,0,289168,
 222967,0,-1,
 222969,0,288680,
 222972,0,-1,
 222975,0,288680,
 222978,0,-1,
 222981,0,288680,
 222983,0,-1,
 222986,0,288680,
 222989,0,-1,
 222992,0,288680,
 222994,0,-1,
 222997,0,288680,
 223000,0,-1,
 223003,0,288680,
 223006,0,-1,
 223008,0,288680,
 223011,0,-1,
 223014,0,288680,
 223017,0,-1,
 223019,0,288680,
 223022,0,-1,
 223025,0,288680,
 223028,0,-1,
 223030,0,288648,
 223034,0,-1,
 223036,0,288648,
 223039,0,-1,
 223042,0,288648,
 223045,0,-1,
 223048,0,288648,
 223051,0,-1,
 223053,0,288648,
 223056,0,-1,
 223059,0,288648,
 223062,0,-1,
 223065,0,288648,
 223068,0,-1,
 223070,0,288648,
 223073,0,-1,
 223076,0,288648,
 223079,0,-1,
 223081,0,288648,
 223084,0,-1,
 223087,0,288648,
 223090,0,-1,
 223093,0,21168,
 223095,0,-1,
223098,0,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21168
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 21928
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 3
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22392
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 22856
		, "static": true
		, "const": true
		, "time": 23
		, "total": 23
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 23320
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 2
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25072
		, "static": true
		, "const": true
		, "time": 2568
		, "total": 2568
		, "hits": 40
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27120
		, "static": true
		, "const": true
		, "time": 710
		, "total": 710
		, "hits": 7
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27728
		, "static": true
		, "const": true
		, "time": 21
		, "total": 21
		, "hits": 8
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28480
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29224
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 29960
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33576
		, "static": true
		, "const": true
		, "time": 18
		, "total": 18
		, "hits": 7
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34312
		, "static": true
		, "const": true
		, "time": 19
		, "total": 19
		, "hits": 7
		, "fails": 0
	}, {
		"": "uint32.pop(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pop"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34776
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.swap(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "swap"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 35240
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.bsr(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsr"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 35704
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.bsf(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsf"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36168
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.hib(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "hib"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36632
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.lob(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "lob"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 37096
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 37824
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 38552
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39024
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39488
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39952
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40416
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40880
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41488
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41952
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42552
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43008
		, "static": true
		, "const": true
		, "time": 16
		, "total": 16
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43464
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43920
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44376
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44832
		, "static": true
		, "const": true
		, "time": 15
		, "total": 15
		, "hits": 5
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45424
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45880
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 3
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46472
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 3
		, "fails": 0
	}, {
		"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "assertEq"
		, "type": "function"
		, "file": "lib/stdlib.ci"
		, "line": 39
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 39
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "expected"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "expected"
			, "type": "int32"
			, "file": "lib/stdlib.ci"
			, "line": 39
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "returned"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "returned"
			, "type": "int32"
			, "file": "lib/stdlib.ci"
			, "line": 39
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "file": "lib/stdlib.ci"
			, "line": 39
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 94
		, "offs": 288312
		, "static": true
		, "const": true
		, "time": 24
		, "total": 24
		, "hits": 8
		, "fails": 0
	}, {
		"": "Math.modf(x: float64, intPart: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "modf"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "intPart"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "intPart"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 22
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 86
		, "offs": 288408
		, "static": true
		, "const": true
		, "time": 40
		, "total": 40
		, "hits": 10
		, "fails": 0
	}, {
		"": "Math.floor(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "floor"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 46
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 46
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 46
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 288496
		, "static": true
		, "const": true
		, "time": 35
		, "total": 72
		, "hits": 6
		, "fails": 0
	}, {
		"": "Math.sign(x: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sign"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 58
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 58
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 58
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 36
		, "offs": 288520
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.sign(x: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sign"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 67
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 67
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 36
		, "offs": 288560
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.abs(x: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abs"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 83
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 83
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 83
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 18
		, "offs": 288600
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.abs(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abs"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 89
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 89
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 89
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 18
		, "offs": 288624
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 4
		, "fails": 0
	}, {
		"": "Math.absMod(val: float32, mod: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 95
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 95
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "val"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 95
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "mod"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 95
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 288648
		, "static": true
		, "const": true
		, "time": 31
		, "total": 31
		, "hits": 11
		, "fails": 0
	}, {
		"": "Math.absMod(val: float64, mod: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "val"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "mod"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 288680
		, "static": true
		, "const": true
		, "time": 30
		, "total": 30
		, "hits": 11
		, "fails": 0
	}, {
		"": "Math.min(a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 114
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 114
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 114
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 114
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 288712
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.min(a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 120
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 120
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 120
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 120
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 288736
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.max(a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 132
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 132
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 132
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 132
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 288760
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.max(a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 138
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 138
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 138
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 138
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 288784
		, "static": true
		, "const": true
		, "time": 2
		, "total": 2
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.clamp(t: float32, a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 150
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 150
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "t"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 150
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 150
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 150
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 288808
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.clamp(t: float64, a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "t"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 8
			, "offs": 32
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 288840
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.min(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 185
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 185
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 185
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 72
		, "offs": 288872
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.max(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 197
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 197
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 197
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 72
		, "offs": 288944
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.sum(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sum"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 210
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 210
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 210
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 289016
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 4
		, "fails": 0
	}, {
		"": "Math.eval(x: float64, polynomial: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "eval"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 228
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 228
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 228
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "polynomial"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "polynomial"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 228
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 47
		, "offs": 289056
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 236
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 236
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 236
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 236
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "eps"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 236
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 289104
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 249
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 249
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 249
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "eps"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 249
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 289168
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.sinCos(arg: float64, quad: int32): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinCos"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 263
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 263
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 263
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "quad"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "quad"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 263
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 335
		, "offs": 289232
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.tan(arg: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 320
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 320
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 320
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 371
		, "offs": 289568
		, "static": true
		, "const": true
		, "time": 7
		, "total": 10
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.sinh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinh"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 377
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 377
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 377
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 241
		, "offs": 289944
		, "static": true
		, "const": true
		, "time": 9
		, "total": 15
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.cosh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cosh"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 416
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 416
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 416
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 75
		, "offs": 290192
		, "static": true
		, "const": true
		, "time": 7
		, "total": 13
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.asin(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "asin"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 432
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 432
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 432
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 166
		, "offs": 290272
		, "static": true
		, "const": true
		, "time": 17
		, "total": 30
		, "hits": 2
		, "fails": 0
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 6
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 6
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 6
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 6
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 292712
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 2
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 32
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 32
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 32
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 32
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 292720
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "test/lang/function.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "test/lang/function.ci"
			, "line": 37
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 54
		, "offs": 292728
		, "static": true
		, "const": true
		, "time": 4807
		, "total": 4807
		, "hits": 753
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "test/stdc/tryExec.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 292784
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "test/stdc/tryExec.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 292792
		, "static": true
		, "const": true
		, "time": 413
		, "total": 413
		, "hits": 64
		, "fails": -64
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "test/stdc/tryExec.ci"
		, "line": 19
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 19
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 19
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 292816
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": -1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "test/stdc/tryExec.ci"
		, "line": 23
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 23
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 23
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 68
		, "offs": 292832
		, "static": true
		, "const": true
		, "time": 9
		, "total": 219
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "test/stdc/tryExec.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 37
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 292904
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "test/stdc/tryExec.ci"
		, "line": 42
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/stdc/tryExec.ci"
			, "line": 42
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/stdc/tryExec.ci"
			, "line": 42
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 292920
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": -1
	}, {
		"": "lenSlice(values: int64[]): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "lenSlice"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 103
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang/array.ci"
			, "line": 103
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 292928
		, "static": true
		, "const": true
		, "time": 15
		, "total": 15
		, "hits": 5
		, "fails": 0
	}, {
		"": "nthFixed(idx: int32, values: int64[7]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthFixed"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[7]"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 292936
		, "static": true
		, "const": true
		, "time": 56
		, "total": 56
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthArray(idx: int32, values: int64[*]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthArray"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[*]"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 292952
		, "static": true
		, "const": true
		, "time": 60
		, "total": 60
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthSlice(idx: int32, values: int64[]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthSlice"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 292968
		, "static": true
		, "const": true
		, "time": 38
		, "total": 38
		, "hits": 14
		, "fails": 0
	}, {
		"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 6
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 6
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 6
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 6
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 293032
		, "static": true
		, "const": true
		, "time": 29
		, "total": 580
		, "hits": 3
		, "fails": 0
	}, {
		"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 25
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 25
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 25
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 293080
		, "static": true
		, "const": true
		, "time": 35
		, "total": 650
		, "hits": 4
		, "fails": 0
	}, {
		"": "staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 62
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 62
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 62
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 62
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 66
		, "offs": 293200
		, "static": true
		, "const": true
		, "time": 13
		, "total": 292
		, "hits": 1
		, "fails": 0
	}, {
		"": "virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 68
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 68
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 68
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 68
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 63
		, "offs": 293272
		, "static": true
		, "const": true
		, "time": 14
		, "total": 286
		, "hits": 1
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 10927
		, "offs": 293335
		, "static": true
		, "const": false
		, "time": 886
		, "total": 9597
		, "hits": 1
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 115
	, "statementCount": 1148
}
}

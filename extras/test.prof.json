{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 152
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25264
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25776
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(4)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26288
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(5)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26800
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(6)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 176
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 336
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 496
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 656
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 816
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 976
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1136
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1296
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1456
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1616
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39504
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40320
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40832
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41344
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(26)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42368
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(27)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42880
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(28)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(29)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1776
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44200
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(30)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45008
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(31)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 1936
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45520
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(32)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46032
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(33)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46544
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 47056
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 47568
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(36)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48232
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(37)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48744
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(38)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49408
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(39)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 2096
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49912
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(40)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50416
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(41)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50920
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51424
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(44)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(44)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52584
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(45)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(45)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53088
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(46)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(46)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53744
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(47)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(47)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2256
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33064
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(11)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 33888
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(12)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34712
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(13)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35528
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(14)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2416
	, "static": true
	, "const": true
}, {
	"": "variant.is(var: variant, type: typename): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "is"
	, "owner": "variant"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "bool"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "var"
		, "kind": "variable"
		, "cast": "var"
		, "name": "var"
		, "type": "variant"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23768
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "bool"
		, "value": "nfc(1)"
	}
}, {
	"": "variant.as(var: variant, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "variant"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "var"
		, "kind": "variable"
		, "cast": "var"
		, "name": "var"
		, "type": "variant"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24432
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(2)"
	}
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2576
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2744
	, "static": true
	, "const": true
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.as(obj: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "obj"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "obj"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28136
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3384
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3544
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x32 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x32 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4504
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 4664
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x32 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x32 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x64 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x64 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x128 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x128 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 5304
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 6744
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 7664
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8144
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8608
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9072
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9536
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10000
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10768
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 11872
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 12944
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 14016
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 15392
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 16768
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 17840
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 18912
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 19984
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21056
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21520
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "emit.swz"
	, "kind": "typename"
	, "cast": "void"
	, "name": "swz"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21984
	, "static": true
	, "const": true
}, {
	"": "emit.swz.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.swz"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "swz.p4x zwxy(4e)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "swz.p4x zwxy(4e)"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 23096
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "CLOCKS_PER_SEC"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "RAND_MAX"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "RAND_MAX"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 30120
	, "static": true
	, "const": true
	, "doc": "Report messages or raise errors."
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(9)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-2"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "13"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "13"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "14"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "14"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "15"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "15"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 32392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(10)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "typename"
	, "size": 0
	, "offs": 35576
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36208
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(15)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(16)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37088
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(17)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37448
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(18)"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37808
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38168
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(20)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38680
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(21)"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "val"
	, "name": "true"
	, "type": "bool"
	, "file": "lib/stdlib.ci"
	, "line": 4
	, "size": 1
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "true"
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "val"
	, "name": "false"
	, "type": "bool"
	, "file": "lib/stdlib.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "false"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "file": "lib/stdlib.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "lib/stdlib.ci"
		, "line": 8
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "file": "lib/stdlib.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "lib/stdlib.ci"
		, "line": 9
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "file": "lib/stdlib.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "lib/stdlib.ci"
		, "line": 10
		, "value": "float64"
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 4
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 4
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 4
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 4
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 4
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 9
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 9
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 9
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 11
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 14
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 14
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 16
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 16
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 16
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 16
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 16
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 19
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 19
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 19
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 19
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 19
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 21
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 21
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 24
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 24
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 24
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 24
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 26
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 26
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 26
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 26
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 26
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 29
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 29
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 29
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 29
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 29
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 31
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 31
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 31
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 31
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 31
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 34
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 34
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 34
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 34
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 34
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 34
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "lib/std/debug.ci"
			, "line": 34
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 36
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 36
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 36
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 36
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 36
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 38
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "lib/std/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "lib/std/debug.ci"
				, "line": 38
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "lib/std/debug.ci"
			, "line": 38
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 38
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 41
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 41
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "lib/std/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "lib/std/debug.ci"
		, "line": 41
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 41
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "lib/std/debug.ci"
			, "line": 41
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/debug.ci"
				, "line": 41
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 41
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/debug.ci"
					, "line": 41
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 41
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/debug.ci"
					, "line": 41
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "lib/std/debug.ci"
					, "line": 41
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "lib/std/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 43
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "lib/std/debug.ci"
			, "line": 43
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/debug.ci"
				, "line": 43
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 43
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/debug.ci"
					, "line": 43
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 43
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/debug.ci"
					, "line": 43
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 45
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 45
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "lib/std/debug.ci"
		, "line": 45
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 45
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "lib/std/debug.ci"
			, "line": 45
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/debug.ci"
				, "line": 45
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 45
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/debug.ci"
					, "line": 45
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 45
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "lib/std/debug.ci"
					, "line": 45
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "NotEquals"
	, "kind": "typename"
	, "cast": "val"
	, "name": "NotEquals"
	, "type": "typename"
	, "file": "lib/std/debug.ci"
	, "line": 48
	, "size": 32
	, "offs": 67560
	, "static": true
	, "const": true
	, "doc": "@public"
}, {
	"": "NotEquals.expected"
	, "kind": "variable"
	, "cast": "var"
	, "name": "expected"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "lib/std/debug.ci"
	, "line": 50
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "Value of the expected result"
}, {
	"": "NotEquals.returned"
	, "kind": "variable"
	, "cast": "var"
	, "name": "returned"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "lib/std/debug.ci"
	, "line": 53
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "Value of the actual result"
}, {
	"": "NotEquals.argument"
	, "kind": "variable"
	, "cast": "var"
	, "name": "argument"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "lib/std/debug.ci"
	, "line": 56
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": true
	, "doc": "Extra argument to identify what happened"
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "lib/std/debug.ci"
		, "line": 56
		, "value": "null"
	}
}, {
	"": "NotEquals.message"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "message"
	, "owner": "NotEquals"
	, "type": "char[*]"
	, "file": "lib/std/debug.ci"
	, "line": 59
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": true
	, "doc": "Extra message to identify what happened"
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "lib/std/debug.ci"
		, "line": 59
		, "value": "null"
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 64
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "lib/std/debug.ci"
		, "line": 64
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "lib/std/debug.ci"
		, "line": 64
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "lib/std/debug.ci"
		, "line": 64
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 94
	, "offs": 357744
	, "static": true
	, "const": true
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 64
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/debug.ci"
			, "line": 65
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/debug.ci"
				, "line": 65
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/debug.ci"
					, "line": 65
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/debug.ci"
					, "line": 65
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/debug.ci"
				, "line": 65
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/debug.ci"
					, "line": 66
				}]
			}
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "NotEquals"
			, "file": "lib/std/debug.ci"
			, "line": 68
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/debug.ci"
			, "line": 73
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357744
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357746
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 357748
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 357749
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357753
		, "size": 1
	}, {
		"instruction": "inc.sp(+32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 357754
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357758
		, "size": 5
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 357763
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357767
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357769
		, "size": 5
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 357774
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357778
		, "size": 2
	}, {
		"instruction": "mov.x32 sp(6, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 357780
		, "size": 3
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357783
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357788
		, "size": 5
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357793
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357795
		, "size": 5
	}, {
		"instruction": "load.c32 73"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 357800
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 357805
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 357810
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357815
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357820
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 357825
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 357829
		, "size": 4
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 357833
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357837
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "lib/std/debug.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 76
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "lib/std/debug.ci"
		, "line": 76
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "lib/std/debug.ci"
		, "line": 76
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "lib/std/debug.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/debug.ci"
			, "line": 76
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/debug.ci"
			, "line": 76
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "lib/std/debug.ci"
			, "line": 76
			, "value": "null"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "lib/stdlib.ci"
	, "line": 17
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the size of the given type"
	, "ast": {
		"": "int32(type.size)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/stdlib.ci"
		, "line": 17
		, "args": [{
			"": "type.size"
			, "kind": "."
			, "type": "int32"
			, "file": "lib/stdlib.ci"
			, "line": 17
			, "left": {
				"": "type"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "type"
			}
			, "right": {
				"": "size"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "size"
			}
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "void"
	, "name": "Math"
	, "type": "typename"
	, "file": "lib/std/math.ci"
	, "line": 2
	, "size": 0
	, "offs": 72312
	, "static": true
	, "const": true
	, "doc": "Mathematical utility functions and constants"
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 6
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "pi"
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 6
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 7
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "e"
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 7
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 8
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln2"
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 8
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 9
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log2E"
	, "ast": {
		"": "1.442695"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "1.442695"
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln10"
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 10
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 11
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log10E"
	, "ast": {
		"": "0.434294"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "0.434294"
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 12
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "phi"
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 12
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 13
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrt2"
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 13
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 14
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtE"
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 14
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPi"
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 15
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPhi"
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 16
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 17
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "nan"
	, "ast": {
		"": "-nan"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "-nan"
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "lib/std/math.ci"
	, "line": 18
	, "size": 8
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "inf"
	, "ast": {
		"": "inf"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "inf"
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 86
	, "offs": 357840
	, "static": true
	, "const": true
	, "doc": "Decompose a value into integer and fractional parts"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357840
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 357842
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 357851
		, "size": 1
	}, {
		"instruction": "jz +51"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 357852
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357856
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 357858
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 357859
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 357860
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 357864
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357865
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 357867
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357868
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357870
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 357875
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 357876
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 357880
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357881
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 357883
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 357884
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357885
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 357887
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357888
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357890
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 357891
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 357895
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357896
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 357898
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 357899
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357902
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357903
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 357905
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 357914
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357915
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357917
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 357919
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357920
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 357922
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357923
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357925
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 357928
	, "static": true
	, "const": true
	, "doc": "Computes the largest integer value not greater than the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 47
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 48
			, "value": "result"
		}, {
			"": "modf(x, &result);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 49
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 50
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 50
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 357928
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357929
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 357931
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 357935
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 357940
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 357941
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 357945
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357949
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357951
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the smallest integer not less than the input"
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 54
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 54
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 54
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 54
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the nearest integer to the input"
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 57
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 57
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 57
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 57
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 64
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 64
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 64
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 64
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 64
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 64
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 64
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 67
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 67
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 67
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 77
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 77
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 18
	, "offs": 357952
	, "static": true
	, "const": true
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 77
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 78
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 78
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 78
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 78
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 78
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 78
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 79
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 79
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 79
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 81
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 81
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357952
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 357954
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 357955
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 357956
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 357960
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 357962
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 357963
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357965
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 357966
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357969
		, "size": 1
	}]
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 85
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 85
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 85
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 18
	, "offs": 357976
	, "static": true
	, "const": true
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 85
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 86
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 86
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 86
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 86
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 86
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 86
				, "stmt": [{
					"": "return .result := -x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 87
					, "stmt": {
						"": ".result := -x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-x"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 87
							, "right": {
								"": "x"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 87
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := x;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 89
			, "stmt": {
				"": ".result := x"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 89
					, "value": "x"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357976
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 357978
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 357979
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 357980
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 357984
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 357986
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 357987
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357989
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 357990
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 357993
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float32, mod: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 93
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "mod"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 93
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 358000
	, "static": true
	, "const": true
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 93
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 94
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 94
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 94
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 94
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 94
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 94
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 94
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 94
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 94
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 94
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 94
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 95
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 95
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 95
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 95
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 97
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 97
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358000
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358002
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 358004
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358005
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358007
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358009
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 358010
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358011
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358015
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358017
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 358019
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358020
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358022
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358023
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358026
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float64, mod: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "val"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "mod"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 358032
	, "static": true
	, "const": true
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 102
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 102
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 102
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 102
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 102
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 102
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 102
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 102
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 102
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 102
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 102
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 103
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 103
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 103
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 103
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 105
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 105
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358032
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358034
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 358036
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358037
		, "size": 2
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358039
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 358041
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358042
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358043
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358047
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358049
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358051
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358052
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358054
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358055
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358058
		, "size": 1
	}]
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 115
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 115
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 115
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 115
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 358064
	, "static": true
	, "const": true
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 115
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 116
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 116
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 116
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 116
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 116
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 117
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 117
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 119
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 119
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358064
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358066
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 358068
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358069
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358073
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358076
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358077
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358080
		, "size": 1
	}]
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 123
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 123
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 123
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 123
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 358088
	, "static": true
	, "const": true
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 123
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 124
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 124
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 124
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 124
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 124
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 125
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 125
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 127
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 127
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358088
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358090
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358092
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358093
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358097
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358100
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358101
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358104
		, "size": 1
	}]
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 137
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 137
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 137
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 137
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 358112
	, "static": true
	, "const": true
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 137
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 138
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 138
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 138
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 138
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 138
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 139
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 139
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 141
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 141
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358112
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358114
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 358116
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358117
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358121
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358124
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358125
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358128
		, "size": 1
	}]
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 145
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 145
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 145
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 145
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 17
	, "offs": 358136
	, "static": true
	, "const": true
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 145
		, "stmt": [{
			"": "if (a > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 146
			, "test": {
				"": "a > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 146
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 146
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 146
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 146
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 147
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 147
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "return .result := b;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 149
			, "stmt": {
				"": ".result := b"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 149
					, "value": "b"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358136
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358138
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 358140
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358141
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358145
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358148
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358149
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358152
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 159
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 358160
	, "static": true
	, "const": true
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 160
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 160
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 160
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 160
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 160
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 161
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 161
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 163
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 163
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 163
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 163
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 163
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 164
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 164
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 166
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 166
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358160
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358162
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 358164
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358165
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358169
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358172
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358173
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358175
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 358177
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358178
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358182
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358185
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(4, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 358186
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358189
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 170
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 170
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 358192
	, "static": true
	, "const": true
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 170
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 171
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 171
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 171
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 171
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 171
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 172
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 172
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 174
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 174
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 174
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 174
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 174
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 175
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 175
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 177
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 177
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358192
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358194
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358196
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358197
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358201
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358204
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358205
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358207
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 358209
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358210
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358214
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358217
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(7, 5)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 358218
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358221
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 186
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 186
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 186
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 186
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 186
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 186
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 186
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 186
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 186
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 186
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 189
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 189
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 189
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 189
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 189
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 189
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 189
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 189
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 189
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.smooth(t: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 191
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 191
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 191
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 191
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 191
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 191
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 191
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 191
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 191
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 191
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 191
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 191
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 191
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 192
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 192
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 192
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 192
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 192
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 192
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 192
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 192
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 192
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 192
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 192
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 192
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 192
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 192
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 192
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 195
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 195
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), float32(0), float32(1)))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 195
		, "args": [{
			"": "clamp((t - a) / (b - a), float32(0), float32(1))"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 195
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 195
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 195
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 195
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 195
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 195
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 195
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "lib/std/math.ci"
						, "line": 195
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 195
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 195
							, "value": "a"
						}
					}]
				}
			}, {
				"": "float32(0)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 195
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 195
					, "value": "0"
				}]
			}, {
				"": "float32(1)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math.ci"
				, "line": 195
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 195
					, "value": "1"
				}]
			}]
		}]
	}
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 198
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 198
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), float64(0), float64(1)))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 198
		, "args": [{
			"": "clamp((t - a) / (b - a), float64(0), float64(1))"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 198
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 198
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 198
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 198
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 198
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 198
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 198
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 198
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 198
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 198
							, "value": "a"
						}
					}]
				}
			}, {
				"": "float64(0)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 198
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 198
					, "value": "0"
				}]
			}, {
				"": "float64(1)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 198
				, "args": [{
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 198
					, "value": "1"
				}]
			}]
		}]
	}
}, {
	"": "Math.min(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 201
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 201
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 201
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 358224
	, "static": true
	, "const": true
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 201
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 202
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 202
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 202
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "lib/std/math.ci"
						, "line": 202
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 202
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 202
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 202
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 202
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 203
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 203
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 205
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 206
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 206
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 206
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 206
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 206
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 206
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 206
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 206
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 206
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 206
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 206
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 206
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 206
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 206
				, "stmt": [{
					"": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 207
					, "test": {
						"": "result > data[i]"
						, "kind": ">"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 207
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 207
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 207
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "lib/std/math.ci"
								, "line": 207
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 207
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 207
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 208
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 211
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 211
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358224
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358226
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 358227
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358228
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358232
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358241
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358243
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358244
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358246
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358247
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358252
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358256
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358258
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358260
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 358262
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358266
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 358267
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358268
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358272
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358274
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 358276
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358280
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358281
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 358283
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358287
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358289
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 358291
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 358292
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358296
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358300
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358302
		, "size": 1
	}]
}, {
	"": "Math.max(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 215
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 215
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 215
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 358304
	, "static": true
	, "const": true
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 215
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 216
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 216
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 216
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "lib/std/math.ci"
						, "line": 216
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 216
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "lib/std/math.ci"
					, "line": 216
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 216
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 216
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 217
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 217
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 219
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 220
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 220
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 220
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 220
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 220
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 220
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 220
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 220
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 220
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 220
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 220
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 220
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 220
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 220
				, "stmt": [{
					"": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 221
					, "test": {
						"": "result < data[i]"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 221
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 221
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 221
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "lib/std/math.ci"
								, "line": 221
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 221
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 221
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 222
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 225
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 225
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358304
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358306
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 358307
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358308
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358312
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358321
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358323
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358324
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358326
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358327
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358332
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358336
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358338
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358340
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 358342
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358346
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358347
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358348
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358352
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358354
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 358356
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358360
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358361
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 358363
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358367
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358369
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 358371
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 358372
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358376
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358380
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358382
		, "size": 1
	}]
}, {
	"": "Math.sum(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sum"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 229
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 229
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 229
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 358384
	, "static": true
	, "const": true
	, "doc": "Returns the sum of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 229
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 230
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 231
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 231
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 231
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 231
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 231
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/math.ci"
						, "line": 231
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 231
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 231
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 231
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 231
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 231
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 231
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 231
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 231
				, "stmt": [{
					"": "result := result + data[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 232
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 234
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 234
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 358384
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 358385
		, "size": 1
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358386
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358390
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358392
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358394
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 358396
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358400
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358401
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358402
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 358404
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358408
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358410
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 358412
		, "size": 1
	}, {
		"instruction": "jnz -23"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 358413
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358417
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358421
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358423
		, "size": 1
	}]
}, {
	"": "Math.mean(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mean"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 238
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 238
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 238
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 20
	, "offs": 358424
	, "static": true
	, "const": true
	, "doc": "Returns the mean of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 238
		, "stmt": [{
			"": "return .result := sum(...data) / (data.length);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 239
			, "stmt": {
				"": ".result := sum(...data) / (data.length)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "sum(...data) / (data.length)"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 239
					, "left": {
						"": "sum(...data)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 239
						, "args": [{
							"": "...data"
							, "kind": "..."
							, "type": "float64[]"
							, "file": "lib/std/math.ci"
							, "line": 239
							, "right": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "lib/std/math.ci"
								, "line": 239
								, "value": "data"
							}
						}]
					}
					, "right": {
						"": "(data.length)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 239
						, "args": [{
							"": "data.length"
							, "kind": "."
							, "type": "uint32"
							, "file": "lib/std/math.ci"
							, "line": 239
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "lib/std/math.ci"
								, "line": 239
								, "value": "data"
							}
							, "right": {
								"": "length"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "lib/std/math.ci"
								, "line": 239
								, "value": "length"
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 358424
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358425
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 358427
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 358432
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358433
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358437
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 358439
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 358440
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358441
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358443
		, "size": 1
	}]
}, {
	"": "Math.eval(x: float64, a0: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 243
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 243
		, "args": [{
			"": "a0"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 243
			, "value": "a0"
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 246
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 246
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * a1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 246
		, "args": [{
			"": "a0 + x * a1"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 246
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 246
				, "value": "a0"
			}
			, "right": {
				"": "x * a1"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 246
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 246
					, "value": "x"
				}
				, "right": {
					"": "a1"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 246
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 249
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 249
		, "args": [{
			"": "a0 + x * eval(x, a1, a2)"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 249
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 249
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 249
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 249
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 249
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 249
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 249
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 249
						, "value": "a2"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 252
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "a3"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a3"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "size": 8
		, "offs": 40
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2, a3))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 252
		, "args": [{
			"": "a0 + x * eval(x, a1, a2, a3)"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 252
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 252
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2, a3)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 252
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 252
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2, a3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 252
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 252
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 252
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 252
						, "value": "a2"
					}, {
						"": "a3"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 252
						, "value": "a3"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, polynomial: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 255
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 255
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 255
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "polynomial"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "polynomial"
		, "type": "float64[]"
		, "file": "lib/std/math.ci"
		, "line": 255
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 47
	, "offs": 358448
	, "static": true
	, "const": true
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 255
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 256
			, "value": "result"
		}, {
			"": "for (i; i >= 0; i := i - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 257
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 257
				, "value": "i"
			}
			, "test": {
				"": "i >= 0"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 257
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 257
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 257
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 257
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 257
					, "value": "i"
				}
				, "right": {
					"": "i - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 257
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 257
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 257
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 257
				, "stmt": [{
					"": "result := result * x + polynomial[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 258
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 260
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 260
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 358448
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358449
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 358451
		, "size": 4
	}, {
		"instruction": "jmp +25"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358455
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358459
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358461
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358463
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358464
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358466
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 358468
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 358472
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358473
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358474
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 358476
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358480
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358482
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 358483
		, "size": 1
	}, {
		"instruction": "jz -25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358484
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358488
		, "size": 4
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358492
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358494
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 264
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "lib/std/math.ci"
		, "line": 264
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 358496
	, "static": true
	, "const": true
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 264
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 265
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 265
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 265
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math.ci"
					, "line": 265
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 265
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 266
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 266
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 266
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 266
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 266
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 266
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 266
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 266
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 267
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 267
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 267
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 270
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 271
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 271
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 271
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "lib/std/math.ci"
							, "line": 271
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "lib/std/math.ci"
								, "line": 271
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 271
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math.ci"
									, "line": 271
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 271
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 272
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 272
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 272
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 275
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 275
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358496
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358498
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 358500
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358501
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358505
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358507
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358509
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 358511
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 358512
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358513
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358517
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358522
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358524
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358525
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358529
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358531
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358533
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 358535
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 358536
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358537
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358541
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358546
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358548
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358549
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358550
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358552
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 279
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 279
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 279
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 279
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 279
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 358560
	, "static": true
	, "const": true
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 279
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 280
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 280
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 280
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 280
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 280
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 281
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 281
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 281
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 281
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 281
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 281
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 281
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 281
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 282
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 282
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 282
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 285
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 286
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 286
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 286
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 286
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 286
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 286
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 286
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 286
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 287
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 287
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/math.ci"
										, "line": 287
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 290
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 290
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358560
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358562
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358564
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358565
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358569
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358571
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358573
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 358575
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358576
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358577
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358581
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358586
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358588
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358589
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358593
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358595
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358597
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 358599
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358600
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358601
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358605
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358610
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358612
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358613
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358614
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358616
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 294
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 294
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 294
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "lib/std/math.ci"
		, "line": 294
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 335
	, "offs": 358624
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 294
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 308
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 309
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 309
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 309
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 309
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 309
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 309
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 310
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 311
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 314
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 315
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 316
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 316
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 316
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 316
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 316
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 316
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 317
					, "value": "e"
				}, {
					"": "y := modf(x, &e);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 318
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 319
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 321
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, &f);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 322
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 323
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 325
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 326
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 327
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 328
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 329
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 331
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "lib/std/math.ci"
				, "line": 331
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 331
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 331
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 331
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 332
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 334
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 334
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 334
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 334
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 334
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 335
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 338
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 339
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 340
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 341
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 341
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 341
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 341
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358624
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358626
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 358628
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358629
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358630
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 358634
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358635
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 358637
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358641
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 358643
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358644
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358646
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358655
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 358664
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358665
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358666
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358668
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358670
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 358679
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358680
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 358684
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358685
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 358687
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 358691
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 358696
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358697
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358701
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358703
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 358705
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358706
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 358707
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358708
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358717
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358719
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 358720
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 358724
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 358729
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358730
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358734
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358738
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358740
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358749
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358751
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 358752
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 358753
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358754
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358756
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 358760
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358764
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 358766
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358767
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358769
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 358771
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 358772
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358773
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358775
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358777
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 358779
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358780
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358782
		, "size": 2
	}, {
		"instruction": "b32.and 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 358784
		, "size": 2
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 358786
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358788
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358792
		, "size": 2
	}, {
		"instruction": "b32.and 0x001"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 358794
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358796
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358800
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358809
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 358811
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358812
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 358814
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358816
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 358821
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358822
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 358826
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358827
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358829
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358831
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358832
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358841
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358843
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358844
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358853
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358854
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358856
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358857
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358866
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358867
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358869
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358870
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358879
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358880
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358882
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358883
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358892
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358893
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358895
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358896
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358898
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358907
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358908
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358910
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358911
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358920
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358921
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358923
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358924
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358933
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358934
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358936
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358937
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 358946
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358947
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358949
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 358951
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358952
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 358954
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 358958
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 345
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 345
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 345
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the sine of the input"
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 345
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 345
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 345
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 348
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 348
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 348
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the cosine of the input"
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 348
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 348
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 348
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 348
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 351
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 351
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 351
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 378
	, "offs": 358960
	, "static": true
	, "const": true
	, "doc": "Returns the tangent of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 351
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 364
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 365
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 367
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 367
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 367
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 367
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 367
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 367
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 368
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 369
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 371
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 373
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 374
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 375
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 377
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 377
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 377
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 377
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 378
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 378
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 378
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 378
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 378
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 378
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 379
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 380
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 382
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 382
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "lib/std/math.ci"
								, "line": 382
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 382
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 382
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/std/math.ci"
								, "line": 382
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/math.ci"
									, "line": 383
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/math.ci"
									, "line": 384
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/std/math.ci"
								, "line": 386
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "lib/std/math.ci"
									, "line": 386
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "lib/std/math.ci"
										, "line": 386
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/std/math.ci"
											, "line": 386
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "lib/std/math.ci"
											, "line": 386
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "lib/std/math.ci"
										, "line": 386
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "lib/std/math.ci"
											, "line": 387
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "lib/std/math.ci"
											, "line": 388
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 391
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 392
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 393
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 395
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 395
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 395
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 396
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/math.ci"
						, "line": 396
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 396
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 396
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math.ci"
								, "line": 396
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/math.ci"
						, "line": 396
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/math.ci"
							, "line": 397
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 397
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 399
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 401
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 401
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 401
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 402
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 402
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 402
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 404
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 404
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358960
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 358961
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358962
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 358964
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 358965
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 358966
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358970
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 358972
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 358973
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 358975
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 358980
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 358984
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358985
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 358994
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 358996
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 358997
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359006
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359007
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 359009
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359010
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359012
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 359016
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 359021
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359022
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359026
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 359028
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359029
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 359034
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 359035
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 359037
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 359038
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 359039
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 359043
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359045
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 359050
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359051
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359055
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359064
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359066
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359067
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359069
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359074
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 359078
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 359079
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 359083
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359085
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 359090
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359091
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359095
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 359099
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 359100
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359101
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 359105
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359106
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359111
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 359115
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 359116
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 359120
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359122
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 359127
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359128
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359132
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359141
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359143
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359144
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359146
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 359150
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 359151
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359152
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 359156
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359157
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359159
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359161
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359162
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359171
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359173
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359174
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359183
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359184
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359186
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359187
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359196
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359197
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359199
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359200
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359209
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359210
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359212
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359213
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359222
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359223
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359225
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359226
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359228
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359237
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359238
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359240
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359241
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359250
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359251
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359253
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359254
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359263
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359264
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359265
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 359269
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359270
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359274
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359276
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 359277
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359278
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359282
		, "size": 9
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359291
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359293
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359297
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359298
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359307
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359309
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359310
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359312
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 359316
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359317
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359321
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359323
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359324
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359326
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359330
		, "size": 1
	}, {
		"instruction": "set.x64 sp(14)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359331
		, "size": 2
	}, {
		"instruction": "inc.sp(-36)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359333
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359337
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 408
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 408
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 408
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 241
	, "offs": 359344
	, "static": true
	, "const": true
	, "doc": "Returns the hyperbolic sine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 408
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 420
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 421
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 421
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 421
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 421
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 421
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 421
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 422
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 423
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 426
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 426
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 426
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 426
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 426
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 426
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 427
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 427
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 427
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 427
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 427
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 427
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 430
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 431
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 431
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 431
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 431
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 431
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 432
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 434
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 435
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 436
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 437
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 440
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 440
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 440
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 441
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 441
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 441
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 443
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 443
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 359344
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359345
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359347
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 359348
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359349
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359353
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359355
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359356
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359358
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359363
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 359367
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359368
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359370
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 359379
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359380
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359384
		, "size": 2
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359386
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359390
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359399
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359400
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359402
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359406
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359407
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359408
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359410
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 359419
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359420
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359424
		, "size": 2
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359426
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359430
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359432
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359433
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359437
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359438
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359447
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359448
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 359450
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359454
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359456
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359458
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359459
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359468
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359470
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359471
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359480
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359481
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359483
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359484
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359493
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359494
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359496
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359497
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359506
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359507
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359509
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359510
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359512
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359514
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359516
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359525
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359526
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359528
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359529
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359538
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359539
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359541
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359542
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359551
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359552
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359553
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359555
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359559
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 359563
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359564
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359568
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359570
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359571
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359573
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359577
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359578
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359580
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359584
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 447
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 447
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 447
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 359592
	, "static": true
	, "const": true
	, "doc": "Returns the hyperbolic cosine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 447
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 448
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 448
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 448
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 448
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 448
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 448
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 449
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 451
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 451
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 451
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 451
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 451
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 451
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 452
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 452
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 452
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 452
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 452
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/math.ci"
									, "line": 452
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 454
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 454
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 454
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 454
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 454
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 454
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 454
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "lib/std/math.ci"
									, "line": 454
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "lib/std/math.ci"
										, "line": 454
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "lib/std/math.ci"
						, "line": 454
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/math.ci"
							, "line": 454
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359592
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359594
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 359595
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359596
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359600
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359602
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359603
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359605
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359607
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 359616
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359617
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359621
		, "size": 2
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359623
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359627
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359636
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359637
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359639
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359640
		, "size": 2
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359642
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359646
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359648
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359649
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359653
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359654
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359663
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359664
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359666
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 462
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 462
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 462
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 173
	, "offs": 359672
	, "static": true
	, "const": true
	, "doc": "Returns the arc sine of the input\n Special cases are:\n   Asin(±0) = ±0\n   Asin(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math.ci"
		, "line": 462
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 463
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 463
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 463
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 463
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 463
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 463
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 465
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 465
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "lib/std/math.ci"
			, "line": 468
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 469
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 469
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 469
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 469
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 469
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 469
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 470
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 471
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 474
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 474
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 474
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 474
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 474
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 474
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 476
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 476
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 479
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 480
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 480
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 480
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 480
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 480
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 481
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 483
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 484
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 487
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "lib/std/math.ci"
				, "line": 487
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math.ci"
				, "line": 487
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math.ci"
					, "line": 488
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "lib/std/math.ci"
							, "line": 488
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "lib/std/math.ci"
								, "line": 488
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math.ci"
			, "line": 490
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 490
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359672
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359674
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 359675
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359676
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 359680
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359683
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 359684
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359685
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359687
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 359688
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359689
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 359693
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359698
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 359702
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359703
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359705
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359706
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359708
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359710
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 359719
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359720
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359724
		, "size": 9
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359733
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359735
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359739
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359740
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359749
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359751
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359753
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359754
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359755
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359759
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359761
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 359770
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359771
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359775
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 359784
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359793
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359794
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359796
		, "size": 2
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359798
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359802
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359803
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 359805
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359809
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359811
		, "size": 2
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 359813
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359817
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 359819
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 359823
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 359824
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359828
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 359830
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359831
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359833
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359837
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359838
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359840
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359844
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 497
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 497
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 497
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the arc cosine of the input\n Special case is:\n   Acos(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 497
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 497
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 497
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 497
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 497
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 497
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 497
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 497
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.radians(degrees: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "radians"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 521
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 521
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "degrees"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "degrees"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 521
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to radians from degrees."
	, "ast": {
		"": "float64(degrees * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 521
		, "args": [{
			"": "degrees * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 521
			, "left": {
				"": "degrees * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 521
				, "left": {
					"": "degrees"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 521
					, "value": "degrees"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 521
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 521
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/math.ci"
					, "line": 521
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.degrees(radians: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "degrees"
	, "owner": "Math"
	, "type": "function"
	, "file": "lib/std/math.ci"
	, "line": 524
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 524
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "radians"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "radians"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 524
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to degrees from radians."
	, "ast": {
		"": "float64(radians * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math.ci"
		, "line": 524
		, "args": [{
			"": "radians * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 524
			, "left": {
				"": "radians * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 524
				, "left": {
					"": "radians"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 524
					, "value": "radians"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math.ci"
					, "line": 524
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math.ci"
						, "line": 524
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math.ci"
				, "line": 524
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "lib/std/math/Complex.ci"
	, "line": 2
	, "size": 16
	, "offs": 109240
	, "static": true
	, "const": true
	, "doc": "Complex number"
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "lib/std/math/Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "The real component of a complex number."
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "lib/std/math/Complex.ci"
	, "line": 8
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "The imaginary component of a complex number."
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/math/Complex.ci"
		, "line": 8
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 24
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 24
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 359848
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Complex.ci"
		, "line": 24
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Complex.ci"
			, "line": 25
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 26
					}, {
						"": ".result.im := (0)"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result.im"
							, "kind": "."
							, "type": "float64"
							, "left": {
								"": ".result"
								, "kind": ".variable"
								, "type": "Complex"
								, "file": "lib/std/math/Complex.ci"
								, "line": 24
								, "value": ".result"
							}
							, "right": {
								"": "im"
								, "kind": ".variable"
								, "type": "float64"
								, "value": "im"
							}
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "lib/std/math/Complex.ci"
							, "line": 8
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "lib/std/math/Complex.ci"
								, "line": 8
								, "value": "0"
							}]
						}
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 359848
		, "size": 3
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359851
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359852
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359854
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 359856
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Complex.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Complex.ci"
			, "line": 32
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 33
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 34
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 359856
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 359859
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359862
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(-a.re, -a.im);"
	, "ast": {
		"": "Complex(emit(struct(a), neg.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 59
		, "args": [{
			"": "emit(struct(a), neg.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Complex.ci"
			, "line": 59
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 59
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 59
					, "value": "a"
				}]
			}, {
				"": "neg.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Complex.ci"
				, "line": 59
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 59
					, "value": "neg"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Complex.ci"
					, "line": 59
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re + b.re, a.im + b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 62
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Complex.ci"
			, "line": 62
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 62
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 62
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Complex.ci"
				, "line": 62
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 62
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Complex.ci"
					, "line": 62
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 64
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 64
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 64
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 64
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 66
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 66
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 66
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 66
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 66
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 66
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 66
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re - b.re, a.im - b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Complex.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 69
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 69
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Complex.ci"
				, "line": 69
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 69
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Complex.ci"
					, "line": 69
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 71
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 71
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 71
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 71
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 71
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 71
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 71
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 73
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 73
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 73
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 73
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 73
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 73
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 73
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 76
		, "args": [{
			"": "emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Complex.ci"
			, "line": 76
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "b"
				}]
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "lib/std/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "x2"
				}
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "p2d"
				}
			}, {
				"": "add.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "add"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 77
					, "value": "f64"
				}
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "p2d"
				}
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "lib/std/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "x2"
				}
			}, {
				"": "sub.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "sub"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 78
					, "value": "f64"
				}
			}]
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 81
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 81
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 81
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 81
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 83
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 83
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 83
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 83
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 83
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 123
	, "offs": 359864
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Complex.ci"
		, "line": 86
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math/Complex.ci"
			, "line": 90
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/math/Complex.ci"
				, "line": 90
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math/Complex.ci"
							, "line": 90
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math/Complex.ci"
							, "line": 90
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math/Complex.ci"
				, "line": 90
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 91
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 92
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math/Complex.ci"
					, "line": 93
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math/Complex.ci"
								, "line": 94
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math/Complex.ci"
								, "line": 95
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 98
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 99
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Complex.ci"
			, "line": 100
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 101
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 102
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359864
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359865
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 359867
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 359872
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359873
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 359877
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359878
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 359880
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 359885
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359886
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 359890
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 359891
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359895
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359897
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359899
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359900
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359902
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359904
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359906
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359907
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359908
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359910
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359912
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359914
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359915
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359916
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359918
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359919
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359921
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359923
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359925
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359927
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359928
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359929
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359931
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359932
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359934
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359938
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359939
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359943
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359945
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359947
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359948
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359950
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359952
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359954
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359955
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359956
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359958
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359960
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359961
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 359963
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359964
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359966
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359967
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359969
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359971
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359973
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359974
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 359976
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359977
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 359979
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 359980
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 359982
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 359986
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 107
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 107
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 107
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 107
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 107
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 109
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 109
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 109
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 109
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 109
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 109
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 112
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 112
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 112
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 114
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 114
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 114
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 114
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 114
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 114
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 359992
	, "static": true
	, "const": true
	, "doc": "Reciprocal of a complex number (1 / a)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Complex.ci"
		, "line": 117
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 118
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Complex.ci"
			, "line": 119
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 120
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 121
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359992
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359994
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 359996
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359997
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 359999
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360001
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 360002
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360003
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360005
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 360007
		, "size": 1
	}, {
		"instruction": "set.x64 sp(9)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 360008
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360010
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 360012
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360013
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 360015
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 360016
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360018
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360022
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 126
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 126
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 126
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 126
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 126
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 126
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 126
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 126
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 129
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 132
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 132
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 132
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 135
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 100
	, "offs": 360024
	, "static": true
	, "const": true
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Complex.ci"
		, "line": 135
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 136
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 137
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 138
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 139
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Complex.ci"
			, "line": 140
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 141
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Complex.ci"
						, "line": 142
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x128 sp(5)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 360024
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360026
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360028
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360030
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360031
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360033
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360035
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 360036
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360037
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 360041
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360043
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(7)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 360047
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360049
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360051
		, "size": 2
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360053
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 360057
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360059
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360063
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360065
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360067
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360068
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360070
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360072
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360076
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 360077
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360078
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360080
		, "size": 2
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360082
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360086
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 360088
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360089
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360091
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360092
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360096
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360097
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360099
		, "size": 2
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360101
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360105
		, "size": 1
	}, {
		"instruction": "set.x64 sp(19)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 360106
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360108
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 360110
		, "size": 2
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360112
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 360116
		, "size": 1
	}, {
		"instruction": "set.x64 sp(21)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 360117
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360119
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360123
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "lib/std/math/Complex.ci"
		, "line": 146
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 146
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 146
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 146
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 149
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 149
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 149
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math/Complex.ci"
							, "line": 149
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math/Complex.ci"
							, "line": 149
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 151
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 151
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 151
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "lib/std/math/Complex.ci"
							, "line": 151
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "lib/std/math/Complex.ci"
							, "line": 151
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 164
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 166
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 166
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 169
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 169
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 169
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 169
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 169
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 169
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math/Complex.ci"
			, "line": 169
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 171
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 171
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 171
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 171
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 171
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 171
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/math/Complex.ci"
			, "line": 171
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 173
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 175
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 178
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 178
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 178
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 178
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 180
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 180
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 180
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 180
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 182
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 182
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 182
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 182
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 184
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 184
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "lib/std/math/Complex.ci"
			, "line": 184
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 184
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 187
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 187
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "lib/std/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "lib/std/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "lib/std/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "lib/std/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "lib/std/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "lib/std/math/Complex.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "lib/std/math/Complex.ci"
		, "line": 189
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "lib/std/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}]
	}
}, {
	"": "vec4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 2
	, "size": 16
	, "offs": 131216
	, "static": true
	, "const": true
	, "doc": "A 4d vector (4x float32)"
}, {
	"": "vec4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec4f"
	, "type": "float32[4]"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 4
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec4f"
	, "type": "vec4f.<?>"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 126
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f.<?>.x"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "x"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 7
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec4f.<?>.y"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "y"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 9
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec4f.<?>.z"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "z"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 11
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
}, {
	"": "vec4f.<?>.w"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "w"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 13
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
}, {
	"": "vec4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 7
		, "value": "x"
	}
}, {
	"": "vec4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 9
		, "value": "y"
	}
}, {
	"": "vec4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 11
		, "value": "z"
	}
}, {
	"": "vec4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 13
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 13
		, "value": "w"
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 26
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 360128
	, "static": true
	, "const": true
	, "doc": "Initialize with given x, y, z, w components"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 26
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 27
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 27
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 27
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 27
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 27
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(5, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360128
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(6, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360131
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(7, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360134
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(8, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360137
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360140
		, "size": 1
	}]
}, {
	"": "vec4f(x: float32, y: float32, z: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 31
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 31
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with  (x: x, y: y, z: z, w: 1)"
	, "ast": {
		"": "vec4f(x, y, z, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 31
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 31
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 31
			, "value": "z"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 31
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 34
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 34
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 34
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with (x: x, y: y, z: 0, w: 1)"
	, "ast": {
		"": "vec4f(x, y, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 34
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 34
			, "value": "y"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 34
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 34
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(xyz: vec4f, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 37
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "xyz"
		, "kind": "variable"
		, "cast": "val"
		, "name": "xyz"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 37
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 37
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z components using the components form the given vector, and w with the given value"
	, "ast": {
		"": "vec4f(xyz.x, xyz.y, xyz.z, w)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 37
		, "args": [{
		}, {
			"": "xyz.x"
			, "kind": "."
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 37
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "xyz"
			}
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "x"
			}
		}, {
			"": "xyz.y"
			, "kind": "."
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 37
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "xyz"
			}
			, "right": {
				"": "y"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "y"
			}
		}, {
			"": "xyz.z"
			, "kind": "."
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 37
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "xyz"
			}
			, "right": {
				"": "z"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "z"
			}
		}, {
			"": "w"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 37
			, "value": "w"
		}]
	}
}, {
	"": "vec4f(val: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 40
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z, w components with the given scalar value"
	, "ast": {
		"": "vec4f(val, val, val, val)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 40
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 40
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 40
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 40
			, "value": "val"
		}]
	}
}, {
	"": "neg(rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns a negated copy of the vector."
	, "ast": {
		"": "vec4f(emit(struct(rhs), neg.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 71
		, "args": [{
			"": "emit(struct(rhs), neg.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 71
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 71
					, "value": "rhs"
				}]
			}, {
				"": "neg.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 71
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 71
					, "value": "neg"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 71
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), add.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 73
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), add.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 73
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 73
					, "value": "rhs"
				}]
			}, {
				"": "add.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 73
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 73
					, "value": "add"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 73
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), sub.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 75
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), sub.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 75
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 75
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 75
					, "value": "rhs"
				}]
			}, {
				"": "sub.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 75
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 75
					, "value": "sub"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 75
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), mul.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 77
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), mul.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 77
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 77
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 77
					, "value": "rhs"
				}]
			}, {
				"": "mul.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 77
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 77
					, "value": "mul"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 77
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "div(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 79
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 79
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 79
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 79
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), div.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 79
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), div.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 79
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 79
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 79
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 79
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 79
					, "value": "rhs"
				}]
			}, {
				"": "div.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 79
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 79
					, "value": "div"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 79
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "min(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise minimum of the two vectors."
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), min.p4f))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 82
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), min.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 82
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 82
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 82
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 82
					, "value": "rhs"
				}]
			}, {
				"": "min.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 82
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 82
					, "value": "min"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 82
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "max(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise maximum of the two vectors."
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), max.p4f))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 84
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), max.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 84
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 84
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 84
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 84
					, "value": "rhs"
				}]
			}, {
				"": "max.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 84
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 84
					, "value": "max"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 84
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "dp3(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 88
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 88
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 88
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of the first 3 elements"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp3))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 88
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp3)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 88
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 88
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 88
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 88
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 88
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp3"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 88
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 88
					, "value": "p4x"
				}
				, "right": {
					"": "dp3"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 88
					, "value": "dp3"
				}
			}]
		}]
	}
}, {
	"": "dph(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 92
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Homogeneous dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dph))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 92
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dph)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 92
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 92
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 92
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 92
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 92
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dph"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 92
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 92
					, "value": "p4x"
				}
				, "right": {
					"": "dph"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 92
					, "value": "dph"
				}
			}]
		}]
	}
}, {
	"": "dp4(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 96
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 96
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 96
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 96
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 96
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp4)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 96
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 96
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 96
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 96
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 96
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp4"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 96
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 96
					, "value": "p4x"
				}
				, "right": {
					"": "dp4"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 96
					, "value": "dp4"
				}
			}]
		}]
	}
}, {
	"": "cross(a: vec4f, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cross"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 99
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 99
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 99
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 99
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Cross product of the first 3 elements"
	, "ast": {
		"": "vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 99
		, "args": [{
		}, {
			"": "a.y * b.z - a.z * b.y"
			, "kind": "-"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 99
			, "left": {
				"": "a.y * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "y"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "z"
					}
				}
			}
			, "right": {
				"": "a.z * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "z"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "y"
					}
				}
			}
		}, {
			"": "a.z * b.x - a.x * b.z"
			, "kind": "-"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 99
			, "left": {
				"": "a.z * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "z"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "x"
					}
				}
			}
			, "right": {
				"": "a.x * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "x"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "z"
					}
				}
			}
		}, {
			"": "a.x * b.y - a.y * b.x"
			, "kind": "-"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 99
			, "left": {
				"": "a.x * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "x"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "y"
					}
				}
			}
			, "right": {
				"": "a.y * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "y"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 99
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 99
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"": "length(v: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 102
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "val"
		, "name": "v"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Length of the vector(xyz)"
	, "ast": {
		"": "float32.sqrt(dp3(v, v))"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 102
		, "args": [{
			"": "dp3(v, v)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 102
				, "value": "v"
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 102
				, "value": "v"
			}]
		}]
	}
}, {
	"": "normalize(v: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "normalize"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 104
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 104
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Normalize the vector(xyz)"
	, "ast": {
		"": "div(v, vec4f(length(v)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 104
		, "args": [{
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 104
			, "value": "v"
		}, {
			"": "vec4f(length(v))"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 104
			, "args": [{
				"": "length(v)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 104
				, "args": [{
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 104
					, "value": "v"
				}]
			}]
		}]
	}
}, {
	"": "eval(v: vec4f, x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "type": "function"
	, "file": "lib/std/math/Vector4f.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 107
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 107
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 107
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Evaluate as a polynomial in point x"
	, "ast": {
		"": "float32((((v.w * x + v.z) * x + v.y) * x) + v.x)"
		, "kind": "()"
		, "type": "float32"
		, "file": "lib/std/math/Vector4f.ci"
		, "line": 107
		, "args": [{
			"": "(((v.w * x + v.z) * x + v.y) * x) + v.x"
			, "kind": "+"
			, "type": "float32"
			, "file": "lib/std/math/Vector4f.ci"
			, "line": 107
			, "left": {
				"": "(((v.w * x + v.z) * x + v.y) * x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 107
				, "args": [{
					"": "((v.w * x + v.z) * x + v.y) * x"
					, "kind": "*"
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 107
					, "left": {
						"": "((v.w * x + v.z) * x + v.y)"
						, "kind": "()"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 107
						, "args": [{
							"": "(v.w * x + v.z) * x + v.y"
							, "kind": "+"
							, "type": "float32"
							, "file": "lib/std/math/Vector4f.ci"
							, "line": 107
							, "left": {
								"": "(v.w * x + v.z) * x"
								, "kind": "*"
								, "type": "float32"
								, "file": "lib/std/math/Vector4f.ci"
								, "line": 107
								, "left": {
									"": "(v.w * x + v.z)"
									, "kind": "()"
									, "type": "float32"
									, "file": "lib/std/math/Vector4f.ci"
									, "line": 107
									, "args": [{
										"": "v.w * x + v.z"
										, "kind": "+"
										, "type": "float32"
										, "file": "lib/std/math/Vector4f.ci"
										, "line": 107
										, "left": {
											"": "v.w * x"
											, "kind": "*"
											, "type": "float32"
											, "file": "lib/std/math/Vector4f.ci"
											, "line": 107
											, "left": {
												"": "v.w"
												, "kind": "."
												, "type": "float32"
												, "file": "lib/std/math/Vector4f.ci"
												, "line": 107
												, "left": {
													"": "v"
													, "kind": ".variable"
													, "type": "vec4f"
													, "file": "lib/std/math/Vector4f.ci"
													, "line": 107
													, "value": "v"
												}
												, "right": {
													"": "w"
													, "kind": ".variable"
													, "type": "float32"
													, "file": "lib/std/math/Vector4f.ci"
													, "line": 107
													, "value": "w"
												}
											}
											, "right": {
												"": "x"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "lib/std/math/Vector4f.ci"
												, "line": 107
												, "value": "x"
											}
										}
										, "right": {
											"": "v.z"
											, "kind": "."
											, "type": "float32"
											, "file": "lib/std/math/Vector4f.ci"
											, "line": 107
											, "left": {
												"": "v"
												, "kind": ".variable"
												, "type": "vec4f"
												, "file": "lib/std/math/Vector4f.ci"
												, "line": 107
												, "value": "v"
											}
											, "right": {
												"": "z"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "lib/std/math/Vector4f.ci"
												, "line": 107
												, "value": "z"
											}
										}
									}]
								}
								, "right": {
									"": "x"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math/Vector4f.ci"
									, "line": 107
									, "value": "x"
								}
							}
							, "right": {
								"": "v.y"
								, "kind": "."
								, "type": "float32"
								, "file": "lib/std/math/Vector4f.ci"
								, "line": 107
								, "left": {
									"": "v"
									, "kind": ".variable"
									, "type": "vec4f"
									, "file": "lib/std/math/Vector4f.ci"
									, "line": 107
									, "value": "v"
								}
								, "right": {
									"": "y"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "lib/std/math/Vector4f.ci"
									, "line": 107
									, "value": "y"
								}
							}
						}]
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Vector4f.ci"
						, "line": 107
						, "value": "x"
					}
				}]
			}
			, "right": {
				"": "v.x"
				, "kind": "."
				, "type": "float32"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 107
				, "left": {
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 107
					, "value": "v"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "lib/std/math/Vector4f.ci"
					, "line": 107
					, "value": "x"
				}
			}
		}]
	}
}, {
	"": "mat4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 2
	, "size": 64
	, "offs": 145448
	, "static": true
	, "const": true
	, "doc": "A 4x4 matrix"
}, {
	"": "mat4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "mat4f"
	, "type": "float32[16]"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 4
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as a flatten array: data[4] => m[1][0]"
}, {
	"": "mat4f.m"
	, "kind": "variable"
	, "cast": "val"
	, "name": "m"
	, "owner": "mat4f"
	, "type": "float32[4][4]"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 7
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array: m[1][0]"
}, {
	"": "mat4f.v"
	, "kind": "variable"
	, "cast": "val"
	, "name": "v"
	, "owner": "mat4f"
	, "type": "vec4f[4]"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 10
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array of vectors: v[1].x => m[1][0]"
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.x"
	, "kind": "variable"
	, "cast": "val"
	, "name": "x"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.y"
	, "kind": "variable"
	, "cast": "val"
	, "name": "y"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 16
	, "size": 16
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.z"
	, "kind": "variable"
	, "cast": "val"
	, "name": "z"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 18
	, "size": 16
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.w"
	, "kind": "variable"
	, "cast": "val"
	, "name": "w"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 20
	, "size": 16
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 14
		, "value": "x"
	}
}, {
	"": "mat4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 16
		, "value": "y"
	}
}, {
	"": "mat4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 18
		, "value": "z"
	}
}, {
	"": "mat4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 20
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 20
		, "value": "w"
	}
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.xx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 24
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 26
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 28
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 30
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 33
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 35
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 37
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 39
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 42
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 44
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 46
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 48
	, "size": 4
	, "offs": 44
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 51
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 53
	, "size": 4
	, "offs": 52
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 55
	, "size": 4
	, "offs": 56
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.ww"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "ww"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 57
	, "size": 4
	, "offs": 60
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.xx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 24
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 24
		, "value": "xx"
	}
}, {
	"": "mat4f.xy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 26
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 26
		, "value": "xy"
	}
}, {
	"": "mat4f.xz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 28
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 28
		, "value": "xz"
	}
}, {
	"": "mat4f.xw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 30
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 30
		, "value": "xw"
	}
}, {
	"": "mat4f.yx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 33
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 33
		, "value": "yx"
	}
}, {
	"": "mat4f.yy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 35
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 35
		, "value": "yy"
	}
}, {
	"": "mat4f.yz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 37
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 37
		, "value": "yz"
	}
}, {
	"": "mat4f.yw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 39
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 39
		, "value": "yw"
	}
}, {
	"": "mat4f.zx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 42
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 42
		, "value": "zx"
	}
}, {
	"": "mat4f.zy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 44
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 44
		, "value": "zy"
	}
}, {
	"": "mat4f.zz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 46
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 46
		, "value": "zz"
	}
}, {
	"": "mat4f.zw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 48
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 48
		, "value": "zw"
	}
}, {
	"": "mat4f.wx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 51
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 51
		, "value": "wx"
	}
}, {
	"": "mat4f.wy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 53
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 53
		, "value": "wy"
	}
}, {
	"": "mat4f.wz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 55
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 55
		, "value": "wz"
	}
}, {
	"": "mat4f.ww"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ww"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 57
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "ww"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 57
		, "value": "ww"
	}
}, {
	"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 62
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "xx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xx"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": false
	}, {
		"": "xy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xy"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}, {
		"": "xz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xz"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}, {
		"": "xw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xw"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": false
	}, {
		"": "yx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yx"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 84
		, "static": false
		, "const": false
	}, {
		"": "yy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yy"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 88
		, "static": false
		, "const": false
	}, {
		"": "yz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yz"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 92
		, "static": false
		, "const": false
	}, {
		"": "yw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yw"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 96
		, "static": false
		, "const": false
	}, {
		"": "zx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zx"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 100
		, "static": false
		, "const": false
	}, {
		"": "zy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zy"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 104
		, "static": false
		, "const": false
	}, {
		"": "zz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zz"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 108
		, "static": false
		, "const": false
	}, {
		"": "zw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zw"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 112
		, "static": false
		, "const": false
	}, {
		"": "wx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wx"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 116
		, "static": false
		, "const": false
	}, {
		"": "wy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wy"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 120
		, "static": false
		, "const": false
	}, {
		"": "wz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wz"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 124
		, "static": false
		, "const": false
	}, {
		"": "ww"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "ww"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 128
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 360144
	, "static": true
	, "const": true
	, "doc": "Initialize all elements with the given values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 65
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 66
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x.x := xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.x.y := xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.x.z := xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.x.w := xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.y.x := yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.y.y := yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.y.z := yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.y.w := yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.z.x := zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.z.y := zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.z.z := zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.z.w := zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.w.x := wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.w.y := wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.w.z := wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.w.w := ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 70
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360144
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360147
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360150
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360153
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360156
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360159
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360162
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360165
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360168
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360171
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360174
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360177
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360180
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360183
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360186
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360189
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360192
		, "size": 1
	}]
}, {
	"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 75
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "x"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "y"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "z"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": true
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "w"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": true
	}]
	, "size": 21
	, "offs": 360200
	, "static": true
	, "const": true
	, "doc": "Initialize matrix with row vectors"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 75
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 76
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 76
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360200
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360202
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360203
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360205
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360207
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360208
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360210
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360212
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360213
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360215
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360217
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360218
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360220
		, "size": 1
	}]
}, {
	"": "dp3(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product of the first 3 elements"
	, "ast": {
		"": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "dp3(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 80
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 80
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 80
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 80
			, "value": "1.000000"
		}]
	}
}, {
	"": "dph(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: homogeneous dot product"
	, "ast": {
		"": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "dph(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 82
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "dp4(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product"
	, "ast": {
		"": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "dp4(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 84
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "transpose(mat: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "transpose"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "val"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 128
		, "static": false
		, "const": true
	}]
	, "size": 49
	, "offs": 360224
	, "static": true
	, "const": true
	, "doc": "Transpose the matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 87
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 88
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := mat.xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xy := mat.yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xz := mat.zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xw := mat.wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.yx := mat.xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yy := mat.yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yz := mat.zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yw := mat.wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.zx := mat.xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zy := mat.yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zz := mat.zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zw := mat.wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.wx := mat.xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wy := mat.yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wz := mat.zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.ww := mat.ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 92
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360224
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360227
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360230
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360233
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360236
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360239
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360242
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360245
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360248
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360251
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360254
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360257
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360260
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360263
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360266
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 360269
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360272
		, "size": 1
	}]
}, {
	"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 97
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "lhs"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "rhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "rhs"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}]
	, "size": 301
	, "offs": 360280
	, "static": true
	, "const": true
	, "doc": "Multiply two matrices (rows * cols)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 97
		, "stmt": [{
			"": "transposed"
			, "kind": ".variable"
			, "type": "mat4f"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 98
			, "value": "transposed"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 99
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := dp4(transposed, lhs.x);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 100
					}, {
						"": ".result.y := dp4(transposed, lhs.y);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 101
					}, {
						"": ".result.z := dp4(transposed, lhs.z);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 102
					}, {
						"": ".result.w := dp4(transposed, lhs.w);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 103
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360280
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360284
		, "size": 2
	}, {
		"instruction": "load.sp(-60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 360286
		, "size": 4
	}, {
		"instruction": "copy.mem -64"
		, "name": "copy.mem"
		, "code": "0x1e"
		, "offs": 360290
		, "size": 4
	}, {
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360294
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360298
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360303
		, "size": 1
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360304
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 360308
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360312
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360314
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360318
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360320
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360321
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360323
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360324
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360325
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360327
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360331
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360332
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360334
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360335
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360336
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360338
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360342
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360343
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360345
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360346
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360347
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360349
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360353
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360354
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360356
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360357
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360358
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360363
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360364
		, "size": 4
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360368
		, "size": 2
	}, {
		"instruction": "set.x128 sp(23)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360370
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 360372
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360376
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360378
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360382
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360386
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360388
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360389
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360391
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360392
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360393
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360395
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360399
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360400
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360402
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360403
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360404
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360406
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360410
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360411
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360413
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360414
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360415
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360417
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360421
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360422
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360424
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360425
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360426
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360431
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360432
		, "size": 4
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360436
		, "size": 2
	}, {
		"instruction": "set.x128 sp(27)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360438
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 360440
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360444
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360446
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360450
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360454
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360456
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360457
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360459
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360460
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360461
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360463
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360467
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360468
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360470
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360471
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360472
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360474
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360478
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360479
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360481
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360482
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360483
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360485
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360489
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360490
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360492
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360493
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360494
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360499
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360500
		, "size": 4
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360504
		, "size": 2
	}, {
		"instruction": "set.x128 sp(31)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360506
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 360508
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360512
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360514
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360518
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360522
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360524
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360525
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360527
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360528
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360529
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360531
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360535
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360536
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360538
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360539
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360540
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360542
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360546
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360547
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360549
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360550
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360551
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360553
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360557
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360558
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360560
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 360561
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360562
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360567
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360568
		, "size": 4
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360572
		, "size": 2
	}, {
		"instruction": "set.x128 sp(35)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360574
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360576
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360580
		, "size": 1
	}]
}, {
	"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 111
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 111
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "center"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "center"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}]
	, "size": 524
	, "offs": 360584
	, "static": true
	, "const": true
	, "doc": "Build a rotation matrix\nadapted from: https://sites.google.com/site/glennmurray/Home/rotation-matrices-and-formulas"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 111
		, "stmt": [{
			"": "len"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 112
			, "value": "len"
		}, {
			"": "if ((len) < 0.000000)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 113
			, "test": {
				"": "(len) < 0.000000"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 113
				, "left": {
					"": "(len)"
					, "kind": "()"
					, "type": "float64"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 113
					, "args": [{
						"": "len"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 113
						, "value": "len"
					}]
				}
				, "right": {
					"": "0.000000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 113
					, "value": "0.000000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 113
				, "stmt": [{
					"": "trace(\"invalid direction of rotation\", direction);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 114
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/math/Matrix4f.ci"
					, "line": 115
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "mat4f"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.x := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math/Matrix4f.ci"
								, "line": 116
							}, {
								"": ".result.y := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math/Matrix4f.ci"
								, "line": 117
							}, {
								"": ".result.z := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math/Matrix4f.ci"
								, "line": 118
							}, {
								"": ".result.w := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "lib/std/math/Matrix4f.ci"
								, "line": 119
							}]
						}
					}
				}]
			}
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 122
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 123
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 124
			, "value": "z"
		}, {
			"": "cx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 125
			, "value": "cx"
		}, {
			"": "cy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 126
			, "value": "cy"
		}, {
			"": "cz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 127
			, "value": "cz"
		}, {
			"": "xx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 128
			, "value": "xx"
		}, {
			"": "xy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 129
			, "value": "xy"
		}, {
			"": "xz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 130
			, "value": "xz"
		}, {
			"": "yy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 131
			, "value": "yy"
		}, {
			"": "yz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 132
			, "value": "yz"
		}, {
			"": "zz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 133
			, "value": "zz"
		}, {
			"": "s"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 135
			, "value": "s"
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 136
			, "value": "c"
		}, {
			"": "k"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 137
			, "value": "k"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 139
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx + (yy + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 140
					}, {
						"": ".result.xy := xy * k - z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 141
					}, {
						"": ".result.xz := xz * k + y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 142
					}, {
						"": ".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 143
					}, {
						"": ".result.yx := xy * k + z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 145
					}, {
						"": ".result.yy := yy + (xx + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 146
					}, {
						"": ".result.yz := yz * k - x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 147
					}, {
						"": ".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 148
					}, {
						"": ".result.zx := xz * k - y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 150
					}, {
						"": ".result.zy := yz * k + x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 151
					}, {
						"": ".result.zz := zz + (xx + yy) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 152
					}, {
						"": ".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 153
					}, {
						"": ".result.w := vec4f(0, 0, 0, 1);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 155
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360584
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x24"
		, "offs": 360586
		, "size": 1
	}, {
		"instruction": "dup.x128 sp(0)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 360587
		, "size": 2
	}, {
		"instruction": "dup.x128 sp(4)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 360589
		, "size": 2
	}, {
		"instruction": "dp3.v4f"
		, "name": "dp3.v4f"
		, "code": "0x9a"
		, "offs": 360591
		, "size": 1
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360592
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360596
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360598
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360602
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 360604
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 360605
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 360614
		, "size": 1
	}, {
		"instruction": "jz +125"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 360615
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360619
		, "size": 5
	}, {
		"instruction": "load.c32 114"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 360624
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 360629
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 360634
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360639
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360644
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360649
		, "size": 2
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360651
		, "size": 4
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360655
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360659
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360660
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360661
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360662
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360663
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360668
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360669
		, "size": 4
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360673
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360675
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360679
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360680
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360681
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360682
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360683
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360688
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360689
		, "size": 4
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360693
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360695
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360699
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360700
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360701
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360702
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360703
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360708
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360709
		, "size": 4
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360713
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360715
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360719
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360720
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360721
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 360722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 360723
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 360728
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360729
		, "size": 4
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 360733
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 360735
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 360739
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360740
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 360742
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360743
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 360745
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360746
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360748
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 360752
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360753
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 360755
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360756
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360758
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 360762
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360763
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 360765
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360766
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 360768
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360769
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360771
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 360775
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360776
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 360778
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 360782
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360783
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360785
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360787
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360788
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360790
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360792
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360793
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360795
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360797
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360798
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360800
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360802
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360803
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360805
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360807
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360808
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360810
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360812
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360813
		, "size": 2
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360815
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360819
		, "size": 2
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 360821
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 360825
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360830
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360832
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360833
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360835
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360837
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360839
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360840
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360842
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360843
		, "size": 1
	}, {
		"instruction": "set.x32 sp(21)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360844
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360846
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360848
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360850
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360851
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360853
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360855
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360856
		, "size": 1
	}, {
		"instruction": "set.x32 sp(22)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360857
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360859
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360861
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360863
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360864
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360866
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360868
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360869
		, "size": 1
	}, {
		"instruction": "set.x32 sp(23)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360870
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360872
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360874
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360876
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360878
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360879
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360880
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360882
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360884
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360886
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360887
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360889
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360891
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360892
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360893
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360894
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360895
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360897
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360898
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360900
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360902
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360903
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360905
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360907
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360908
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360909
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360911
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360912
		, "size": 1
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360913
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360915
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360917
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360919
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360920
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360922
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360924
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360925
		, "size": 1
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360926
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360928
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360930
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360932
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360934
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360935
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360937
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360938
		, "size": 1
	}, {
		"instruction": "set.x32 sp(26)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360939
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360941
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360943
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360945
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360946
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360948
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360950
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360951
		, "size": 1
	}, {
		"instruction": "set.x32 sp(27)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360952
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360954
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360956
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360958
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360960
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360961
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360962
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360964
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360966
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360968
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360969
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360971
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360973
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360974
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360975
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360976
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360977
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360979
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360980
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360982
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360984
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360985
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360987
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360989
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 360990
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360991
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 360993
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 360994
		, "size": 1
	}, {
		"instruction": "set.x32 sp(28)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 360995
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360997
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 360999
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361001
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361002
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361004
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361006
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 361007
		, "size": 1
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361008
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361010
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361012
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361014
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361015
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361017
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361019
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 361020
		, "size": 1
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361021
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361023
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361025
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361027
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 361029
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361030
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361032
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 361033
		, "size": 1
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361034
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361036
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361038
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361040
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 361042
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361043
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361044
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361046
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361048
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361050
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361051
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361053
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361055
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 361056
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361057
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 361058
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361059
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361061
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361062
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361064
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361066
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361067
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361069
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361071
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 361072
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361073
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361075
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 361076
		, "size": 1
	}, {
		"instruction": "set.x32 sp(32)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361077
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361079
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361083
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361084
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361085
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361086
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 361091
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361096
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361097
		, "size": 4
	}, {
		"instruction": "set.x128 sp(36)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 361101
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361103
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361107
		, "size": 1
	}]
}, {
	"": "rotation(direction: vec4f, angle: float32): mat4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 160
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 160
		, "size": 64
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix"
	, "ast": {
		"": "rotation(vec4f(0), direction, angle)"
		, "kind": "()"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 160
		, "args": [{
		}, {
			"": "vec4f(0)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 160
			, "args": [{
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 160
				, "value": "0"
			}]
		}, {
			"": "direction"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 160
			, "value": "direction"
		}, {
			"": "angle"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 160
			, "value": "angle"
		}]
	}
}, {
	"": "translation(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "translation"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 163
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 163
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 88
	, "offs": 361112
	, "static": true
	, "const": true
	, "doc": "Build a translation matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 163
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 164
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x.x := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.x.y := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.x.z := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.x.w := direction.x * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.y.x := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.y.y := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.y.z := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.y.w := direction.y * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.z.x := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.z.y := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.z.z := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.z.w := direction.z * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.w.x := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.w.y := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.w.z := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.w.w := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 168
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361112
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361117
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361119
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361120
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361122
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361123
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361125
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 361127
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361128
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361130
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361131
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361133
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361134
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361136
		, "size": 5
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361141
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361143
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361144
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361146
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361148
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 361152
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361153
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361155
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361156
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361158
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361159
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361161
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361162
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361164
		, "size": 5
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361169
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361171
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361173
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 361177
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361178
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361180
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361181
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361183
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361184
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361186
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361187
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361189
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361190
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361192
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361197
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361199
		, "size": 1
	}]
}, {
	"": "scale(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "scale"
	, "type": "function"
	, "file": "lib/std/math/Matrix4f.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 173
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 217
	, "offs": 361200
	, "static": true
	, "const": true
	, "doc": "Build a scaling matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Matrix4f.ci"
		, "line": 173
		, "stmt": [{
			"": "rcp(val: float32): float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 174
			, "value": "rcp(val: float32): float32"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Matrix4f.ci"
			, "line": 175
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x.x := rcp(direction.x * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.x.y := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.x.z := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.x.w := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.y.x := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.y.y := rcp(direction.y * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.y.z := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.y.w := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.z.x := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.z.y := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.z.z := rcp(direction.z * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.z.w := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.w.x := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.w.y := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.w.z := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.w.w := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Matrix4f.ci"
						, "line": 179
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361200
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 361202
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361203
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361205
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361206
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361208
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 361209
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361210
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361214
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 361216
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361217
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361221
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 361223
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 361224
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 361233
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361234
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361238
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361239
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361243
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361248
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 361250
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361251
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361253
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361255
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361256
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361258
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361259
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361261
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361262
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361264
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361265
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361267
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361269
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 361273
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361274
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361276
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361277
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361279
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 361280
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361281
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361285
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 361287
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361288
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361292
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 361294
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 361295
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 361304
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361305
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361309
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361310
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361314
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361319
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 361321
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361322
		, "size": 2
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361324
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361326
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361327
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361329
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361330
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361332
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361333
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361335
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361336
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361338
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361340
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 361344
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361345
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 361347
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361348
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361350
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 361351
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361352
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361356
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 361358
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361359
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361363
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 361365
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 361366
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 361375
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361376
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361380
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361381
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361385
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361390
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 361392
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361393
		, "size": 2
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361395
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361397
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361398
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361400
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361401
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361403
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361404
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361406
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361407
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 361409
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361414
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361416
		, "size": 1
	}]
}, {
	"": "vec2d"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 2
	, "size": 16
	, "offs": 166096
	, "static": true
	, "const": true
	, "doc": "A 2d vector (2x float64)"
}, {
	"": "vec2d.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec2d"
	, "type": "float64[2]"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 4
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec2d.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec2d"
	, "type": "vec2d.<?>"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 44
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec2d.<?>.x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "x"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 7
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec2d.<?>.y"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "y"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 9
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec2d.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 7
		, "value": "x"
	}
}, {
	"": "vec2d.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 9
		, "value": "y"
	}
}, {
	"": "vec2d(x: float64, y: float64): vec2d"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec2d"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 14
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 361424
	, "static": true
	, "const": true
	, "doc": "Initialize with given x, y components"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 14
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 15
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec2d"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Vector2d.ci"
						, "line": 16
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "lib/std/math/Vector2d.ci"
						, "line": 17
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 361424
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 361427
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361430
		, "size": 1
	}]
}, {
	"": "add(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 22
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 22
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 22
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 22
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 22
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 22
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 22
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 25
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 25
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 25
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 25
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 25
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 25
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "mul(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), mul.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 28
		, "args": [{
			"": "emit(struct(a), struct(b), mul.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 28
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 28
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 28
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 28
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 28
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 28
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "div(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), div.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 31
		, "args": [{
			"": "emit(struct(a), struct(b), div.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 31
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 31
					, "value": "b"
				}]
			}, {
				"": "div.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 31
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 31
					, "value": "div"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 31
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "min(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the minimum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), min.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 34
		, "args": [{
			"": "emit(struct(a), struct(b), min.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 34
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 34
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 34
					, "value": "b"
				}]
			}, {
				"": "min.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 34
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 34
					, "value": "min"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 34
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "max(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the maximum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), max.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 37
		, "args": [{
			"": "emit(struct(a), struct(b), max.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 37
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 37
					, "value": "b"
				}]
			}, {
				"": "max.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 37
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 37
					, "value": "max"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 37
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "ceq(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceq"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Compare the two vectors for equality."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), ceq.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 40
		, "args": [{
			"": "emit(struct(a), struct(b), ceq.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 40
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "ceq.p2d"
				, "kind": "."
				, "type": "bool"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 40
				, "left": {
					"": "ceq"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 40
					, "value": "ceq"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 40
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "dot(a: vec2d, b: vec2d): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dot"
	, "type": "function"
	, "file": "lib/std/math/Vector2d.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 43
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec2d"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of thw two vectors"
	, "ast": {
		"": "a.x * b.x + a.y * b.y"
		, "kind": "+"
		, "type": "float64"
		, "file": "lib/std/math/Vector2d.ci"
		, "line": 43
		, "left": {
			"": "a.x * b.x"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.x"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
			, "right": {
				"": "b.x"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
		}
		, "right": {
			"": "a.y * b.y"
			, "kind": "*"
			, "type": "float64"
			, "file": "lib/std/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.y"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
			, "right": {
				"": "b.y"
				, "kind": "."
				, "type": "float64"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "lib/std/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
		}
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 38
	, "offs": 361432
	, "static": true
	, "const": true
	, "doc": "Computes the length of the string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 4
		, "stmt": [{
			"": "if ((str) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 5
			, "test": {
				"": "(str) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 5
				, "left": {
					"": "(str)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "lib/std/string.ci"
					, "line": 5
					, "args": [{
						"": "str"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "lib/std/string.ci"
						, "line": 5
						, "value": "str"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "lib/std/string.ci"
					, "line": 5
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 5
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 6
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 6
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 8
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 9
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 9
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 9
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 9
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 9
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 9
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 9
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 9
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 9
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 11
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 11
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361432
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 361434
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361439
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361440
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361444
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361445
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361447
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361448
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361449
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361453
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361457
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361459
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361461
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361462
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361463
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361467
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361469
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 361472
	, "static": true
	, "const": true
	, "doc": "Returns the index of the first occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 15
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 16
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 16
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 16
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 16
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 16
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 16
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 16
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 16
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 16
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 16
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 16
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 17
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 17
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 17
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "lib/std/string.ci"
								, "line": 17
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/string.ci"
								, "line": 17
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 17
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 17
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 18
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 18
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 21
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 21
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 21
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361472
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361473
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361477
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361479
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361481
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361482
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361483
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361487
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361488
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361489
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361493
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361495
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361496
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361500
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361502
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361504
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361505
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361506
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361510
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 361514
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361519
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361521
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 361528
	, "static": true
	, "const": true
	, "doc": "Returns the index of the last occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 25
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 26
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 27
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 27
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 27
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 27
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 27
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 27
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 27
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 27
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 27
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 27
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 27
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 28
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 28
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 28
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "lib/std/string.ci"
								, "line": 28
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "lib/std/string.ci"
								, "line": 28
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 28
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 28
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 29
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 32
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 32
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 361528
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361533
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361534
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361538
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361540
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361542
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361543
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361544
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361548
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361549
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361550
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(1, 0)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 361554
		, "size": 3
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361557
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361561
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361563
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361565
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361566
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361567
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361571
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361575
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361577
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/std/string.ci"
		, "line": 36
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 361584
	, "static": true
	, "const": true
	, "doc": "Check if a string begins with a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 36
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 37
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 37
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 37
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 37
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 37
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "lib/std/string.ci"
							, "line": 37
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 37
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 37
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 37
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 37
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 37
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 37
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 37
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 37
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 38
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 38
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 38
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 38
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 38
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 38
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 38
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 38
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 38
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 38
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 38
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 39
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "lib/std/string.ci"
									, "line": 39
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 42
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 42
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361584
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361585
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361589
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361590
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361592
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361594
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361595
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361596
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361598
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361600
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361601
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361602
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361604
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361605
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361609
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361610
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361611
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361615
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361616
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 361620
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361621
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361625
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361626
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361630
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361632
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361634
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361635
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361636
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361637
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361638
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361642
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 361646
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361651
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 361655
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361656
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 46
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/std/string.ci"
		, "line": 46
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 126
	, "offs": 361664
	, "static": true
	, "const": true
	, "doc": "Check if a string ends in a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 46
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 47
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 48
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 49
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 49
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 49
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 49
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 49
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 50
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "lib/std/string.ci"
							, "line": 50
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 52
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 52
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 52
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 52
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 52
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 52
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 52
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 53
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 53
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 53
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 53
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 53
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 53
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 53
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/std/string.ci"
											, "line": 53
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "lib/std/string.ci"
											, "line": 53
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 53
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 53
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 53
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 53
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 53
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 53
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 54
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "lib/std/string.ci"
									, "line": 54
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 57
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 57
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361664
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361665
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 361667
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361672
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361673
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361677
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361678
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 361680
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361685
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361686
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361690
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361692
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 361694
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361695
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361699
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361700
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 361704
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361705
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361709
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361710
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361711
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361715
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361716
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361718
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361720
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 361722
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361723
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361725
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361726
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361727
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361728
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361730
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361732
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361733
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361734
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361736
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361737
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361741
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361742
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361743
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361747
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361748
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 361752
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361753
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361757
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361758
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361762
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361764
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 361766
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361767
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361771
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 361775
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361780
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 361784
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361785
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361789
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "lib/std/string.ci"
		, "line": 61
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 361792
	, "static": true
	, "const": true
	, "doc": "Check if the two strings are equal, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 61
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 62
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 63
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 63
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 63
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 63
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 63
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 63
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 63
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 63
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 63
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 63
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 63
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 64
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 65
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 65
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 65
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 65
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "lib/std/string.ci"
									, "line": 65
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 65
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 65
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 65
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 66
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 69
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 69
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361792
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361793
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361794
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361798
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361799
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361801
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361803
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361804
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361805
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361807
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361809
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361810
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361811
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361813
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361814
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361818
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361820
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361822
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 361824
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361825
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361826
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361827
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 361828
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361832
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 361836
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361840
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361842
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 361843
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361844
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361848
		, "size": 4
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361852
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361854
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 361928
	, "static": true
	, "const": true
	, "doc": "ignore case character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 73
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 74
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 84
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 84
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 84
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 84
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 84
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 84
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361928
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361929
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361933
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 361934
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361939
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361940
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361944
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361945
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361949
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 361950
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 361955
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 361956
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 361960
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361961
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361963
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 361968
	, "static": true
	, "const": true
	, "doc": "default character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 88
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 89
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 89
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 89
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 89
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361968
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361972
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 361973
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 361977
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 361978
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 361979
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 361981
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 92
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 92
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 92
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 92
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 93
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 93
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 93
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 93
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 94
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 94
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 94
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 94
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 94
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "lib/std/string.ci"
			, "line": 94
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "lib/std/string.ci"
			, "line": 94
			, "value": "caseCmp"
		}]
	}
}, {
	"": "equals(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "equals"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 95
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 95
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 95
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 95
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "compare(str, with, caseCmp) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 95
		, "left": {
			"": "compare(str, with, caseCmp)"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 95
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "lib/std/string.ci"
				, "line": 95
				, "value": "str"
			}, {
				"": "with"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "lib/std/string.ci"
				, "line": 95
				, "value": "with"
			}, {
				"": "caseCmp"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 95
				, "value": "caseCmp"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 95
			, "value": "0"
		}
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 98
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string contains the given character"
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 98
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 98
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "lib/std/string.ci"
				, "line": 98
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 98
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 98
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "lib/std/string.ci"
	, "line": 112
	, "size": 16
	, "offs": 188280
	, "static": true
	, "const": true
	, "doc": "Flags to convert numbers to string"
}, {
	"": "FormatFlags.showSign"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "showSign"
	, "owner": "FormatFlags"
	, "type": "bool"
	, "file": "lib/std/string.ci"
	, "line": 114
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "forced show sign"
	, "ast": {
		"": "false"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "lib/std/string.ci"
		, "line": 114
		, "value": "false"
	}
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/std/string.ci"
	, "line": 117
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
	, "doc": "precision or radix"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 117
		, "value": "0"
	}
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "lib/std/string.ci"
	, "line": 120
	, "size": 1
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "padding character"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 120
		, "value": "0"
	}
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "lib/std/string.ci"
	, "line": 123
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "doc": "padding length"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 123
		, "value": "0"
	}
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 127
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 127
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 127
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 127
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "lib/std/string.ci"
		, "line": 127
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 84
	, "offs": 361984
	, "static": true
	, "const": true
	, "doc": "Append a string to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 127
		, "stmt": [{
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 128
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 128
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "lib/std/string.ci"
				, "line": 128
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "lib/std/string.ci"
					, "line": 128
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 128
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 128
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 128
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 128
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 128
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 128
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 128
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 129
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 129
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 129
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 129
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "lib/std/string.ci"
								, "line": 129
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "lib/std/string.ci"
									, "line": 129
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "lib/std/string.ci"
									, "line": 129
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 129
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 130
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 132
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 133
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 136
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 136
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 136
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 136
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 136
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/std/string.ci"
							, "line": 136
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/string.ci"
							, "line": 136
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 136
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 137
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 139
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 140
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 140
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 361984
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361985
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361989
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 361991
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 361993
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 361994
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 361998
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362002
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362004
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362006
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362007
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362008
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362010
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362012
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362013
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362014
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362016
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362020
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362022
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362026
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362028
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362030
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362031
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362032
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362036
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362040
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362042
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362044
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362045
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362049
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362051
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362055
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362057
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362058
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362060
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362062
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362063
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(5, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 362064
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 362067
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 144
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "sign"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "sign"
		, "type": "char"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": true
	}]
	, "size": 707
	, "offs": 362088
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 144
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 145
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 146
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 148
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "lib/std/string.ci"
			, "line": 149
			, "value": "digits"
		}, {
			"": "if (format.showSign)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 151
			, "test": {
				"": "format.showSign"
				, "kind": "."
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 151
				, "left": {
					"": "format"
					, "kind": ".variable"
					, "type": "FormatFlags"
					, "file": "lib/std/string.ci"
					, "line": 151
					, "value": "format"
				}
				, "right": {
					"": "showSign"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 151
					, "value": "showSign"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 151
				, "stmt": [{
					"": "if ((sign) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 152
					, "test": {
						"": "(sign) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 152
						, "left": {
							"": "(sign)"
							, "kind": "()"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 152
							, "args": [{
								"": "sign"
								, "kind": ".variable"
								, "type": "char"
								, "file": "lib/std/string.ci"
								, "line": 152
								, "value": "sign"
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 152
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 152
						, "stmt": [{
							"": "sign := '+';"
							, "kind": ";"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 153
						}]
					}
				}]
			}
		}, {
			"": "radix"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 157
			, "value": "radix"
		}, {
			"": "if (radix == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 158
			, "test": {
				"": "radix == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 158
				, "left": {
					"": "radix"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 158
					, "value": "radix"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 158
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 158
				, "stmt": [{
					"": "radix := 10;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 159
				}]
			}
		}, {
			"": "assert(radix > 1, \"radix is too small\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 161
		}, {
			"": "assert(radix < (radixDigits.length), \"radix is too big\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 162
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 165
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 165
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "lib/std/string.ci"
					, "line": 165
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint64"
					, "file": "lib/std/string.ci"
					, "line": 165
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 165
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint64"
				, "file": "lib/std/string.ci"
				, "line": 165
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "lib/std/string.ci"
					, "line": 165
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint64"
					, "file": "lib/std/string.ci"
					, "line": 165
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint64"
						, "file": "lib/std/string.ci"
						, "line": 165
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint64"
						, "file": "lib/std/string.ci"
						, "line": 165
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 165
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 165
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 166
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 168
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 168
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 168
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 168
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 168
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 169
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 172
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 174
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 175
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 175
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 175
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 175
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 175
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 176
				}]
			}
		}, {
			"": "if ((sign) != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 180
			, "test": {
				"": "(sign) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 180
				, "left": {
					"": "(sign)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 180
					, "args": [{
						"": "sign"
						, "kind": ".variable"
						, "type": "char"
						, "file": "lib/std/string.ci"
						, "line": 180
						, "value": "sign"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 180
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 180
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 181
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 182
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "lib/std/string.ci"
						, "line": 182
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/std/string.ci"
							, "line": 182
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "lib/std/string.ci"
							, "line": 182
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "lib/std/string.ci"
						, "line": 182
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "lib/std/string.ci"
							, "line": 184
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "lib/std/string.ci"
								, "line": 184
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 184
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 184
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "lib/std/string.ci"
								, "line": 184
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 184
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "lib/std/string.ci"
									, "line": 184
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 184
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "lib/std/string.ci"
										, "line": 184
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "lib/std/string.ci"
								, "line": 184
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/string.ci"
									, "line": 185
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/string.ci"
									, "line": 186
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "lib/std/string.ci"
									, "line": 187
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 190
				}, {
					"": "output[pos] := sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 191
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 192
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 196
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 196
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 196
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 196
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 196
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 196
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 196
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 196
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 196
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 196
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 197
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 198
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 199
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 203
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 203
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 203
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 203
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 203
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 203
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 203
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 203
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 203
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 203
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 203
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 204
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 205
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 206
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 209
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 209
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 209
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 209
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "lib/std/string.ci"
						, "line": 209
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "lib/std/string.ci"
							, "line": 209
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "lib/std/string.ci"
							, "line": 209
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "lib/std/string.ci"
				, "line": 209
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "lib/std/string.ci"
					, "line": 210
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 212
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 213
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 213
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362088
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362089
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362093
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362095
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362096
		, "size": 4
	}, {
		"instruction": "load.sp(+100)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362100
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362104
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362105
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 362106
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362107
		, "size": 4
	}, {
		"instruction": "load.c32 43"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362111
		, "size": 5
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362116
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362120
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362121
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362123
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 362127
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362128
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362130
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 362131
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362132
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362136
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362141
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362143
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362145
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 362150
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362151
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362155
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362159
		, "size": 5
	}, {
		"instruction": "load.c32 161"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362164
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362169
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362174
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362179
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362184
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362189
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362193
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362197
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 362199
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362203
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362204
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362208
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362212
		, "size": 5
	}, {
		"instruction": "load.c32 162"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362217
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362222
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362227
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362232
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362237
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362242
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362246
		, "size": 4
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362250
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 362254
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(25)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362258
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362260
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 362262
		, "size": 1
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 362263
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 362264
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362265
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362266
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362267
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362271
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362273
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362277
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362279
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362281
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362282
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362283
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362285
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 362287
		, "size": 1
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 362288
		, "size": 1
	}, {
		"instruction": "set.x64 sp(26)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 362289
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362291
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 362293
		, "size": 1
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 362294
		, "size": 1
	}, {
		"instruction": "jnz -41"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362295
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(21)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362299
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362301
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 362302
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362303
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362307
		, "size": 5
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362312
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362316
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362318
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362322
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362324
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362326
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362327
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362328
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362330
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 362334
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362335
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 362337
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362338
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362340
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362344
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362345
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362349
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362350
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 362351
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362352
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362356
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362361
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362365
		, "size": 1
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362366
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362370
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362371
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 362372
		, "size": 1
	}, {
		"instruction": "jnz +200"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362373
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362377
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362379
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362383
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362385
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 362386
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362390
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362394
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362395
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 362400
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362401
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362405
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362406
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362407
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362411
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362415
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362417
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362419
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362420
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362424
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362428
		, "size": 5
	}, {
		"instruction": "load.c32 185"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362433
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362438
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362443
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362448
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362453
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362458
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362463
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362467
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362471
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362472
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362474
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362476
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362477
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362478
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362480
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362484
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362486
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362488
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362492
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362494
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362496
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 362497
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362498
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362502
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362504
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362506
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362507
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362511
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362515
		, "size": 5
	}, {
		"instruction": "load.c32 190"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362520
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362525
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362530
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362535
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362540
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362545
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362550
		, "size": 4
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362554
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362558
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362559
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362561
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362563
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362564
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362565
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362567
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362571
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362573
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362577
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362579
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362581
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362582
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362586
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362590
		, "size": 5
	}, {
		"instruction": "load.c32 197"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362595
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362600
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362605
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362610
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362615
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362620
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362625
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362629
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362633
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362634
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362636
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362638
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362639
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362640
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362642
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362646
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362648
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362650
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362654
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362656
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362658
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 362659
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362660
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362664
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362665
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362669
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(33)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362671
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362673
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362674
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362678
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362682
		, "size": 5
	}, {
		"instruction": "load.c32 204"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362687
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362692
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362697
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362702
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362707
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362712
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362717
		, "size": 4
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362721
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362725
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362727
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 362729
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362730
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362731
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362732
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362734
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362736
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362737
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362738
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362740
		, "size": 4
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362744
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362746
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362750
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362752
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362754
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362755
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362759
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362763
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362765
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 362767
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 362768
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362772
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362774
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362778
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362780
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362781
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362783
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 362785
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362786
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(32, 29)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 362787
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362790
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 362794
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 217
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 217
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "lib/std/string.ci"
		, "line": 217
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 217
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 217
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 217
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 217
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 217
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "lib/std/string.ci"
				, "line": 217
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 217
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 219
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 219
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "lib/std/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 219
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 219
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 219
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 219
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 219
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 219
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "lib/std/string.ci"
				, "line": 219
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 219
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 221
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 221
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "lib/std/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 221
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 221
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 221
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 221
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 221
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 221
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "lib/std/string.ci"
				, "line": 221
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 221
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 223
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 223
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "lib/std/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 223
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 223
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 223
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 223
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 223
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "lib/std/string.ci"
				, "line": 223
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 223
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 225
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 225
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 225
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 225
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "lib/std/string.ci"
		, "line": 225
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 225
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < (0) ? ('-') : 0, uint64(value < (0) ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 225
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 225
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 225
			, "value": "pos"
		}, {
			"": "value < (0) ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 225
			, "test": {
				"": "value < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 225
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "lib/std/string.ci"
					, "line": 225
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "lib/std/string.ci"
					, "line": 225
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 225
						, "value": "0"
					}]
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 225
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 225
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 225
				, "value": "0"
			}
		}, {
			"": "uint64(value < (0) ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 225
			, "args": [{
				"": "value < (0) ? -value : value"
				, "kind": "?:"
				, "type": "int64"
				, "file": "lib/std/string.ci"
				, "line": 225
				, "test": {
					"": "value < (0)"
					, "kind": "<"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 225
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "lib/std/string.ci"
						, "line": 225
						, "value": "value"
					}
					, "right": {
						"": "(0)"
						, "kind": "()"
						, "type": "int64"
						, "file": "lib/std/string.ci"
						, "line": 225
						, "args": [{
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "lib/std/string.ci"
							, "line": 225
							, "value": "0"
						}]
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int64"
					, "file": "lib/std/string.ci"
					, "line": 225
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "lib/std/string.ci"
						, "line": 225
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "lib/std/string.ci"
					, "line": 225
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 225
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 227
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 227
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 227
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < 0 ? ('-') : 0, uint64(value < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 227
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 227
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 227
			, "value": "pos"
		}, {
			"": "value < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 227
			, "test": {
				"": "value < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 227
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 227
					, "value": "value"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 227
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 227
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 227
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 227
				, "value": "0"
			}
		}, {
			"": "uint64(value < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 227
			, "args": [{
				"": "value < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 227
				, "test": {
					"": "value < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 227
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 227
						, "value": "value"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 227
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 227
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 227
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 227
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 227
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 229
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 229
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "lib/std/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 229
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 229
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 229
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 229
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 229
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 229
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "lib/std/string.ci"
						, "line": 229
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 229
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 229
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 229
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 229
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 229
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int16"
				, "file": "lib/std/string.ci"
				, "line": 229
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 229
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 229
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int16"
							, "file": "lib/std/string.ci"
							, "line": 229
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 229
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int16"
					, "file": "lib/std/string.ci"
					, "line": 229
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "lib/std/string.ci"
						, "line": 229
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int16"
					, "file": "lib/std/string.ci"
					, "line": 229
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 229
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 231
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 231
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "lib/std/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 231
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 231
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 231
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 231
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 231
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "lib/std/string.ci"
				, "line": 231
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 231
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "lib/std/string.ci"
						, "line": 231
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 231
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 231
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "lib/std/string.ci"
					, "line": 231
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "lib/std/string.ci"
				, "line": 231
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "lib/std/string.ci"
			, "line": 231
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int8"
				, "file": "lib/std/string.ci"
				, "line": 231
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "lib/std/string.ci"
					, "line": 231
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 231
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int8"
							, "file": "lib/std/string.ci"
							, "line": 231
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 231
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int8"
					, "file": "lib/std/string.ci"
					, "line": 231
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "lib/std/string.ci"
						, "line": 231
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int8"
					, "file": "lib/std/string.ci"
					, "line": 231
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 231
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 234
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 234
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "lib/std/string.ci"
		, "line": 234
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 227
	, "offs": 362800
	, "static": true
	, "const": true
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 234
		, "stmt": [{
			"": "formatInt"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 235
			, "value": "formatInt"
		}, {
			"": "formatDec"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 241
			, "value": "formatDec"
		}, {
			"": "sign"
			, "kind": ".variable"
			, "type": "char"
			, "file": "lib/std/string.ci"
			, "line": 248
			, "value": "sign"
		}, {
			"": "fract"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "lib/std/string.ci"
			, "line": 249
			, "value": "fract"
		}, {
			"": "pos := append(output, pos, sign, uint64(value), formatInt);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 250
		}, {
			"": "pos := append(output, pos, \".\");"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 252
		}, {
			"": "fract := fract * float64.pow(10, format.precision);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 253
		}, {
			"": "pos := append(output, pos, 0, uint64(fract), formatDec);"
			, "kind": ";"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 254
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 255
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 255
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362800
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362804
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362806
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362807
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362811
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362812
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362813
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362815
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362817
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362821
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362822
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362826
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362827
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362829
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 362833
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362834
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362836
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 362840
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 362841
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362842
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362844
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362848
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362849
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362853
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362854
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362855
		, "size": 2
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362857
		, "size": 5
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362862
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 362866
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362867
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362869
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 362873
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362874
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(10)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362876
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 362878
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 362879
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 362880
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 362884
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 362889
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362893
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 362894
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362895
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362897
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 362902
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362903
		, "size": 4
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362907
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362911
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 362916
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362917
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362921
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362922
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362924
		, "size": 2
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362926
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 362930
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(18)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362931
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 362933
		, "size": 1
	}, {
		"instruction": "load.sp(+56)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 362934
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362938
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 362943
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362944
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362948
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362950
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362951
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362953
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362955
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 362960
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 362965
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 362966
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 362970
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 362972
		, "size": 9
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362981
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 362983
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 362987
		, "size": 1
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 362988
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 362989
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 362993
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362994
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 362995
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 362997
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 362999
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 363000
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 363002
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 363003
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 363007
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 363012
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 363013
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 363017
		, "size": 2
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 363019
		, "size": 3
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 363022
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 363026
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 259
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 259
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "lib/std/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "lib/std/string.ci"
		, "line": 259
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, float64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 259
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "lib/std/string.ci"
			, "line": 259
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "lib/std/string.ci"
			, "line": 259
			, "value": "pos"
		}, {
			"": "float64(value)"
			, "kind": "()"
			, "type": "float64"
			, "file": "lib/std/string.ci"
			, "line": 259
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "lib/std/string.ci"
				, "line": 259
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 259
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "lib/std/string.ci"
	, "line": 262
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 262
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "lib/std/string.ci"
		, "line": 262
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 262
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "lib/std/string.ci"
		, "line": 262
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 363048
	, "static": true
	, "const": true
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "lib/std/string.ci"
		, "line": 262
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "lib/std/string.ci"
			, "line": 263
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "lib/std/string.ci"
			, "line": 264
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "lib/std/string.ci"
					, "line": 264
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "lib/std/string.ci"
						, "line": 264
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 264
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "lib/std/string.ci"
						, "line": 264
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "lib/std/string.ci"
						, "line": 264
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 363048
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 363050
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 363051
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 363053
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 363055
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 363057
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 363058
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 363059
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 363063
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 363068
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 363072
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 363073
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 363075
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 363076
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 363077
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 363081
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 363083
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 363084
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 363088
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 363090
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 363091
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 363096
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 363101
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 363102
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 363106
		, "size": 2
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 363108
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 363110
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "test/test.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/test.ci"
		, "line": 5
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 3
	, "size": 4
	, "offs": 363112
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "test/lang/emit.ci"
	, "line": 4
	, "size": 8
	, "offs": 363120
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "test/lang/emit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 6
	, "size": 4
	, "offs": 363128
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 7
	, "size": 4
	, "offs": 363136
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 9
	, "size": 4
	, "offs": 363144
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 9
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 9
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 9
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 10
	, "size": 4
	, "offs": 363152
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 10
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "test/lang/emit.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 14
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "test/lang/emit.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 14
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/emit.ci"
			, "line": 14
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/lang/emit.ci"
				, "line": 14
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/lang/emit.ci"
					, "line": 14
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "test/lang/emit.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 15
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang/emit.ci"
		, "line": 15
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 15
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/emit.ci"
			, "line": 15
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/emit.ci"
				, "line": 15
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang/emit.ci"
					, "line": 15
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 17
	, "size": 4
	, "offs": 363160
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 17
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 17
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "test/lang/emit.ci"
	, "line": 18
	, "size": 8
	, "offs": 363168
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/emit.ci"
		, "line": 18
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 18
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "test/lang/emit.ci"
	, "line": 19
	, "size": 4
	, "offs": 363176
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 19
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 19
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "test/lang/emit.ci"
	, "line": 20
	, "size": 8
	, "offs": 363184
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/lang/emit.ci"
		, "line": 20
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 20
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "test/lang/emit.ci"
	, "line": 23
	, "size": 8
	, "offs": 363192
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "test/lang/emit.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/emit.ci"
			, "line": 23
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 23
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "test/lang/emit.ci"
			, "line": 23
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "test/lang/emit.ci"
				, "line": 23
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 8
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 8
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "b"
		}
	}
}, {
	"": "i3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i3"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 10
	, "size": 4
	, "offs": 363200
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 10
		, "value": "3"
	}
}, {
	"": "i6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i6"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 11
	, "size": 4
	, "offs": 363208
	, "static": true
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 11
		, "value": "6"
	}
}, {
	"": "i2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i2"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 12
	, "size": 4
	, "offs": 363216
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 12
		, "value": "2"
	}
}, {
	"": "i8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 363224
	, "static": true
	, "const": false
	, "ast": {
		"": "8"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 13
		, "value": "8"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 363232
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "6"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 16
	, "size": 4
	, "offs": 363240
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i6"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 363248
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3 + 1, i6 + 1)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "i3 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i3"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}, {
			"": "i6 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i6"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 363256
	, "static": true
	, "const": false
	, "ast": {
		"": "last(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "6"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 20
	, "size": 4
	, "offs": 363264
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i6"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 363272
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 21
		, "left": {
			"": "last(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 21
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 21
			, "value": "1"
		}
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 363280
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 24
	, "size": 4
	, "offs": 363288
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i6"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 363296
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3 + 1, i6 + 1) - 2"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 25
		, "left": {
			"": "sum(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 25
			, "value": "2"
		}
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 363304
	, "static": true
	, "const": false
	, "ast": {
		"": "any(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "6"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 28
	, "size": 4
	, "offs": 363312
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 28
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i6"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 363320
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 29
		, "left": {
			"": "any(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 29
			, "value": "1"
		}
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 363328
	, "static": true
	, "const": false
	, "ast": {
		"": "min(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "6"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 32
	, "size": 4
	, "offs": 363336
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i6"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 363344
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 33
		, "left": {
			"": "min(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 33
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 33
			, "value": "1"
		}
	}
}, {
	"": "max2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Val"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 363352
	, "static": true
	, "const": false
	, "ast": {
		"": "max(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "6"
		}]
	}
}, {
	"": "max2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Var"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 36
	, "size": 4
	, "offs": 363360
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i6"
		}]
	}
}, {
	"": "max2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Xpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 363368
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 37
		, "left": {
			"": "max(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 37
			, "value": "1"
		}
	}
}, {
	"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(a, sum(b, sum(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 39
			, "value": "a"
		}, {
			"": "sum(b, sum(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 39
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "b"
			}, {
				"": "sum(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 39
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(sum(sum(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "sum(sum(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "sum(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 40
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 40
			, "value": "d"
		}]
	}
}, {
	"": "sumRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 363376
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "8"
		}]
	}
}, {
	"": "sumLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 363384
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "8"
		}]
	}
}, {
	"": "sumRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 363392
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i8"
		}]
	}
}, {
	"": "sumLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 44
	, "size": 4
	, "offs": 363400
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i8"
		}]
	}
}, {
	"": "sumRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 363408
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 45
		, "left": {
			"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 45
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 45
			, "value": "4"
		}
	}
}, {
	"": "sumLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 363416
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 46
		, "left": {
			"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 46
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 46
			, "value": "4"
		}
	}
}, {
	"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(a, any(b, any(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 48
			, "value": "a"
		}, {
			"": "any(b, any(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 48
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "b"
			}, {
				"": "any(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 48
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(any(any(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "any(any(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 49
			, "args": [{
			}, {
				"": "any(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 49
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 49
			, "value": "d"
		}]
	}
}, {
	"": "anyRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 50
	, "size": 4
	, "offs": 363424
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "8"
		}]
	}
}, {
	"": "anyLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 51
	, "size": 4
	, "offs": 363432
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "8"
		}]
	}
}, {
	"": "anyRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 52
	, "size": 4
	, "offs": 363440
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i8"
		}]
	}
}, {
	"": "anyLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 53
	, "size": 4
	, "offs": 363448
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i8"
		}]
	}
}, {
	"": "anyRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 54
	, "size": 4
	, "offs": 363456
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 54
		, "left": {
			"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 54
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 54
			, "value": "1"
		}
	}
}, {
	"": "anyLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 55
	, "size": 4
	, "offs": 363464
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 55
		, "left": {
			"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 55
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 55
			, "value": "1"
		}
	}
}, {
	"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(a, min(b, min(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 57
			, "value": "a"
		}, {
			"": "min(b, min(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "b"
			}, {
				"": "min(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 57
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(min(min(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "min(min(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "min(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 58
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 58
			, "value": "d"
		}]
	}
}, {
	"": "minRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 59
	, "size": 4
	, "offs": 363472
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "8"
		}]
	}
}, {
	"": "minLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 60
	, "size": 4
	, "offs": 363480
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "8"
		}]
	}
}, {
	"": "minRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 61
	, "size": 4
	, "offs": 363488
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 61
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i8"
		}]
	}
}, {
	"": "minLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 62
	, "size": 4
	, "offs": 363496
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i8"
		}]
	}
}, {
	"": "minRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 63
	, "size": 4
	, "offs": 363504
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 63
		, "left": {
			"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 63
			, "value": "1"
		}
	}
}, {
	"": "minLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 64
	, "size": 4
	, "offs": 363512
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 64
		, "left": {
			"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 64
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 64
			, "value": "1"
		}
	}
}, {
	"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxLr"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(a, max(b, max(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 66
			, "value": "a"
		}, {
			"": "max(b, max(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 66
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "b"
			}, {
				"": "max(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 66
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxRl"
	, "type": "function"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(max(max(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 67
		, "args": [{
		}, {
			"": "max(max(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "max(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 67
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 67
			, "value": "d"
		}]
	}
}, {
	"": "maxRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 68
	, "size": 4
	, "offs": 363520
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 68
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "8"
		}]
	}
}, {
	"": "maxLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVal"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 69
	, "size": 4
	, "offs": 363528
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 69
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "8"
		}]
	}
}, {
	"": "maxRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 70
	, "size": 4
	, "offs": 363536
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i8"
		}]
	}
}, {
	"": "maxLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVar"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 71
	, "size": 4
	, "offs": 363544
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i8"
		}]
	}
}, {
	"": "maxRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 72
	, "size": 4
	, "offs": 363552
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 72
		, "left": {
			"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 72
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 72
			, "value": "1"
		}
	}
}, {
	"": "maxLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrXpr"
	, "type": "int32"
	, "file": "test/lang/inlineMacros.ci"
	, "line": 73
	, "size": 4
	, "offs": 363560
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/inlineMacros.ci"
		, "line": 73
		, "left": {
			"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/inlineMacros.ci"
			, "line": 73
			, "value": "1"
		}
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "test/lang/overload.inline.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 9
	, "size": 4
	, "offs": 363568
	, "static": true
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 10
	, "size": 4
	, "offs": 363576
	, "static": true
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 11
	, "size": 4
	, "offs": 363584
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/overload.inline.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 12
	, "size": 4
	, "offs": 363592
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "test/lang/overload.inline.ci"
	, "line": 13
	, "size": 4
	, "offs": 363600
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/overload.inline.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 230272
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 230576
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/overload.inline.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "test/lang/overload.inline.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "test/lang/overload.inline.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "test/lang/overload.inline.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "test/lang/overload.inline.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "test/lang/overload.inline.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/overload.inline.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "test/lang/overload.inline.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "test/lang/overload.inline.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "test/lang/overload.inline.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "test/lang/overload.inline.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/lang/overload.inline.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/lang/overload.inline.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "test/lang/overload.inline.ci"
	, "line": 28
	, "size": 8
	, "offs": 363608
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "test/lang/overload.inline.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/lang/overload.inline.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "test/lang/overload.inline.ci"
	, "line": 29
	, "size": 8
	, "offs": 363616
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "test/lang/overload.inline.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "test/lang/overload.inline.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 7
	, "size": 8
	, "offs": 363624
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/initByRef.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 8
	, "size": 4
	, "offs": 363632
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 9
	, "size": 4
	, "offs": 363640
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 10
	, "size": 8
	, "offs": 363648
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 12
	, "size": 8
	, "offs": 363656
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 13
	, "size": 4
	, "offs": 363664
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 14
	, "size": 4
	, "offs": 363672
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 16
	, "size": 4
	, "offs": 363680
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 17
	, "size": 4
	, "offs": 363688
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 18
	, "size": 8
	, "offs": 363696
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 19
	, "size": 4
	, "offs": 363704
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "test/lang/initByRef.ci"
	, "line": 20
	, "size": 4
	, "offs": 363712
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "test/lang/initByRef.ci"
	, "line": 21
	, "size": 4
	, "offs": 363720
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 23
	, "size": 4
	, "offs": 363728
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 24
	, "size": 8
	, "offs": 363736
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 25
	, "size": 4
	, "offs": 363744
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 27
	, "size": 8
	, "offs": 363752
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 28
	, "size": 8
	, "offs": 363760
	, "static": true
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "test/lang/initByRef.ci"
	, "line": 29
	, "size": 4
	, "offs": 363768
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "test/lang/initByRef.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 30
	, "size": 4
	, "offs": 363776
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 31
	, "size": 8
	, "offs": 363784
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 32
	, "size": 4
	, "offs": 363792
	, "static": true
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 35
	, "size": 4
	, "offs": 363800
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 36
	, "size": 4
	, "offs": 363808
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 37
	, "size": 4
	, "offs": 363816
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 38
	, "size": 4
	, "offs": 363824
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 39
	, "size": 4
	, "offs": 363832
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 40
	, "size": 4
	, "offs": 363840
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 41
	, "size": 4
	, "offs": 363848
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 42
	, "size": 4
	, "offs": 363856
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 43
	, "size": 4
	, "offs": 363864
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 44
	, "size": 4
	, "offs": 363872
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 45
	, "size": 4
	, "offs": 363880
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 46
	, "size": 4
	, "offs": 363888
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 47
	, "size": 4
	, "offs": 363896
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 48
	, "size": 4
	, "offs": 363904
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 49
	, "size": 4
	, "offs": 363912
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 50
	, "size": 4
	, "offs": 363920
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 51
	, "size": 4
	, "offs": 363928
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 52
	, "size": 4
	, "offs": 363936
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 55
	, "size": 8
	, "offs": 363944
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 56
	, "size": 8
	, "offs": 363952
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 57
	, "size": 8
	, "offs": 363960
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 58
	, "size": 8
	, "offs": 363968
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 59
	, "size": 8
	, "offs": 363976
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 60
	, "size": 8
	, "offs": 363984
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 61
	, "size": 8
	, "offs": 363992
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 62
	, "size": 8
	, "offs": 364000
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 63
	, "size": 8
	, "offs": 364008
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 64
	, "size": 8
	, "offs": 364016
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 65
	, "size": 8
	, "offs": 364024
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 66
	, "size": 8
	, "offs": 364032
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 67
	, "size": 8
	, "offs": 364040
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 68
	, "size": 8
	, "offs": 364048
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 69
	, "size": 8
	, "offs": 364056
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 70
	, "size": 8
	, "offs": 364064
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 71
	, "size": 8
	, "offs": 364072
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 72
	, "size": 8
	, "offs": 364080
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 75
	, "size": 4
	, "offs": 364088
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 76
	, "size": 4
	, "offs": 364096
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 77
	, "size": 4
	, "offs": 364104
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 78
	, "size": 4
	, "offs": 364112
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 79
	, "size": 4
	, "offs": 364120
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 80
	, "size": 4
	, "offs": 364128
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 81
	, "size": 4
	, "offs": 364136
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 82
	, "size": 4
	, "offs": 364144
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 83
	, "size": 4
	, "offs": 364152
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 84
	, "size": 4
	, "offs": 364160
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 85
	, "size": 4
	, "offs": 364168
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 86
	, "size": 4
	, "offs": 364176
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 87
	, "size": 4
	, "offs": 364184
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 88
	, "size": 4
	, "offs": 364192
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 89
	, "size": 4
	, "offs": 364200
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 90
	, "size": 4
	, "offs": 364208
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 91
	, "size": 4
	, "offs": 364216
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 92
	, "size": 4
	, "offs": 364224
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 95
	, "size": 4
	, "offs": 364232
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 96
	, "size": 8
	, "offs": 364240
	, "static": true
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 97
	, "size": 4
	, "offs": 364248
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "test/lang/initByRef.ci"
	, "line": 99
	, "size": 4
	, "offs": 364256
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/initByRef.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/initByRef.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "test/lang/initByRef.ci"
	, "line": 105
	, "size": 8
	, "offs": 364264
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/initByRef.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "test/lang/initByRef.ci"
	, "line": 108
	, "size": 4
	, "offs": 364272
	, "static": true
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "test/lang/initByRef.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 364280
	, "static": true
	, "const": true
	, "doc": "function with empty implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 364280
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 364288
	, "static": true
	, "const": true
	, "doc": "function with implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 7
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 8
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "test/lang/function.ci"
					, "line": 8
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 8
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 8
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364288
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364290
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 364292
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 364293
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 364295
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 12
	, "size": 4
	, "offs": 364296
	, "static": true
	, "const": false
	, "doc": "function invocation"
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 12
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 12
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 364304
	, "static": true
	, "const": false
	, "doc": "initialized function reference"
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 15
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 18
	, "size": 4
	, "offs": 364312
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 18
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 18
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 364320
	, "static": true
	, "const": false
	, "doc": "forward function reference (must be implemented somewhere)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 24
	, "size": 4
	, "offs": 364328
	, "static": true
	, "const": false
	, "doc": "forward function invocation"
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 24
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 24
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 364336
	, "static": true
	, "const": false
	, "doc": "initialized function reference (copy address)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 27
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "test/lang/function.ci"
	, "line": 30
	, "size": 4
	, "offs": 364344
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 30
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 30
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 33
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 364352
	, "static": true
	, "const": true
	, "doc": "forward function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 33
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 34
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "test/lang/function.ci"
					, "line": 34
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 34
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 34
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364352
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364354
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 364356
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 364357
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 364359
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "test/lang/function.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 54
	, "offs": 364360
	, "static": true
	, "const": true
	, "doc": "recursive function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/function.ci"
		, "line": 38
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 39
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "test/lang/function.ci"
				, "line": 39
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "test/lang/function.ci"
					, "line": 39
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "test/lang/function.ci"
					, "line": 39
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/function.ci"
						, "line": 39
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/function.ci"
				, "line": 39
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "test/lang/function.ci"
					, "line": 40
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "test/lang/function.ci"
							, "line": 40
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/function.ci"
			, "line": 42
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "test/lang/function.ci"
					, "line": 42
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang/function.ci"
									, "line": 42
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang/function.ci"
									, "line": 42
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364360
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 364362
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 364367
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 364368
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 364372
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 364375
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 364376
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364377
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 364379
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 364383
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 364388
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 364389
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 364393
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 364394
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 364396
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 364400
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 364405
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 364406
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 364410
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 364411
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 364413
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "test/lang/function.ci"
	, "line": 46
	, "size": 4
	, "offs": 364416
	, "static": true
	, "const": false
	, "doc": "recursive function invocation"
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "test/lang/function.ci"
		, "line": 46
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 46
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 364424
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 364432
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 364440
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 364448
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 364456
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 364464
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 364472
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 364480
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 364488
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 364496
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 364504
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 364512
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 364520
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 364528
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 364536
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 364544
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 364552
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 364560
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "test/lang/reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 254744
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.as(obj: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "obj"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "obj"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28136
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "test/lang/reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 255048
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.as(obj: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "obj"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "obj"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28136
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 364568
	, "static": true
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "test/lang/reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 364576
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 364584
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 364592
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 33
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 364600
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 364608
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 364616
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 364624
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 364632
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 364640
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 40
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}]
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "test/lang/reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 364648
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "test/lang/reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 364656
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 364664
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 364672
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 364680
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "test/lang/reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 364688
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "test/lang/reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 364696
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "test/lang/reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 364704
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "test/lang/reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/lang/reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 3
	, "size": 8
	, "offs": 364712
	, "static": true
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 4
	, "size": 8
	, "offs": 364720
	, "static": true
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 6
	, "size": 4
	, "offs": 364728
	, "static": true
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 7
	, "size": 4
	, "offs": 364736
	, "static": true
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "test/std/number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R8G8B8 color format"
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "test/std/number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R5G6B5 color format"
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/std/number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 14
	, "size": 4
	, "offs": 364744
	, "static": true
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 15
	, "size": 4
	, "offs": 364752
	, "static": true
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 16
	, "size": 4
	, "offs": 364760
	, "static": true
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 18
	, "size": 4
	, "offs": 364768
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 19
	, "size": 4
	, "offs": 364776
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 21
	, "size": 4
	, "offs": 364784
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 22
	, "size": 4
	, "offs": 364792
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 23
	, "size": 4
	, "offs": 364800
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 25
	, "size": 4
	, "offs": 364808
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 26
	, "size": 4
	, "offs": 364816
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 27
	, "size": 4
	, "offs": 364824
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 29
	, "size": 4
	, "offs": 364832
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 30
	, "size": 4
	, "offs": 364840
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 31
	, "size": 4
	, "offs": 364848
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 33
	, "size": 4
	, "offs": 364856
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 34
	, "size": 4
	, "offs": 364864
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 35
	, "size": 4
	, "offs": 364872
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "testSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSin_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 37
	, "size": 8
	, "offs": 364880
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testCos_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 38
	, "size": 8
	, "offs": 364888
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testTan_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 39
	, "size": 8
	, "offs": 364896
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testLog_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 40
	, "size": 8
	, "offs": 364904
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "testExp_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testExp_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 41
	, "size": 8
	, "offs": 364912
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testPow_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 42
	, "size": 8
	, "offs": 364920
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSqrt_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 43
	, "size": 8
	, "offs": 364928
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "testAtan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testAtan_f64"
	, "type": "float64"
	, "file": "test/std/number.ci"
	, "line": 44
	, "size": 8
	, "offs": 364936
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "testSin_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSin_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 46
	, "size": 4
	, "offs": 364944
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testCos_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 47
	, "size": 4
	, "offs": 364952
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testTan_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 48
	, "size": 4
	, "offs": 364960
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testLog_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 49
	, "size": 4
	, "offs": 364968
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "testExp_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testExp_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 50
	, "size": 4
	, "offs": 364976
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testPow_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 51
	, "size": 4
	, "offs": 364984
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSqrt_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 52
	, "size": 4
	, "offs": 364992
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "testAtan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testAtan_f32"
	, "type": "float32"
	, "file": "test/std/number.ci"
	, "line": 53
	, "size": 4
	, "offs": 365000
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPopulation_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testPopulation_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 55
	, "size": 4
	, "offs": 365008
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.pop(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 55
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 55
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testSwapBits_u32"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "testSwapBits_u32"
	, "type": "uint32"
	, "file": "test/std/number.ci"
	, "line": 56
	, "size": 4
	, "offs": 365016
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.swap(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 56
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 56
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanReverse_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanReverse_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 57
	, "size": 4
	, "offs": 365024
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsr(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 57
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 57
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanForward_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanForward_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 58
	, "size": 4
	, "offs": 365032
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsf(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 58
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 58
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testHighBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testHighBit_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 59
	, "size": 4
	, "offs": 365040
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.hib(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 59
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 59
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testLowBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testLowBit_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 60
	, "size": 4
	, "offs": 365048
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.lob(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 60
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 60
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testZeroExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 62
	, "size": 4
	, "offs": 365056
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 62
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 62
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 62
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u32"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 63
	, "size": 4
	, "offs": 365064
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/number.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 63
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 63
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 63
			, "value": "5"
		}]
	}
}, {
	"": "testZeroExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u64"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 65
	, "size": 4
	, "offs": 365072
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/std/number.ci"
		, "line": 65
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 65
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 65
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 65
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u64"
	, "type": "int32"
	, "file": "test/std/number.ci"
	, "line": 66
	, "size": 4
	, "offs": 365080
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "test/std/number.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 66
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 66
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/number.ci"
			, "line": 66
			, "value": "5"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "test/std/memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "test/std/memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "test/std/memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "test/std/memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 365088
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "test/std/memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 365096
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "test/std/memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 365104
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "test/std/memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 365112
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/std/memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "test/std/memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 365120
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/std/memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "test/std/memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 365128
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/std/memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "test/std/tryExec.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/std/tryExec.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 365136
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365136
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "test/std/tryExec.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "test/std/tryExec.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 365144
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[8192]"
			, "file": "test/std/tryExec.ci"
			, "line": 15
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 16
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365144
		, "size": 4
	}, {
		"instruction": "load.sp(+8196)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365148
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 365152
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365153
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 365158
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365159
		, "size": 4
	}, {
		"instruction": "inc.sp(-8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365163
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365167
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "test/std/tryExec.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/std/tryExec.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 365168
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 19
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/tryExec.ci"
			, "line": 20
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365168
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365173
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 365174
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365175
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365179
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "test/std/tryExec.ci"
	, "line": 23
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 23
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/std/tryExec.ci"
		, "line": 23
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 68
	, "offs": 365184
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 23
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "test/std/tryExec.ci"
			, "line": 24
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "test/std/tryExec.ci"
			, "line": 29
			, "value": "details"
		}, {
			"": "abort(\"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 34
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365184
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365188
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365193
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365195
		, "size": 5
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365200
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365202
		, "size": 5
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365207
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365209
		, "size": 5
	}, {
		"instruction": "load.c32 34"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365214
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365219
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365224
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365229
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365234
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365239
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365243
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365247
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365251
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "test/std/tryExec.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 37
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/std/tryExec.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 365256
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 37
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/tryExec.ci"
			, "line": 38
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/std/tryExec.ci"
			, "line": 39
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365256
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365261
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 365263
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365264
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365268
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "test/std/tryExec.ci"
	, "line": 42
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 42
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "test/std/tryExec.ci"
		, "line": 42
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 365272
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/std/tryExec.ci"
		, "line": 42
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 43
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365272
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365273
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 46
	, "size": 4
	, "offs": 365280
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 46
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/std/tryExec.ci"
			, "line": 46
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 47
	, "size": 4
	, "offs": 365288
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 47
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 48
	, "size": 4
	, "offs": 365296
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/std/tryExec.ci"
			, "line": 48
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 49
	, "size": 4
	, "offs": 365304
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/std/tryExec.ci"
			, "line": 49
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 50
	, "size": 4
	, "offs": 365312
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/std/tryExec.ci"
			, "line": 50
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 51
	, "size": 4
	, "offs": 365320
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/std/tryExec.ci"
			, "line": 51
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "test/std/tryExec.ci"
	, "line": 52
	, "size": 4
	, "offs": 365328
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/tryExec.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "test/std/tryExec.ci"
			, "line": 52
			, "value": "abortExecution"
		}]
	}
}, {
	"": "arrFixedNoInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "arrFixedNoInit"
	, "type": "int64[7]"
	, "file": "test/lang/array.ci"
	, "line": 49
	, "size": 56
	, "offs": 365336
	, "static": true
	, "const": false
}, {
	"": "arrArrayNoInit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayNoInit"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 50
	, "size": 4
	, "offs": 365392
	, "static": true
	, "const": false
}, {
	"": "arrSliceNoInit"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceNoInit"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 51
	, "size": 8
	, "offs": 365400
	, "static": true
	, "const": false
}, {
	"": "arrArrayInitNull"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitNull"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 59
	, "size": 4
	, "offs": 365408
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/array.ci"
		, "line": 59
		, "value": "null"
	}
}, {
	"": "arrSliceInitNull"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitNull"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 60
	, "size": 8
	, "offs": 365416
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/array.ci"
		, "line": 60
		, "value": "null"
	}
}, {
	"": "arrArrayInitFixed"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitFixed"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 63
	, "size": 4
	, "offs": 365424
	, "static": true
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang/array.ci"
		, "line": 63
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrSliceInitFixed"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitFixed"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 64
	, "size": 8
	, "offs": 365432
	, "static": true
	, "const": false
	, "ast": {
		"": "arrFixedNoInit"
		, "kind": ".variable"
		, "type": "int64[7]"
		, "file": "test/lang/array.ci"
		, "line": 64
		, "value": "arrFixedNoInit"
	}
}, {
	"": "arrArrayInitSlice"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitSlice"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 67
	, "size": 4
	, "offs": 365440
	, "static": true
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 67
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrSliceInitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "arrSliceInitSlice"
	, "type": "int64[]"
	, "file": "test/lang/array.ci"
	, "line": 68
	, "size": 8
	, "offs": 365448
	, "static": true
	, "const": false
	, "ast": {
		"": "arrSliceInitFixed"
		, "kind": ".variable"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 68
		, "value": "arrSliceInitFixed"
	}
}, {
	"": "arrArrayInitPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "arrArrayInitPtr"
	, "type": "int64[*]"
	, "file": "test/lang/array.ci"
	, "line": 71
	, "size": 4
	, "offs": 365456
	, "static": true
	, "const": false
	, "ast": {
		"": "arrArrayInitFixed"
		, "kind": ".variable"
		, "type": "int64[*]"
		, "file": "test/lang/array.ci"
		, "line": 71
		, "value": "arrArrayInitFixed"
	}
}, {
	"": "strFixed"
	, "kind": "variable"
	, "cast": "val"
	, "name": "strFixed"
	, "type": "char[7]"
	, "file": "test/lang/array.ci"
	, "line": 81
	, "size": 7
	, "offs": 365464
	, "static": true
	, "const": false
}, {
	"": "strArray"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "strArray"
	, "type": "char[*]"
	, "file": "test/lang/array.ci"
	, "line": 86
	, "size": 4
	, "offs": 365472
	, "static": true
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang/array.ci"
		, "line": 86
		, "value": "\"string\""
	}
}, {
	"": "strSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "strSlice"
	, "type": "char[]"
	, "file": "test/lang/array.ci"
	, "line": 90
	, "size": 8
	, "offs": 365480
	, "static": true
	, "const": false
	, "ast": {
		"": "\"string\""
		, "kind": ".literal"
		, "type": ".cstr"
		, "file": "test/lang/array.ci"
		, "line": 90
		, "value": "\"string\""
	}
}, {
	"": "lenSlice(values: int64[]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lenSlice"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 103
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 4
	, "offs": 365488
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "stmt": [{
			"": "return .result := values.length;"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 103
			, "stmt": {
				"": ".result := values.length"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "values.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "test/lang/array.ci"
					, "line": 103
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang/array.ci"
						, "line": 103
						, "value": "values"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "test/lang/array.ci"
						, "line": 103
						, "value": "length"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 365488
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365491
		, "size": 1
	}]
}, {
	"": "nthFixed(idx: int32, values: int64[7]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthFixed"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[7]"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 12
	, "offs": 365496
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang/array.ci"
					, "line": 104
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[7]"
						, "file": "test/lang/array.ci"
						, "line": 104
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 104
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365496
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365498
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365500
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 365504
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365505
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365507
		, "size": 1
	}]
}, {
	"": "nthArray(idx: int32, values: int64[*]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthArray"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "values"
		, "type": "int64[*]"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 12
	, "offs": 365512
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang/array.ci"
					, "line": 105
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[*]"
						, "file": "test/lang/array.ci"
						, "line": 105
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 105
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365512
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365514
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365516
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 365520
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365521
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365523
		, "size": 1
	}]
}, {
	"": "nthSlice(idx: int32, values: int64[]): int64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "nthSlice"
	, "type": "function"
	, "file": "test/lang/array.ci"
	, "line": 106
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "idx"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "idx"
		, "type": "int32"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "values"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "values"
		, "type": "int64[]"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 12
	, "offs": 365528
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "stmt": [{
			"": "return .result := values[idx];"
			, "kind": "return"
			, "type": "void"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "stmt": {
				"": ".result := values[idx]"
				, "kind": ":="
				, "type": "int64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int64"
					, "value": ".result"
				}
				, "right": {
					"": "values[idx]"
					, "kind": "[]"
					, "type": "int64"
					, "file": "test/lang/array.ci"
					, "line": 106
					, "left": {
						"": "values"
						, "kind": ".variable"
						, "type": "int64[]"
						, "file": "test/lang/array.ci"
						, "line": 106
						, "value": "values"
					}
					, "right": {
						"": "idx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 106
						, "value": "idx"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365528
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365530
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 365532
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 365536
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 365537
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365539
		, "size": 1
	}]
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang/member.ci"
	, "line": 3
	, "size": 32
	, "offs": 284768
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "test/lang/member.ci"
	, "line": 5
	, "size": 8
	, "offs": 284920
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 11
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 14
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 17
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 17
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 20
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 20
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 23
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 26
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 35
	, "size": 4
	, "offs": 365544
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 38
	, "size": 4
	, "offs": 365552
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 38
		, "value": "1"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "test/lang/member.ci"
	, "line": 41
	, "size": 4
	, "offs": 365560
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/member.ci"
		, "line": 41
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 44
	, "size": 8
	, "offs": 365568
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 47
	, "size": 8
	, "offs": 365576
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 47
		}, {
			"": "globalRecInit.constant := 5;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 47
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "test/lang/member.ci"
	, "line": 50
	, "size": 8
	, "offs": 365584
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 50
		}, {
			"": "globalConstantRec.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 50
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "test/lang/member.ci"
	, "line": 53
	, "size": 32
	, "offs": 365592
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 10;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.constant := 11;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.memberInit := 12;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.constantInit := 13;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 57
		}, {
			"": "recordMemberTest.memberRec.member := 14;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.memberRec.constant := 15;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 61
		}, {
			"": "recordMemberTest.constantRec.member := 16;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 65
		}, {
			"": "recordMemberTest.constantRec.constant := 17;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/member.ci"
			, "line": 66
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "test/lang/method.ci"
	, "line": 4
	, "size": 16
	, "offs": 288488
	, "static": true
	, "const": true
	, "doc": "static, virtual and abstract methods"
}, {
	"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 10
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 10
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 365624
	, "static": true
	, "const": true
	, "doc": "static method is like a `global function` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 10
		, "stmt": [{
			"": "trace(\"staticMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 11
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365624
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365629
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365634
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365639
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365644
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365649
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365654
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365658
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365662
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 365664
	, "static": true
	, "const": false
	, "doc": "static forward method is like a `forward function reference` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "abstract methods must be overridden when inheriting or instantiating\nthe compiler sees it as a `constant function reference` without `default type initializer`\n@see lang/member.ci"
}, {
	"": "RecordMethodTest.delegateMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "virtual method (use to delegate)\nthe compiler sees it as a `constant function reference` with `default field initializer`\n@see lang/member.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 32
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 365672
	, "static": true
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"virtualMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365672
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365677
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365682
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365687
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365692
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365697
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365702
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365706
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365710
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 47
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 47
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 47
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 365712
	, "static": true
	, "const": true
	, "doc": "static forward method implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 47
		, "stmt": [{
			"": "trace(\"forwardMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 48
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365712
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365717
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365722
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365727
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365732
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365737
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365742
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365746
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365750
		, "size": 1
	}]
}, {
	"": "globalFunction(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 57
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 57
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 57
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 365752
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 57
		, "stmt": [{
			"": "trace(\"globalFunction\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 58
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365752
		, "size": 5
	}, {
		"instruction": "load.c32 58"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365757
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365762
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365767
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365772
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365777
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365782
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365786
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365790
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "test/lang/method.ci"
	, "line": 62
	, "size": 16
	, "offs": 365792
	, "static": true
	, "const": false
	, "doc": "create an instance of the type "
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 64
		}, {
			"": "recordMethodTest.delegateMethod := forwardMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.delegateMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang/method.ci"
					, "line": 62
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "delegateMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "delegateMethod"
				}
			}
			, "right": {
				"": "forwardMethod"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 32
				, "value": "forwardMethod"
			}
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod"
			, "kind": ":="
			, "type": "void"
			, "left": {
				"": "recordMethodTest.virtualMethod"
				, "kind": "."
				, "type": "function"
				, "left": {
					"": "recordMethodTest"
					, "kind": ".variable"
					, "type": "RecordMethodTest"
					, "file": "test/lang/method.ci"
					, "line": 62
					, "value": "recordMethodTest"
				}
				, "right": {
					"": "virtualMethod"
					, "kind": ".variable"
					, "type": "function"
					, "value": "virtualMethod"
				}
			}
			, "right": {
				"": "virtualMethod"
				, "kind": ".variable"
				, "type": "function"
				, "value": "virtualMethod"
			}
		}]
	}
}, {
	"": "staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 84
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 84
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 84
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 66
	, "offs": 365808
	, "static": true
	, "const": true
	, "doc": "extension function is defined, it has the highest priority."
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 84
		, "stmt": [{
			"": "debug(\"extension.staticMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 85
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 86
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "test/lang/method.ci"
				, "line": 86
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 86
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "test/lang/method.ci"
						, "line": 86
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 86
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 86
				, "stmt": [{
					"": "RecordMethodTest.staticMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "test/lang/method.ci"
					, "line": 87
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365808
		, "size": 5
	}, {
		"instruction": "load.c32 85"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365813
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365818
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365823
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365824
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365829
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365834
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365839
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365843
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365847
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 365852
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 365853
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 365857
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365859
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365861
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365863
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 365868
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365869
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365873
		, "size": 1
	}]
}, {
	"": "virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "type": "function"
	, "file": "test/lang/method.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 90
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "test/lang/method.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "test/lang/method.ci"
		, "line": 90
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 365880
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "test/lang/method.ci"
		, "line": 90
		, "stmt": [{
			"": "debug(\"extension.virtualMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 91
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 92
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "test/lang/method.ci"
				, "line": 92
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 92
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "test/lang/method.ci"
						, "line": 92
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "test/lang/method.ci"
					, "line": 92
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 92
				, "stmt": [{
					"": "this.virtualMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "test/lang/method.ci"
					, "line": 93
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365880
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365885
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 365890
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 365895
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365896
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365901
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365906
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 365911
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 365915
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 365919
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 365924
		, "size": 1
	}, {
		"instruction": "jnz +17"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 365925
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 365929
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365931
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 365933
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 365935
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 365937
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 365938
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 365942
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "test/lang/recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 294504
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang/recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang/recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "test/lang/recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "test/lang/recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 295112
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang/recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang/recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "test/lang/recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "test/lang/recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 295720
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "test/lang/recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "test/lang/recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 296176
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "test/lang/recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27472
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.as(obj: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "obj"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "obj"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28136
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(8)"
	}
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 365944
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 365952
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "test/lang/recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 365960
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "test/lang/recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 365968
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "test/lang/recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 365976
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "test/lang/recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 297360
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 298424
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 299488
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 300552
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 301616
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "test/lang/recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 302680
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "test/lang/recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "test/lang/recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "test/lang/recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "test/lang/recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "test/lang/useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "test/lang/useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 365984
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 365992
	, "static": true
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 366000
	, "static": true
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 366008
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 366016
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 366024
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 366032
	, "static": true
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 366040
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 366048
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 366056
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 366064
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 366072
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 366080
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 366088
	, "static": true
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 366096
	, "static": true
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 366104
	, "static": true
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 366112
	, "static": true
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 366120
	, "static": true
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 366128
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 366136
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 366144
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 366152
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 366160
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 366168
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 366176
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 366184
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "test/lang/useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 366192
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "test/lang/useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 366200
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 366208
	, "static": true
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 366216
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 366224
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 366232
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 366240
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 366248
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 366256
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 366264
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 366272
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 366280
	, "static": true
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 366288
	, "static": true
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 366296
	, "static": true
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 366304
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 366312
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 366320
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 366328
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 366336
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 366344
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 366352
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 366360
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "test/lang/useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 366368
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "test/lang/useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 366376
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 366384
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 366392
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 366400
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 366408
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 366416
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 366424
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 366432
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 366440
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 366448
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 366456
	, "static": true
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 366464
	, "static": true
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 366472
	, "static": true
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 366480
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 366488
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 366496
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 366504
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 366512
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 366520
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 366528
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 366536
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "test/lang/useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 366544
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "test/lang/useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 366552
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 366560
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 366568
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 366576
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 366584
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 366592
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 366600
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 366608
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 366616
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 366624
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 366632
	, "static": true
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 366640
	, "static": true
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 366648
	, "static": true
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 366656
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 366664
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 366672
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 366680
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 366688
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 366696
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 366704
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 366712
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "test/lang/useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 366720
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "test/lang/useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 366728
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 366736
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 366744
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 366752
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 366760
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 366768
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 366776
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 366784
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 366792
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 366800
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 366808
	, "static": true
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 366816
	, "static": true
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 366824
	, "static": true
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 366832
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 366840
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 366848
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 366856
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 366864
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 366872
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 366880
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 366888
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "test/lang/useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 366896
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "test/lang/useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 366904
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 366912
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 366920
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 366928
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 366936
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 366944
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 366952
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 366960
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 366968
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 366976
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 366984
	, "static": true
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 366992
	, "static": true
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 367000
	, "static": true
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 367008
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 367016
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 367024
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 367032
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 367040
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 367048
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 367056
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 367064
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 367072
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "test/lang/useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 367080
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "test/lang/useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 367088
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 367096
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 367104
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 367112
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 367120
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 367128
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 367136
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 367144
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 367152
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 367160
	, "static": true
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 367168
	, "static": true
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 367176
	, "static": true
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 367184
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 367192
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 367200
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 367208
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 367216
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 367224
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 367232
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 367240
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 367248
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "test/lang/useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 367256
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "test/lang/useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 367264
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 367272
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 367280
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 367288
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 367296
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 367304
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 367312
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 367320
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 367328
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 367336
	, "static": true
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 367344
	, "static": true
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 367352
	, "static": true
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 367360
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 367368
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 367376
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 367384
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 367392
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 367400
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 367408
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 367416
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 367424
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "test/lang/useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 367432
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "test/lang/useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 367440
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 367448
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 367456
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 367464
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 367472
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 367480
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 367488
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 367496
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 367504
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 367512
	, "static": true
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 367520
	, "static": true
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 367528
	, "static": true
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 367536
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 367544
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 367552
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 367560
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 367568
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 367576
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 367584
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 367592
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 367600
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "test/lang/useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 367608
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "test/lang/useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 367616
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 367624
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 367632
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 367640
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 367648
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 367656
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 367664
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 367672
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 367680
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 367688
	, "static": true
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 367696
	, "static": true
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 367704
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 367712
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 367720
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 367728
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "test/lang/useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 367736
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "test/lang/useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 367744
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 367752
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 367760
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 367768
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 367776
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 367784
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 367792
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 367800
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 367808
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 367816
	, "static": true
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 367824
	, "static": true
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 367832
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 367840
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 367848
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 367856
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "test/lang/useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 367864
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "test/lang/useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 367872
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "test/lang/useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 367880
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 367888
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 367896
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 367904
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 367912
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 367920
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "test/lang/useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 367928
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "test/lang/useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "test/lang/useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 367936
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "test/lang/useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "test/lang/useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 367944
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "test/lang/useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 367952
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "test/lang/useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "test/lang/statementIf.ci"
	, "line": 26
	, "size": 4
	, "offs": 367960
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/lang/statementIf.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "test/lang/statementFor.ci"
	, "line": 12
	, "size": 4
	, "offs": 367968
	, "static": true
	, "const": false
}, {
	"": "testMathFloor_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_1"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 3
	, "size": 8
	, "offs": 367976
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 3
		, "args": [{
			"": "3.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 3
			, "value": "3.200000"
		}]
	}
}, {
	"": "testMathFloor_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_2"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 4
	, "size": 8
	, "offs": 367984
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 4
		, "args": [{
			"": "3.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 4
			, "value": "3.500000"
		}]
	}
}, {
	"": "testMathFloor_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_3"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 5
	, "size": 8
	, "offs": 367992
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 5
		, "args": [{
			"": "3.600000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 5
			, "value": "3.600000"
		}]
	}
}, {
	"": "testMathFloor_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_4"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 6
	, "size": 8
	, "offs": 368000
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 6
		, "args": [{
			"": "-3.200000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 6
			, "right": {
				"": "3.200000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 6
				, "value": "3.200000"
			}
		}]
	}
}, {
	"": "testMathFloor_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_5"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 7
	, "size": 8
	, "offs": 368008
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 7
		, "args": [{
			"": "-3.500000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 7
			, "right": {
				"": "3.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 7
				, "value": "3.500000"
			}
		}]
	}
}, {
	"": "testMathFloor_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_6"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 8
	, "size": 8
	, "offs": 368016
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 8
		, "args": [{
			"": "-3.600000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 8
			, "right": {
				"": "3.600000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 8
				, "value": "3.600000"
			}
		}]
	}
}, {
	"": "testMathSign_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 10
	, "size": 8
	, "offs": 368024
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 10
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 10
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 11
	, "size": 8
	, "offs": 368032
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 11
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 11
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 12
	, "size": 8
	, "offs": 368040
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 12
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 12
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 12
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathSign_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 13
	, "size": 8
	, "offs": 368048
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 13
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 13
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 14
	, "size": 8
	, "offs": 368056
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 14
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 14
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 15
	, "size": 8
	, "offs": 368064
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 15
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 15
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 15
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 17
	, "size": 8
	, "offs": 368072
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 17
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 17
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 18
	, "size": 8
	, "offs": 368080
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 18
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 18
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 19
	, "size": 8
	, "offs": 368088
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 19
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 19
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 19
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 20
	, "size": 8
	, "offs": 368096
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 20
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 20
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 21
	, "size": 8
	, "offs": 368104
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 21
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 21
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 22
	, "size": 8
	, "offs": 368112
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 22
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 22
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 22
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathMin_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 24
	, "size": 8
	, "offs": 368120
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 24
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 24
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 25
	, "size": 8
	, "offs": 368128
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 25
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 25
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMin_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 26
	, "size": 8
	, "offs": 368136
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 26
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 26
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 27
	, "size": 8
	, "offs": 368144
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 27
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 27
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathClamp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 29
	, "size": 8
	, "offs": 368152
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 29
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 29
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathClamp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 30
	, "size": 8
	, "offs": 368160
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 30
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 30
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 30
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathLerp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 32
	, "size": 8
	, "offs": 368168
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 32
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 32
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathLerp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 33
	, "size": 8
	, "offs": 368176
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 33
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 33
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 33
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathSmooth_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1f"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 35
	, "size": 8
	, "offs": 368184
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 35
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSmooth_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1F"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 36
	, "size": 8
	, "offs": 368192
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 36
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathMin_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_nan"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 38
	, "size": 8
	, "offs": 368200
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min()"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 38
		, "args": [{
		}]
	}
}, {
	"": "testMathMin_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 39
	, "size": 8
	, "offs": 368208
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}]
	}
}, {
	"": "testMathMax_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_nan"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 40
	, "size": 8
	, "offs": 368216
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max()"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 40
		, "args": [{
		}]
	}
}, {
	"": "testMathMax_9"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_9"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 41
	, "size": 8
	, "offs": 368224
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "testMathSum_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_0"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 43
	, "size": 8
	, "offs": 368232
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum()"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 43
		, "args": [{
		}]
	}
}, {
	"": "testMathSum_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_1"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 44
	, "size": 8
	, "offs": 368240
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 44
		, "args": [{
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 44
			, "value": "1"
		}]
	}
}, {
	"": "testMathSum_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_3"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 45
	, "size": 8
	, "offs": 368248
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 45
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 45
			, "value": "2"
		}]
	}
}, {
	"": "testMathSum_55"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_55"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 46
	, "size": 8
	, "offs": 368256
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "3"
		}, {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "4"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "6"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "7"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "8"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "9"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 46
			, "value": "10"
		}]
	}
}, {
	"": "testMathEval_x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_x"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 48
	, "size": 8
	, "offs": 368264
	, "static": true
	, "const": false
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "test/std/test.math.ci"
		, "line": 48
		, "value": "10"
	}
}, {
	"": "testMathEval_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_0"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 49
	, "size": 8
	, "offs": 368272
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 49
		, "args": [{
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 49
			, "value": "testMathEval_x"
		}]
	}
}, {
	"": "testMathEval_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_1"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 50
	, "size": 8
	, "offs": 368280
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 50
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_2"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 51
	, "size": 8
	, "offs": 368288
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 51
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_3"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 52
	, "size": 8
	, "offs": 368296
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 52
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_4"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 53
	, "size": 8
	, "offs": 368304
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 53
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_5"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 54
	, "size": 8
	, "offs": 368312
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 54
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_6"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 55
	, "size": 8
	, "offs": 368320
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSin_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 57
	, "size": 8
	, "offs": 368328
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sin(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 57
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 57
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 57
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/std/test.math.ci"
					, "line": 57
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/test.math.ci"
					, "line": 57
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 57
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/test.math.ci"
					, "line": 57
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCos_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 58
	, "size": 8
	, "offs": 368336
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cos(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 58
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 58
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 58
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/std/test.math.ci"
					, "line": 58
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/test.math.ci"
					, "line": 58
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 58
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/test.math.ci"
					, "line": 58
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathTan_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 59
	, "size": 8
	, "offs": 368344
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.tan(Math.pi / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 59
		, "args": [{
			"": "Math.pi / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 59
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 59
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/std/test.math.ci"
					, "line": 59
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/test.math.ci"
					, "line": 59
					, "value": "pi"
				}
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 59
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/test.math.ci"
					, "line": 59
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testMathSinh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSinh_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 60
	, "size": 8
	, "offs": 368352
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sinh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 60
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 60
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 60
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/std/test.math.ci"
					, "line": 60
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/test.math.ci"
					, "line": 60
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 60
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/test.math.ci"
					, "line": 60
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCosh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCosh_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 61
	, "size": 8
	, "offs": 368360
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cosh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 61
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 61
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 61
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "test/std/test.math.ci"
					, "line": 61
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "test/std/test.math.ci"
					, "line": 61
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 61
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "test/std/test.math.ci"
					, "line": 61
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathAsin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAsin_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 63
	, "size": 8
	, "offs": 368368
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.asin(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 63
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 63
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAcos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAcos_f64"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 64
	, "size": 8
	, "offs": 368376
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.acos(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 64
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 64
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathCmp_f32"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f32"
	, "type": "bool"
	, "file": "test/std/test.math.ci"
	, "line": 67
	, "size": 1
	, "offs": 368384
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/std/test.math.ci"
		, "line": 67
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 67
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 67
			, "value": "0"
		}
	}
}, {
	"": "testMathCmp_f64"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f64"
	, "type": "bool"
	, "file": "test/std/test.math.ci"
	, "line": 68
	, "size": 1
	, "offs": 368392
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "test/std/test.math.ci"
		, "line": 68
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 68
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 68
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "test/std/test.math.ci"
			, "line": 68
			, "value": "0"
		}
	}
}, {
	"": "testMathAbsMod_f64_0a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0a"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 70
	, "size": 8
	, "offs": 368400
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0b"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 71
	, "size": 8
	, "offs": 368408
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 71
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 71
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0c"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 72
	, "size": 8
	, "offs": 368416
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 72
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 72
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9a"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 74
	, "size": 8
	, "offs": 368424
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 74
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 74
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9b"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 75
	, "size": 8
	, "offs": 368432
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 75
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 75
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 75
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9c"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 76
	, "size": 8
	, "offs": 368440
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 76
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 76
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 76
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9d"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 77
	, "size": 8
	, "offs": 368448
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 77
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 77
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 77
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 77
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8a"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 79
	, "size": 8
	, "offs": 368456
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 79
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 79
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 79
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8b"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 80
	, "size": 8
	, "offs": 368464
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 80
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 80
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8c"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 81
	, "size": 8
	, "offs": 368472
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 81
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 81
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 81
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8d"
	, "type": "float64"
	, "file": "test/std/test.math.ci"
	, "line": 82
	, "size": 8
	, "offs": 368480
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "test/std/test.math.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 82
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 82
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "test/std/test.math.ci"
			, "line": 82
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0a"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 84
	, "size": 4
	, "offs": 368488
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0b"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 85
	, "size": 4
	, "offs": 368496
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 85
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 85
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0c"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 86
	, "size": 4
	, "offs": 368504
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 86
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 86
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9a"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 88
	, "size": 4
	, "offs": 368512
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 88
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 88
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9b"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 89
	, "size": 4
	, "offs": 368520
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 89
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 89
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 89
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9c"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 90
	, "size": 4
	, "offs": 368528
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 90
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 90
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 90
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9d"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 91
	, "size": 4
	, "offs": 368536
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 91
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 91
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 91
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 91
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8a"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 93
	, "size": 4
	, "offs": 368544
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 93
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 93
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8b"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 94
	, "size": 4
	, "offs": 368552
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 94
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 94
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8c"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 95
	, "size": 4
	, "offs": 368560
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 95
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 95
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 95
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8d"
	, "type": "float32"
	, "file": "test/std/test.math.ci"
	, "line": 96
	, "size": 4
	, "offs": 368568
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "test/std/test.math.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 96
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 96
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "test/std/test.math.ci"
			, "line": 96
			, "value": "10.000000"
		}]
	}
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 14634
	, "offs": 368572
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "lib/stdlib.ci"
			, "line": 8
			, "stmt": [{
				"": "byte"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 8
				, "value": "byte"
			}, {
				"": "float"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 9
				, "value": "float"
			}, {
				"": "double"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 10
				, "value": "double"
			}, {
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "lib/stdlib.ci"
				, "line": 12
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "lib/stdlib.ci"
					, "line": 12
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 12
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "function"
							, "file": "lib/stdlib.ci"
							, "line": 12
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/stdlib.ci"
						, "line": 12
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "lib/stdlib.ci"
					, "line": 12
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 4
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 9
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 11
						, "value": "debug(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 14
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 16
						, "value": "trace(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 19
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 21
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 24
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 26
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 29
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 31
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 34
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 36
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 38
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 41
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 43
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 45
						, "value": "assert(condition: bool): void"
					}, {
						"": "NotEquals"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 48
						, "value": "NotEquals"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "lib/std/debug.ci"
						, "line": 64
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "lib/std/debug.ci"
						, "line": 76
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/stdlib.ci"
				, "line": 17
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math.ci"
				, "line": 2
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 2
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Complex.ci"
				, "line": 24
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Complex.ci"
				, "line": 31
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 59
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 62
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 64
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 66
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 69
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 71
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 73
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 76
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 81
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 83
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 107
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 109
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 112
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 114
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Complex.ci"
				, "line": 117
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 126
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 129
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 132
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Complex.ci"
				, "line": 135
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 146
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 149
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 151
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 164
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 166
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 169
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 171
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 173
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 175
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 178
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 180
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 182
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 184
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 187
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Complex.ci"
				, "line": 189
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 2
				, "value": "vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 26
				, "value": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 31
				, "value": "vec4f(x: float32, y: float32, z: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 34
				, "value": "vec4f(x: float32, y: float32): vec4f"
			}, {
				"": "vec4f(xyz: vec4f, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 37
				, "value": "vec4f(xyz: vec4f, w: float32): vec4f"
			}, {
				"": "vec4f(val: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 40
				, "value": "vec4f(val: float32): vec4f"
			}, {
				"": "neg(rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 71
				, "value": "neg(rhs: vec4f): vec4f"
			}, {
				"": "add(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 73
				, "value": "add(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 75
				, "value": "sub(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 77
				, "value": "mul(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "div(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 79
				, "value": "div(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "min(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 82
				, "value": "min(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "max(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 84
				, "value": "max(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dp3(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 88
				, "value": "dp3(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dph(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 92
				, "value": "dph(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dp4(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 96
				, "value": "dp4(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "cross(a: vec4f, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 99
				, "value": "cross(a: vec4f, b: vec4f): vec4f"
			}, {
				"": "length(v: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 102
				, "value": "length(v: vec4f): float32"
			}, {
				"": "normalize(v: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 104
				, "value": "normalize(v: vec4f): vec4f"
			}, {
				"": "eval(v: vec4f, x: float32): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector4f.ci"
				, "line": 107
				, "value": "eval(v: vec4f, x: float32): float32"
			}, {
				"": "mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 2
				, "value": "mat4f"
			}, {
				"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 62
				, "value": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
			}, {
				"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 75
				, "value": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
			}, {
				"": "dp3(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 80
				, "value": "dp3(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dph(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 82
				, "value": "dph(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dp4(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 84
				, "value": "dp4(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "transpose(mat: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 87
				, "value": "transpose(mat: mat4f): mat4f"
			}, {
				"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 97
				, "value": "mul(lhs: mat4f, rhs: mat4f): mat4f"
			}, {
				"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 111
				, "value": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
			}, {
				"": "rotation(direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 160
				, "value": "rotation(direction: vec4f, angle: float32): mat4f"
			}, {
				"": "translation(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 163
				, "value": "translation(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "scale(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Matrix4f.ci"
				, "line": 173
				, "value": "scale(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 2
				, "value": "vec2d"
			}, {
				"": "vec2d(x: float64, y: float64): vec2d"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 14
				, "value": "vec2d(x: float64, y: float64): vec2d"
			}, {
				"": "add(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 22
				, "value": "add(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "sub(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 25
				, "value": "sub(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "mul(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 28
				, "value": "mul(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "div(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 31
				, "value": "div(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "min(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 34
				, "value": "min(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "max(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 37
				, "value": "max(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "ceq(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 40
				, "value": "ceq(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "dot(a: vec2d, b: vec2d): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/math/Vector2d.ci"
				, "line": 43
				, "value": "dot(a: vec2d, b: vec2d): float64"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 4
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 15
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 25
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 36
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 46
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 61
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 73
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 88
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 92
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 93
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 94
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "equals(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 95
				, "value": "equals(str: char[*], with: char[*]): bool"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 98
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 112
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 127
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 144
				, "value": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 217
				, "value": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 219
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 221
				, "value": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 223
				, "value": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 225
				, "value": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 227
				, "value": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 229
				, "value": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 231
				, "value": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 234
				, "value": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "lib/std/string.ci"
				, "line": 259
				, "value": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "lib/std/string.ci"
				, "line": 262
				, "value": "append(output: char[], pos: int32, value: int32): int32"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "test/test.ci"
			, "line": 5
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/test.ci"
				, "line": 5
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 9
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 10
				, "value": "emitDivI32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 14
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/emit.ci"
				, "line": 15
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 17
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 18
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/emit.ci"
				, "line": 19
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/emit.ci"
				, "line": 20
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang/emit.ci"
				, "line": 23
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "max(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "max(a: int32, b: int32): int32"
			}, {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 10
				, "value": "i3"
			}, {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 11
				, "value": "i6"
			}, {
				"": "i2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 12
				, "value": "i2"
			}, {
				"": "i8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 13
				, "value": "i8"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 15
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 16
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 19
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 20
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 21
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 23
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 24
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 25
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 27
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 28
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 29
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 31
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 32
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 33
				, "value": "min2Xpr"
			}, {
				"": "max2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 35
				, "value": "max2Val"
			}, {
				"": "max2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 36
				, "value": "max2Var"
			}, {
				"": "max2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 37
				, "value": "max2Xpr"
			}, {
				"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 41
				, "value": "sumRlVal"
			}, {
				"": "sumLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 42
				, "value": "sumLrVal"
			}, {
				"": "sumRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 43
				, "value": "sumRlVar"
			}, {
				"": "sumLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 44
				, "value": "sumLrVar"
			}, {
				"": "sumRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 45
				, "value": "sumRlXpr"
			}, {
				"": "sumLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 46
				, "value": "sumLrXpr"
			}, {
				"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 50
				, "value": "anyRlVal"
			}, {
				"": "anyLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 51
				, "value": "anyLrVal"
			}, {
				"": "anyRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 52
				, "value": "anyRlVar"
			}, {
				"": "anyLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 53
				, "value": "anyLrVar"
			}, {
				"": "anyRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 54
				, "value": "anyRlXpr"
			}, {
				"": "anyLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 55
				, "value": "anyLrXpr"
			}, {
				"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 59
				, "value": "minRlVal"
			}, {
				"": "minLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 60
				, "value": "minLrVal"
			}, {
				"": "minRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 61
				, "value": "minRlVar"
			}, {
				"": "minLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 62
				, "value": "minLrVar"
			}, {
				"": "minRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 63
				, "value": "minRlXpr"
			}, {
				"": "minLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 64
				, "value": "minLrXpr"
			}, {
				"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 68
				, "value": "maxRlVal"
			}, {
				"": "maxLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 69
				, "value": "maxLrVal"
			}, {
				"": "maxRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 70
				, "value": "maxRlVar"
			}, {
				"": "maxLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 71
				, "value": "maxLrVar"
			}, {
				"": "maxRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 72
				, "value": "maxRlXpr"
			}, {
				"": "maxLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/inlineMacros.ci"
				, "line": 73
				, "value": "maxLrXpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/overload.inline.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/overload.inline.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "test/lang/overload.inline.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "test/lang/overload.inline.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/initByRef.ci"
				, "line": 3
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/initByRef.ci"
					, "line": 3
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "test/lang/initByRef.ci"
						, "line": 3
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "test/lang/initByRef.ci"
							, "line": 3
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "test/lang/initByRef.ci"
								, "line": 3
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang/initByRef.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/initByRef.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang/initByRef.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/initByRef.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "test/lang/initByRef.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/initByRef.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/initByRef.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "test/lang/initByRef.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/initByRef.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 4
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 7
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 12
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 15
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 18
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 21
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 24
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 27
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/function.ci"
				, "line": 30
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 33
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/function.ci"
				, "line": 38
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/function.ci"
				, "line": 46
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/std/number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/std/number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "testSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 37
				, "value": "testSin_f64"
			}, {
				"": "testCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 38
				, "value": "testCos_f64"
			}, {
				"": "testTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 39
				, "value": "testTan_f64"
			}, {
				"": "testLog_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 40
				, "value": "testLog_f64"
			}, {
				"": "testExp_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 41
				, "value": "testExp_f64"
			}, {
				"": "testPow_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 42
				, "value": "testPow_f64"
			}, {
				"": "testSqrt_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 43
				, "value": "testSqrt_f64"
			}, {
				"": "testAtan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/number.ci"
				, "line": 44
				, "value": "testAtan_f64"
			}, {
				"": "testSin_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 46
				, "value": "testSin_f32"
			}, {
				"": "testCos_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 47
				, "value": "testCos_f32"
			}, {
				"": "testTan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 48
				, "value": "testTan_f32"
			}, {
				"": "testLog_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 49
				, "value": "testLog_f32"
			}, {
				"": "testExp_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 50
				, "value": "testExp_f32"
			}, {
				"": "testPow_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 51
				, "value": "testPow_f32"
			}, {
				"": "testSqrt_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 52
				, "value": "testSqrt_f32"
			}, {
				"": "testAtan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/number.ci"
				, "line": 53
				, "value": "testAtan_f32"
			}, {
				"": "testPopulation_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 55
				, "value": "testPopulation_u32"
			}, {
				"": "testSwapBits_u32"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/std/number.ci"
				, "line": 56
				, "value": "testSwapBits_u32"
			}, {
				"": "testBitScanReverse_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 57
				, "value": "testBitScanReverse_u32"
			}, {
				"": "testBitScanForward_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 58
				, "value": "testBitScanForward_u32"
			}, {
				"": "testHighBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 59
				, "value": "testHighBit_u32"
			}, {
				"": "testLowBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 60
				, "value": "testLowBit_u32"
			}, {
				"": "testZeroExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 62
				, "value": "testZeroExtend_u32"
			}, {
				"": "testSignExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 63
				, "value": "testSignExtend_u32"
			}, {
				"": "testZeroExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 65
				, "value": "testZeroExtend_u64"
			}, {
				"": "testSignExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/number.ci"
				, "line": 66
				, "value": "testSignExtend_u64"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/std/memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/std/memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/std/memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/std/memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/std/memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/std/memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/std/memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/std/memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/std/memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/std/memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/std/tryExec.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/std/tryExec.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/std/tryExec.ci"
				, "line": 19
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/std/tryExec.ci"
				, "line": 23
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/std/tryExec.ci"
				, "line": 37
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/std/tryExec.ci"
				, "line": 42
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 46
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 47
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 48
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 49
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 50
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 51
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/std/tryExec.ci"
				, "line": 52
				, "value": "tryExecErr6"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 44
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/array.ci"
					, "line": 44
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "test/lang/array.ci"
						, "line": 44
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "test/lang/array.ci"
							, "line": 44
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "test/lang/array.ci"
								, "line": 44
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang/array.ci"
						, "line": 44
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/array.ci"
					, "line": 44
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang/array.ci"
						, "line": 45
						, "value": "integer"
					}]
				}
			}, {
				"": "arrFixedNoInit"
				, "kind": ".variable"
				, "type": "int64[7]"
				, "file": "test/lang/array.ci"
				, "line": 49
				, "value": "arrFixedNoInit"
			}, {
				"": "arrArrayNoInit"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 50
				, "value": "arrArrayNoInit"
			}, {
				"": "arrSliceNoInit"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 51
				, "value": "arrSliceNoInit"
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 54
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 54
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 54
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/array.ci"
					, "line": 54
					, "stmt": [{
						"": "arrFixedNoInit[i] := (42 + i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 55
					}]
				}
			}, {
				"": "arrArrayInitNull"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 59
				, "value": "arrArrayInitNull"
			}, {
				"": "arrSliceInitNull"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 60
				, "value": "arrSliceInitNull"
			}, {
				"": "arrArrayInitFixed"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 63
				, "value": "arrArrayInitFixed"
			}, {
				"": "arrSliceInitFixed"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 64
				, "value": "arrSliceInitFixed"
			}, {
				"": "arrArrayInitSlice"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 67
				, "value": "arrArrayInitSlice"
			}, {
				"": "arrSliceInitSlice"
				, "kind": ".variable"
				, "type": "int64[]"
				, "file": "test/lang/array.ci"
				, "line": 68
				, "value": "arrSliceInitSlice"
			}, {
				"": "arrArrayInitPtr"
				, "kind": ".variable"
				, "type": "int64[*]"
				, "file": "test/lang/array.ci"
				, "line": 71
				, "value": "arrArrayInitPtr"
			}, {
				"": "strFixed"
				, "kind": ".variable"
				, "type": "char[7]"
				, "file": "test/lang/array.ci"
				, "line": 81
				, "value": "strFixed"
			}, {
				"": "pointer.copy(strFixed, pointer(\"string\"), 7);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 82
			}, {
				"": "debug(\"string as variant\", strFixed);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 83
			}, {
				"": "debug(\"string to variant\", variant(strFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 84
			}, {
				"": "strArray"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "test/lang/array.ci"
				, "line": 86
				, "value": "strArray"
			}, {
				"": "debug(\"string as variant\", strArray);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 87
			}, {
				"": "debug(\"string to variant\", variant(strArray));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 88
			}, {
				"": "strSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "test/lang/array.ci"
				, "line": 90
				, "value": "strSlice"
			}, {
				"": "debug(\"string as variant\", strSlice);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 91
			}, {
				"": "debug(\"string to variant\", variant(strSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 92
			}, {
				"": "assert(arrSliceNoInit.length >= (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 98
			}, {
				"": "assert(arrSliceInitNull.length == (0));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 99
			}, {
				"": "assert(arrFixedNoInit[0] == (42));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 101
			}, {
				"": "lenSlice(values: int64[]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 103
				, "value": "lenSlice(values: int64[]): int32"
			}, {
				"": "nthFixed(idx: int32, values: int64[7]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 104
				, "value": "nthFixed(idx: int32, values: int64[7]): int64"
			}, {
				"": "nthArray(idx: int32, values: int64[*]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 105
				, "value": "nthArray(idx: int32, values: int64[*]): int64"
			}, {
				"": "nthSlice(idx: int32, values: int64[]): int64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/array.ci"
				, "line": 106
				, "value": "nthSlice(idx: int32, values: int64[]): int64"
			}, {
				"": "assertEq(7, arrFixedNoInit.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 108
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 109
			}, {
				"": "assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 110
			}, {
				"": "assertEq(0, lenSlice(null));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 112
			}, {
				"": "assertEq(0, lenSlice(arrSliceInitNull));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 113
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 114
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 115
			}, {
				"": "assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 116
			}, {
				"": "for (i; i < arrFixedNoInit.length; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/array.ci"
				, "line": 118
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "value": "i"
				}
				, "test": {
					"": "i < arrFixedNoInit.length"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "arrFixedNoInit.length"
						, "kind": "."
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "left": {
							"": "arrFixedNoInit"
							, "kind": ".variable"
							, "type": "int64[7]"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "arrFixedNoInit"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "length"
						}
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/array.ci"
						, "line": 118
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/array.ci"
							, "line": 118
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/array.ci"
					, "line": 118
					, "stmt": [{
						"": "expected"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "test/lang/array.ci"
						, "line": 119
						, "value": "expected"
					}, {
						"": "assert(expected == arrFixedNoInit[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 120
					}, {
						"": "assert(expected == arrArrayInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 121
					}, {
						"": "assert(expected == arrSliceInitFixed[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 122
					}, {
						"": "assert(expected == nthFixed(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 124
					}, {
						"": "assert(expected == nthFixed(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 125
					}, {
						"": "assert(expected == nthFixed(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 126
					}, {
						"": "assert(expected == nthArray(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 128
					}, {
						"": "assert(expected == nthArray(i, arrArrayInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 129
					}, {
						"": "assert(expected == nthArray(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 130
					}, {
						"": "assert(expected == nthSlice(i, arrFixedNoInit));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 132
					}, {
						"": "assert(expected == nthSlice(i, arrSliceInitFixed));"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 134
					}, {
						"": "assert(expected == arrSliceInitSlice[i]);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/array.ci"
						, "line": 136
					}]
				}
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/member.ci"
				, "line": 3
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "test/lang/member.ci"
				, "line": 53
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/method.ci"
				, "line": 4
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 57
				, "value": "globalFunction(this: RecordMethodTest, x: int32): void"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "test/lang/method.ci"
				, "line": 62
				, "value": "recordMethodTest"
			}, {
				"": "recordMethodTest.staticMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 78
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 79
			}, {
				"": "staticMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 84
				, "value": "staticMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "virtualMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "test/lang/method.ci"
				, "line": 90
				, "value": "virtualMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "staticMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 97
			}, {
				"": "virtualMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 98
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 101
			}, {
				"": "RecordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 102
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "test/lang/method.ci"
				, "line": 103
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang/recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang/recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "test/lang/recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang/recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "test/lang/recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "test/lang/useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "test/lang/useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "test/lang/useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "test/lang/useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/lang/useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/lang/useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "test/lang/useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/lang/useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementIf.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementIf.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "test/lang/statementIf.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementIf.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "test/lang/statementIf.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "test/lang/statementIf.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "test/lang/statementIf.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "test/lang/statementIf.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang/statementIf.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "test/lang/statementIf.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "test/lang/statementIf.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "test/lang/statementIf.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "test/lang/statementIf.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "test/lang/statementIf.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "test/lang/statementIf.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang/statementIf.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "test/lang/statementIf.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "test/lang/statementIf.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "test/lang/statementIf.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "test/lang/statementIf.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "test/lang/statementIf.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "test/lang/statementIf.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang/statementIf.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "test/lang/statementIf.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "test/lang/statementIf.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "test/lang/statementIf.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "test/lang/statementIf.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "test/lang/statementIf.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "test/lang/statementIf.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang/statementIf.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "test/lang/statementIf.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "test/lang/statementIf.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "test/lang/statementIf.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "test/lang/statementIf.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang/statementIf.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "test/lang/statementIf.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "test/lang/statementIf.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 73
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 73
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "test/lang/statementIf.ci"
						, "line": 73
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "test/lang/statementIf.ci"
							, "line": 73
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "test/lang/statementIf.ci"
								, "line": 73
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "test/lang/statementIf.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "test/lang/statementIf.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "test/lang/statementIf.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "test/lang/statementIf.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "test/lang/statementIf.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "test/lang/statementIf.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementIf.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementIf.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "test/lang/statementFor.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "test/lang/statementFor.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang/statementFor.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "test/lang/statementFor.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "test/lang/statementFor.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "test/lang/statementFor.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "test/lang/statementFor.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "test/lang/statementFor.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "test/lang/statementFor.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "test/lang/statementFor.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "test/lang/statementFor.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "test/lang/statementFor.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "test/lang/statementFor.ci"
						, "line": 28
					}]
				}
			}, {
				"": "testMathFloor_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 3
				, "value": "testMathFloor_1"
			}, {
				"": "testMathFloor_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 4
				, "value": "testMathFloor_2"
			}, {
				"": "testMathFloor_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 5
				, "value": "testMathFloor_3"
			}, {
				"": "testMathFloor_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 6
				, "value": "testMathFloor_4"
			}, {
				"": "testMathFloor_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 7
				, "value": "testMathFloor_5"
			}, {
				"": "testMathFloor_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 8
				, "value": "testMathFloor_6"
			}, {
				"": "testMathSign_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 10
				, "value": "testMathSign_1F"
			}, {
				"": "testMathSign_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 11
				, "value": "testMathSign_2F"
			}, {
				"": "testMathSign_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 12
				, "value": "testMathSign_3F"
			}, {
				"": "testMathSign_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 13
				, "value": "testMathSign_1f"
			}, {
				"": "testMathSign_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 14
				, "value": "testMathSign_2f"
			}, {
				"": "testMathSign_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 15
				, "value": "testMathSign_3f"
			}, {
				"": "testMathAbs_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 17
				, "value": "testMathAbs_1F"
			}, {
				"": "testMathAbs_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 18
				, "value": "testMathAbs_2F"
			}, {
				"": "testMathAbs_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 19
				, "value": "testMathAbs_3F"
			}, {
				"": "testMathAbs_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 20
				, "value": "testMathAbs_1f"
			}, {
				"": "testMathAbs_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 21
				, "value": "testMathAbs_2f"
			}, {
				"": "testMathAbs_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 22
				, "value": "testMathAbs_3f"
			}, {
				"": "testMathMin_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 24
				, "value": "testMathMin_1f"
			}, {
				"": "testMathMax_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 25
				, "value": "testMathMax_2f"
			}, {
				"": "testMathMin_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 26
				, "value": "testMathMin_1F"
			}, {
				"": "testMathMax_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 27
				, "value": "testMathMax_2F"
			}, {
				"": "testMathClamp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 29
				, "value": "testMathClamp_1f"
			}, {
				"": "testMathClamp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 30
				, "value": "testMathClamp_1F"
			}, {
				"": "testMathLerp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 32
				, "value": "testMathLerp_1f"
			}, {
				"": "testMathLerp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 33
				, "value": "testMathLerp_1F"
			}, {
				"": "testMathSmooth_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 35
				, "value": "testMathSmooth_1f"
			}, {
				"": "testMathSmooth_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 36
				, "value": "testMathSmooth_1F"
			}, {
				"": "testMathMin_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 38
				, "value": "testMathMin_nan"
			}, {
				"": "testMathMin_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 39
				, "value": "testMathMin_1"
			}, {
				"": "testMathMax_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 40
				, "value": "testMathMax_nan"
			}, {
				"": "testMathMax_9"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 41
				, "value": "testMathMax_9"
			}, {
				"": "testMathSum_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 43
				, "value": "testMathSum_0"
			}, {
				"": "testMathSum_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 44
				, "value": "testMathSum_1"
			}, {
				"": "testMathSum_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 45
				, "value": "testMathSum_3"
			}, {
				"": "testMathSum_55"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 46
				, "value": "testMathSum_55"
			}, {
				"": "testMathEval_x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 48
				, "value": "testMathEval_x"
			}, {
				"": "testMathEval_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 49
				, "value": "testMathEval_0"
			}, {
				"": "testMathEval_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 50
				, "value": "testMathEval_1"
			}, {
				"": "testMathEval_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 51
				, "value": "testMathEval_2"
			}, {
				"": "testMathEval_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 52
				, "value": "testMathEval_3"
			}, {
				"": "testMathEval_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 53
				, "value": "testMathEval_4"
			}, {
				"": "testMathEval_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 54
				, "value": "testMathEval_5"
			}, {
				"": "testMathEval_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 55
				, "value": "testMathEval_6"
			}, {
				"": "testMathSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 57
				, "value": "testMathSin_f64"
			}, {
				"": "testMathCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 58
				, "value": "testMathCos_f64"
			}, {
				"": "testMathTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 59
				, "value": "testMathTan_f64"
			}, {
				"": "testMathSinh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 60
				, "value": "testMathSinh_f64"
			}, {
				"": "testMathCosh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 61
				, "value": "testMathCosh_f64"
			}, {
				"": "testMathAsin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 63
				, "value": "testMathAsin_f64"
			}, {
				"": "testMathAcos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 64
				, "value": "testMathAcos_f64"
			}, {
				"": "testMathCmp_f32"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/std/test.math.ci"
				, "line": 67
				, "value": "testMathCmp_f32"
			}, {
				"": "testMathCmp_f64"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "test/std/test.math.ci"
				, "line": 68
				, "value": "testMathCmp_f64"
			}, {
				"": "testMathAbsMod_f64_0a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 70
				, "value": "testMathAbsMod_f64_0a"
			}, {
				"": "testMathAbsMod_f64_0b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 71
				, "value": "testMathAbsMod_f64_0b"
			}, {
				"": "testMathAbsMod_f64_0c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 72
				, "value": "testMathAbsMod_f64_0c"
			}, {
				"": "testMathAbsMod_f64_9a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 74
				, "value": "testMathAbsMod_f64_9a"
			}, {
				"": "testMathAbsMod_f64_9b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 75
				, "value": "testMathAbsMod_f64_9b"
			}, {
				"": "testMathAbsMod_f64_9c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 76
				, "value": "testMathAbsMod_f64_9c"
			}, {
				"": "testMathAbsMod_f64_9d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 77
				, "value": "testMathAbsMod_f64_9d"
			}, {
				"": "testMathAbsMod_f64_8a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 79
				, "value": "testMathAbsMod_f64_8a"
			}, {
				"": "testMathAbsMod_f64_8b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 80
				, "value": "testMathAbsMod_f64_8b"
			}, {
				"": "testMathAbsMod_f64_8c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 81
				, "value": "testMathAbsMod_f64_8c"
			}, {
				"": "testMathAbsMod_f64_8d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "test/std/test.math.ci"
				, "line": 82
				, "value": "testMathAbsMod_f64_8d"
			}, {
				"": "testMathAbsMod_f32_0a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 84
				, "value": "testMathAbsMod_f32_0a"
			}, {
				"": "testMathAbsMod_f32_0b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 85
				, "value": "testMathAbsMod_f32_0b"
			}, {
				"": "testMathAbsMod_f32_0c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 86
				, "value": "testMathAbsMod_f32_0c"
			}, {
				"": "testMathAbsMod_f32_9a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 88
				, "value": "testMathAbsMod_f32_9a"
			}, {
				"": "testMathAbsMod_f32_9b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 89
				, "value": "testMathAbsMod_f32_9b"
			}, {
				"": "testMathAbsMod_f32_9c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 90
				, "value": "testMathAbsMod_f32_9c"
			}, {
				"": "testMathAbsMod_f32_9d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 91
				, "value": "testMathAbsMod_f32_9d"
			}, {
				"": "testMathAbsMod_f32_8a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 93
				, "value": "testMathAbsMod_f32_8a"
			}, {
				"": "testMathAbsMod_f32_8b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 94
				, "value": "testMathAbsMod_f32_8b"
			}, {
				"": "testMathAbsMod_f32_8c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 95
				, "value": "testMathAbsMod_f32_8c"
			}, {
				"": "testMathAbsMod_f32_8d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "test/std/test.math.ci"
				, "line": 96
				, "value": "testMathAbsMod_f32_8d"
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368572
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368577
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 368582
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368586
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368591
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 368596
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368600
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368601
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 368606
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368607
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368608
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368612
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368613
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 368618
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368619
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368620
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368624
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368625
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 368629
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 368630
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368634
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368639
		, "size": 4
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368643
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368648
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368652
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368656
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368660
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368661
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368665
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368670
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 368675
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368676
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368680
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368685
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 368689
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 368694
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 368695
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 368699
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 368708
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368709
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 368713
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 368722
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368726
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 368731
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 368736
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368740
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368745
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368749
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368754
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368758
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368763
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368767
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368772
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368776
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368777
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368781
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368782
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 368786
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368787
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368791
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368796
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368800
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368804
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368808
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368812
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368816
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368820
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368824
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368829
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368833
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368837
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368841
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368845
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368846
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368850
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368854
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368858
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368862
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 368866
		, "size": 1
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368867
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368871
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368875
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368880
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368882
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368886
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368888
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368892
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368897
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368899
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368903
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368907
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368909
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368913
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368915
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368919
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368923
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368925
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368929
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368933
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368937
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368939
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368943
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368945
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 368949
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368953
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368957
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 368959
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 368963
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368967
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 368972
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368977
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368979
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 368981
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 368982
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368986
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 368988
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 368992
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 368994
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 368996
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369000
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369004
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369008
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369012
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369014
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369016
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369017
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369021
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369023
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369027
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369029
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369031
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369035
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369039
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369043
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369047
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369051
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369055
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369057
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369059
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369060
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369064
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369066
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369070
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369072
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369074
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369078
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369082
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369086
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369091
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369096
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369098
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 369100
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369101
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369105
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369107
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369111
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369113
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369115
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369119
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369123
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369127
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369131
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369133
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 369135
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369136
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369140
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369142
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369146
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369148
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369150
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369154
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369158
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369162
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369166
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369170
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369174
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369176
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 369178
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369179
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369183
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369185
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369189
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369191
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369193
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369197
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369201
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369205
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369210
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369215
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369220
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369224
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369225
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369226
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369230
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369235
		, "size": 4
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369239
		, "size": 4
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369243
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369247
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369251
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369255
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369259
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369263
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369267
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369268
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369269
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369270
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369274
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369278
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369282
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369283
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369287
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369288
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369292
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369293
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369297
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369301
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369305
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369309
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369313
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369317
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369321
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369325
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369329
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369330
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369331
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369332
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369336
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369340
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369344
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369348
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369352
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369356
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369357
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369361
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369365
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369366
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369370
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 369374
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369375
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369379
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369383
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369388
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369390
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369394
		, "size": 2
	}, {
		"instruction": "jmp +47"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369396
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369400
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369405
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369407
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369411
		, "size": 2
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369413
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369417
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369422
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369424
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369428
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369430
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369434
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369439
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369441
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369443
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369445
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369449
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369454
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369456
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369460
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369462
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369466
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369471
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369473
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369475
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369479
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369481
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369485
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369490
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369492
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369494
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369498
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369500
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369504
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369509
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369511
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369515
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369519
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369521
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369525
		, "size": 2
	}, {
		"instruction": "jmp +44"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369527
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369531
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369535
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369537
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369541
		, "size": 2
	}, {
		"instruction": "jmp +26"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369543
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369547
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369551
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369553
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369557
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369559
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369563
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369567
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369569
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369571
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369573
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369577
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369581
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369583
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369587
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369589
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369593
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369597
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369599
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369601
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369605
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369607
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369611
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369615
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369617
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369619
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369623
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369625
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369629
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369633
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369635
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369639
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369643
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369647
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369649
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369653
		, "size": 2
	}, {
		"instruction": "jmp +56"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369655
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369659
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369663
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369667
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369669
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369673
		, "size": 2
	}, {
		"instruction": "jmp +34"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369675
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369679
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369683
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369687
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369689
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369693
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369695
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369699
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369703
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369707
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369709
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369711
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369713
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369717
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369721
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369725
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369729
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369731
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369735
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369737
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369741
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369745
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369749
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369751
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369753
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369757
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369759
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369763
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369767
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369771
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369773
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369775
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369779
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369781
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369785
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369789
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369793
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 369795
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369799
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369803
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369808
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369813
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369818
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369823
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369825
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369827
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369828
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369832
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369834
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369838
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369840
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369842
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369846
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369848
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369850
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369851
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369855
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369857
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369861
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369863
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369865
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369869
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369871
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369873
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369874
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369878
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369880
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369884
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369886
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369888
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369892
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369896
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369901
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369906
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369908
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369910
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369911
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369915
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369917
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369921
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369923
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369925
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369929
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369934
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369936
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369938
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369939
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369943
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369945
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369949
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369951
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369953
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 369957
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369962
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369964
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 369966
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 369967
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369971
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 369973
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 369977
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 369979
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 369981
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 369985
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369989
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369993
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 369997
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370001
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370005
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370007
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370009
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370010
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370014
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370016
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370020
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370022
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370024
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370028
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370030
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370032
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370033
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370037
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370039
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370043
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370045
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370047
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370051
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370053
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370055
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370056
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370060
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370062
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370066
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370068
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370070
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370074
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370078
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370082
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370086
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370088
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370090
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370091
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370095
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370097
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370101
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370103
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370105
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370109
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370113
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370115
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370117
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370118
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370122
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370124
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370128
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370130
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370132
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370136
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370140
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370142
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370144
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370145
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370149
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370151
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370155
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370157
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370159
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370163
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370167
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370171
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370175
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370179
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370183
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370187
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370191
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370195
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370199
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370201
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370203
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370204
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370208
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370210
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370214
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370216
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370218
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370222
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370224
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370226
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370227
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370231
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370233
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370237
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370239
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370241
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370245
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370247
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370249
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370250
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370254
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370256
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370260
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370262
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370264
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370268
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370272
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370276
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370280
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370284
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370288
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370292
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370294
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370296
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370297
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370301
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370303
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370307
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370309
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370311
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370315
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370319
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370323
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370325
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370327
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370328
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370332
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370334
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370338
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370340
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370342
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370346
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370350
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370354
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370356
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 370358
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370359
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370363
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370365
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370369
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370371
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370373
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370377
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370381
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370385
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370390
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370395
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370400
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370405
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370407
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370409
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370410
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370414
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370416
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370420
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370422
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370424
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370428
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370430
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370432
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370433
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370437
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370439
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370443
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370445
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370447
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370451
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370453
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370455
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370456
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370460
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370462
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370466
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370468
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370470
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370474
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370478
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370483
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370488
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370490
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370492
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370493
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370497
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370499
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370503
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370505
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370507
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370511
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370516
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370518
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370520
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370521
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370525
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370527
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370531
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370533
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370535
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 370539
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370544
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370546
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370548
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370549
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370553
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370555
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370559
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370561
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370563
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370567
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370571
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370575
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370579
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370583
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370587
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370589
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370591
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370592
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370596
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370598
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370602
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370604
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370606
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370610
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370612
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370614
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370615
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370619
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370621
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370625
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370627
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370629
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370633
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370635
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370637
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370638
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370642
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370644
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370648
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370650
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370652
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370656
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370660
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370664
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370668
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370670
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370672
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370673
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370677
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370679
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370683
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370685
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370687
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370691
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370695
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370697
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370699
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370700
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370704
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370706
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370710
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370712
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370714
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370718
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370722
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370724
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370726
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370727
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370731
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370733
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370737
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370739
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370741
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370745
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370749
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370753
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370757
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370761
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370765
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370769
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370773
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370777
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370781
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370783
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370785
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370786
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370790
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370792
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370796
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370798
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370800
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370804
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370806
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370808
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370809
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370813
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370815
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370819
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370821
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370823
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370827
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370829
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370831
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370832
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370836
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370838
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370842
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370844
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370846
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370850
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370854
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370858
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370862
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370866
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370870
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370874
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370876
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370878
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370879
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370883
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370885
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370889
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370891
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370893
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370897
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370901
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370905
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370907
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370909
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370910
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370914
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370916
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370920
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370922
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370924
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 370928
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370932
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370936
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370938
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 370940
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 370941
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370945
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 370947
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 370951
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 370953
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 370955
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 370959
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370963
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 370967
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370972
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 370976
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370981
		, "size": 4
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 370985
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370990
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 370994
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 370999
		, "size": 4
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 371003
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371008
		, "size": 4
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 371012
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371021
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 371025
		, "size": 4
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 371029
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 371038
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 371039
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 371048
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371049
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 371053
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371062
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371066
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371071
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371075
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371080
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371084
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371089
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371094
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371098
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 371102
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371103
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371107
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371111
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371115
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371119
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371123
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371128
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371132
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371137
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371141
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371146
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371151
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371155
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371160
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371164
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371169
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371173
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371178
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371182
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371187
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371191
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371196
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371201
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371205
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371210
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 371214
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371218
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 371222
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371226
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371230
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371234
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371238
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371242
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 371246
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371250
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371254
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371258
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371262
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371267
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371271
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371276
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371280
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371285
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371289
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371294
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371298
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371303
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371307
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371312
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371316
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371321
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371325
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371330
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371334
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371339
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371343
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371348
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371352
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371357
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371361
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371366
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371370
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371375
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371379
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371384
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371388
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371393
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371397
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371402
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371406
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371411
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371415
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371420
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371424
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371429
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371434
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371438
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371443
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371448
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371452
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371457
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371462
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371466
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371471
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371476
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371480
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371485
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371490
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371494
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371499
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371504
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371508
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371513
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371518
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371522
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371527
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371532
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371536
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371541
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371546
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371550
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371555
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371560
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371564
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371569
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371574
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371578
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371583
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371588
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371592
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371597
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371602
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371606
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371611
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371616
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371620
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371625
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371630
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371634
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371639
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371644
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371648
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371653
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371658
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371662
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371667
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371672
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371676
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371681
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371685
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371690
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371694
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371699
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371703
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371708
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371712
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371717
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371721
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371726
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371730
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371735
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371739
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371744
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371748
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371753
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371757
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371762
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371766
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371771
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371775
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371780
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371784
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371789
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371793
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371798
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371802
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371807
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371811
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371816
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371820
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371825
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371829
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371834
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371838
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371843
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371847
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371852
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371857
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371861
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371866
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371870
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371875
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371879
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371884
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 371888
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371892
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371896
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 371900
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371901
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371906
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371911
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 371916
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371917
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371921
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371925
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371930
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 371934
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371935
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371940
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371945
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 371949
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371950
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371954
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 371958
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371963
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 371967
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371968
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 371973
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371978
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 371982
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 371983
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371987
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 371991
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 371995
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 371999
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372000
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372005
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372010
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 372014
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 372015
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372019
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372023
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372024
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372029
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 372034
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 372035
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372039
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372043
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372047
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372051
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372055
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372059
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372063
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372067
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372071
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372075
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372079
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372083
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372087
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372091
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372095
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372099
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372103
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372107
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372111
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372115
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372119
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372123
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372127
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372131
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372135
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372139
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372143
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372147
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372151
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372155
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372159
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372163
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372167
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372171
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372175
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372179
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372183
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 372187
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372192
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372196
		, "size": 4
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372200
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372204
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372208
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372212
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372216
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372217
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372221
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372225
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372229
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372230
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372234
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372238
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372242
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372246
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372250
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372254
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372258
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372262
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372266
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372270
		, "size": 4
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372274
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372278
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372282
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372286
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372290
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372291
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372295
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372299
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372303
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372304
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372308
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372312
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372316
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372320
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372324
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372328
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372332
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372336
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372340
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372344
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372348
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372352
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372353
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372357
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372361
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372365
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372366
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372370
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372374
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372378
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372382
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372386
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372390
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372391
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372395
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 372399
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x22"
		, "offs": 372403
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372404
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372408
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372417
		, "size": 4
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372421
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372430
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372434
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 372438
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372439
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372443
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 372447
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372448
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372452
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372457
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372459
		, "size": 4
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372463
		, "size": 5
	}, {
		"instruction": "b32.shl 0x002"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372468
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372470
		, "size": 4
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372474
		, "size": 5
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372479
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372481
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372485
		, "size": 4
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372489
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372491
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 372496
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372497
		, "size": 4
	}, {
		"instruction": "b32.shl 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372501
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372503
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 372508
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 372509
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372510
		, "size": 4
	}, {
		"instruction": "b32.sar 0x003"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372514
		, "size": 2
	}, {
		"instruction": "b32.and 0x01f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372516
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 372518
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372519
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372523
		, "size": 4
	}, {
		"instruction": "b32.shl 0x010"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372527
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372529
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 372534
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372535
		, "size": 4
	}, {
		"instruction": "b32.shl 0x008"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372539
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372541
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 372546
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 372547
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372548
		, "size": 4
	}, {
		"instruction": "b32.and 0x0ff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 372552
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 372554
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372555
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372559
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372563
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372568
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372573
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372577
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372581
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372585
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372590
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372595
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372599
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372603
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372607
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372608
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372613
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372617
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372621
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372625
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372630
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372635
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372639
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372643
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372647
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372652
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372657
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372661
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372665
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372669
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372670
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372675
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372679
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372683
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372687
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372692
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372697
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372701
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372705
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372709
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372714
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372719
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372723
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372727
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372731
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372732
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372737
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372741
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372745
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372749
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372754
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372759
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372763
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372767
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372771
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372776
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372781
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372785
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372789
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 372793
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 372794
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372799
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372803
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372807
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372811
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 372820
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372821
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372825
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372829
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372833
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 372842
		, "size": 1
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372843
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372847
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372851
		, "size": 4
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372855
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 372864
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372865
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372869
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372873
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372877
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 372881
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372882
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 372886
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372887
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372891
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372895
		, "size": 9
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372904
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372908
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372912
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372916
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 372920
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372921
		, "size": 9
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372930
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372934
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372938
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372942
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 372946
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372947
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372951
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 372955
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 372959
		, "size": 9
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372968
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 372972
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372976
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 372980
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 372985
		, "size": 1
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 372986
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 372990
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 372994
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 372998
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 373003
		, "size": 1
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373004
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373008
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373012
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 373016
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 373021
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373022
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373026
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373030
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373034
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 373038
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373039
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 373043
		, "size": 1
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373044
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373048
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 373052
		, "size": 5
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373057
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373061
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373065
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373069
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 373073
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 373074
		, "size": 5
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373079
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373083
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373087
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373091
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 373095
		, "size": 1
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373096
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373100
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373104
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 373108
		, "size": 5
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373113
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373117
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373121
		, "size": 4
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373125
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373129
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373133
		, "size": 4
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373137
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373141
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373145
		, "size": 4
	}, {
		"instruction": "nfc(26)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373149
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373153
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373157
		, "size": 4
	}, {
		"instruction": "nfc(27)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373161
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373165
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373169
		, "size": 4
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373173
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373177
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373181
		, "size": 4
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373185
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373189
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373193
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373197
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373198
		, "size": 5
	}, {
		"instruction": "nfc(22)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373203
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373207
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373211
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373215
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373216
		, "size": 5
	}, {
		"instruction": "nfc(23)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373221
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373225
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373229
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 373233
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373234
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373235
		, "size": 5
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373240
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 373244
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373245
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373249
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 373253
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373254
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373255
		, "size": 5
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373260
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 373264
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373265
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373269
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373274
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373279
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373283
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373287
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373292
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373297
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373301
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373305
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373310
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373315
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373319
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373323
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373328
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373333
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373337
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 373341
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 373350
		, "size": 4
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 373354
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 373363
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373367
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373372
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373377
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373381
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373385
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373390
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373395
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373399
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373403
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373408
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373413
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373417
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373421
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373426
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373431
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373435
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373439
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373444
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373449
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373453
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373457
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373462
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373467
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373471
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373475
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373480
		, "size": 5
	}, {
		"instruction": "nfc(10)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 373485
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373489
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373493
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373498
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373502
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373503
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 373508
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373512
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373517
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373521
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373526
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 373531
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373535
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373539
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 373543
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 373547
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373551
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373555
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373559
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373564
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373568
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373573
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 373578
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373582
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373583
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373587
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373592
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373596
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373601
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373605
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373610
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373614
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373619
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373623
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373628
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373632
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373637
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373641
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373646
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373650
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373655
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373659
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373664
		, "size": 4
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373668
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373673
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373677
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373682
		, "size": 4
	}, {
		"instruction": "load.c32 15"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373686
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373691
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373695
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373700
		, "size": 4
	}, {
		"instruction": "load.c32 17"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373704
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373709
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373713
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373718
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373722
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373727
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 373731
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373735
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373739
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373744
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373748
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373749
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373754
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373755
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373756
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373761
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373762
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373763
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373768
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373769
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373770
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373775
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373776
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373781
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373786
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373787
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373788
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373793
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373794
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373799
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373804
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373805
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373810
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373815
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373816
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373821
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373826
		, "size": 1
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373827
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373832
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373836
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373837
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373842
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 373843
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373844
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373849
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373850
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373855
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373860
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373861
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 373866
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373870
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373875
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373880
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 373881
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373886
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373891
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373892
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373897
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373898
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373903
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 373904
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373905
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373910
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373911
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373916
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373917
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373922
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 373923
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373924
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373929
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373930
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373935
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373936
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373941
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 373942
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373943
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373948
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373949
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373954
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 373955
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373956
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373961
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373962
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373967
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373968
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373973
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 373974
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373975
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 373980
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373981
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373986
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373987
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 373992
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 373993
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 373994
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 373995
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374000
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374001
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374006
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374007
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374012
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 374013
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374014
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374019
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374020
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374025
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374026
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374031
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 374032
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374033
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374034
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374039
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374040
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374045
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374046
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374051
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 374052
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374053
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374058
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374059
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374064
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374065
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374070
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 374071
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374072
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374073
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374078
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 374079
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374084
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374089
		, "size": 1
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 374090
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374095
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374100
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374101
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374106
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374107
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374112
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374113
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374118
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 374119
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374120
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374125
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374126
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374131
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 374132
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374133
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374138
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374139
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374144
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374145
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374150
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 374151
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374152
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374157
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374158
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374163
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374164
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374169
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 374170
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374171
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374176
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374177
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374182
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374183
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374188
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 374189
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374190
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374195
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374196
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374201
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374202
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374207
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 374208
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374209
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374214
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374215
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374220
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374221
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374226
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 374227
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374228
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374233
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374234
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374239
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374240
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374245
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 374246
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374247
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374252
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374253
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374258
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374259
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374264
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 374265
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374266
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374271
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374272
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374277
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374278
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374283
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 374284
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374285
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374290
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374291
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374296
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 374297
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 374301
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374302
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374307
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374308
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374313
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 374314
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 374318
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374319
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374324
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374325
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374330
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 374331
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374332
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374333
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374338
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374339
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374344
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374345
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374350
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 374351
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374352
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374357
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374358
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374363
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374364
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374369
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 374370
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374371
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374372
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374377
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374378
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374383
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374384
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374389
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 374390
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374391
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374396
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374397
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374402
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374403
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374408
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 374409
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374410
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374411
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374416
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374417
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374422
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374423
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374428
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 374429
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374430
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374435
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374436
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374441
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374442
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374447
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 374448
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374449
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374450
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374455
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 374456
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374461
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374466
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 374467
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374472
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374477
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374478
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374483
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374484
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374489
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374490
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374495
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 374496
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374497
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374502
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374503
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374508
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 374509
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374510
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374515
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374516
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374521
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374522
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374527
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 374528
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374529
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374534
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374535
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374540
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374541
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374546
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 374547
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374548
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374553
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374554
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374559
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374560
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374565
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 374566
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374567
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374572
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374573
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374578
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374579
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374584
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 374585
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374586
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374591
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374592
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374597
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374598
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374603
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 374604
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374605
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374610
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374611
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374616
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374617
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374622
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 374623
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374624
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374629
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374630
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374635
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374636
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374641
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 374642
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374643
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374648
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374649
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374654
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374655
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374660
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 374661
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374662
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374667
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374668
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374673
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 374674
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 374678
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374679
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374684
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374685
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374690
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 374691
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 374695
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374696
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374701
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374702
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374707
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 374708
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374709
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374710
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374715
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374716
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374721
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374722
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374727
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 374728
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374729
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374734
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374735
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374740
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374741
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374746
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 374747
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374748
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374749
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374754
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374755
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374760
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374761
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374766
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 374767
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374768
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374773
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374774
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374779
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374780
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374785
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 374786
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374787
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374788
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374793
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374794
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374799
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374800
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374805
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 374806
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374807
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374812
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374813
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374818
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374819
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374824
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 374825
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 374826
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374827
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374832
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 374833
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374838
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374843
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 374844
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374849
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374854
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374855
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374860
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374861
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374866
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374867
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374872
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 374873
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374874
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374879
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374880
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374885
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 374886
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374887
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374892
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374893
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374898
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374899
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374904
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 374905
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374906
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374911
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374912
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374917
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374918
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374923
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 374924
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374925
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374930
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374931
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374936
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374937
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374942
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 374943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374944
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374949
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374950
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374955
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374956
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374961
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 374962
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374963
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374968
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374969
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374974
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374975
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374980
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 374981
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374982
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 374987
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374988
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374993
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 374994
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 374999
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 375000
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375001
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375006
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375007
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375012
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375013
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375018
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 375019
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375020
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375025
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375026
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375031
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375032
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375037
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 375038
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375039
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375044
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375045
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375050
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375051
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 375055
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375056
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375061
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375062
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375067
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375068
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 375072
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375073
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375078
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375079
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375084
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 375085
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375086
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375087
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375092
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375093
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375098
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375099
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375104
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 375105
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375106
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375111
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375112
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375117
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375118
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375123
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 375124
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375125
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375126
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375131
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375132
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375137
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375138
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375143
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 375144
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375145
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375150
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375151
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375156
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375157
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375162
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 375163
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375164
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375165
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375170
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375171
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375176
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375177
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375182
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 375183
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375184
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375189
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375190
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375195
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375196
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x20"
		, "offs": 375201
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 375202
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375203
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375204
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375209
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375210
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375215
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375220
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375221
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375226
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375231
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375232
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375237
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375238
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375243
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375244
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375249
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 375250
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375251
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375256
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375257
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375262
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 375263
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375264
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375269
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375270
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375275
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375276
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375281
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 375282
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375283
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375288
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375289
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375294
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375295
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375300
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 375301
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375302
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375307
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375308
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375313
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375314
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375319
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 375320
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375321
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375326
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375327
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375332
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375333
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375338
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 375339
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375340
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375345
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375346
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375351
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375352
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375357
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 375358
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375359
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375364
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375365
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375370
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375371
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375376
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 375377
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375378
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375383
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375384
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375389
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375390
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375395
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 375396
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375397
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375402
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375403
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375408
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375409
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375414
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 375415
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375416
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375421
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375422
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375427
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375428
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 375432
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375433
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375438
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375439
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375444
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375445
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 375449
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375450
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375455
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375456
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375461
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 375462
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375463
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375464
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375469
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375470
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375475
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375476
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375481
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 375482
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375483
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375488
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375489
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375494
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375495
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375500
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 375501
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375502
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375503
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375508
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375509
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375514
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375515
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375520
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 375521
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375522
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375527
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375528
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375533
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375534
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375539
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 375540
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375541
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375542
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375547
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375548
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375553
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375554
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375559
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 375560
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375561
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375566
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375567
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375572
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375573
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375578
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 375579
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375580
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375581
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375586
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375587
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375592
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375597
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375598
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375603
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375608
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375609
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375614
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375615
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375620
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375621
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375626
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 375627
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375628
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375633
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375634
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375639
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 375640
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375641
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375646
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375647
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375652
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375653
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375658
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 375659
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375660
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375665
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375666
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375671
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375672
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375677
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 375678
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375679
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375684
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375685
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375690
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375691
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375696
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 375697
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375698
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375703
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375704
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375709
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375710
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375715
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 375716
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375717
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375723
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375728
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375729
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375734
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 375735
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375736
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375741
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375742
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375747
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375748
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375753
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 375754
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375755
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375760
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375761
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375766
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375767
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375772
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 375773
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375774
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375779
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375780
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375785
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375786
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375791
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 375792
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375793
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375798
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375799
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375804
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375805
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 375809
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375810
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375815
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375816
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375821
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375822
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 375826
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375827
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x26"
		, "offs": 375832
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375833
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375838
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 375839
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375840
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375841
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375846
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375847
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375852
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375853
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375858
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 375859
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375860
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375865
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375866
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375871
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375872
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375877
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 375878
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375879
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375880
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375885
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375886
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375891
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375892
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375897
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 375898
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375899
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375904
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375905
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375910
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375911
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375916
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 375917
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375918
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375919
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375924
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375925
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375930
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375931
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375936
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 375937
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375938
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375944
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375949
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375950
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x21"
		, "offs": 375955
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 375956
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 375957
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 375958
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 375963
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375964
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 375969
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 375973
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 375978
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375982
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 375986
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375990
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 375994
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 375995
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 375999
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 376003
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376004
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376008
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376012
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376016
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376017
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376021
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376025
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 376029
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376030
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376034
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376038
		, "size": 4
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 376042
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376043
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376047
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376051
		, "size": 4
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 376055
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376056
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376060
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376064
		, "size": 4
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 376068
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376069
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376073
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376077
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 376081
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376082
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376086
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376090
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 376094
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376095
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376099
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376103
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 376107
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376108
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376112
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376116
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 376120
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376121
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376125
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376129
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 376133
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376134
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376138
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 376142
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376143
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376144
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376149
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376150
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376154
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 376158
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376159
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376164
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376165
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376169
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 376173
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376174
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376175
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376180
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376181
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376185
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 376189
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376190
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376195
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376196
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376200
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 376204
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376205
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376206
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376211
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376212
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376216
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 376220
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376221
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376226
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376227
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376231
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 376235
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376236
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376237
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376242
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376243
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376248
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 376252
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376257
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376261
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376265
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376269
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 376273
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376274
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376278
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 376282
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376283
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376287
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376291
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 376295
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376296
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376300
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376304
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 376308
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376309
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376313
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376317
		, "size": 4
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 376321
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376322
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376326
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376330
		, "size": 4
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 376334
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376335
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376339
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376343
		, "size": 4
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 376347
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376348
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376352
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376356
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 376360
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376361
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376365
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376369
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 376373
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376374
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376378
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376382
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 376386
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376387
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376391
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376395
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 376399
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376400
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376404
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376408
		, "size": 4
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 376412
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 376413
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376417
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 376421
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376422
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376423
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376428
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376429
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376433
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 376437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376438
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376443
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376444
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376448
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 376452
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376453
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376454
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376459
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376460
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376464
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 376468
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376469
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376474
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376475
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376479
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 376483
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376484
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376485
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376490
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376491
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376495
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 376499
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376500
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376505
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376506
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376510
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 376514
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376515
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376516
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376521
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 376522
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376531
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 376535
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376544
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376548
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376552
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376556
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 376560
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376561
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376565
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 376569
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376570
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376574
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376578
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 376582
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376583
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376587
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376591
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 376595
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376596
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376600
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376604
		, "size": 4
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 376608
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376609
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376613
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376617
		, "size": 4
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 376621
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376622
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376626
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376630
		, "size": 4
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 376634
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376635
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376639
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376643
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 376647
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376648
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376652
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376656
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 376660
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376661
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376665
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376669
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 376673
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376674
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376678
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376682
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 376686
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376687
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376691
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376695
		, "size": 4
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 376699
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376700
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376704
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 376708
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376709
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376710
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376715
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376716
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376720
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 376724
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376725
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376730
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376731
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376735
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 376739
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376740
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376741
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376746
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376747
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376751
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 376755
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376756
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376761
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376762
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376766
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 376770
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376771
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376772
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376777
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376778
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376782
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 376786
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376787
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376792
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376793
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376797
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 376801
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376802
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376803
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 376808
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 376809
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376818
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 376822
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376831
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376835
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376839
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376843
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 376847
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376848
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376852
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 376856
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376857
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376861
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376865
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 376869
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376870
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376874
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376878
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 376882
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376883
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376887
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376891
		, "size": 4
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 376895
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376896
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376900
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376904
		, "size": 4
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 376908
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376909
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376913
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376917
		, "size": 4
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 376921
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376922
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376926
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376930
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 376934
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376935
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376939
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376943
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 376947
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376948
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376952
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376956
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 376960
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376961
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376965
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376969
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 376973
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376974
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376978
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 376982
		, "size": 4
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 376986
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 376987
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 376991
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 376995
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 376996
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 376997
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377002
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377003
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377007
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 377011
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377012
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377017
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377018
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377022
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 377026
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377027
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377028
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377033
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377034
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377038
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 377042
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377043
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377048
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377049
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377053
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 377057
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377058
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377059
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377064
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377065
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377069
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 377073
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377074
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377079
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377080
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377084
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 377088
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377089
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377090
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377095
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377096
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377101
		, "size": 4
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377105
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377110
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377114
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377118
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377122
		, "size": 4
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 377126
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377127
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377131
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377135
		, "size": 4
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 377139
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377140
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377144
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377148
		, "size": 4
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 377152
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377153
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377157
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377161
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 377165
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377166
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377170
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377174
		, "size": 4
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 377178
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377179
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377183
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377187
		, "size": 4
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 377191
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377192
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377196
		, "size": 4
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7c"
		, "offs": 377200
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377201
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377202
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377207
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377208
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377212
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 377216
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377217
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377222
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377223
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377227
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 377231
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377232
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377233
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377238
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377239
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377243
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 377247
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377248
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377253
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377254
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377258
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 377262
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377263
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377264
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377269
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377270
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377274
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 377278
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377279
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377284
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377285
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377289
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 377293
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377294
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377295
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377300
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377301
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377310
		, "size": 4
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377314
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377323
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377327
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377331
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377335
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 377339
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377340
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377344
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377348
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 377352
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377353
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377357
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377361
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 377365
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377366
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377370
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377374
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 377378
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377379
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377383
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377387
		, "size": 4
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 377391
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377392
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377396
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377400
		, "size": 4
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 377404
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377405
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377409
		, "size": 4
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 377413
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377414
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377415
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377420
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377421
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377425
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 377429
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377430
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377435
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377436
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377440
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 377444
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377445
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377446
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377451
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377452
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377456
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 377460
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377461
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377466
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377467
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377471
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 377475
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377476
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377477
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377482
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377483
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377487
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 377491
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377492
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377497
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377498
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 377502
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 377506
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377507
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377508
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377513
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377514
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377519
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377523
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377528
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377532
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377536
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 377540
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377541
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377546
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377547
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 377551
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 377555
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 377556
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377557
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 377562
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377563
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377564
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377568
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 377569
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377573
		, "size": 1
	}, {
		"instruction": "load.f64 3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377574
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377583
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377588
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377589
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377593
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377597
		, "size": 1
	}, {
		"instruction": "load.f64 3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377598
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377607
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377612
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377613
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377617
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377621
		, "size": 1
	}, {
		"instruction": "load.f64 3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377622
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377631
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377636
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377637
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377641
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377645
		, "size": 1
	}, {
		"instruction": "load.f64 -3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377646
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377655
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377660
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377661
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377665
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377669
		, "size": 1
	}, {
		"instruction": "load.f64 -3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377670
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377679
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377684
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377685
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377689
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377693
		, "size": 1
	}, {
		"instruction": "load.f64 -3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377694
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377703
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377708
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377709
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377713
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377717
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 377726
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377728
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 377729
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 377730
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377732
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 377733
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 377734
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377735
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377737
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 377741
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377742
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377746
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 377747
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377749
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 377750
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 377751
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377753
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 377754
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 377755
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377756
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377758
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 377762
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377763
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377767
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 377776
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377778
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 377779
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 377780
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377782
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 377783
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 377784
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377785
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377787
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 377791
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377792
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377796
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377801
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377803
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 377804
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377805
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377807
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 377808
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 377809
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377810
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 377812
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377813
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377817
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377818
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377820
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 377821
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377822
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377824
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 377825
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 377826
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377827
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 377829
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377830
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377834
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377839
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377841
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 377842
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 377843
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377845
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 377846
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 377847
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 377848
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 377850
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377851
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377855
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377856
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377865
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377870
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377871
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377875
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 377879
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377880
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377885
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377886
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377890
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 377894
		, "size": 1
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 377895
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377904
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377909
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377910
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377914
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377918
		, "size": 1
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377919
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377924
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377929
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377930
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 377934
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377935
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377939
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377940
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377941
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377946
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377947
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 377951
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377952
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377956
		, "size": 1
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377957
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377962
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377967
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377968
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 377972
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377973
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 377977
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377978
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 377983
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 377988
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 377993
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 377994
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 377998
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 377999
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378003
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378004
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378009
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378014
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378019
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378020
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 378024
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378025
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378029
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378030
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378039
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378048
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378053
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378054
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378058
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378062
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378063
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378072
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378081
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378086
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378087
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378091
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378095
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378096
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378101
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378102
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378107
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378112
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378113
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 378117
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378118
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378122
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378123
		, "size": 9
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378132
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378133
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378142
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378147
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378148
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378152
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378156
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378157
		, "size": 2
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378159
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378164
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378169
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 378171
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378172
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 378173
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378174
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 378176
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378177
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378181
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378182
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378184
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378193
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378202
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 378204
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378205
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 378206
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 378207
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378209
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378213
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378214
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378215
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378220
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 378222
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378223
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378228
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 378230
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 378231
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378232
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378233
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378238
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378243
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378244
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378248
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378250
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378252
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378253
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 378258
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 378263
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378265
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 378266
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 378267
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378268
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 378270
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 378272
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378273
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 378277
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378278
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378287
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 378289
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378290
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378299
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 378301
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 378302
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378303
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378304
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378313
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378318
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378319
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378323
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378325
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378327
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378328
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378337
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378346
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378348
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 378349
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378350
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 378351
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 378353
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378355
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378359
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378360
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378364
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378365
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378367
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378372
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378373
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378376
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378380
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378384
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378393
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378402
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378411
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378420
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378429
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378438
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378447
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378456
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378465
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378470
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378474
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378475
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378477
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378482
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378483
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378486
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378490
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378494
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378495
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378499
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378500
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378502
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378507
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378508
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378511
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378515
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378519
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378528
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378537
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378546
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378555
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378564
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378573
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378582
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378591
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378600
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378605
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378609
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378610
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378612
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378617
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378618
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378621
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378625
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378629
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378630
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378634
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378635
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378637
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378642
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378643
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378646
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378650
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378654
		, "size": 9
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378663
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378668
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378672
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378673
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378675
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378680
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378681
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378684
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378688
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378692
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378701
		, "size": 9
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378710
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378715
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378719
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378720
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378722
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378727
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(8, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378728
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378731
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378735
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378739
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378748
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378757
		, "size": 9
	}, {
		"instruction": "load.f64 7.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378766
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378775
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378784
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378793
		, "size": 9
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378802
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378811
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378820
		, "size": 9
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 378829
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378834
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378838
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378839
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378841
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378846
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(24, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378847
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378850
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378854
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378858
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378867
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 378871
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 378872
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 378876
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 378877
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378881
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 378883
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 378888
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 378889
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 378892
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378896
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378900
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378909
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378913
		, "size": 9
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 378922
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378926
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378935
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 378936
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378937
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 378941
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378945
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378954
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378956
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378965
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378967
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378976
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 378977
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 378978
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 378979
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 378980
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 378982
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 378986
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 378990
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 378999
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 379001
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379003
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 379012
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379014
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 379023
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379025
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 379034
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 379035
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 379036
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 379037
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 379038
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 379040
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 379041
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 379042
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379044
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379048
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379057
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379066
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379075
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379084
		, "size": 9
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379093
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 379098
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379102
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 379103
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 379107
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379109
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379114
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(16, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 379115
		, "size": 3
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379118
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379122
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379126
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379135
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379144
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379153
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379162
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379171
		, "size": 9
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379180
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 379185
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379189
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 379190
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 379194
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379196
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379201
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(18, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 379202
		, "size": 3
	}, {
		"instruction": "inc.sp(-72)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379205
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379209
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379213
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379214
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379223
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 379232
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379233
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379234
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379239
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379240
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379244
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 379248
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379249
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379258
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 379267
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379268
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379273
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379274
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 379278
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379283
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379288
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379289
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379293
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379297
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379298
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379307
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 379316
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379317
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379322
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379323
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379327
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379331
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379332
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379341
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 379350
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379351
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379356
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379357
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379361
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379365
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379366
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379375
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 379384
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379385
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379390
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379391
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379395
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379399
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379400
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379409
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379414
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379415
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379419
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379423
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379432
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 379441
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379442
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379443
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379452
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379457
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379458
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 379462
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379463
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379467
		, "size": 1
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379468
		, "size": 5
	}, {
		"instruction": "load.f32 0.000012"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379473
		, "size": 5
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379478
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379483
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379488
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379489
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379493
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 379494
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379495
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 379500
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379501
		, "size": 1
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379502
		, "size": 9
	}, {
		"instruction": "load.f64 0.000012"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379511
		, "size": 9
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379520
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379529
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379534
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379535
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379539
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 379540
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379541
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x25"
		, "offs": 379546
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379547
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379548
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379557
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379566
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379571
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379572
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379576
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 379580
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379581
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379590
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379595
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379596
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379600
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379604
		, "size": 1
	}, {
		"instruction": "load.f64 -10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379605
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379614
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379623
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379628
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379629
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379633
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379637
		, "size": 1
	}, {
		"instruction": "load.f64 19.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379638
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379647
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379656
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379661
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379662
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379666
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379670
		, "size": 1
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379671
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379680
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379689
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379694
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379695
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379699
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379703
		, "size": 1
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379704
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379713
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379722
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379727
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379728
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379732
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379736
		, "size": 1
	}, {
		"instruction": "load.f64 -11.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379737
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379746
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379755
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379760
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379761
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379765
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379769
		, "size": 1
	}, {
		"instruction": "load.f64 18.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379770
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379779
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379788
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379793
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379794
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379798
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379802
		, "size": 1
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379803
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379812
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379821
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379826
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379827
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379831
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379835
		, "size": 1
	}, {
		"instruction": "load.f64 -2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379836
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379845
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379854
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379859
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379860
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379864
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 379868
		, "size": 1
	}, {
		"instruction": "load.f64 -12.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379869
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 379878
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379887
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379892
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379893
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x2d"
		, "offs": 379897
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379901
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379902
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379907
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379912
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379917
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379918
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 379922
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379926
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379927
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379928
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379933
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379938
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379939
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 379943
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379947
		, "size": 1
	}, {
		"instruction": "load.f32 -10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379948
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379953
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379958
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379963
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379964
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 379968
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379972
		, "size": 1
	}, {
		"instruction": "load.f32 19.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379973
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379978
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 379983
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 379988
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 379989
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 379993
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 379997
		, "size": 1
	}, {
		"instruction": "load.f32 9.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 379998
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380003
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380008
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380013
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380014
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380018
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380022
		, "size": 1
	}, {
		"instruction": "load.f32 -1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380023
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380028
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380033
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380038
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380039
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380043
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380047
		, "size": 1
	}, {
		"instruction": "load.f32 -11.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380048
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380053
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380058
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380063
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380064
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380068
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380072
		, "size": 1
	}, {
		"instruction": "load.f32 18.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380073
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380078
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380083
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380088
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380089
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380093
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380097
		, "size": 1
	}, {
		"instruction": "load.f32 8.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380098
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380103
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380108
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380113
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380114
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380118
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380122
		, "size": 1
	}, {
		"instruction": "load.f32 -2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380123
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380128
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380133
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380138
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380139
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380143
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380147
		, "size": 1
	}, {
		"instruction": "load.f32 -12.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380148
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 380153
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380158
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380163
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380164
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 380168
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380172
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380176
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380177
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380182
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380186
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380190
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380194
		, "size": 4
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380198
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380203
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380207
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380211
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380215
		, "size": 1
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380216
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380220
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380224
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380228
		, "size": 1
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380229
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380233
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380237
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380241
		, "size": 1
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380242
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380246
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380250
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380254
		, "size": 1
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380255
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380259
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380263
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380268
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380273
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380278
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380279
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380284
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380289
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380294
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380298
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380303
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380308
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380313
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380314
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380319
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380324
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380329
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380333
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380338
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380343
		, "size": 4
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380347
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380351
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380355
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380360
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380361
		, "size": 4
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380365
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380369
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380373
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380378
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380383
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380388
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380389
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380394
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380399
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380404
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380408
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380413
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380418
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380423
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380424
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380429
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380434
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380439
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380443
		, "size": 1
	}, {
		"instruction": "jmp +29"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 380444
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380448
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 380453
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 380455
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 380456
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380457
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 380462
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 380464
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x28"
		, "offs": 380468
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 380469
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 380473
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380475
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 380480
		, "size": 1
	}, {
		"instruction": "jnz -33"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 380481
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380485
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380489
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380494
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380499
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380504
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380508
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380512
		, "size": 5
	}, {
		"instruction": "load.c32 83"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380517
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380522
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380527
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380528
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380533
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380538
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380543
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380547
		, "size": 5
	}, {
		"instruction": "load.c32 84"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380552
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380557
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380562
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380563
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380568
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380573
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380578
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380582
		, "size": 5
	}, {
		"instruction": "load.c32 87"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380587
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380592
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380597
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380598
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380603
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380608
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380612
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380616
		, "size": 5
	}, {
		"instruction": "load.c32 88"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380621
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380626
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380631
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380632
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380637
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380642
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380646
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380650
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380655
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380660
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380665
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380666
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380671
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380676
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380680
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380684
		, "size": 5
	}, {
		"instruction": "load.c32 92"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380689
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380694
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380699
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380700
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380705
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380710
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380714
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380718
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380722
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 380723
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 380724
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 380728
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380732
		, "size": 5
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380737
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380742
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380747
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380752
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380757
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380762
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380767
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380771
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380775
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 380776
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 380777
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 380781
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380785
		, "size": 5
	}, {
		"instruction": "load.c32 99"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380790
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380795
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380800
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380805
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380810
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380815
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380820
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 380824
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 380828
		, "size": 9
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 380837
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 380838
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 380842
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380846
		, "size": 5
	}, {
		"instruction": "load.c32 101"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380851
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380856
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380861
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380866
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380871
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380876
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 380881
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380885
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380890
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380895
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380900
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380905
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380906
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380910
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380915
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380919
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380924
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380929
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380930
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 380934
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 380939
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380943
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380948
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380953
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380954
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380958
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 380959
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380960
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380965
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380970
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380971
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380975
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380980
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 380985
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 380986
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380990
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 380991
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 380992
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 380996
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381001
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381002
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381006
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381011
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381016
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381017
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381021
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381026
		, "size": 1
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381027
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381032
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381037
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381042
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381043
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381047
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381052
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381057
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381058
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381062
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381067
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 381068
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381072
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381077
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381078
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381082
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381087
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381092
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381093
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381097
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381102
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 381103
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381107
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381112
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381113
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381117
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381122
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381127
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381128
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 381132
		, "size": 1
	}, {
		"instruction": "jmp +810"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381133
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381137
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381142
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 381144
		, "size": 1
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 381145
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381146
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381148
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381153
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 381155
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 381159
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381160
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381161
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381165
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381169
		, "size": 5
	}, {
		"instruction": "load.c32 120"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381174
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381179
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381184
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381189
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381194
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381199
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381204
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381208
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381210
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381214
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 381216
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 381220
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381221
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381222
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381226
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381230
		, "size": 5
	}, {
		"instruction": "load.c32 121"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381235
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381240
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381245
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381250
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381255
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381260
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381265
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381269
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381271
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381275
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 381277
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 381281
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381282
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381283
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381287
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381291
		, "size": 5
	}, {
		"instruction": "load.c32 122"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381296
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381301
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381306
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381311
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381316
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381321
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381326
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381330
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381332
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381333
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381335
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381340
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381345
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381346
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381350
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381351
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381355
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381359
		, "size": 5
	}, {
		"instruction": "load.c32 124"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381364
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381369
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381374
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381379
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381384
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381389
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381394
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381398
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381400
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381401
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381403
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381407
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381412
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381413
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381417
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381418
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381422
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381426
		, "size": 5
	}, {
		"instruction": "load.c32 125"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381431
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381436
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381441
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381446
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381451
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381456
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381461
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381465
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381467
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381468
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381470
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381474
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381479
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381480
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381484
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381485
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381489
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381493
		, "size": 5
	}, {
		"instruction": "load.c32 126"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381498
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381503
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381508
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381513
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381518
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381523
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381528
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381532
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381534
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381535
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381537
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381542
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381547
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381548
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381552
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381553
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381557
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381561
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381566
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381571
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381576
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381581
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381586
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381591
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381596
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381600
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381602
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381603
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381605
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381609
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381614
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381615
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381619
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381620
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381624
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381628
		, "size": 5
	}, {
		"instruction": "load.c32 129"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381633
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381638
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381643
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381648
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381653
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381658
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381663
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381667
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381669
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381670
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381672
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381676
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381681
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381682
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381686
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381687
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381691
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381695
		, "size": 5
	}, {
		"instruction": "load.c32 130"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381700
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381705
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381710
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381715
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381720
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381725
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381730
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381734
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381736
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381737
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381739
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381744
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381749
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381754
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381755
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381759
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381760
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381764
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381768
		, "size": 5
	}, {
		"instruction": "load.c32 132"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381773
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381778
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381783
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381788
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381793
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381798
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381803
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381807
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 381809
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381810
		, "size": 2
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x2b"
		, "offs": 381812
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381816
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381821
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381822
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381826
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381827
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381831
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381835
		, "size": 5
	}, {
		"instruction": "load.c32 134"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381840
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381845
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381850
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381855
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381860
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381865
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381870
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 381874
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381876
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381880
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 381882
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x23"
		, "offs": 381886
		, "size": 1
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 381887
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 381888
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 381892
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381896
		, "size": 5
	}, {
		"instruction": "load.c32 136"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381901
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381906
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381911
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381916
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381921
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381926
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 381931
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381935
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 381939
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 381943
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381945
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 381950
		, "size": 1
	}, {
		"instruction": "jnz -814"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 381951
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381955
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 381959
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381963
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 381968
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 381970
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381975
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381976
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 381980
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 381984
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 381989
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 381991
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 381995
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 381996
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 382000
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382004
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382009
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 382014
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 382015
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 382019
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382023
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382028
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 382033
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 382034
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 382038
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382042
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 382047
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382049
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 382054
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 382055
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 382059
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382063
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 382068
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382070
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 382075
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 382076
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x2c"
		, "offs": 382080
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382084
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 382089
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382091
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 382095
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 382096
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382100
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382105
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382110
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382115
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382120
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382125
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382130
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382135
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382139
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382144
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382149
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382154
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382159
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382164
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382169
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382174
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382178
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382183
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382188
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382193
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382198
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382203
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382208
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382213
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382217
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382221
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382222
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382223
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382227
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382232
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382237
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382242
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382247
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382252
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382257
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382262
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382266
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382270
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382271
		, "size": 1
	}, {
		"instruction": "jnz +43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 382272
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382276
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382281
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382286
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382291
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382296
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382301
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382306
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382311
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382315
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382319
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382320
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382321
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382325
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382330
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382335
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382340
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382345
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382350
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382355
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382360
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382364
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382368
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382373
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382378
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382383
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382388
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382393
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382398
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382403
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382407
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382411
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382412
		, "size": 1
	}, {
		"instruction": "jnz +47"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 382413
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382417
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382422
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382427
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382432
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382437
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382442
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382447
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382452
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382456
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382460
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382465
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382470
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382475
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382480
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382485
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382490
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382495
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382499
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382503
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382504
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382505
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382509
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382514
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382519
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382524
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382529
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382534
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382539
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382544
		, "size": 4
	}, {
		"instruction": "jmp +328"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382548
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382552
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382556
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382561
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382562
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382566
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382571
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382576
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382581
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382586
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382591
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382596
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382601
		, "size": 4
	}, {
		"instruction": "jmp +271"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382605
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382609
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382613
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382618
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382619
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382623
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382628
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382633
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382638
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382643
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382648
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382653
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382658
		, "size": 4
	}, {
		"instruction": "jmp +214"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382662
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382666
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382670
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382675
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382676
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382680
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382685
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382690
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382695
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382700
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382705
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382710
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382715
		, "size": 4
	}, {
		"instruction": "jmp +157"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382719
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382723
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382727
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382732
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382733
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382737
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382742
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382747
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382752
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382757
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382762
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382767
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382772
		, "size": 4
	}, {
		"instruction": "jmp +100"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382776
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 382780
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382784
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 382789
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 382790
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382794
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382799
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382804
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382809
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382814
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382819
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382824
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382829
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382833
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382837
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382842
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382847
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382852
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382857
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382862
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382867
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382872
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382876
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382880
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382885
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382890
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382895
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382896
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382901
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382906
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382911
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382915
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382919
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382923
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382924
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382928
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382933
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382938
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382944
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382949
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 382954
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 382958
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 382962
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 382966
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382968
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 382973
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 382974
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 382978
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 382982
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 382983
		, "size": 4
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 382987
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 382991
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 382996
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383001
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 383006
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383007
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383012
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383017
		, "size": 5
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 383022
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 383026
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 383030
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x2e"
		, "offs": 383034
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x2a"
		, "offs": 383038
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383042
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383047
		, "size": 1
	}, {
		"instruction": "jnz -57"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 383048
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 383052
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 383053
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 383057
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383059
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383064
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 383065
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 383069
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383073
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383078
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383083
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 383088
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383089
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383094
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 383099
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 383103
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 383107
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 383111
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383113
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383118
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 383119
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 383123
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 383127
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 383128
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 383132
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383134
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 383139
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 383140
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 383144
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383148
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383153
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383158
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 383163
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383164
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 383169
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 383174
		, "size": 4
	}, {
		"instruction": "nfc(9)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 383178
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 383182
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 383186
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 383188
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 383193
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 383194
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 383198
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 383202
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
350796,0,368572,
 350818,0,364288,
 350824,0,-1,
 350830,0,364288,
 350835,0,-1,
 350840,0,364352,
 350845,0,-1,
 350863,0,364352,
 350868,0,-1,
 350887,0,364360,
  350892,0,364360,
   350897,0,364360,
    350902,0,364360,
     350907,0,364360,
      350912,0,364360,
       350917,0,364360,
        350921,0,364360,
         350926,0,364360,
          350931,0,364360,
           350936,0,364360,
            350941,0,364360,
             350946,0,364360,
             350951,0,-1,
             350956,0,364360,
             350961,0,-1,
            350966,0,-1,
            350971,0,364360,
            350977,0,-1,
           350982,0,-1,
           351000,0,364360,
            351005,0,364360,
            351010,0,-1,
            351015,0,364360,
            351020,0,-1,
           351025,0,-1,
          351030,0,-1,
          351035,0,364360,
           351040,0,364360,
            351044,0,364360,
            351048,0,-1,
            351051,0,364360,
            351069,0,-1,
           351073,0,-1,
           351077,0,364360,
           351080,0,-1,
          351084,0,-1,
         351088,0,-1,
         351091,0,364360,
          351095,0,364360,
           351099,0,364360,
            351102,0,364360,
            351106,0,-1,
            351110,0,364360,
            351113,0,-1,
           351117,0,-1,
           351121,0,364360,
           351125,0,-1,
          351128,0,-1,
          351132,0,364360,
           351139,0,364360,
           351143,0,-1,
           351147,0,364360,
           351150,0,-1,
          351154,0,-1,
         351158,0,-1,
        351162,0,-1,
        351165,0,364360,
         351169,0,364360,
          351173,0,364360,
           351176,0,364360,
            351180,0,364360,
            351184,0,-1,
            351187,0,364360,
            351192,0,-1,
           351195,0,-1,
           351199,0,364360,
           351203,0,-1,
          351207,0,-1,
          351211,0,364360,
           351215,0,364360,
           351219,0,-1,
           351222,0,364360,
           351226,0,-1,
          351230,0,-1,
         351233,0,-1,
         351237,0,364360,
          351241,0,364360,
           351244,0,364360,
           351248,0,-1,
           351252,0,364360,
           351256,0,-1,
          351259,0,-1,
          351263,0,364360,
          351267,0,-1,
         351270,0,-1,
        351274,0,-1,
       351278,0,-1,
       351281,0,364360,
        351285,0,364360,
         351289,0,364360,
          351292,0,364360,
           351296,0,364360,
            351300,0,364360,
            351303,0,-1,
            351307,0,364360,
            351311,0,-1,
           351314,0,-1,
           351318,0,364360,
           351322,0,-1,
          351326,0,-1,
          351329,0,364360,
           351333,0,364360,
           351336,0,-1,
           351340,0,364360,
           351344,0,-1,
          351348,0,-1,
         351351,0,-1,
         351355,0,364360,
          351359,0,364360,
           351362,0,364360,
           351366,0,-1,
           351370,0,364360,
           351373,0,-1,
          351377,0,-1,
          351381,0,364360,
          351384,0,-1,
         351388,0,-1,
        351393,0,-1,
        351398,0,364360,
         351403,0,364360,
          351407,0,364360,
           351412,0,364360,
           351418,0,-1,
           351422,0,364360,
           351427,0,-1,
          351432,0,-1,
          351437,0,364360,
          351442,0,-1,
         351448,0,-1,
         351452,0,364360,
          351471,0,364360,
          351476,0,-1,
          351481,0,364360,
          351486,0,-1,
         351491,0,-1,
        351496,0,-1,
       351501,0,-1,
      351506,0,-1,
      351511,0,364360,
       351516,0,364360,
        351521,0,364360,
         351540,0,364360,
          351544,0,364360,
           351549,0,364360,
            351554,0,364360,
            351559,0,-1,
            351564,0,364360,
            351569,0,-1,
           351575,0,-1,
           351579,0,364360,
           351584,0,-1,
          351589,0,-1,
          351594,0,364360,
           351599,0,364360,
           351605,0,-1,
           351610,0,364360,
           351615,0,-1,
          351619,0,-1,
         351624,0,-1,
         351629,0,364360,
          351634,0,364360,
           351640,0,364360,
           351645,0,-1,
           351649,0,364360,
           351654,0,-1,
          351659,0,-1,
          351664,0,364360,
          351669,0,-1,
         351674,0,-1,
        351679,0,-1,
        351684,0,364360,
         351688,0,364360,
          351692,0,364360,
           351696,0,364360,
           351699,0,-1,
           351703,0,364360,
           351707,0,-1,
          351711,0,-1,
          351714,0,364360,
          351718,0,-1,
         351722,0,-1,
         351725,0,364360,
          351729,0,364360,
          351733,0,-1,
          351736,0,364360,
          351740,0,-1,
         351744,0,-1,
        351748,0,-1,
       351751,0,-1,
       351755,0,364360,
        351759,0,364360,
         351762,0,364360,
          351766,0,364360,
           351769,0,364360,
           351773,0,-1,
           351777,0,364360,
           351781,0,-1,
          351784,0,-1,
          351788,0,364360,
          351792,0,-1,
         351795,0,-1,
         351799,0,364360,
          351803,0,364360,
          351806,0,-1,
          351810,0,364360,
          351814,0,-1,
         351817,0,-1,
        351821,0,-1,
        351825,0,364360,
         351829,0,364360,
          351832,0,364360,
          351836,0,-1,
          351839,0,364360,
          351849,0,-1,
         351853,0,-1,
         351856,0,364360,
         351860,0,-1,
        351864,0,-1,
       351867,0,-1,
      351871,0,-1,
     351875,0,-1,
     351878,0,364360,
      351882,0,364360,
       351886,0,364360,
        351889,0,364360,
         351893,0,364360,
          351896,0,364360,
           351901,0,364360,
            351906,0,364360,
            351911,0,-1,
            351916,0,364360,
            351921,0,-1,
           351926,0,-1,
           351931,0,364360,
           351936,0,-1,
          351941,0,-1,
          351946,0,364360,
           351952,0,364360,
           351957,0,-1,
           351975,0,364360,
           351980,0,-1,
          351985,0,-1,
         351990,0,-1,
         351995,0,364360,
          352000,0,364360,
           352005,0,364360,
           352010,0,-1,
           352015,0,364360,
           352020,0,-1,
          352025,0,-1,
          352043,0,364360,
          352048,0,-1,
         352053,0,-1,
        352058,0,-1,
        352063,0,364360,
         352068,0,364360,
          352073,0,364360,
           352078,0,364360,
           352083,0,-1,
           352088,0,364360,
           352093,0,-1,
          352098,0,-1,
          352116,0,364360,
          352121,0,-1,
         352126,0,-1,
         352131,0,364360,
          352136,0,364360,
          352141,0,-1,
          352146,0,364360,
          352169,0,-1,
         352174,0,-1,
        352192,0,-1,
       352197,0,-1,
       352202,0,364360,
        352207,0,364360,
         352212,0,364360,
          352217,0,364360,
           352222,0,364360,
           352227,0,-1,
           352231,0,364360,
           352235,0,-1,
          352239,0,-1,
          352244,0,364360,
          352248,0,-1,
         352252,0,-1,
         352256,0,364360,
          352260,0,364360,
          352277,0,-1,
          352280,0,364360,
          352284,0,-1,
         352288,0,-1,
        352291,0,-1,
        352295,0,364360,
         352298,0,364360,
          352302,0,364360,
          352306,0,-1,
          352309,0,364360,
          352313,0,-1,
         352317,0,-1,
         352320,0,364360,
         352324,0,-1,
        352327,0,-1,
       352331,0,-1,
      352334,0,-1,
      352338,0,364360,
       352341,0,364360,
        352345,0,364360,
         352349,0,364360,
          352352,0,364360,
           352356,0,364360,
           352359,0,-1,
           352363,0,364360,
           352366,0,-1,
          352370,0,-1,
          352373,0,364360,
          352377,0,-1,
         352381,0,-1,
         352384,0,364360,
          352388,0,364360,
          352391,0,-1,
          352395,0,364360,
          352398,0,-1,
         352402,0,-1,
        352406,0,-1,
        352409,0,364360,
         352413,0,364360,
          352416,0,364360,
          352420,0,-1,
          352423,0,364360,
          352427,0,-1,
         352431,0,-1,
         352434,0,364360,
         352438,0,-1,
        352441,0,-1,
       352445,0,-1,
       352448,0,364360,
        352452,0,364360,
         352455,0,364360,
          352459,0,364360,
          352463,0,-1,
          352466,0,364360,
          352470,0,-1,
         352474,0,-1,
         352477,0,364360,
         352481,0,-1,
        352485,0,-1,
        352488,0,364360,
         352492,0,364360,
         352495,0,-1,
         352499,0,364360,
         352502,0,-1,
        352506,0,-1,
       352510,0,-1,
      352515,0,-1,
     352520,0,-1,
    352525,0,-1,
    352529,0,364360,
     352534,0,364360,
      352539,0,364360,
       352543,0,364360,
        352562,0,364360,
         352567,0,364360,
          352572,0,364360,
           352590,0,364360,
            352595,0,364360,
            352600,0,-1,
            352606,0,364360,
            352611,0,-1,
           352616,0,-1,
           352621,0,364360,
           352626,0,-1,
          352631,0,-1,
          352636,0,364360,
           352641,0,364360,
           352646,0,-1,
           352651,0,364360,
           352656,0,-1,
          352661,0,-1,
         352667,0,-1,
         352685,0,364360,
          352704,0,364360,
           352714,0,364360,
           352719,0,-1,
           352724,0,364360,
           352729,0,-1,
          352735,0,-1,
          352739,0,364360,
          352744,0,-1,
         352750,0,-1,
        352755,0,-1,
        352760,0,364360,
         352764,0,364360,
          352783,0,364360,
           352788,0,364360,
           352793,0,-1,
           352798,0,364360,
           352803,0,-1,
          352808,0,-1,
          352813,0,364360,
          352817,0,-1,
         352822,0,-1,
         352827,0,364360,
          352832,0,364360,
          352851,0,-1,
          352856,0,364360,
          352861,0,-1,
         352866,0,-1,
        352871,0,-1,
       352875,0,-1,
       352879,0,364360,
        352882,0,364360,
         352886,0,364360,
          352890,0,364360,
           352893,0,364360,
           352897,0,-1,
           352901,0,364360,
           352904,0,-1,
          352908,0,-1,
          352912,0,364360,
          352915,0,-1,
         352919,0,-1,
         352923,0,364360,
          352926,0,364360,
          352930,0,-1,
          352934,0,364360,
          352938,0,-1,
         352941,0,-1,
        352945,0,-1,
        352949,0,364360,
         352952,0,364360,
          352956,0,364360,
          352960,0,-1,
          352963,0,364360,
          352967,0,-1,
         352971,0,-1,
         352974,0,364360,
         352978,0,-1,
        352982,0,-1,
       352985,0,-1,
      352989,0,-1,
      352993,0,364360,
       352996,0,364360,
        353000,0,364360,
         353004,0,364360,
          353007,0,364360,
           353011,0,364360,
           353015,0,-1,
           353018,0,364360,
           353022,0,-1,
          353026,0,-1,
          353029,0,364360,
          353033,0,-1,
         353037,0,-1,
         353040,0,364360,
          353044,0,364360,
          353048,0,-1,
          353077,0,364360,
          353081,0,-1,
         353085,0,-1,
        353089,0,-1,
        353092,0,364360,
         353110,0,364360,
          353116,0,364360,
          353120,0,-1,
          353123,0,364360,
          353127,0,-1,
         353131,0,-1,
         353136,0,364360,
         353141,0,-1,
        353145,0,-1,
       353150,0,-1,
       353155,0,364360,
        353159,0,364360,
         353164,0,364360,
          353169,0,364360,
          353174,0,-1,
          353192,0,364360,
          353197,0,-1,
         353202,0,-1,
         353207,0,364360,
         353212,0,-1,
        353217,0,-1,
        353222,0,364360,
         353227,0,364360,
         353232,0,-1,
         353237,0,364360,
         353242,0,-1,
        353247,0,-1,
       353266,0,-1,
      353271,0,-1,
     353276,0,-1,
     353280,0,364360,
      353285,0,364360,
       353290,0,364360,
        353295,0,364360,
         353313,0,364360,
          353318,0,364360,
           353337,0,364360,
           353342,0,-1,
           353347,0,364360,
           353352,0,-1,
          353358,0,-1,
          353363,0,364360,
          353368,0,-1,
         353373,0,-1,
         353378,0,364360,
          353383,0,364360,
          353388,0,-1,
          353393,0,364360,
          353398,0,-1,
         353403,0,-1,
        353408,0,-1,
        353413,0,364360,
         353418,0,364360,
          353423,0,364360,
          353428,0,-1,
          353433,0,364360,
          353438,0,-1,
         353443,0,-1,
         353448,0,364360,
         353452,0,-1,
        353458,0,-1,
       353463,0,-1,
       353468,0,364360,
        353472,0,364360,
         353476,0,364360,
          353493,0,364360,
          353497,0,-1,
          353515,0,364360,
          353519,0,-1,
         353522,0,-1,
         353526,0,364360,
         353530,0,-1,
        353534,0,-1,
        353538,0,364360,
         353541,0,364360,
         353545,0,-1,
         353549,0,364360,
         353552,0,-1,
        353556,0,-1,
       353560,0,-1,
      353564,0,-1,
      353567,0,364360,
       353571,0,364360,
        353575,0,364360,
         353592,0,364360,
          353595,0,364360,
          353599,0,-1,
          353603,0,364360,
          353606,0,-1,
         353610,0,-1,
         353617,0,364360,
         353621,0,-1,
        353625,0,-1,
        353642,0,364360,
         353646,0,364360,
         353650,0,-1,
         353653,0,364360,
         353657,0,-1,
        353661,0,-1,
       353665,0,-1,
       353668,0,364360,
        353672,0,364360,
         353676,0,364360,
         353693,0,-1,
         353696,0,364360,
         353700,0,-1,
        353703,0,-1,
        353707,0,364360,
        353711,0,-1,
       353714,0,-1,
      353718,0,-1,
     353721,0,-1,
    353725,0,-1,
   353729,0,-1,
   353732,0,364360,
    353736,0,364360,
     353739,0,364360,
      353743,0,364360,
       353746,0,364360,
        353750,0,364360,
         353753,0,364360,
          353757,0,364360,
           353760,0,364360,
            353764,0,364360,
            353767,0,-1,
            353771,0,364360,
            353774,0,-1,
           353779,0,-1,
           353785,0,364360,
           353790,0,-1,
          353795,0,-1,
          353799,0,364360,
           353804,0,364360,
           353809,0,-1,
           353814,0,364360,
           353833,0,-1,
          353838,0,-1,
         353844,0,-1,
         353849,0,364360,
          353867,0,364360,
           353873,0,364360,
           353878,0,-1,
           353883,0,364360,
           353888,0,-1,
          353893,0,-1,
          353897,0,364360,
          353902,0,-1,
         353907,0,-1,
        353913,0,-1,
        353917,0,364360,
         353922,0,364360,
          353928,0,364360,
           353933,0,364360,
           353938,0,-1,
           353943,0,364360,
           353961,0,-1,
          353979,0,-1,
          353985,0,364360,
          353993,0,-1,
         354013,0,-1,
         354017,0,364360,
          354022,0,364360,
          354026,0,-1,
          354031,0,364360,
          354036,0,-1,
         354041,0,-1,
        354046,0,-1,
       354051,0,-1,
       354056,0,364360,
        354061,0,364360,
         354066,0,364360,
          354071,0,364360,
           354076,0,364360,
           354081,0,-1,
           354086,0,364360,
           354091,0,-1,
          354096,0,-1,
          354101,0,364360,
          354106,0,-1,
         354111,0,-1,
         354116,0,364360,
          354121,0,364360,
          354125,0,-1,
          354130,0,364360,
          354135,0,-1,
         354141,0,-1,
        354168,0,-1,
        354172,0,364360,
         354189,0,364360,
          354193,0,364360,
          354197,0,-1,
          354200,0,364360,
          354204,0,-1,
         354208,0,-1,
         354211,0,364360,
         354215,0,-1,
        354219,0,-1,
       354223,0,-1,
      354247,0,-1,
      354251,0,364360,
       354255,0,364360,
        354258,0,364360,
         354262,0,364360,
          354266,0,364360,
           354269,0,364360,
           354273,0,-1,
           354276,0,364360,
           354280,0,-1,
          354284,0,-1,
          354288,0,364360,
          354292,0,-1,
         354295,0,-1,
         354299,0,364360,
          354303,0,364360,
          354306,0,-1,
          354310,0,364360,
          354314,0,-1,
         354317,0,-1,
        354321,0,-1,
        354325,0,364360,
         354328,0,364360,
          354334,0,364360,
          354339,0,-1,
          354344,0,364360,
          354348,0,-1,
         354353,0,-1,
         354358,0,364360,
         354363,0,-1,
        354368,0,-1,
       354373,0,-1,
       354378,0,364360,
        354383,0,364360,
         354387,0,364360,
          354392,0,364360,
          354398,0,-1,
          354402,0,364360,
          354407,0,-1,
         354412,0,-1,
         354417,0,364360,
         354422,0,-1,
        354427,0,-1,
        354432,0,364360,
         354437,0,364360,
         354442,0,-1,
         354447,0,364360,
         354452,0,-1,
        354457,0,-1,
       354462,0,-1,
      354467,0,-1,
     354472,0,-1,
     354477,0,364360,
      354481,0,364360,
       354486,0,364360,
        354491,0,364360,
         354496,0,364360,
          354515,0,364360,
           354520,0,364360,
           354525,0,-1,
           354530,0,364360,
           354535,0,-1,
          354546,0,-1,
          354551,0,364360,
          354556,0,-1,
         354575,0,-1,
         354579,0,364360,
          354584,0,364360,
          354589,0,-1,
          354594,0,364360,
          354599,0,-1,
         354604,0,-1,
        354609,0,-1,
        354614,0,364360,
         354617,0,364360,
          354621,0,364360,
          354625,0,-1,
          354628,0,364360,
          354632,0,-1,
         354636,0,-1,
         354640,0,364360,
         354643,0,-1,
        354647,0,-1,
       354651,0,-1,
       354654,0,364360,
        354658,0,364360,
         354662,0,364360,
          354665,0,364360,
          354669,0,-1,
          354673,0,364360,
          354676,0,-1,
         354680,0,-1,
         354684,0,364360,
         354687,0,-1,
        354691,0,-1,
        354695,0,364360,
         354698,0,364360,
         354702,0,-1,
         354706,0,364360,
         354709,0,-1,
        354713,0,-1,
       354717,0,-1,
      354721,0,-1,
      354724,0,364360,
       354728,0,364360,
        354731,0,364360,
         354735,0,364360,
          354739,0,364360,
          354742,0,-1,
          354746,0,364360,
          354750,0,-1,
         354753,0,-1,
         354757,0,364360,
         354761,0,-1,
        354765,0,-1,
        354768,0,364360,
         354772,0,364360,
         354776,0,-1,
         354779,0,364360,
         354783,0,-1,
        354787,0,-1,
       354791,0,-1,
       354794,0,364360,
        354798,0,364360,
         354802,0,364360,
         354805,0,-1,
         354809,0,364360,
         354813,0,-1,
        354816,0,-1,
        354820,0,364360,
        354824,0,-1,
       354827,0,-1,
      354831,0,-1,
     354835,0,-1,
    354838,0,-1,
    354842,0,364360,
     354846,0,364360,
      354849,0,364360,
       354853,0,364360,
        354857,0,364360,
         354860,0,364360,
          354864,0,364360,
           354867,0,364360,
           354871,0,-1,
           354875,0,364360,
           354878,0,-1,
          354882,0,-1,
          354886,0,364360,
          354889,0,-1,
         354893,0,-1,
         354897,0,364360,
          354901,0,364360,
          354906,0,-1,
          354911,0,364360,
          354916,0,-1,
         354921,0,-1,
        354926,0,-1,
        354931,0,364360,
         354936,0,364360,
          354941,0,364360,
          354946,0,-1,
          354951,0,364360,
          354955,0,-1,
         354960,0,-1,
         354966,0,364360,
         354971,0,-1,
        354976,0,-1,
       354981,0,-1,
       354986,0,364360,
        354991,0,364360,
         354995,0,364360,
          355000,0,364360,
          355005,0,-1,
          355010,0,364360,
          355015,0,-1,
         355020,0,-1,
         355025,0,364360,
         355030,0,-1,
        355036,0,-1,
        355041,0,364360,
         355046,0,364360,
         355051,0,-1,
         355056,0,364360,
         355061,0,-1,
        355066,0,-1,
       355071,0,-1,
      355076,0,-1,
      355081,0,364360,
       355086,0,364360,
        355091,0,364360,
         355096,0,364360,
          355101,0,364360,
          355106,0,-1,
          355111,0,364360,
          355116,0,-1,
         355121,0,-1,
         355139,0,364360,
         355144,0,-1,
        355149,0,-1,
        355154,0,364360,
         355159,0,364360,
         355164,0,-1,
         355169,0,364360,
         355173,0,-1,
        355177,0,-1,
       355181,0,-1,
       355184,0,364360,
        355188,0,364360,
         355206,0,364360,
         355209,0,-1,
         355213,0,364360,
         355217,0,-1,
        355220,0,-1,
        355224,0,364360,
        355228,0,-1,
       355232,0,-1,
      355235,0,-1,
     355239,0,-1,
     355242,0,364360,
      355246,0,364360,
       355250,0,364360,
        355253,0,364360,
         355257,0,364360,
          355261,0,364360,
          355264,0,-1,
          355268,0,364360,
          355272,0,-1,
         355276,0,-1,
         355279,0,364360,
         355283,0,-1,
        355288,0,-1,
        355291,0,364360,
         355295,0,364360,
         355299,0,-1,
         355302,0,364360,
         355310,0,-1,
        355313,0,-1,
       355317,0,-1,
       355321,0,364360,
        355325,0,364360,
         355328,0,364360,
         355332,0,-1,
         355336,0,364360,
         355339,0,-1,
        355343,0,-1,
        355347,0,364360,
        355350,0,-1,
       355354,0,-1,
      355358,0,-1,
      355362,0,364360,
       355365,0,364360,
        355369,0,364360,
         355372,0,364360,
         355376,0,-1,
         355380,0,364360,
         355384,0,-1,
        355387,0,-1,
        355391,0,364360,
        355395,0,-1,
       355398,0,-1,
       355402,0,364360,
        355406,0,364360,
        355410,0,-1,
        355415,0,364360,
        355421,0,-1,
       355425,0,-1,
      355430,0,-1,
     355435,0,-1,
    355440,0,-1,
   355445,0,-1,
  355450,0,-1,
  355455,0,364360,
   355459,0,364360,
    355465,0,364360,
     355483,0,364360,
      355489,0,364360,
       355493,0,364360,
        355498,0,364360,
         355503,0,364360,
          355508,0,364360,
           355513,0,364360,
            355518,0,364360,
            355523,0,-1,
            355528,0,364360,
            355533,0,-1,
           355552,0,-1,
           355557,0,364360,
           355562,0,-1,
          355567,0,-1,
          355573,0,364360,
           355578,0,364360,
           355584,0,-1,
           355589,0,364360,
           355594,0,-1,
          355599,0,-1,
         355604,0,-1,
         355609,0,364360,
          355614,0,364360,
           355619,0,364360,
           355624,0,-1,
           355629,0,364360,
           355634,0,-1,
          355639,0,-1,
          355644,0,364360,
          355650,0,-1,
         355655,0,-1,
        355660,0,-1,
        355665,0,364360,
         355670,0,364360,
          355675,0,364360,
           355680,0,364360,
           355685,0,-1,
           355690,0,364360,
           355695,0,-1,
          355700,0,-1,
          355704,0,364360,
          355707,0,-1,
         355711,0,-1,
         355715,0,364360,
          355721,0,364360,
          355726,0,-1,
          355730,0,364360,
          355734,0,-1,
         355738,0,-1,
        355742,0,-1,
       355745,0,-1,
       355749,0,364360,
        355753,0,364360,
         355757,0,364360,
          355760,0,364360,
           355764,0,364360,
           355768,0,-1,
           355771,0,364360,
           355775,0,-1,
          355779,0,-1,
          355783,0,364360,
          355786,0,-1,
         355790,0,-1,
         355794,0,364360,
          355797,0,364360,
          355801,0,-1,
          355805,0,364360,
          355808,0,-1,
         355812,0,-1,
        355816,0,-1,
        355820,0,364360,
         355823,0,364360,
          355827,0,364360,
          355831,0,-1,
          355834,0,364360,
          355838,0,-1,
         355842,0,-1,
         355846,0,364360,
         355849,0,-1,
        355853,0,-1,
       355857,0,-1,
      355861,0,-1,
      355864,0,364360,
       355868,0,364360,
        355872,0,364360,
         355875,0,364360,
          355879,0,364360,
           355883,0,364360,
           355886,0,-1,
           355890,0,364360,
           355894,0,-1,
          355897,0,-1,
          355901,0,364360,
          355905,0,-1,
         355908,0,-1,
         355912,0,364360,
          355916,0,364360,
          355919,0,-1,
          355923,0,364360,
          355927,0,-1,
         355933,0,-1,
        355938,0,-1,
        355943,0,364360,
         355948,0,364360,
          355952,0,364360,
          355957,0,-1,
          355962,0,364360,
          355967,0,-1,
         355986,0,-1,
         355991,0,364360,
         355996,0,-1,
        356002,0,-1,
       356007,0,-1,
       356012,0,364360,
        356017,0,364360,
         356022,0,364360,
          356027,0,364360,
          356032,0,-1,
          356037,0,364360,
          356056,0,-1,
         356061,0,-1,
         356065,0,364360,
         356070,0,-1,
        356076,0,-1,
        356081,0,364360,
         356086,0,364360,
         356091,0,-1,
         356095,0,364360,
         356100,0,-1,
        356105,0,-1,
       356124,0,-1,
      356128,0,-1,
     356153,0,-1,
     356157,0,364360,
      356162,0,364360,
       356167,0,364360,
        356172,0,364360,
         356177,0,364360,
          356182,0,364360,
           356187,0,364360,
           356192,0,-1,
           356197,0,364360,
           356202,0,-1,
          356207,0,-1,
          356212,0,364360,
          356217,0,-1,
         356222,0,-1,
         356240,0,364360,
          356246,0,364360,
          356249,0,-1,
          356253,0,364360,
          356257,0,-1,
         356260,0,-1,
        356264,0,-1,
        356267,0,364360,
         356271,0,364360,
          356274,0,364360,
          356278,0,-1,
          356282,0,364360,
          356285,0,-1,
         356289,0,-1,
         356292,0,364360,
         356296,0,-1,
        356300,0,-1,
       356303,0,-1,
       356307,0,364360,
        356310,0,364360,
         356314,0,364360,
          356317,0,364360,
          356321,0,-1,
          356324,0,364360,
          356328,0,-1,
         356332,0,-1,
         356335,0,364360,
         356339,0,-1,
        356343,0,-1,
        356346,0,364360,
         356350,0,364360,
         356354,0,-1,
         356357,0,364360,
         356361,0,-1,
        356364,0,-1,
       356368,0,-1,
      356372,0,-1,
      356375,0,364360,
       356379,0,364360,
        356382,0,364360,
         356386,0,364360,
          356389,0,364360,
          356393,0,-1,
          356396,0,364360,
          356400,0,-1,
         356404,0,-1,
         356407,0,364360,
         356411,0,-1,
        356414,0,-1,
        356418,0,364360,
         356422,0,364360,
         356425,0,-1,
         356429,0,364360,
         356432,0,-1,
        356436,0,-1,
       356440,0,-1,
       356443,0,364360,
        356447,0,364360,
         356450,0,364360,
         356454,0,-1,
         356457,0,364360,
         356461,0,-1,
        356465,0,-1,
        356470,0,364360,
        356474,0,-1,
       356479,0,-1,
      356484,0,-1,
     356489,0,-1,
    356494,0,-1,
    356498,0,364360,
     356503,0,364360,
      356522,0,364360,
       356541,0,364360,
        356547,0,364360,
         356551,0,364360,
          356556,0,364360,
           356562,0,364360,
           356567,0,-1,
           356572,0,364360,
           356577,0,-1,
          356582,0,-1,
          356587,0,364360,
          356593,0,-1,
         356600,0,-1,
         356620,0,364360,
          356624,0,364360,
          356629,0,-1,
          356634,0,364360,
          356639,0,-1,
         356658,0,-1,
        356677,0,-1,
        356682,0,364360,
         356686,0,364360,
          356692,0,364360,
          356697,0,-1,
          356702,0,364360,
          356707,0,-1,
         356712,0,-1,
         356717,0,364360,
         356722,0,-1,
        356727,0,-1,
       356732,0,-1,
       356737,0,364360,
        356742,0,364360,
         356747,0,364360,
          356752,0,364360,
          356757,0,-1,
          356761,0,364360,
          356766,0,-1,
         356771,0,-1,
         356776,0,364360,
         356781,0,-1,
        356786,0,-1,
        356791,0,364360,
         356796,0,364360,
         356801,0,-1,
         356804,0,364360,
         356808,0,-1,
        356812,0,-1,
       356815,0,-1,
      356819,0,-1,
      356823,0,364360,
       356826,0,364360,
        356830,0,364360,
         356834,0,364360,
          356851,0,364360,
          356855,0,-1,
          356859,0,364360,
          356862,0,-1,
         356866,0,-1,
         356870,0,364360,
         356874,0,-1,
        356877,0,-1,
        356881,0,364360,
         356885,0,364360,
         356888,0,-1,
         356892,0,364360,
         356896,0,-1,
        356899,0,-1,
       356903,0,-1,
       356907,0,364360,
        356910,0,364360,
         356914,0,364360,
         356918,0,-1,
         356922,0,364360,
         356925,0,-1,
        356929,0,-1,
        356933,0,364360,
        356937,0,-1,
       356940,0,-1,
      356944,0,-1,
     356948,0,-1,
     356951,0,364360,
      356955,0,364360,
       356959,0,364360,
        356962,0,364360,
         356966,0,364360,
          356969,0,364360,
          356977,0,-1,
          356981,0,364360,
          356984,0,-1,
         356988,0,-1,
         356992,0,364360,
         356996,0,-1,
        356999,0,-1,
        357003,0,364360,
         357007,0,364360,
         357010,0,-1,
         357014,0,364360,
         357018,0,-1,
        357022,0,-1,
       357025,0,-1,
       357029,0,364360,
        357032,0,364360,
         357036,0,364360,
         357040,0,-1,
         357044,0,364360,
         357056,0,-1,
        357063,0,-1,
        357068,0,364360,
        357073,0,-1,
       357078,0,-1,
      357083,0,-1,
      357087,0,364360,
       357092,0,364360,
        357110,0,364360,
         357115,0,364360,
         357134,0,-1,
         357139,0,364360,
         357144,0,-1,
        357149,0,-1,
        357154,0,364360,
        357159,0,-1,
       357164,0,-1,
       357169,0,364360,
        357188,0,364360,
        357193,0,-1,
        357210,0,364360,
        357215,0,-1,
       357220,0,-1,
      357224,0,-1,
     357229,0,-1,
    357234,0,-1,
   357239,0,-1,
   357244,0,364360,
    357248,0,364360,
     357253,0,364360,
      357272,0,364360,
       357277,0,364360,
        357282,0,364360,
         357287,0,364360,
          357292,0,364360,
           357297,0,364360,
           357302,0,-1,
           357307,0,364360,
           357312,0,-1,
          357317,0,-1,
          357322,0,364360,
          357327,0,-1,
         357332,0,-1,
         357337,0,364360,
          357342,0,364360,
          357347,0,-1,
          357352,0,364360,
          357357,0,-1,
         357362,0,-1,
        357367,0,-1,
        357372,0,364360,
         357377,0,364360,
          357397,0,364360,
          357402,0,-1,
          357419,0,364360,
          357424,0,-1,
         357429,0,-1,
         357434,0,364360,
         357439,0,-1,
        357443,0,-1,
       357447,0,-1,
       357451,0,364360,
        357454,0,364360,
         357458,0,364360,
          357461,0,364360,
          357465,0,-1,
          357469,0,364360,
          357472,0,-1,
         357476,0,-1,
         357480,0,364360,
         357483,0,-1,
        357487,0,-1,
        357490,0,364360,
         357494,0,364360,
         357497,0,-1,
         357501,0,364360,
         357505,0,-1,
        357508,0,-1,
       357512,0,-1,
      357515,0,-1,
      357519,0,364360,
       357522,0,364360,
        357526,0,364360,
         357530,0,364360,
          357533,0,364360,
          357537,0,-1,
          357540,0,364360,
          357544,0,-1,
         357547,0,-1,
         357551,0,364360,
         357555,0,-1,
        357558,0,-1,
        357562,0,364360,
         357565,0,364360,
         357569,0,-1,
         357572,0,364360,
         357576,0,-1,
        357580,0,-1,
       357583,0,-1,
       357587,0,364360,
        357590,0,364360,
         357594,0,364360,
         357597,0,-1,
         357601,0,364360,
         357604,0,-1,
        357608,0,-1,
        357612,0,364360,
        357615,0,-1,
       357619,0,-1,
      357622,0,-1,
     357626,0,-1,
     357629,0,364360,
      357633,0,364360,
       357636,0,364360,
        357640,0,364360,
         357643,0,364360,
          357647,0,364360,
          357651,0,-1,
          357654,0,364360,
          357658,0,-1,
         357664,0,-1,
         357668,0,364360,
         357673,0,-1,
        357678,0,-1,
        357682,0,364360,
         357687,0,364360,
         357692,0,-1,
         357711,0,364360,
         357716,0,-1,
        357721,0,-1,
       357726,0,-1,
       357731,0,364360,
        357736,0,364360,
         357741,0,364360,
         357746,0,-1,
         357751,0,364360,
         357756,0,-1,
        357761,0,-1,
        357766,0,364360,
        357784,0,-1,
       357789,0,-1,
      357794,0,-1,
      357798,0,364360,
       357803,0,364360,
        357808,0,364360,
         357813,0,364360,
         357832,0,-1,
         357838,0,364360,
         357843,0,-1,
        357847,0,-1,
        357866,0,364360,
        357871,0,-1,
       357876,0,-1,
       357881,0,364360,
        357886,0,364360,
        357891,0,-1,
        357896,0,364360,
        357906,0,-1,
       357912,0,-1,
      357917,0,-1,
     357922,0,-1,
    357928,0,-1,
    357932,0,364360,
     357937,0,364360,
      357941,0,364360,
       357959,0,364360,
        357964,0,364360,
         357968,0,364360,
          357973,0,364360,
          357978,0,-1,
          357982,0,364360,
          357987,0,-1,
         358005,0,-1,
         358009,0,364360,
         358012,0,-1,
        358016,0,-1,
        358020,0,364360,
         358024,0,364360,
         358028,0,-1,
         358045,0,364360,
         358049,0,-1,
        358053,0,-1,
       358058,0,-1,
       358076,0,364360,
        358080,0,364360,
         358084,0,364360,
         358088,0,-1,
         358091,0,364360,
         358095,0,-1,
        358099,0,-1,
        358102,0,364360,
        358106,0,-1,
       358110,0,-1,
      358114,0,-1,
      358117,0,364360,
       358121,0,364360,
        358125,0,364360,
         358128,0,364360,
         358132,0,-1,
         358136,0,364360,
         358139,0,-1,
        358143,0,-1,
        358147,0,364360,
        358151,0,-1,
       358155,0,-1,
       358158,0,364360,
        358162,0,364360,
        358166,0,-1,
        358169,0,364360,
        358173,0,-1,
       358177,0,-1,
      358180,0,-1,
     358186,0,-1,
     358191,0,364360,
      358195,0,364360,
       358200,0,364360,
        358205,0,364360,
         358210,0,364360,
         358215,0,-1,
         358220,0,364360,
         358225,0,-1,
        358230,0,-1,
        358235,0,364360,
        358240,0,-1,
       358245,0,-1,
       358250,0,364360,
        358255,0,364360,
        358260,0,-1,
        358265,0,364360,
        358283,0,-1,
       358288,0,-1,
      358293,0,-1,
      358298,0,364360,
       358303,0,364360,
        358308,0,364360,
        358313,0,-1,
        358317,0,364360,
        358323,0,-1,
       358329,0,-1,
       358335,0,364360,
       358359,0,-1,
      358364,0,-1,
     358369,0,-1,
    358374,0,-1,
   358379,0,-1,
  358385,0,-1,
 358391,0,-1,
 358397,0,26800,
 358435,0,-1,
 358443,0,25776,
 358456,0,-1,
 358461,0,26288,
 358471,0,-1,
 358476,0,25264,
 358485,0,-1,
 358504,0,26800,
 358513,0,-1,
 358517,0,25776,
 358524,0,-1,
 358528,0,26288,
 358535,0,-1,
 358538,0,25264,
 358545,0,-1,
 358549,0,25264,
 358552,0,-1,
 358558,0,39504,
 358562,0,-1,
 358565,0,39504,
 358569,0,-1,
 358573,0,39504,
 358577,0,-1,
 358580,0,40320,
 358584,0,-1,
 358588,0,40320,
 358591,0,-1,
 358595,0,40320,
 358598,0,-1,
 358602,0,39504,
 358605,0,-1,
 358609,0,39504,
 358612,0,-1,
 358616,0,39504,
 358620,0,-1,
 358623,0,40320,
 358627,0,-1,
 358630,0,40320,
 358634,0,-1,
 358637,0,40320,
 358641,0,-1,
 358645,0,49912,
 358666,0,-1,
 358671,0,50416,
 358681,0,-1,
 358685,0,50920,
 358691,0,-1,
 358695,0,51424,
 358699,0,-1,
 358703,0,51928,
 358707,0,-1,
 358710,0,52584,
 358716,0,-1,
 358720,0,53088,
 358724,0,-1,
 358728,0,53744,
 358732,0,-1,
 358736,0,45520,
 358740,0,-1,
 358743,0,46032,
 358747,0,-1,
 358751,0,46544,
 358755,0,-1,
 358759,0,47056,
 358762,0,-1,
 358766,0,47568,
 358770,0,-1,
 358773,0,48232,
 358777,0,-1,
 358781,0,48744,
 358784,0,-1,
 358788,0,49408,
 358794,0,-1,
 358798,0,40832,
 358802,0,-1,
 358807,0,41344,
 358812,0,-1,
 358817,0,41856,
 358821,0,-1,
 358826,0,42368,
 358831,0,-1,
 358836,0,42880,
 358841,0,-1,
 358846,0,43392,
 358851,0,-1,
 358855,0,39504,
 358874,0,-1,
 358878,0,40320,
 358883,0,-1,
 358889,0,44200,
 358894,0,-1,
 358899,0,45008,
 358904,0,-1,
 358908,0,33064,
 358914,1024,-1,
 358919,1024,33064,
 358924,1104,-1,
 358928,1104,33064,
 358933,1264,-1,
 358938,1264,33064,
 358946,2096,-1,
 358964,2096,32392,
  358993,2096,365136,
  358999,2096,-1,
  359018,2096,23096,
  359022,2096,-1,
 359028,2096,-1,
 359033,2096,32392,
 359062,2096,-1,
 359069,2096,32392,
  359093,2096,365144,
   359099,2096,365144,
    359104,2096,365144,
     359109,2096,365144,
      359114,2096,365144,
       359119,2096,365144,
        359123,2096,365144,
         359128,2096,365144,
          359133,2096,365144,
           359152,2096,365144,
            359157,2096,365144,
             359161,2096,365144,
              359169,2096,365144,
               359173,2096,365144,
                359176,2096,365144,
                 359180,2096,365144,
                  359184,2096,365144,
                   359187,2096,365144,
                    359191,2096,365144,
                     359195,2096,365144,
                      359199,2096,365144,
                       359218,2096,365144,
                        359221,2096,365144,
                         359225,2096,365144,
                          359229,2096,365144,
                           359232,2096,365144,
                            359236,2096,365144,
                             359240,2096,365144,
                              359243,2096,365144,
                               359247,2096,365144,
                                359251,2096,365144,
                                 359254,2096,365144,
                                  359258,2096,365144,
                                   359262,2096,365144,
                                    359266,2096,365144,
                                     359269,2096,365144,
                                      359273,2096,365144,
                                       359277,2096,365144,
                                        359280,2096,365144,
                                         359284,2096,365144,
                                          359288,2096,365144,
                                           359291,2096,365144,
                                            359295,2096,365144,
                                             359299,2096,365144,
                                              359303,2096,365144,
                                               359307,2096,365144,
                                                359310,2096,365144,
                                                 359314,2096,365144,
                                                  359318,2096,365144,
                                                   359322,2096,365144,
                                                    359325,2096,365144,
                                                     359329,2096,365144,
                                                      359333,2096,365144,
                                                       359336,2096,365144,
                                                        359340,2096,365144,
                                                         359344,2096,365144,
                                                          359348,2096,365144,
                                                           359351,2096,365144,
                                                            359355,2096,365144,
                                                             359359,2096,365144,
                                                              359363,2096,365144,
                                                               359366,2096,365144,
                                                                359372,2096,365144,
                                                                 359377,2096,365144,
                                                                  359382,2096,365144,
                                                                   359387,2096,365144,
                                                                    359392,2096,365144,
                                                                     359398,2096,365144,
                                                                      359403,2096,365144,
                                                                       359408,2096,365144,
                                                                        359413,2096,365144,
                                                                         359418,2096,365144,
                                                                          359423,2096,365144,
                                                                           359428,2096,365144,
                                                                            359434,2096,365144,
                                                                             359443,2096,365144,
                                                                              359448,2096,365144,
                                                                               359453,2096,365144,
                                                                                359459,2096,365144,
                                                                                 359464,2096,365144,
                                                                                  359469,2096,365144,
                                                                                   359474,2096,365144,
                                                                                    359479,2096,365144,
                                                                                     359484,2096,365144,
                                                                                      359490,2096,365144,
                                                                                       359495,2096,365144,
                                                                                        359500,2096,365144,
                                                                                         359505,2096,365144,
                                                                                          359510,2096,365144,
                                                                                           359516,2096,365144,
                                                                                            359521,2096,365144,
                                                                                             359526,2096,365144,
                                                                                              359532,2096,365144,
                                                                                               359537,2096,365144,
                                                                                                359542,2096,365144,
                                                                                                 359548,2096,365144,
                                                                                                  359553,2096,365144,
                                                                                                   359558,2096,365144,
                                                                                                    359563,2096,365144,
                                                                                                     359569,2096,365144,
                                                                                                      359574,2096,365144,
                                                                                                       359580,2096,365144,
                                                                                                        359585,2096,365144,
                                                                                                         359590,2096,365144,
                                                                                                          359595,2096,365144,
                                                                                                           359600,2096,365144,
                                                                                                            359605,2096,365144,
                                                                                                             359611,2096,365144,
                                                                                                              359616,2096,365144,
                                                                                                               359621,2096,365144,
                                                                                                                359627,2096,365144,
                                                                                                                 359634,2096,365144,
                                                                                                                  359638,2096,365144,
                                                                                                                   359642,2096,365144,
                                                                                                                    359646,2096,365144,
                                                                                                                     359649,2096,365144,
                                                                                                                      359653,2096,365144,
                                                                                                                       359657,2096,365144,
                                                                                                                        359661,2096,365144,
                                                                                                                         359665,2096,365144,
                                                                                                                          359669,2096,365144,
                                                                                                                           359673,2096,365144,
                                                                                                                            359676,2096,365144,
                                                                                                                             359680,2096,365144,
                                                                                                                              359684,2096,365144,
                                                                                                                               359688,2096,365144,
                                                                                                                                359692,2096,365144,
                                                                                                                                 359696,2096,365144,
                                                                                                                                 359700,2096,-1,
                                                                                                                                359704,2096,-1,
                                                                                                                               359708,2096,-1,
                                                                                                                              359712,2096,-1,
                                                                                                                             359716,2096,-1,
                                                                                                                            359720,2096,-1,
                                                                                                                           359723,2096,-1,
                                                                                                                          359727,2096,-1,
                                                                                                                         359732,2096,-1,
                                                                                                                        359736,2096,-1,
                                                                                                                       359739,2096,-1,
                                                                                                                      359743,2096,-1,
                                                                                                                     359749,2096,-1,
                                                                                                                    359753,2096,-1,
                                                                                                                   359757,2096,-1,
                                                                                                                  359761,2096,-1,
                                                                                                                 359765,2096,-1,
                                                                                                                359769,2096,-1,
                                                                                                               359773,2096,-1,
                                                                                                              359777,2096,-1,
                                                                                                             359780,2096,-1,
                                                                                                            359784,2096,-1,
                                                                                                           359788,2096,-1,
                                                                                                          359792,2096,-1,
                                                                                                         359796,2096,-1,
                                                                                                        359800,2096,-1,
                                                                                                       359803,2096,-1,
                                                                                                      359807,2096,-1,
                                                                                                     359811,2096,-1,
                                                                                                    359815,2096,-1,
                                                                                                   359819,2096,-1,
                                                                                                  359823,2096,-1,
                                                                                                 359827,2096,-1,
                                                                                                359830,2096,-1,
                                                                                               359834,2096,-1,
                                                                                              359838,2096,-1,
                                                                                             359842,2096,-1,
                                                                                            359846,2096,-1,
                                                                                           359851,2096,-1,
                                                                                          359856,2096,-1,
                                                                                         359861,2096,-1,
                                                                                        359867,2096,-1,
                                                                                       359872,2096,-1,
                                                                                      359877,2096,-1,
                                                                                     359883,2096,-1,
                                                                                    359888,2096,-1,
                                                                                   359893,2096,-1,
                                                                                  359899,2096,-1,
                                                                                 359922,2096,-1,
                                                                                359928,2096,-1,
                                                                               359933,2096,-1,
                                                                              359938,2096,-1,
                                                                             359943,2096,-1,
                                                                            359948,2096,-1,
                                                                           359954,2096,-1,
                                                                          359959,2096,-1,
                                                                         359964,2096,-1,
                                                                        359983,2096,-1,
                                                                       359988,2096,-1,
                                                                      359993,2096,-1,
                                                                     359999,2096,-1,
                                                                    360004,2096,-1,
                                                                   360010,2096,-1,
                                                                  360015,2096,-1,
                                                                 360020,2096,-1,
                                                                360026,2096,-1,
                                                               360031,2096,-1,
                                                              360036,2096,-1,
                                                             360041,2096,-1,
                                                            360047,2096,-1,
                                                           360052,2096,-1,
                                                          360057,2096,-1,
                                                         360062,2096,-1,
                                                        360067,2096,-1,
                                                       360076,2096,-1,
                                                      360084,2096,-1,
                                                     360091,2096,-1,
                                                    360096,2096,-1,
                                                   360101,2096,-1,
                                                  360120,2096,-1,
                                                 360125,2096,-1,
                                                360130,2096,-1,
                                               360135,2096,-1,
                                              360140,2096,-1,
                                             360145,2096,-1,
                                            360150,2096,-1,
                                           360153,2096,-1,
                                          360157,2096,-1,
                                         360161,2096,-1,
                                        360165,2096,-1,
                                       360168,2096,-1,
                                      360172,2096,-1,
                                     360176,2096,-1,
                                    360180,2096,-1,
                                   360183,2096,-1,
                                  360187,2096,-1,
                                 360191,2096,-1,
                                360208,2096,-1,
                               360211,2096,-1,
                              360215,2096,-1,
                             360219,2096,-1,
                            360222,2096,-1,
                           360226,2096,-1,
                          360229,2096,-1,
                         360233,2096,-1,
                        360237,2096,-1,
                       360240,2096,-1,
                      360244,2096,-1,
                     360254,2096,-1,
                    360257,2096,-1,
                   360261,2096,-1,
                  360265,2096,-1,
                 360268,2096,-1,
                360272,2096,-1,
               360275,2096,-1,
              360279,2096,-1,
             360283,2096,-1,
            360286,2096,-1,
           360290,2096,-1,
          360293,2096,-1,
         360297,2096,-1,
        360301,2096,-1,
       360304,2096,-1,
      360308,2096,-1,
     360311,2096,-1,
    360315,2096,-1,
   360319,2096,-1,
  360322,2096,-1,
 360327,2096,-1,
 360331,2096,32392,
  360347,2096,365168,
  360352,2096,-1,
 360356,2096,-1,
 360360,2096,32392,
  360369,2096,365272,
  360373,2096,-1,
 360377,2096,-1,
 360381,2096,32392,
  360392,2096,365256,
  360398,2096,-1,
 360402,2096,-1,
 360407,2096,32392,
  360417,2096,365184,
   360422,2096,30120,
   360771,2096,-1,
  360793,2096,-1,
 360797,2096,-1,
 360818,2096,357928,
  360822,2096,357840,
  360826,2096,-1,
 360829,2096,-1,
 360833,2096,357928,
  360837,2096,357840,
  360840,2096,-1,
 360844,2096,-1,
 360848,2096,357928,
  360851,2096,357840,
  360855,2096,-1,
 360859,2096,-1,
 360862,2096,357928,
  360866,2096,357840,
   360869,2096,357840,
   360873,2096,-1,
  360877,2096,-1,
 360881,2096,-1,
 360884,2096,357928,
  360888,2096,357840,
   360891,2096,357840,
   360895,2096,-1,
  360899,2096,-1,
 360902,2096,-1,
 360906,2096,357928,
  360909,2096,357840,
   360913,2096,357840,
   360917,2096,-1,
  360920,2096,-1,
 360924,2096,-1,
 360928,2096,357976,
 360932,2096,-1,
 360936,2096,357976,
 360940,2096,-1,
 360943,2096,357976,
 360947,2096,-1,
 360950,2096,357952,
 360954,2096,-1,
 360958,2096,357952,
 360962,2096,-1,
 360965,2096,357952,
 360969,2096,-1,
 360973,2096,358064,
 360976,2096,-1,
 360980,2096,358112,
 360984,2096,-1,
 360987,2096,358088,
 360991,2096,-1,
 360995,2096,358136,
 360999,2096,-1,
 361002,2096,358160,
 361006,2096,-1,
 361010,2096,358192,
 361014,2096,-1,
 361018,2096,358160,
 361021,2096,-1,
 361025,2096,358192,
 361029,2096,-1,
 361033,2096,358224,
 361037,2096,-1,
 361040,2096,358224,
 361045,2096,-1,
 361059,2096,358304,
 361066,2096,-1,
 361071,2096,358304,
 361077,2096,-1,
 361082,2096,358384,
 361086,2096,-1,
 361091,2096,358384,
 361096,2096,-1,
 361099,2096,358384,
 361103,2096,-1,
 361107,2096,358384,
 361111,2096,-1,
 361115,2096,358448,
 361119,2096,-1,
 361123,2096,358448,
 361128,2096,-1,
 361131,2096,358448,
 361136,2096,-1,
 361139,2096,358624,
 361144,2096,-1,
 361148,2096,357976,
 361152,2096,-1,
 361155,2096,358624,
 361160,2096,-1,
 361164,2096,358960,
  361167,2096,357840,
  361171,2096,-1,
 361176,2096,-1,
 361180,2096,359344,
  361183,2096,51928,
  361188,2096,-1,
  361191,2096,51928,
  361195,2096,-1,
 361199,2096,-1,
 361202,2096,359592,
  361206,2096,51928,
  361210,2096,-1,
  361213,2096,51928,
  361217,2096,-1,
 361221,2096,-1,
 361224,2096,359672,
  361228,2096,53088,
  361232,2096,-1,
  361235,2096,53744,
  361240,2096,-1,
 361244,2096,-1,
 361248,2096,359672,
  361252,2096,53088,
  361255,2096,-1,
  361259,2096,53744,
  361263,2096,-1,
 361267,2096,-1,
 361270,2096,358496,
 361274,2096,-1,
 361278,2096,358560,
 361283,2096,-1,
 361288,2096,358032,
 361293,2096,-1,
 361298,2096,358032,
 361303,2096,-1,
 361307,2096,358032,
 361312,2096,-1,
 361317,2096,358032,
 361322,2096,-1,
 361326,2096,358032,
 361332,2096,-1,
 361336,2096,358032,
 361341,2096,-1,
 361346,2096,358032,
 361351,2096,-1,
 361356,2096,358032,
 361361,2096,-1,
 361366,2096,358032,
 361371,2096,-1,
 361376,2096,358032,
 361381,2096,-1,
 361385,2096,358032,
 361391,2096,-1,
 361395,2096,358000,
 361400,2096,-1,
 361405,2096,358000,
 361410,2096,-1,
 361415,2096,358000,
 361420,2096,-1,
 361425,2096,358000,
 361430,2096,-1,
 361434,2096,358000,
 361439,2096,-1,
 361444,2096,358000,
 361449,2096,-1,
 361454,2096,358000,
 361459,2096,-1,
 361464,2096,358000,
 361469,2096,-1,
 361474,2096,358000,
 361479,2096,-1,
 361483,2096,358000,
 361488,2096,-1,
 361493,2096,358000,
 361499,2096,-1,
 361504,2096,33888,
 361509,2096,-1,
 361522,2096,34712,
 361528,2096,-1,
 361533,2096,33064,
 361538,1072,-1,
 361543,1072,33064,
 361548,992,-1,
 361553,992,33064,
 361558,832,-1,
 361562,832,33064,
 361567,0,-1,
 361572,0,30120,
 361606,0,-1,
 361610,0,30120,
 361636,0,-1,
 361639,0,35528,
 361643,0,-1,
 361647,0,33888,
 361651,0,-1,
 361654,0,30120,
 361679,0,-1,
 361683,0,30120,
 361708,0,-1,
 361712,0,34712,
 361716,0,-1,
 361720,0,30120,
 361817,0,-1,
 361825,0,30120,
 361921,0,-1,
 361925,0,30120,
 361966,0,-1,
 361970,0,30120,
 362019,0,-1,
 362026,0,30120,
 362071,0,-1,
 362078,0,30120,
 362130,0,-1,
 362137,0,357744,
 362142,0,-1,
 362147,0,357744,
 362152,0,-1,
 362156,0,357744,
 362161,0,-1,
 362166,0,365488,
 362171,0,-1,
 362176,0,357744,
 362180,0,-1,
 362185,0,365488,
 362191,0,-1,
 362196,0,357744,
 362201,0,-1,
 362205,0,365488,
 362210,0,-1,
 362215,0,357744,
 362220,0,-1,
 362225,0,365488,
 362230,0,-1,
 362235,0,357744,
 362240,0,-1,
 362245,0,365488,
 362250,0,-1,
 362255,0,357744,
 362260,0,-1,
 362265,0,365496,
 362271,0,-1,
 362276,0,365496,
 362280,0,-1,
 362286,0,365496,
 362290,0,-1,
 362294,0,365512,
 362297,0,-1,
 362301,0,365512,
 362305,0,-1,
 362308,0,365512,
 362312,0,-1,
 362316,0,365528,
 362320,0,-1,
 362323,0,365528,
 362327,0,-1,
 362331,0,365496,
 362335,0,-1,
 362339,0,365496,
 362342,0,-1,
 362346,0,365496,
 362350,0,-1,
 362353,0,365512,
 362357,0,-1,
 362361,0,365512,
 362364,0,-1,
 362368,0,365512,
 362372,0,-1,
 362375,0,365528,
 362379,0,-1,
 362383,0,365528,
 362387,0,-1,
 362391,0,365496,
 362394,0,-1,
 362398,0,365496,
 362402,0,-1,
 362405,0,365496,
 362409,0,-1,
 362413,0,365512,
 362416,0,-1,
 362420,0,365512,
 362424,0,-1,
 362427,0,365512,
 362431,0,-1,
 362435,0,365528,
 362438,0,-1,
 362442,0,365528,
 362446,0,-1,
 362450,0,365496,
 362454,0,-1,
 362457,0,365496,
 362461,0,-1,
 362465,0,365496,
 362468,0,-1,
 362472,0,365512,
 362476,0,-1,
 362479,0,365512,
 362483,0,-1,
 362487,0,365512,
 362491,0,-1,
 362494,0,365528,
 362498,0,-1,
 362502,0,365528,
 362505,0,-1,
 362509,0,365496,
 362513,0,-1,
 362517,0,365496,
 362520,0,-1,
 362524,0,365496,
 362528,0,-1,
 362531,0,365512,
 362535,0,-1,
 362539,0,365512,
 362542,0,-1,
 362546,0,365512,
 362550,0,-1,
 362553,0,365528,
 362557,0,-1,
 362561,0,365528,
 362565,0,-1,
 362569,0,365496,
 362572,0,-1,
 362576,0,365496,
 362580,0,-1,
 362583,0,365496,
 362587,0,-1,
 362591,0,365512,
 362595,0,-1,
 362598,0,365512,
 362602,0,-1,
 362606,0,365512,
 362609,0,-1,
 362613,0,365528,
 362617,0,-1,
 362620,0,365528,
 362624,0,-1,
 362628,0,365496,
 362632,0,-1,
 362635,0,365496,
 362639,0,-1,
 362643,0,365496,
 362647,0,-1,
 362650,0,365512,
 362654,0,-1,
 362657,0,365512,
 362661,0,-1,
 362665,0,365512,
 362669,0,-1,
 362672,0,365528,
 362676,0,-1,
 362681,0,365528,
 362692,0,-1,
 362700,0,365624,
  362705,0,30120,
  362945,0,-1,
 362952,0,-1,
 362956,0,365672,
  362960,0,30120,
  363121,0,-1,
 363126,0,-1,
 363130,0,365808,
  363133,0,30120,
  363150,0,-1,
  363154,0,365624,
   363158,0,30120,
   363377,0,-1,
  363383,0,-1,
 363387,0,-1,
 363391,0,365880,
  363396,0,30120,
  363417,0,-1,
  363423,0,365672,
   363427,0,30120,
   363692,0,-1,
  363698,0,-1,
 363702,0,-1,
 363706,0,365624,
  363709,0,30120,
  363857,0,-1,
 363862,0,-1,
 363865,0,365672,
  363869,0,30120,
  364037,0,-1,
 364042,0,-1,
 364046,0,365672,
  364050,0,30120,
  364228,0,-1,
 364236,0,-1,
 364242,0,30120,
 364282,0,-1,
 364288,0,30120,
 364331,0,-1,
 364337,0,30120,
 364379,0,-1,
 364386,0,30120,
 364441,0,-1,
 364448,0,30120,
 364495,0,-1,
 364501,0,30120,
 364544,0,-1,
 364548,0,30120,
 364593,0,-1,
 364598,0,30120,
 364618,0,-1,
 364622,0,30120,
 364650,0,-1,
 364654,0,30120,
 364684,0,-1,
 364688,0,30120,
 364718,0,-1,
 364722,0,30120,
 364749,0,-1,
 364754,0,30120,
 364781,0,-1,
 364785,0,30120,
 364812,0,-1,
 364817,0,30120,
 364846,0,-1,
 364850,0,30120,
 364878,0,-1,
 364882,0,30120,
 364910,0,-1,
 364914,0,30120,
 364946,0,-1,
 364952,0,30120,
 364985,0,-1,
 364991,0,30120,
 365024,0,-1,
 365030,0,23096,
 365035,0,-1,
365040,0,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 23096
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25264
		, "static": true
		, "const": true
		, "time": 19
		, "total": 19
		, "hits": 3
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25776
		, "static": true
		, "const": true
		, "time": 18
		, "total": 18
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26288
		, "static": true
		, "const": true
		, "time": 16
		, "total": 16
		, "hits": 2
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26800
		, "static": true
		, "const": true
		, "time": 47
		, "total": 47
		, "hits": 2
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": true
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": true
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": true
		}]
		, "size": 0
		, "offs": 30120
		, "static": true
		, "const": true
		, "time": 2923
		, "total": 2923
		, "hits": 40
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 32392
		, "static": true
		, "const": true
		, "time": 1803
		, "total": 1803
		, "hits": 7
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33064
		, "static": true
		, "const": true
		, "time": 43
		, "total": 43
		, "hits": 8
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: int32, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 33888
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34712
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 2
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 35528
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 39504
		, "static": true
		, "const": true
		, "time": 43
		, "total": 43
		, "hits": 7
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40320
		, "static": true
		, "const": true
		, "time": 27
		, "total": 27
		, "hits": 7
		, "fails": 0
	}, {
		"": "uint32.pop(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pop"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 40832
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.swap(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "swap"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41344
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.bsr(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsr"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 41856
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.bsf(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsf"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42368
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.hib(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "hib"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42880
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint32.lob(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "lob"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43392
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44200
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45008
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45520
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46032
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46544
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 47056
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 47568
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48232
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48744
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49408
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49912
		, "static": true
		, "const": true
		, "time": 21
		, "total": 21
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50416
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50920
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51424
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51928
		, "static": true
		, "const": true
		, "time": 20
		, "total": 20
		, "hits": 5
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52584
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53088
		, "static": true
		, "const": true
		, "time": 11
		, "total": 11
		, "hits": 3
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53744
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 3
		, "fails": 0
	}, {
		"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "assertEq"
		, "type": "function"
		, "file": "lib/std/debug.ci"
		, "line": 64
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "lib/std/debug.ci"
			, "line": 64
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "expected"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "expected"
			, "type": "int32"
			, "file": "lib/std/debug.ci"
			, "line": 64
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "returned"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "returned"
			, "type": "int32"
			, "file": "lib/std/debug.ci"
			, "line": 64
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "file": "lib/std/debug.ci"
			, "line": 64
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": true
		}]
		, "size": 94
		, "offs": 357744
		, "static": true
		, "const": true
		, "time": 37
		, "total": 37
		, "hits": 8
		, "fails": 0
	}, {
		"": "Math.modf(x: float64, intPart: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "modf"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 22
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "intPart"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "intPart"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 22
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 86
		, "offs": 357840
		, "static": true
		, "const": true
		, "time": 46
		, "total": 46
		, "hits": 10
		, "fails": 0
	}, {
		"": "Math.floor(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "floor"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 47
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 357928
		, "static": true
		, "const": true
		, "time": 45
		, "total": 88
		, "hits": 6
		, "fails": 0
	}, {
		"": "Math.abs(x: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abs"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 77
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 77
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 77
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 18
		, "offs": 357952
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.abs(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abs"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 85
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 85
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 85
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 18
		, "offs": 357976
		, "static": true
		, "const": true
		, "time": 15
		, "total": 15
		, "hits": 4
		, "fails": 0
	}, {
		"": "Math.absMod(val: float32, mod: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 93
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 93
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "val"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 93
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "mod"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 93
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 358000
		, "static": true
		, "const": true
		, "time": 54
		, "total": 54
		, "hits": 11
		, "fails": 0
	}, {
		"": "Math.absMod(val: float64, mod: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 101
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "val"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "mod"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 101
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 358032
		, "static": true
		, "const": true
		, "time": 55
		, "total": 55
		, "hits": 11
		, "fails": 0
	}, {
		"": "Math.min(a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 115
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 115
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 115
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 115
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 358064
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.min(a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 123
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 123
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 123
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 123
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 358088
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.max(a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 137
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 137
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 137
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 137
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 358112
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.max(a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 145
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 145
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 145
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 145
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 17
		, "offs": 358136
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.clamp(t: float32, a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 159
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "t"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 159
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 358160
		, "static": true
		, "const": true
		, "time": 7
		, "total": 7
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.clamp(t: float64, a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 170
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "t"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 170
			, "size": 8
			, "offs": 32
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 358192
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.min(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 201
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 201
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 201
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 358224
		, "static": true
		, "const": true
		, "time": 8
		, "total": 8
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.max(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 215
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 215
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 215
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 358304
		, "static": true
		, "const": true
		, "time": 13
		, "total": 13
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.sum(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sum"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 229
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 229
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 229
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 358384
		, "static": true
		, "const": true
		, "time": 18
		, "total": 18
		, "hits": 4
		, "fails": 0
	}, {
		"": "Math.eval(x: float64, polynomial: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "eval"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 255
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 255
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 255
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "polynomial"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "polynomial"
			, "type": "float64[]"
			, "file": "lib/std/math.ci"
			, "line": 255
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 47
		, "offs": 358448
		, "static": true
		, "const": true
		, "time": 12
		, "total": 12
		, "hits": 3
		, "fails": 0
	}, {
		"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 264
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "eps"
			, "type": "float32"
			, "file": "lib/std/math.ci"
			, "line": 264
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 358496
		, "static": true
		, "const": true
		, "time": 3
		, "total": 3
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 279
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 279
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 279
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 279
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "eps"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 279
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 358560
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.sinCos(arg: float64, quad: int32): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinCos"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 294
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 294
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 294
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "quad"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "quad"
			, "type": "int32"
			, "file": "lib/std/math.ci"
			, "line": 294
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 335
		, "offs": 358624
		, "static": true
		, "const": true
		, "time": 9
		, "total": 9
		, "hits": 2
		, "fails": 0
	}, {
		"": "Math.tan(arg: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 351
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 351
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 351
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 378
		, "offs": 358960
		, "static": true
		, "const": true
		, "time": 9
		, "total": 12
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.sinh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinh"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 408
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 408
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 408
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 241
		, "offs": 359344
		, "static": true
		, "const": true
		, "time": 11
		, "total": 19
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.cosh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cosh"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 447
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 447
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 447
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 75
		, "offs": 359592
		, "static": true
		, "const": true
		, "time": 10
		, "total": 18
		, "hits": 1
		, "fails": 0
	}, {
		"": "Math.asin(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "asin"
		, "owner": "Math"
		, "type": "function"
		, "file": "lib/std/math.ci"
		, "line": 462
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 462
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "lib/std/math.ci"
			, "line": 462
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 173
		, "offs": 359672
		, "static": true
		, "const": true
		, "time": 24
		, "total": 39
		, "hits": 2
		, "fails": 0
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 7
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 364288
		, "static": true
		, "const": true
		, "time": 10
		, "total": 10
		, "hits": 2
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 33
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 364352
		, "static": true
		, "const": true
		, "time": 23
		, "total": 23
		, "hits": 2
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "test/lang/function.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 54
		, "offs": 364360
		, "static": true
		, "const": true
		, "time": 7517
		, "total": 7517
		, "hits": 753
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "test/std/tryExec.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 365136
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "test/std/tryExec.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 365144
		, "static": true
		, "const": true
		, "time": 1229
		, "total": 1229
		, "hits": 128
		, "fails": -128
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "test/std/tryExec.ci"
		, "line": 19
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 19
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 19
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 365168
		, "static": true
		, "const": true
		, "time": 5
		, "total": 5
		, "hits": 1
		, "fails": -1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "test/std/tryExec.ci"
		, "line": 23
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 23
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 23
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 68
		, "offs": 365184
		, "static": true
		, "const": true
		, "time": 28
		, "total": 376
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "test/std/tryExec.ci"
		, "line": 37
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 37
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 37
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 365256
		, "static": true
		, "const": true
		, "time": 6
		, "total": 6
		, "hits": 1
		, "fails": -1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "test/std/tryExec.ci"
		, "line": 42
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/std/tryExec.ci"
			, "line": 42
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "test/std/tryExec.ci"
			, "line": 42
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 365272
		, "static": true
		, "const": true
		, "time": 4
		, "total": 4
		, "hits": 1
		, "fails": -1
	}, {
		"": "lenSlice(values: int64[]): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "lenSlice"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 103
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 103
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang/array.ci"
			, "line": 103
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": true
		}]
		, "size": 4
		, "offs": 365488
		, "static": true
		, "const": true
		, "time": 25
		, "total": 25
		, "hits": 5
		, "fails": 0
	}, {
		"": "nthFixed(idx: int32, values: int64[7]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthFixed"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 104
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[7]"
			, "file": "test/lang/array.ci"
			, "line": 104
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": true
		}]
		, "size": 12
		, "offs": 365496
		, "static": true
		, "const": true
		, "time": 79
		, "total": 79
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthArray(idx: int32, values: int64[*]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthArray"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 105
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "values"
			, "type": "int64[*]"
			, "file": "test/lang/array.ci"
			, "line": 105
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": true
		}]
		, "size": 12
		, "offs": 365512
		, "static": true
		, "const": true
		, "time": 74
		, "total": 74
		, "hits": 21
		, "fails": 0
	}, {
		"": "nthSlice(idx: int32, values: int64[]): int64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "nthSlice"
		, "type": "function"
		, "file": "test/lang/array.ci"
		, "line": 106
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i64"
			, "name": ".result"
			, "type": "int64"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "idx"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "idx"
			, "type": "int32"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "values"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "values"
			, "type": "int64[]"
			, "file": "test/lang/array.ci"
			, "line": 106
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": true
		}]
		, "size": 12
		, "offs": 365528
		, "static": true
		, "const": true
		, "time": 59
		, "total": 59
		, "hits": 14
		, "fails": 0
	}, {
		"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 10
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 10
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 10
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 10
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 365624
		, "static": true
		, "const": true
		, "time": 32
		, "total": 638
		, "hits": 3
		, "fails": 0
	}, {
		"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 40
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 40
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 40
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 40
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 365672
		, "static": true
		, "const": true
		, "time": 41
		, "total": 811
		, "hits": 4
		, "fails": 0
	}, {
		"": "staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 84
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 84
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 84
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 84
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 66
		, "offs": 365808
		, "static": true
		, "const": true
		, "time": 12
		, "total": 257
		, "hits": 1
		, "fails": 0
	}, {
		"": "virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "type": "function"
		, "file": "test/lang/method.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "test/lang/method.ci"
			, "line": 90
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "test/lang/method.ci"
			, "line": 90
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "test/lang/method.ci"
			, "line": 90
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 63
		, "offs": 365880
		, "static": true
		, "const": true
		, "time": 16
		, "total": 311
		, "hits": 1
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 14634
		, "offs": 368572
		, "static": true
		, "const": false
		, "time": 1168
		, "total": 14249
		, "hits": 1
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 121
	, "statementCount": 1209
}
}

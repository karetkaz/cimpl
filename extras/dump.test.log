test/stdc.memory.ci:26:/d: val1: int64(42)
test/stdc.memory.ci:27:/d: val2: int64(96)
test/stdc.memory.ci:32:/d: val1: int64(0)
test/stdc.memory.ci:33:/d: val2: int64(42)
test/stdc.execute.ci:34:/f: fatal error: NotEquals({
	message: char[*]("assertion failed"),
	expected: int32(97),
	returned: int32(77)
})
test/lang.array.ci:83:/d: string as variant: char[7]([7] {'s', 't', 'r', 'i', 'n', 'g', ''})
test/lang.array.ci:84:/d: string to variant: char[7]([7] {'s', 't', 'r', 'i', 'n', 'g', ''})
test/lang.array.ci:87:/d: string as variant: char[*]("string")
test/lang.array.ci:88:/d: string to variant: char[*]("string")
test/lang.array.ci:91:/d: string as variant: char[]([0] {})
test/lang.array.ci:92:/d: string to variant: char[]([0] {})
test/lang.method.ci:41:/d: virtual
	test/lang.method.ci:69: print(this: {
		abstractMethod: <RecordMethodTest.staticMethod @0374b0>,
		delegateMethod: <globalFunction @037520>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <RecordMethodTest.print @0374d0>
	})
	native.code:: .main
test/lang.method.ci:60:/d: override
	test/lang.method.ci:70: customPrint(this: {
		abstractMethod: <globalFunction @037520>,
		delegateMethod: <RecordMethodTest.forwardMethod @0374c8>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <customPrint @037528>
	})
	native.code:: .main
test/lang.method.ci:45:/d: static
	test/lang.method.ci:73: printStatic(this: {
		abstractMethod: <RecordMethodTest.staticMethod @0374b0>,
		delegateMethod: <globalFunction @037520>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <RecordMethodTest.print @0374d0>
	})
	native.code:: .main
test/lang.method.ci:76:/d: extension
	test/lang.method.ci:84: print(this: {
		abstractMethod: <RecordMethodTest.staticMethod @0374b0>,
		delegateMethod: <globalFunction @037520>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <RecordMethodTest.print @0374d0>
	})
	native.code:: .main
test/lang.method.ci:80:/d: extension
	test/lang.method.ci:85: printStatic(this: {
		abstractMethod: <RecordMethodTest.staticMethod @0374b0>,
		delegateMethod: <globalFunction @037520>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <RecordMethodTest.print @0374d0>
	})
	native.code:: .main
test/lang.method.ci:76:/d: extension
	test/lang.method.ci:86: print(this: {
		abstractMethod: <globalFunction @037520>,
		delegateMethod: <RecordMethodTest.forwardMethod @0374c8>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <customPrint @037528>
	})
	native.code:: .main
test/lang.method.ci:41:/d: virtual
	test/lang.method.ci:89: print(this: {
		abstractMethod: <RecordMethodTest.staticMethod @0374b0>,
		delegateMethod: <globalFunction @037520>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <RecordMethodTest.print @0374d0>
	})
	native.code:: .main
test/lang.method.ci:45:/d: static
	test/lang.method.ci:90: printStatic(this: {
		abstractMethod: <RecordMethodTest.staticMethod @0374b0>,
		delegateMethod: <globalFunction @037520>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <RecordMethodTest.print @0374d0>
	})
	native.code:: .main
test/lang.method.ci:41:/d: virtual
	test/lang.method.ci:91: print(this: {
		abstractMethod: <globalFunction @037520>,
		delegateMethod: <RecordMethodTest.forwardMethod @0374c8>,
		virtualMethod: <RecordMethodTest.virtualMethod @0374c0>,
		print: <customPrint @037528>
	})
	native.code:: .main
test/lang.statementIf.ci:4:/d: 0 == 0
	... 1 more
test/lang.statementIf.ci:12:/d: 0 == 0
	native.code:: .main
test/lang.statementIf.ci:22:/d: 0 == 0
	native.code:: .main
test/lang.statementIf.ci:29:/d: t == 0: int32(0)
	native.code:: .main
test/lang.statementIf.ci:37:/d: t == 0: int32(0)
	native.code:: .main
test/lang.statementIf.ci:47:/d: t == 0: int32(0)
	native.code:: .main
test/lang.statementIf.ci:51:/d: t == 0: int32(0)
	native.code:: .main
test/lang.statementFor.ci:4:/d: for ( ; ; )
test/lang.statementFor.ci:9:/d: for (int i = 0; i < 2; i += 1): int32(0)
test/lang.statementFor.ci:9:/d: for (int i = 0; i < 2; i += 1): int32(1)
test/lang.statementFor.ci:14:/d: for (forIdx = 0; forIdx < 2; forIdx += 1): int32(0)
test/lang.statementFor.ci:14:/d: for (forIdx = 0; forIdx < 2; forIdx += 1): int32(1)
test/lang.statementFor.ci:21:/d: for with continue: int32(2)
test/lang.statementFor.ci:21:/d: for with continue: int32(3)
test/lang.statementFor.ci:21:/d: for with continue: int32(4)
test/lang.statementFor.ci:21:/d: for with continue: int32(5)
test/lang.statementFor.ci:21:/d: for with continue: int32(6)
test/lang.statementFor.ci:28:/d: for with break: int32(0)
test/lang.statementFor.ci:28:/d: for with break: int32(1)
test/lang.statementFor.ci:28:/d: for with break: int32(2)


---------- Compile: `stdlib.ci`

---------- Compile: `test.ci`

---------- Generate:

---------- Symbols:
typename: typename {
.kind: static const typename(ref)
.base: `typename`
.size: 136
.name: 'typename'
.print: '%T'
.field size: int32 (size: 4 -> const variable)
.field offset: int32 (size: 4 -> const variable)
.field base: function (size: 0 -> static const inline)
.field file: function (size: 0 -> static const inline)
.field line: function (size: 0 -> static const inline)
.field name: function (size: 0 -> static const inline)
}
typename.size: int32 {
.kind: const variable
.base: `int32`
.size: 4
.name: 'size'
.owner: typename
}
typename.offset: int32 {
.kind: const variable
.base: `int32`
.size: 4
.name: 'offset'
.print: '@%06x'
.owner: typename
}
typename.base(type: typename): typename: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'base'
.owner: typename
.param .result: typename (size: 4 -> inline)
.param type: typename (size: 4 -> variable(ref))
.value: nfc(1)
}
typename.file(type: typename): .cstr: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'file'
.owner: typename
.param .result: .cstr (size: 4 -> inline)
.param type: typename (size: 4 -> variable(ref))
.value: nfc(2)
}
typename.line(type: typename): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'line'
.owner: typename
.param .result: int32 (size: 4 -> inline)
.param type: typename (size: 4 -> variable(ref))
.value: nfc(3)
}
typename.name(type: typename): .cstr: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'name'
.owner: typename
.param .result: .cstr (size: 4 -> inline)
.param type: typename (size: 4 -> variable(ref))
.value: nfc(4)
}
void: typename {
.kind: static const typename(void)
.base: `typename`
.size: 0
.name: 'void'
}
bool: typename {
.kind: static const typename(bool)
.base: `typename`
.size: 1
.name: 'bool'
.print: '%d'
.value: 0
}
char: typename {
.kind: static const typename(u32)
.base: `typename`
.size: 1
.name: 'char'
.print: '%c'
.value: 0
}
int8: typename {
.kind: static const typename(i32)
.base: `typename`
.size: 1
.name: 'int8'
.print: '%d'
.value: 0
}
int16: typename {
.kind: static const typename(i32)
.base: `typename`
.size: 2
.name: 'int16'
.print: '%d'
.value: 0
}
int32: typename {
.kind: static const typename(i32)
.base: `typename`
.size: 4
.name: 'int32'
.print: '%d'
.value: 0
}
int64: typename {
.kind: static const typename(i64)
.base: `typename`
.size: 8
.name: 'int64'
.print: '%D'
.value: 0
}
uint8: typename {
.kind: static const typename(u32)
.base: `typename`
.size: 1
.name: 'uint8'
.print: '%u'
.value: 0
}
uint16: typename {
.kind: static const typename(u32)
.base: `typename`
.size: 2
.name: 'uint16'
.print: '%u'
.value: 0
}
uint32: typename {
.kind: static const typename(u32)
.base: `typename`
.size: 4
.name: 'uint32'
.print: '%u'
.field zxt: function (size: 0 -> static const inline)
.field sxt: function (size: 0 -> static const inline)
.value: 0
}
uint32.zxt(value: int32, offs: int32, count: int32): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'zxt'
.owner: uint32
.param .result: int32 (size: 4 -> inline)
.param value: int32 (size: 4 -> variable(i32))
.param offs: int32 (size: 4 -> variable(i32))
.param count: int32 (size: 4 -> variable(i32))
.value: nfc(17)
}
uint32.sxt(value: int32, offs: int32, count: int32): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sxt'
.owner: uint32
.param .result: int32 (size: 4 -> inline)
.param value: int32 (size: 4 -> variable(i32))
.param offs: int32 (size: 4 -> variable(i32))
.param count: int32 (size: 4 -> variable(i32))
.value: nfc(18)
}
uint64: typename {
.kind: static const typename(u64)
.base: `typename`
.size: 8
.name: 'uint64'
.print: '%U'
.field zxt: function (size: 0 -> static const inline)
.field sxt: function (size: 0 -> static const inline)
.value: 0
}
uint64.zxt(value: int64, offs: int32, count: int32): int64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'zxt'
.owner: uint64
.param .result: int64 (size: 8 -> inline)
.param value: int64 (size: 8 -> variable(i64))
.param offs: int32 (size: 4 -> variable(i32))
.param count: int32 (size: 4 -> variable(i32))
.value: nfc(19)
}
uint64.sxt(value: int64, offs: int32, count: int32): int64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sxt'
.owner: uint64
.param .result: int64 (size: 8 -> inline)
.param value: int64 (size: 8 -> variable(i64))
.param offs: int32 (size: 4 -> variable(i32))
.param count: int32 (size: 4 -> variable(i32))
.value: nfc(20)
}
float32: typename {
.kind: static const typename(f32)
.base: `typename`
.size: 4
.name: 'float32'
.print: '%f'
.field sin: function (size: 0 -> static const inline)
.field cos: function (size: 0 -> static const inline)
.field tan: function (size: 0 -> static const inline)
.field log: function (size: 0 -> static const inline)
.field exp: function (size: 0 -> static const inline)
.field pow: function (size: 0 -> static const inline)
.field sqrt: function (size: 0 -> static const inline)
.field atan2: function (size: 0 -> static const inline)
.value: 0
}
float32.sin(x: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sin'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.value: nfc(21)
}
float32.cos(x: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'cos'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.value: nfc(22)
}
float32.tan(x: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'tan'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.value: nfc(23)
}
float32.log(x: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'log'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.value: nfc(24)
}
float32.exp(x: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'exp'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.value: nfc(25)
}
float32.pow(x: float32, y: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'pow'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.param y: float32 (size: 4 -> variable(f32))
.value: nfc(26)
}
float32.sqrt(x: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sqrt'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.value: nfc(27)
}
float32.atan2(x: float32, y: float32): float32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'atan2'
.owner: float32
.param .result: float32 (size: 4 -> inline)
.param x: float32 (size: 4 -> variable(f32))
.param y: float32 (size: 4 -> variable(f32))
.value: nfc(28)
}
float64: typename {
.kind: static const typename(f64)
.base: `typename`
.size: 8
.name: 'float64'
.print: '%F'
.field sin: function (size: 0 -> static const inline)
.field cos: function (size: 0 -> static const inline)
.field tan: function (size: 0 -> static const inline)
.field log: function (size: 0 -> static const inline)
.field exp: function (size: 0 -> static const inline)
.field pow: function (size: 0 -> static const inline)
.field sqrt: function (size: 0 -> static const inline)
.field atan2: function (size: 0 -> static const inline)
.value: 0
}
float64.sin(x: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sin'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.value: nfc(29)
}
float64.cos(x: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'cos'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.value: nfc(30)
}
float64.tan(x: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'tan'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.value: nfc(31)
}
float64.log(x: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'log'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.value: nfc(32)
}
float64.exp(x: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'exp'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.value: nfc(33)
}
float64.pow(x: float64, y: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'pow'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.param y: float64 (size: 8 -> variable(f64))
.value: nfc(34)
}
float64.sqrt(x: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sqrt'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.value: nfc(35)
}
float64.atan2(x: float64, y: float64): float64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'atan2'
.owner: float64
.param .result: float64 (size: 8 -> inline)
.param x: float64 (size: 8 -> variable(f64))
.param y: float64 (size: 8 -> variable(f64))
.value: nfc(36)
}
pointer: typename {
.kind: static const typename(ref)
.base: `typename`
.size: 4
.name: 'pointer'
.field alloc: function (size: 0 -> static const inline)
.field fill: function (size: 0 -> static const inline)
.field copy: function (size: 0 -> static const inline)
}
pointer.alloc(ptr: pointer, size: int32): pointer: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'alloc'
.owner: pointer
.param .result: pointer (size: 4 -> inline)
.param ptr: pointer (size: 4 -> variable(ref))
.param size: int32 (size: 4 -> variable(i32))
.value: nfc(7)
}
pointer.fill(dst: pointer, value: int32, size: int32): pointer: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'fill'
.owner: pointer
.param .result: pointer (size: 4 -> inline)
.param dst: pointer (size: 4 -> variable(ref))
.param value: int32 (size: 4 -> variable(i32))
.param size: int32 (size: 4 -> variable(i32))
.value: nfc(8)
}
pointer.copy(dst: pointer, src: pointer, size: int32): pointer: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'copy'
.owner: pointer
.param .result: pointer (size: 4 -> inline)
.param dst: pointer (size: 4 -> variable(ref))
.param src: pointer (size: 4 -> variable(ref))
.param size: int32 (size: 4 -> variable(i32))
.value: nfc(9)
}
variant: typename {
.kind: static const typename(var)
.base: `typename`
.size: 8
.name: 'variant'
}
function: typename {
.kind: static const typename(ref)
.base: `typename`
.size: 8
.name: 'function'
}
object: typename {
.kind: static const typename(ref)
.base: `typename`
.size: 4
.name: 'object'
}
null: pointer {
.kind: static const inline
.base: `pointer`
.size: 0
.name: 'null'
.value: {pointer @0}
}
true: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'true'
.value: 1
}
false: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'false'
.value: 0
}
int: typename {
.kind: static const inline
.base: `typename`
.size: 0
.name: 'int'
.value: int32
}
byte: typename {
.kind: static const inline
.base: `typename`
.size: 0
.name: 'byte'
.value: uint8
}
float: typename {
.kind: static const inline
.base: `typename`
.size: 0
.name: 'float'
.value: float32
}
double: typename {
.kind: static const inline
.base: `typename`
.size: 0
.name: 'double'
.value: float64
}
.cstr: char {
.kind: static const typename(arr)
.base: `char`
.size: 4
.name: '.cstr'
.print: '%s'
}
emit: function {
.kind: static const typename(void)
.base: `function`
.size: 0
.name: 'emit'
.field nop: void (size: 0 -> static const inline)
.field not: bool (size: 0 -> static const inline)
.field set: void (size: 0 -> static const inline)
.field join: void (size: 0 -> static const inline)
.field ret: void (size: 0 -> static const inline)
.field call: void (size: 0 -> static const inline)
.field p4x: typename (size: 16 -> static const typename(val))
.field dup: void (size: 0 -> static const typename(void))
.field load: void (size: 0 -> static const typename(void))
.field store: void (size: 0 -> static const typename(void))
.field cmt: void (size: 0 -> static const typename(void))
.field and: void (size: 0 -> static const typename(void))
.field or: void (size: 0 -> static const typename(void))
.field xor: void (size: 0 -> static const typename(void))
.field shl: void (size: 0 -> static const typename(void))
.field shr: void (size: 0 -> static const typename(void))
.field neg: void (size: 0 -> static const typename(void))
.field add: void (size: 0 -> static const typename(void))
.field sub: void (size: 0 -> static const typename(void))
.field mul: void (size: 0 -> static const typename(void))
.field div: void (size: 0 -> static const typename(void))
.field mod: void (size: 0 -> static const typename(void))
.field ceq: void (size: 0 -> static const typename(void))
.field clt: void (size: 0 -> static const typename(void))
.field cgt: void (size: 0 -> static const typename(void))
.field min: void (size: 0 -> static const typename(void))
.field max: void (size: 0 -> static const typename(void))
}
emit.nop: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'nop'
.owner: emit
.value: nop
}
emit.not: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'not'
.owner: emit
.value: not.b32
}
emit.set: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'set'
.owner: emit
.value: set.x1 sp(1)
}
emit.join: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'join'
.owner: emit
.value: sync 1
}
emit.ret: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'ret'
.owner: emit
.value: ret
}
emit.call: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'call'
.owner: emit
.value: call
}
emit.p4x: typename {
.kind: static const typename(val)
.base: `typename`
.size: 16
.name: 'p4x'
.owner: emit
.field dp3: float32 (size: 0 -> static const inline)
.field dp4: float32 (size: 0 -> static const inline)
.field dph: float32 (size: 0 -> static const inline)
}
emit.p4x.dp3: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'dp3'
.owner: emit.p4x
.value: dp3.v4f
}
emit.p4x.dp4: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'dp4'
.owner: emit.p4x
.value: dp4.v4f
}
emit.p4x.dph: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'dph'
.owner: emit.p4x
.value: dph.v4f
}
emit.dup: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'dup'
.owner: emit
.field x1: int32 (size: 0 -> static const inline)
.field x2: int64 (size: 0 -> static const inline)
.field x4: emit.p4x (size: 0 -> static const inline)
}
emit.dup.x1: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'x1'
.owner: emit.dup
.value: dup.x1 sp(0)
}
emit.dup.x2: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'x2'
.owner: emit.dup
.value: dup.x2 sp(0)
}
emit.dup.x4: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'x4'
.owner: emit.dup
.value: dup.x4 sp(0)
}
emit.load: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'load'
.owner: emit
.field z32: int32 (size: 0 -> static const inline)
.field z64: int64 (size: 0 -> static const inline)
.field z128: emit.p4x (size: 0 -> static const inline)
.field i8: int32 (size: 0 -> static const inline)
.field i16: int32 (size: 0 -> static const inline)
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field i128: emit.p4x (size: 0 -> static const inline)
}
emit.load.z32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'z32'
.owner: emit.load
.value: load.z32
}
emit.load.z64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'z64'
.owner: emit.load
.value: load.z64
}
emit.load.z128: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'z128'
.owner: emit.load
.value: load.z128
}
emit.load.i8: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i8'
.owner: emit.load
.value: load.m8
}
emit.load.i16: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i16'
.owner: emit.load
.value: load.m16
}
emit.load.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.load
.value: load.m32
}
emit.load.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.load
.value: load.m64
}
emit.load.i128: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'i128'
.owner: emit.load
.value: load.m128
}
emit.store: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'store'
.owner: emit
.field i8: void (size: 0 -> static const inline)
.field i16: void (size: 0 -> static const inline)
.field i32: void (size: 0 -> static const inline)
.field i64: void (size: 0 -> static const inline)
.field i128: void (size: 0 -> static const inline)
}
emit.store.i8: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'i8'
.owner: emit.store
.value: store.m8
}
emit.store.i16: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'i16'
.owner: emit.store
.value: store.m16
}
emit.store.i32: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'i32'
.owner: emit.store
.value: store.m32
}
emit.store.i64: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'i64'
.owner: emit.store
.value: store.m64
}
emit.store.i128: void {
.kind: static const inline
.base: `void`
.size: 0
.name: 'i128'
.owner: emit.store
.value: store.m128
}
emit.cmt: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'cmt'
.owner: emit
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint64 (size: 0 -> static const inline)
}
emit.cmt.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.cmt
.value: cmt.b32
}
emit.cmt.u64: uint64 {
.kind: static const inline
.base: `uint64`
.size: 0
.name: 'u64'
.owner: emit.cmt
.value: cmt.b64
}
emit.and: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'and'
.owner: emit
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint64 (size: 0 -> static const inline)
}
emit.and.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.and
.value: and.b32
}
emit.and.u64: uint64 {
.kind: static const inline
.base: `uint64`
.size: 0
.name: 'u64'
.owner: emit.and
.value: and.b64
}
emit.or: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'or'
.owner: emit
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint64 (size: 0 -> static const inline)
}
emit.or.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.or
.value: or.b32
}
emit.or.u64: uint64 {
.kind: static const inline
.base: `uint64`
.size: 0
.name: 'u64'
.owner: emit.or
.value: or.b64
}
emit.xor: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'xor'
.owner: emit
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint64 (size: 0 -> static const inline)
}
emit.xor.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.xor
.value: xor.b32
}
emit.xor.u64: uint64 {
.kind: static const inline
.base: `uint64`
.size: 0
.name: 'u64'
.owner: emit.xor
.value: xor.b64
}
emit.shl: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'shl'
.owner: emit
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint64 (size: 0 -> static const inline)
}
emit.shl.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.shl
.value: shl.b32
}
emit.shl.u64: uint64 {
.kind: static const inline
.base: `uint64`
.size: 0
.name: 'u64'
.owner: emit.shl
.value: shl.b64
}
emit.shr: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'shr'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint64 (size: 0 -> static const inline)
}
emit.shr.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.shr
.value: sar.b32
}
emit.shr.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.shr
.value: sar.b64
}
emit.shr.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.shr
.value: shr.b32
}
emit.shr.u64: uint64 {
.kind: static const inline
.base: `uint64`
.size: 0
.name: 'u64'
.owner: emit.shr
.value: shr.b64
}
emit.neg: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'neg'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field f32: float32 (size: 0 -> static const inline)
.field f64: float64 (size: 0 -> static const inline)
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.neg.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.neg
.value: neg.i32
}
emit.neg.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.neg
.value: neg.i64
}
emit.neg.f32: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'f32'
.owner: emit.neg
.value: neg.f32
}
emit.neg.f64: float64 {
.kind: static const inline
.base: `float64`
.size: 0
.name: 'f64'
.owner: emit.neg
.value: neg.f64
}
emit.neg.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.neg
.value: neg.v4f
}
emit.neg.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.neg
.value: neg.v2d
}
emit.add: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'add'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field f32: float32 (size: 0 -> static const inline)
.field f64: float64 (size: 0 -> static const inline)
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.add.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.add
.value: add.i32
}
emit.add.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.add
.value: add.i64
}
emit.add.f32: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'f32'
.owner: emit.add
.value: add.f32
}
emit.add.f64: float64 {
.kind: static const inline
.base: `float64`
.size: 0
.name: 'f64'
.owner: emit.add
.value: add.f64
}
emit.add.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.add
.value: add.v4f
}
emit.add.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.add
.value: add.v2d
}
emit.sub: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'sub'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field f32: float32 (size: 0 -> static const inline)
.field f64: float64 (size: 0 -> static const inline)
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.sub.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.sub
.value: sub.i32
}
emit.sub.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.sub
.value: sub.i64
}
emit.sub.f32: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'f32'
.owner: emit.sub
.value: sub.f32
}
emit.sub.f64: float64 {
.kind: static const inline
.base: `float64`
.size: 0
.name: 'f64'
.owner: emit.sub
.value: sub.f64
}
emit.sub.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.sub
.value: sub.v4f
}
emit.sub.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.sub
.value: sub.v2d
}
emit.mul: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'mul'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint32 (size: 0 -> static const inline)
.field f32: float32 (size: 0 -> static const inline)
.field f64: float64 (size: 0 -> static const inline)
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.mul.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.mul
.value: mul.i32
}
emit.mul.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.mul
.value: mul.i64
}
emit.mul.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.mul
.value: mul.u32
}
emit.mul.u64: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u64'
.owner: emit.mul
.value: mul.u64
}
emit.mul.f32: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'f32'
.owner: emit.mul
.value: mul.f32
}
emit.mul.f64: float64 {
.kind: static const inline
.base: `float64`
.size: 0
.name: 'f64'
.owner: emit.mul
.value: mul.f64
}
emit.mul.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.mul
.value: mul.v4f
}
emit.mul.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.mul
.value: mul.v2d
}
emit.div: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'div'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint32 (size: 0 -> static const inline)
.field f32: float32 (size: 0 -> static const inline)
.field f64: float64 (size: 0 -> static const inline)
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.div.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.div
.value: div.i32
}
emit.div.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.div
.value: div.i64
}
emit.div.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.div
.value: div.u32
}
emit.div.u64: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u64'
.owner: emit.div
.value: div.u64
}
emit.div.f32: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'f32'
.owner: emit.div
.value: div.f32
}
emit.div.f64: float64 {
.kind: static const inline
.base: `float64`
.size: 0
.name: 'f64'
.owner: emit.div
.value: div.f64
}
emit.div.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.div
.value: div.v4f
}
emit.div.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.div
.value: div.v2d
}
emit.mod: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'mod'
.owner: emit
.field i32: int32 (size: 0 -> static const inline)
.field i64: int64 (size: 0 -> static const inline)
.field u32: uint32 (size: 0 -> static const inline)
.field u64: uint32 (size: 0 -> static const inline)
.field f32: float32 (size: 0 -> static const inline)
.field f64: float64 (size: 0 -> static const inline)
}
emit.mod.i32: int32 {
.kind: static const inline
.base: `int32`
.size: 0
.name: 'i32'
.owner: emit.mod
.value: mod.i32
}
emit.mod.i64: int64 {
.kind: static const inline
.base: `int64`
.size: 0
.name: 'i64'
.owner: emit.mod
.value: mod.i64
}
emit.mod.u32: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u32'
.owner: emit.mod
.value: mod.u32
}
emit.mod.u64: uint32 {
.kind: static const inline
.base: `uint32`
.size: 0
.name: 'u64'
.owner: emit.mod
.value: mod.u64
}
emit.mod.f32: float32 {
.kind: static const inline
.base: `float32`
.size: 0
.name: 'f32'
.owner: emit.mod
.value: mod.f32
}
emit.mod.f64: float64 {
.kind: static const inline
.base: `float64`
.size: 0
.name: 'f64'
.owner: emit.mod
.value: mod.f64
}
emit.ceq: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'ceq'
.owner: emit
.field i32: bool (size: 0 -> static const inline)
.field i64: bool (size: 0 -> static const inline)
.field f32: bool (size: 0 -> static const inline)
.field f64: bool (size: 0 -> static const inline)
.field p4f: bool (size: 0 -> static const inline)
.field p2d: bool (size: 0 -> static const inline)
}
emit.ceq.i32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'i32'
.owner: emit.ceq
.value: ceq.i32
}
emit.ceq.i64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'i64'
.owner: emit.ceq
.value: ceq.i64
}
emit.ceq.f32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'f32'
.owner: emit.ceq
.value: ceq.f32
}
emit.ceq.f64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'f64'
.owner: emit.ceq
.value: ceq.f64
}
emit.ceq.p4f: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'p4f'
.owner: emit.ceq
.value: ceq.v4f
}
emit.ceq.p2d: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'p2d'
.owner: emit.ceq
.value: ceq.v2d
}
emit.clt: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'clt'
.owner: emit
.field i32: bool (size: 0 -> static const inline)
.field i64: bool (size: 0 -> static const inline)
.field u32: bool (size: 0 -> static const inline)
.field u64: bool (size: 0 -> static const inline)
.field f32: bool (size: 0 -> static const inline)
.field f64: bool (size: 0 -> static const inline)
}
emit.clt.i32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'i32'
.owner: emit.clt
.value: clt.i32
}
emit.clt.i64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'i64'
.owner: emit.clt
.value: clt.i64
}
emit.clt.u32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'u32'
.owner: emit.clt
.value: clt.u32
}
emit.clt.u64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'u64'
.owner: emit.clt
.value: clt.u64
}
emit.clt.f32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'f32'
.owner: emit.clt
.value: clt.f32
}
emit.clt.f64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'f64'
.owner: emit.clt
.value: clt.f64
}
emit.cgt: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'cgt'
.owner: emit
.field i32: bool (size: 0 -> static const inline)
.field i64: bool (size: 0 -> static const inline)
.field u32: bool (size: 0 -> static const inline)
.field u64: bool (size: 0 -> static const inline)
.field f32: bool (size: 0 -> static const inline)
.field f64: bool (size: 0 -> static const inline)
}
emit.cgt.i32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'i32'
.owner: emit.cgt
.value: cgt.i32
}
emit.cgt.i64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'i64'
.owner: emit.cgt
.value: cgt.i64
}
emit.cgt.u32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'u32'
.owner: emit.cgt
.value: cgt.u32
}
emit.cgt.u64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'u64'
.owner: emit.cgt
.value: cgt.u64
}
emit.cgt.f32: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'f32'
.owner: emit.cgt
.value: cgt.f32
}
emit.cgt.f64: bool {
.kind: static const inline
.base: `bool`
.size: 0
.name: 'f64'
.owner: emit.cgt
.value: cgt.f64
}
emit.min: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'min'
.owner: emit
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.min.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.min
.value: min.v4f
}
emit.min.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.min
.value: min.v2d
}
emit.max: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'max'
.owner: emit
.field p4f: emit.p4x (size: 0 -> static const inline)
.field p2d: emit.p4x (size: 0 -> static const inline)
}
emit.max.p4f: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p4f'
.owner: emit.max
.value: max.v4f
}
emit.max.p2d: emit.p4x {
.kind: static const inline
.base: `emit.p4x`
.size: 0
.name: 'p2d'
.owner: emit.max
.value: max.v2d
}
halt(): void: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'halt'
.param .result: void (size: 0 -> inline)
.value: nfc(0)
}
CLOCKS_PER_SEC: int32 {
.kind: i32
.base: `int32`
.size: 0
.name: 'CLOCKS_PER_SEC'
.value: 1000000
}
RAND_MAX: int32 {
.kind: i32
.base: `int32`
.size: 0
.name: 'RAND_MAX'
.value: 2147483647
}
raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'raise'
.field abort: int32 (size: 0 -> static i32)
.field error: int32 (size: 0 -> static i32)
.field warn: int32 (size: 0 -> static i32)
.field info: int32 (size: 0 -> static i32)
.field debug: int32 (size: 0 -> static i32)
.field verbose: int32 (size: 0 -> static i32)
.field noTrace: int32 (size: 0 -> static i32)
.field defTrace: int32 (size: 0 -> static i32)
.param .result: void (size: 0 -> inline)
.param file: char[*] (size: 4 -> variable(ref))
.param line: int32 (size: 4 -> variable(i32))
.param level: int32 (size: 4 -> variable(i32))
.param message: char[*] (size: 4 -> variable(ref))
.param inspect: variant (size: 8 -> variable(var))
.param maxTrace: int32 (size: 4 -> variable(i32))
.value: nfc(5)
}
raise.abort: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'abort'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: -1
}
raise.error: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'error'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 0
}
raise.warn: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'warn'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 1
}
raise.info: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'info'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 2
}
raise.debug: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'debug'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 3
}
raise.verbose: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'verbose'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 4
}
raise.noTrace: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'noTrace'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 0
}
raise.defTrace: int32 {
.kind: static i32
.base: `int32`
.size: 0
.name: 'defTrace'
.owner: raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
.value: 128
}
tryExec(args: pointer, action(args: pointer): void): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'tryExec'
.param .result: int32 (size: 4 -> inline)
.param args: pointer (size: 4 -> variable(ref))
.param action: function (size: 4 -> variable(ref))
.value: nfc(6)
}
System: void {
.kind: static const typename(void)
.base: `void`
.size: 0
.name: 'System'
.field exit: function (size: 0 -> static const inline)
.field srand: function (size: 0 -> static const inline)
.field rand: function (size: 0 -> static const inline)
.field time: function (size: 0 -> static const inline)
.field clock: function (size: 0 -> static const inline)
.field millis: function (size: 0 -> static const inline)
.field sleep: function (size: 0 -> static const inline)
}
System.exit(code: int32): void: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'exit'
.owner: System
.param .result: void (size: 0 -> inline)
.param code: int32 (size: 4 -> variable(i32))
.value: nfc(10)
}
System.srand(seed: int32): void: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'srand'
.owner: System
.param .result: void (size: 0 -> inline)
.param seed: int32 (size: 4 -> variable(i32))
.value: nfc(11)
}
System.rand(): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'rand'
.owner: System
.param .result: int32 (size: 4 -> inline)
.value: nfc(12)
}
System.time(): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'time'
.owner: System
.param .result: int32 (size: 4 -> inline)
.value: nfc(13)
}
System.clock(): int32: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'clock'
.owner: System
.param .result: int32 (size: 4 -> inline)
.value: nfc(14)
}
System.millis(): int64: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'millis'
.owner: System
.param .result: int64 (size: 8 -> inline)
.value: nfc(15)
}
System.sleep(millis: int64): void: function {
.kind: static const inline
.base: `function`
.size: 0
.name: 'sleep'
.owner: System
.param .result: void (size: 0 -> inline)
.param millis: int64 (size: 8 -> variable(i64))
.value: nfc(16)
}
verbose(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'verbose'
.file: 'stdlib.ci'
.line: 5
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.verbose, message, inspect, raise.noTrace)
}
verbose(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'verbose'
.file: 'stdlib.ci'
.line: 6
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.verbose, message, null, raise.noTrace)
}
trace(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'trace'
.file: 'stdlib.ci'
.line: 8
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.debug, message, inspect, raise.defTrace)
}
trace(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'trace'
.file: 'stdlib.ci'
.line: 9
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.debug, message, null, raise.defTrace)
}
debug(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'debug'
.file: 'stdlib.ci'
.line: 11
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.debug, message, inspect, raise.noTrace)
}
debug(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'debug'
.file: 'stdlib.ci'
.line: 12
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.debug, message, null, raise.noTrace)
}
info(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'info'
.file: 'stdlib.ci'
.line: 14
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.info, message, inspect, raise.noTrace)
}
info(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'info'
.file: 'stdlib.ci'
.line: 15
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.info, message, null, raise.noTrace)
}
warn(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'warn'
.file: 'stdlib.ci'
.line: 17
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.warn, message, inspect, raise.noTrace)
}
warn(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'warn'
.file: 'stdlib.ci'
.line: 18
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.warn, message, null, raise.noTrace)
}
error(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'error'
.file: 'stdlib.ci'
.line: 20
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.error, message, inspect, raise.defTrace)
}
error(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'error'
.file: 'stdlib.ci'
.line: 21
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.error, message, null, raise.defTrace)
}
abort(message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'abort'
.file: 'stdlib.ci'
.line: 23
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: raise(raise.abort, message, inspect, raise.defTrace)
}
abort(message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'abort'
.file: 'stdlib.ci'
.line: 24
.param .result: void (size: 0 -> void)
.param message: char[*] (size: 4 -> ref)
.value: raise(raise.abort, message, null, raise.defTrace)
}
abort(): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'abort'
.file: 'stdlib.ci'
.line: 25
.param .result: void (size: 0 -> void)
.value: raise(raise.abort, "execution aborted!", null, raise.defTrace)
}
assert(condition: bool, message: char[*], inspect: variant): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'assert'
.file: 'stdlib.ci'
.line: 27
.param .result: void (size: 0 -> void)
.param condition: bool (size: 4 -> bool)
.param message: char[*] (size: 4 -> ref)
.param inspect: variant (size: 8 -> var)
.value: void(condition ? void(0) : abort(message, inspect))
}
assert(condition: bool, message: char[*]): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'assert'
.file: 'stdlib.ci'
.line: 28
.param .result: void (size: 0 -> void)
.param condition: bool (size: 4 -> bool)
.param message: char[*] (size: 4 -> ref)
.value: void(condition ? void(0) : abort(message))
}
assert(condition: bool): void: function {
.kind: inline
.base: `function`
.size: 0
.name: 'assert'
.file: 'stdlib.ci'
.line: 29
.param .result: void (size: 0 -> void)
.param condition: bool (size: 4 -> bool)
.value: void(condition ? void(0) : abort("assertion failed!"))
}
sizeof(type: typename): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'sizeof'
.file: 'stdlib.ci'
.line: 33
.param .result: int32 (size: 4 -> i32)
.param type: typename (size: 4 -> ref)
.value: int32(type.size)
}
integer: typename {
.kind: inline
.base: `typename`
.size: 0
.name: 'integer'
.file: 'test.ci'
.line: 4
.value: int64
}
t: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 't'
.file: 'extras/Tests/lang.statementIf.ci'
.line: 26
.value: 0
}
forIdx: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'forIdx'
.file: 'extras/Tests/lang.statementFor.ci'
.line: 12
}
rgbF32: typename {
.kind: static const typename(val)
.base: `typename`
.size: 16
.name: 'rgbF32'
.file: 'extras/Tests/lang.record.ci'
.line: 2
.field r: float32 (size: 4 -> variable(f32))
.field g: float32 (size: 4 -> variable(f32))
.field b: float32 (size: 4 -> variable(f32))
}
rgbF32.r: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'r'
.file: 'extras/Tests/lang.record.ci'
.line: 3
.owner: rgbF32
}
rgbF32.g: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'g'
.file: 'extras/Tests/lang.record.ci'
.line: 4
.owner: rgbF32
}
rgbF32.b: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.record.ci'
.line: 5
.owner: rgbF32
}
rgbU8: typename {
.kind: static const typename(val)
.base: `typename`
.size: 3
.name: 'rgbU8'
.file: 'extras/Tests/lang.record.ci'
.line: 9
.field b: uint8 (size: 1 -> variable(u32))
.field g: uint8 (size: 1 -> variable(u32))
.field r: uint8 (size: 1 -> variable(u32))
}
rgbU8.b: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'b'
.file: 'extras/Tests/lang.record.ci'
.line: 10
.owner: rgbU8
}
rgbU8.g: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'g'
.file: 'extras/Tests/lang.record.ci'
.line: 11
.owner: rgbU8
}
rgbU8.r: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'r'
.file: 'extras/Tests/lang.record.ci'
.line: 12
.owner: rgbU8
}
color: typename {
.kind: static const typename(val)
.base: `typename`
.size: 4
.name: 'color'
.file: 'extras/Tests/lang.record.ci'
.line: 16
.field col: uint32 (size: 4 -> variable(u32))
.field rgb: rgbU8 (size: 3 -> variable(val))
}
color.col: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'col'
.file: 'extras/Tests/lang.record.ci'
.line: 17
.owner: color
}
color.rgb: rgbU8 {
.kind: variable(val)
.base: `rgbU8`
.size: 3
.name: 'rgb'
.file: 'extras/Tests/lang.record.ci'
.line: 18
.owner: color
}
Color: object {
.kind: static const typename(ref)
.base: `object`
.size: 20
.name: 'Color'
.file: 'extras/Tests/lang.record.ci'
.line: 22
.field value: rgbF32 (size: 16 -> variable(val))
}
Color.value: rgbF32 {
.kind: variable(val)
.base: `rgbF32`
.size: 16
.name: 'value'
.file: 'extras/Tests/lang.record.ci'
.line: 23
.owner: Color
}
record_pack0: typename {
.kind: static const typename(val)
.base: `typename`
.size: 8
.name: 'record_pack0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 2
.field _0: uint8 (size: 1 -> variable(u32))
.field a: uint64 (size: 8 -> variable(u64))
.field _1: uint8 (size: 1 -> variable(u32))
.field b: uint32 (size: 4 -> variable(u32))
.field _2: uint8 (size: 1 -> variable(u32))
.field c: uint16 (size: 2 -> variable(u32))
}
record_pack0._0: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 3
.owner: record_pack0
}
record_pack0.a: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'a'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 4
.owner: record_pack0
}
record_pack0._1: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 5
.owner: record_pack0
}
record_pack0.b: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 6
.owner: record_pack0
}
record_pack0._2: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 7
.owner: record_pack0
}
record_pack0.c: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'c'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 8
.owner: record_pack0
}
record_pack1: typename {
.kind: static const typename(val)
.base: `typename`
.size: 17
.name: 'record_pack1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 12
.field _0: uint8 (size: 1 -> variable(u32))
.field a: uint64 (size: 8 -> variable(u64))
.field _1: uint8 (size: 1 -> variable(u32))
.field b: uint32 (size: 4 -> variable(u32))
.field _2: uint8 (size: 1 -> variable(u32))
.field c: uint16 (size: 2 -> variable(u32))
}
record_pack1._0: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 13
.owner: record_pack1
}
record_pack1.a: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'a'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 14
.owner: record_pack1
}
record_pack1._1: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 15
.owner: record_pack1
}
record_pack1.b: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 16
.owner: record_pack1
}
record_pack1._2: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 17
.owner: record_pack1
}
record_pack1.c: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'c'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 18
.owner: record_pack1
}
record_pack2: typename {
.kind: static const typename(val)
.base: `typename`
.size: 20
.name: 'record_pack2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 22
.field _0: uint8 (size: 1 -> variable(u32))
.field a: uint64 (size: 8 -> variable(u64))
.field _1: uint8 (size: 1 -> variable(u32))
.field b: uint32 (size: 4 -> variable(u32))
.field _2: uint8 (size: 1 -> variable(u32))
.field c: uint16 (size: 2 -> variable(u32))
}
record_pack2._0: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 23
.owner: record_pack2
}
record_pack2.a: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'a'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 24
.owner: record_pack2
}
record_pack2._1: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 25
.owner: record_pack2
}
record_pack2.b: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 26
.owner: record_pack2
}
record_pack2._2: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 27
.owner: record_pack2
}
record_pack2.c: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'c'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 28
.owner: record_pack2
}
record_pack4: typename {
.kind: static const typename(val)
.base: `typename`
.size: 24
.name: 'record_pack4'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 32
.field _0: uint8 (size: 1 -> variable(u32))
.field a: uint64 (size: 8 -> variable(u64))
.field _1: uint8 (size: 1 -> variable(u32))
.field b: uint32 (size: 4 -> variable(u32))
.field _2: uint8 (size: 1 -> variable(u32))
.field c: uint16 (size: 2 -> variable(u32))
}
record_pack4._0: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 33
.owner: record_pack4
}
record_pack4.a: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'a'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 34
.owner: record_pack4
}
record_pack4._1: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 35
.owner: record_pack4
}
record_pack4.b: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 36
.owner: record_pack4
}
record_pack4._2: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 37
.owner: record_pack4
}
record_pack4.c: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'c'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 38
.owner: record_pack4
}
record_pack8: typename {
.kind: static const typename(val)
.base: `typename`
.size: 32
.name: 'record_pack8'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 42
.field _0: uint8 (size: 1 -> variable(u32))
.field a: uint64 (size: 8 -> variable(u64))
.field _1: uint8 (size: 1 -> variable(u32))
.field b: uint32 (size: 4 -> variable(u32))
.field _2: uint8 (size: 1 -> variable(u32))
.field c: uint16 (size: 2 -> variable(u32))
}
record_pack8._0: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 43
.owner: record_pack8
}
record_pack8.a: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'a'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 44
.owner: record_pack8
}
record_pack8._1: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 45
.owner: record_pack8
}
record_pack8.b: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 46
.owner: record_pack8
}
record_pack8._2: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 47
.owner: record_pack8
}
record_pack8.c: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'c'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 48
.owner: record_pack8
}
record_packDef: typename {
.kind: static const typename(val)
.base: `typename`
.size: 32
.name: 'record_packDef'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 52
.field _0: uint8 (size: 1 -> variable(u32))
.field a: uint64 (size: 8 -> variable(u64))
.field _1: uint8 (size: 1 -> variable(u32))
.field b: uint32 (size: 4 -> variable(u32))
.field _2: uint8 (size: 1 -> variable(u32))
.field c: uint16 (size: 2 -> variable(u32))
}
record_packDef._0: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_0'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 53
.owner: record_packDef
}
record_packDef.a: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'a'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 54
.owner: record_packDef
}
record_packDef._1: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_1'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 55
.owner: record_packDef
}
record_packDef.b: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'b'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 56
.owner: record_packDef
}
record_packDef._2: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: '_2'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 57
.owner: record_packDef
}
record_packDef.c: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'c'
.file: 'extras/Tests/lang.recordPack.ci'
.line: 58
.owner: record_packDef
}
zero(a: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'zero'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 3
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.value: 0
}
last(a: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'last'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 4
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.value: b
}
sum(a: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'sum'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 5
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.value: a + b
}
any(a: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'any'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 6
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> variable(i32))
.param b: int32 (size: 4 -> i32)
.value: (a) ? a : b
}
min(a: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'min'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 7
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> variable(i32))
.param b: int32 (size: 4 -> variable(i32))
.value: a < b ? a : b
}
sum(a: int32, b: int32, c: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'sum'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 9
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.param c: int32 (size: 4 -> i32)
.value: sum(sum(a, b), c)
}
any(a: int32, b: int32, c: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'any'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 10
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.param c: int32 (size: 4 -> i32)
.value: any(any(a, b), c)
}
min(a: int32, b: int32, c: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'min'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 11
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.param c: int32 (size: 4 -> i32)
.value: min(min(a, b), c)
}
ma: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'ma'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 16
.value: 3
}
mb: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'mb'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 17
.value: 6
}
mc: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'mc'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 18
.value: 9
}
zeroVal: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zeroVal'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 20
.value: zero(2, 3)
}
zeroVar: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zeroVar'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 21
.value: zero(ma, mb)
}
zeroXpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zeroXpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 22
.value: zero(ma + mb, mb + mc)
}
lastVal: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'lastVal'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 24
.value: last(2, 3)
}
lastVar: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'lastVar'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 25
.value: last(ma, mb)
}
lastXpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'lastXpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 26
.value: last(ma + mb, mb + mc)
}
sum2Val: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sum2Val'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 28
.value: sum(3, 12)
}
sum2Var: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sum2Var'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 29
.value: sum(ma, mb)
}
sum2Xpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sum2Xpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 30
.value: sum(ma + mb, mb + mc)
}
any2Val: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'any2Val'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 32
.value: any(3, 12)
}
any2Var: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'any2Var'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 33
.value: any(ma, mb)
}
any2Xpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'any2Xpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 34
.value: any(ma + mb, mb + mc)
}
min2Val: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'min2Val'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 36
.value: min(3, 12)
}
min2Var: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'min2Var'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 37
.value: min(ma, mb)
}
min2Xpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'min2Xpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 38
.value: min(ma + mb, mb + mc)
}
any3Val: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'any3Val'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 45
.value: any(3, 2, 6)
}
any3Var: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'any3Var'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 46
.value: any(ma, mb, mc)
}
any3Xpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'any3Xpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 47
.value: any(ma + mb, mb + mc, mc + ma)
}
min3Val: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'min3Val'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 49
.value: min(3, 2, 6)
}
min3Var: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'min3Var'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 50
.value: min(ma, mb, mc)
}
min3Xpr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'min3Xpr'
.file: 'extras/Tests/lang.inlineArgs.ci'
.line: 51
.value: min(ma + mb, mb + mc, mc + ma)
}
overload: typename {
.kind: inline
.base: `typename`
.size: 0
.name: 'overload'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 3
.value: 1
}
overload(): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'overload'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 4
.param .result: int32 (size: 4 -> i32)
.value: 2
}
overload(a: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'overload'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 5
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.value: 3
}
overload(a: float32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'overload'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 6
.param .result: int32 (size: 4 -> i32)
.param a: float32 (size: 4 -> f32)
.value: 4
}
overload(a: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'overload'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 7
.param .result: int32 (size: 4 -> i32)
.param a: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.value: 5
}
overload1: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'overload1'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 9
.value: overload
}
overload2: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'overload2'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 10
.value: overload()
}
overload3: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'overload3'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 11
.value: overload(0)
}
overload4: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'overload4'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 12
.value: overload(0.000000)
}
overload5: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'overload5'
.file: 'extras/Tests/test.inlineOverload.ci'
.line: 13
.value: overload(0, 0)
}
emitldz32: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'emitldz32'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 3
.value: emit(load.z32)
}
emitldz64: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'emitldz64'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 4
.value: emit(load.z64)
}
emitA: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'emitA'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 6
.value: 42
}
emitB: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'emitB'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 7
.value: 96
}
emitAddI32: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'emitAddI32'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 9
.value: emit(int32(emitA), int32(emitB), add.i32)
}
emitDivI32: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'emitDivI32'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 10
.value: emit(int32(10), int32(5), div.i32)
}
emitNfcF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'emitNfcF32'
.file: 'extras/Tests/lang.inlineEmit.ci'
.line: 11
.value: emit(float32(3.140000 / (2)), float32.sin)
}
sizeofVoid: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofVoid'
.file: 'extras/Tests/lang.reflection.ci'
.line: 3
.value: sizeof(void)
}
sizeofBool: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofBool'
.file: 'extras/Tests/lang.reflection.ci'
.line: 4
.value: sizeof(bool)
}
sizeofChar: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofChar'
.file: 'extras/Tests/lang.reflection.ci'
.line: 5
.value: sizeof(char)
}
sizeofInt8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofInt8'
.file: 'extras/Tests/lang.reflection.ci'
.line: 6
.value: sizeof(int8)
}
sizeofInt16: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofInt16'
.file: 'extras/Tests/lang.reflection.ci'
.line: 7
.value: sizeof(int16)
}
sizeofInt32: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofInt32'
.file: 'extras/Tests/lang.reflection.ci'
.line: 8
.value: sizeof(int32)
}
sizeofInt64: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofInt64'
.file: 'extras/Tests/lang.reflection.ci'
.line: 9
.value: sizeof(int64)
}
sizeofUint8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofUint8'
.file: 'extras/Tests/lang.reflection.ci'
.line: 10
.value: sizeof(uint8)
}
sizeofUint16: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofUint16'
.file: 'extras/Tests/lang.reflection.ci'
.line: 11
.value: sizeof(uint16)
}
sizeofUint32: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofUint32'
.file: 'extras/Tests/lang.reflection.ci'
.line: 12
.value: sizeof(uint32)
}
sizeofUint64: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofUint64'
.file: 'extras/Tests/lang.reflection.ci'
.line: 13
.value: sizeof(uint64)
}
sizeofFloat32: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofFloat32'
.file: 'extras/Tests/lang.reflection.ci'
.line: 14
.value: sizeof(float32)
}
sizeofFloat64: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofFloat64'
.file: 'extras/Tests/lang.reflection.ci'
.line: 15
.value: sizeof(float64)
}
sizeofPointer: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofPointer'
.file: 'extras/Tests/lang.reflection.ci'
.line: 16
.value: sizeof(pointer)
}
sizeofVariant: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofVariant'
.file: 'extras/Tests/lang.reflection.ci'
.line: 17
.value: sizeof(variant)
}
sizeofTypename: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofTypename'
.file: 'extras/Tests/lang.reflection.ci'
.line: 18
.value: sizeof(typename)
}
sizeofFunction: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofFunction'
.file: 'extras/Tests/lang.reflection.ci'
.line: 19
.value: sizeof(function)
}
sizeofObject: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeofObject'
.file: 'extras/Tests/lang.reflection.ci'
.line: 20
.value: sizeof(object)
}
RecordSizeof: object {
.kind: static const typename(ref)
.base: `object`
.size: 12
.name: 'RecordSizeof'
.file: 'extras/Tests/lang.reflection.ci'
.line: 22
.field x: int64 (size: 8 -> variable(i64))
}
RecordSizeof.x: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'x'
.file: 'extras/Tests/lang.reflection.ci'
.line: 23
.owner: RecordSizeof
.value: 0
}
RecordSizeofExt: RecordSizeof {
.kind: static const typename(ref)
.base: `RecordSizeof`
.size: 16
.name: 'RecordSizeofExt'
.file: 'extras/Tests/lang.reflection.ci'
.line: 26
.field y: int32 (size: 4 -> variable(i32))
}
RecordSizeofExt.y: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'y'
.file: 'extras/Tests/lang.reflection.ci'
.line: 27
.owner: RecordSizeofExt
.value: 0
}
typeofRecord: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typeofRecord'
.file: 'extras/Tests/lang.reflection.ci'
.line: 30
.value: RecordSizeofExt
}
nameOfRecord: char[*] {
.kind: variable(ref)
.base: `char[*]`
.size: 4
.name: 'nameOfRecord'
.file: 'extras/Tests/lang.reflection.ci'
.line: 31
.value: typename.name(typeofRecord)
}
offsetOfRecord: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'offsetOfRecord'
.file: 'extras/Tests/lang.reflection.ci'
.line: 32
.value: typeofRecord.offset
}
sizeOfRecord: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeOfRecord'
.file: 'extras/Tests/lang.reflection.ci'
.line: 33
.value: sizeof(typeofRecord)
}
fileOfRecord: char[*] {
.kind: variable(ref)
.base: `char[*]`
.size: 4
.name: 'fileOfRecord'
.file: 'extras/Tests/lang.reflection.ci'
.line: 34
.value: typename.file(typeofRecord)
}
lineOfRecord: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'lineOfRecord'
.file: 'extras/Tests/lang.reflection.ci'
.line: 35
.value: typename.line(typeofRecord)
}
typeofBase: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typeofBase'
.file: 'extras/Tests/lang.reflection.ci'
.line: 37
.value: typename.base(typeofRecord)
}
nameOfBase: char[*] {
.kind: variable(ref)
.base: `char[*]`
.size: 4
.name: 'nameOfBase'
.file: 'extras/Tests/lang.reflection.ci'
.line: 38
.value: typename.name(typeofBase)
}
offsetOfBase: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'offsetOfBase'
.file: 'extras/Tests/lang.reflection.ci'
.line: 39
.value: typeofBase.offset
}
sizeOfBase: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeOfBase'
.file: 'extras/Tests/lang.reflection.ci'
.line: 40
.value: sizeof(typeofBase)
}
fileOfBase: char[*] {
.kind: variable(ref)
.base: `char[*]`
.size: 4
.name: 'fileOfBase'
.file: 'extras/Tests/lang.reflection.ci'
.line: 41
.value: typename.file(typeofBase)
}
lineOfBase: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'lineOfBase'
.file: 'extras/Tests/lang.reflection.ci'
.line: 42
.value: typename.line(typeofBase)
}
typeofBase1: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typeofBase1'
.file: 'extras/Tests/lang.reflection.ci'
.line: 44
.value: typename.base(typeofBase)
}
offsetOfBase1: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'offsetOfBase1'
.file: 'extras/Tests/lang.reflection.ci'
.line: 45
.value: typeofBase1.offset
}
sizeOfBase1: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeOfBase1'
.file: 'extras/Tests/lang.reflection.ci'
.line: 46
.value: typeofBase1.size
}
typeofBase2: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typeofBase2'
.file: 'extras/Tests/lang.reflection.ci'
.line: 48
.value: typename.base(typeofBase1)
}
offsetOfBase2: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'offsetOfBase2'
.file: 'extras/Tests/lang.reflection.ci'
.line: 49
.value: typeofBase2.offset
}
sizeOfBase2: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sizeOfBase2'
.file: 'extras/Tests/lang.reflection.ci'
.line: 50
.value: typeofBase2.size
}
empty(): void: function {
.kind: static const function
.base: `function`
.size: 1
.name: 'empty'
.file: 'extras/Tests/lang.function.ci'
.line: 5
.param .result: void (size: 0 -> variable(void))
.value: {
}
.instructions: [1 bytes]
	<empty+?>:    ret
}
funAdd(x: int32, y: int32): int32: function {
.kind: static const function
.base: `function`
.size: 8
.name: 'funAdd'
.file: 'extras/Tests/lang.function.ci'
.line: 8
.param .result: int32 (size: 4 -> variable(i32))
.param x: int32 (size: 4 -> variable(i32))
.param y: int32 (size: 4 -> variable(i32))
.value: {
	return .result := x + y;
}
.instructions: [8 bytes]
	extras/Tests/lang.function.ci:9: (8 bytes): return .result := x + y;
	<funAdd+?>:    dup.x1 sp(2)
	<funAdd+?>:    dup.x1 sp(2)
	<funAdd+?>:    add.i32
	<funAdd+?>:    set.x1 sp(4)
	<funAdd+?>:    ret
}
funAddResult: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'funAddResult'
.file: 'extras/Tests/lang.function.ci'
.line: 13
.value: funAdd(2, 7)
}
funAddRef(x: int32, y: int32): int32: function {
.kind: variable(ref)
.base: `function`
.size: 4
.name: 'funAddRef'
.file: 'extras/Tests/lang.function.ci'
.line: 16
.param .result: int32 (size: 4 -> variable(i32))
.param x: int32 (size: 4 -> variable(i32))
.param y: int32 (size: 4 -> variable(i32))
.value: funAdd
}
funAddRefResult: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'funAddRefResult'
.file: 'extras/Tests/lang.function.ci'
.line: 19
.value: funAddRef(2, 8)
}
funMul(x: int32, y: int32): int32: function {
.kind: variable(ref)
.base: `function`
.size: 4
.name: 'funMul'
.file: 'extras/Tests/lang.function.ci'
.line: 22
.param .result: int32 (size: 4 -> variable(i32))
.param x: int32 (size: 4 -> variable(i32))
.param y: int32 (size: 4 -> variable(i32))
.value: funMul
}
funMulResult: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'funMulResult'
.file: 'extras/Tests/lang.function.ci'
.line: 25
.value: funMul(2, 6)
}
funMulRef(x: int32, y: int32): int32: function {
.kind: variable(ref)
.base: `function`
.size: 4
.name: 'funMulRef'
.file: 'extras/Tests/lang.function.ci'
.line: 28
.param .result: int32 (size: 4 -> variable(i32))
.param x: int32 (size: 4 -> variable(i32))
.param y: int32 (size: 4 -> variable(i32))
.value: funMul
}
funMulRefResult: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'funMulRefResult'
.file: 'extras/Tests/lang.function.ci'
.line: 31
.value: funMulRef(2, 7)
}
funMul(x: int32, y: int32): int32: function {
.kind: static const function
.base: `function`
.size: 8
.name: 'funMul'
.file: 'extras/Tests/lang.function.ci'
.line: 34
.param .result: int32 (size: 4 -> variable(i32))
.param x: int32 (size: 4 -> variable(i32))
.param y: int32 (size: 4 -> variable(i32))
.value: {
	return .result := x * y;
}
.instructions: [8 bytes]
	extras/Tests/lang.function.ci:35: (8 bytes): return .result := x * y;
	<funMul+?>:    dup.x1 sp(2)
	<funMul+?>:    dup.x1 sp(2)
	<funMul+?>:    mul.i32
	<funMul+?>:    set.x1 sp(4)
	<funMul+?>:    ret
}
fib(n: uint32): uint32: function {
.kind: static const function
.base: `function`
.size: 86
.name: 'fib'
.file: 'extras/Tests/lang.function.ci'
.line: 39
.param .result: uint32 (size: 4 -> variable(u32))
.param n: uint32 (size: 4 -> variable(u32))
.value: {
	if (n <= (1)) {
		if (n <= (0)) {
			return .result := (0);
		}
		return .result := (1);
	}
	return .result := fib(n - (1)) + fib(n - (2));
}
.instructions: [86 bytes]
	extras/Tests/lang.function.ci:40: (40 bytes): if (n <= (1))
	<fib+?>:    dup.x1 sp(1)
	<fib+?>:    load.c32 1
	<fib+?>:    cgt.u32
	<fib+?>:    jnz <fib+?>
	extras/Tests/lang.function.ci:41: (20 bytes): if (n <= (0))
	<fib+?>:    dup.x1 sp(1)
	<fib+?>:    load.c32 0
	<fib+?>:    cgt.u32
	<fib+?>:    jnz <fib+?>
	extras/Tests/lang.function.ci:42: (8 bytes): return .result := (0);
	<fib+?>:    load.c32 0
	<fib+?>:    set.x1 sp(3)
	<fib+?>:    ret
	extras/Tests/lang.function.ci:44: (8 bytes): return .result := (1);
	<fib+?>:    load.c32 1
	<fib+?>:    set.x1 sp(3)
	<fib+?>:    ret
	extras/Tests/lang.function.ci:46: (46 bytes): return .result := fib(n - (1)) + fib(n - (2));
	<fib+?>:    load.c32 0
	<fib+?>:    dup.x1 sp(2)
	<fib+?>:    inc.i32(-1)
	<fib+?>:    load.ref .?????? ;fib(n: uint32): uint32
	<fib+?>:    call
	<fib+?>:    inc.sp(-4)
	<fib+?>:    load.c32 0
	<fib+?>:    dup.x1 sp(3)
	<fib+?>:    inc.i32(-2)
	<fib+?>:    load.ref .?????? ;fib(n: uint32): uint32
	<fib+?>:    call
	<fib+?>:    inc.sp(-4)
	<fib+?>:    add.i32
	<fib+?>:    set.x1 sp(3)
	<fib+?>:    ret
}
fibonacci_13: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'fibonacci_13'
.file: 'extras/Tests/lang.function.ci'
.line: 50
.value: fib(13)
}
a: typename {
.kind: inline
.base: `typename`
.size: 0
.name: 'a'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 3
.value: 96.300000
}
b: typename {
.kind: inline
.base: `typename`
.size: 0
.name: 'b'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 4
.value: 42.140000
}
shift: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'shift'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 5
.value: 2
}
boolA: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolA'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 7
.value: true
}
boolB: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolB'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 8
.value: !false
}
boolAnd: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolAnd'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 17
.value: boolA & boolB
}
boolIor: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolIor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 18
.value: boolA | boolB
}
boolXor: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolXor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 19
.value: boolA ^ boolB
}
boolNot: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolNot'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 22
.value: !boolB
}
boolCeq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolCeq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 23
.value: boolA == boolB
}
boolCne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolCne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 24
.value: boolA != boolB
}
boolClt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolClt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 25
.value: boolA < boolB
}
boolCle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolCle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 26
.value: boolA <= boolB
}
boolCgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolCgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 27
.value: boolA > boolB
}
boolCge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'boolCge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 28
.value: boolA >= boolB
}
chrA: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrA'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 30
.value: 'a'
}
chrB: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrB'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 31
.value: 'b'
}
chrPls: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrPls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 32
.value: +chrB
}
chrNeg: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrNeg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 33
.value: -chrB
}
chrCmt: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrCmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 34
.value: ~chrB
}
chrAdd: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrAdd'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 35
.value: chrA + chrB
}
chrSub: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrSub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 36
.value: chrA - chrB
}
chrMul: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrMul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 37
.value: chrA * chrB
}
chrDiv: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrDiv'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 38
.value: chrA / chrB
}
chrMod: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrMod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 39
.value: chrA % chrB
}
chrAnd: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrAnd'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 40
.value: chrA & chrB
}
chrIor: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrIor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 41
.value: chrA | chrB
}
chrXor: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrXor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 42
.value: chrA ^ chrB
}
chrShl: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrShl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 43
.value: (chrA) << shift
}
chrShr: char {
.kind: variable(u32)
.base: `char`
.size: 1
.name: 'chrShr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 44
.value: (chrA) >> shift
}
chrNot: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrNot'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 45
.value: !(chrB)
}
chrCeq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrCeq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 46
.value: chrA == chrB
}
chrCne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrCne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 47
.value: chrA != chrB
}
chrClt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrClt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 48
.value: chrA < chrB
}
chrCle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrCle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 49
.value: chrA <= chrB
}
chrCgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrCgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 50
.value: chrA > chrB
}
chrCge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'chrCge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 51
.value: chrA >= chrB
}
i8A: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 53
.value: a
}
i8B: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 54
.value: b
}
i8Pls: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 55
.value: +i8B
}
i8Neg: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 56
.value: -i8B
}
i8Cmt: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 57
.value: ~i8B
}
i8Add: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 58
.value: i8A + i8B
}
i8Sub: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 59
.value: i8A - i8B
}
i8Mul: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 60
.value: i8A * i8B
}
i8Div: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 61
.value: i8A / i8B
}
i8Mod: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 62
.value: i8A % i8B
}
i8And: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 63
.value: i8A & i8B
}
i8Ior: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 64
.value: i8A | i8B
}
i8Xor: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 65
.value: i8A ^ i8B
}
i8Shl: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 66
.value: (i8A) << shift
}
i8Shr: int8 {
.kind: variable(i32)
.base: `int8`
.size: 1
.name: 'i8Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 67
.value: (i8A) >> shift
}
i8Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 68
.value: !(i8B)
}
i8Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 69
.value: i8A == i8B
}
i8Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 70
.value: i8A != i8B
}
i8Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 71
.value: i8A < i8B
}
i8Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 72
.value: i8A <= i8B
}
i8Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 73
.value: i8A > i8B
}
i8Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i8Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 74
.value: i8A >= i8B
}
u8A: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 76
.value: a
}
u8B: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 77
.value: b
}
u8Pls: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 78
.value: +u8B
}
u8Neg: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 79
.value: -u8B
}
u8Cmt: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 80
.value: ~u8B
}
u8Add: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 81
.value: u8A + u8B
}
u8Sub: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 82
.value: u8A - u8B
}
u8Mul: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 83
.value: u8A * u8B
}
u8Div: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 84
.value: u8A / u8B
}
u8Mod: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 85
.value: u8A % u8B
}
u8And: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 86
.value: u8A & u8B
}
u8Ior: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 87
.value: u8A | u8B
}
u8Xor: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 88
.value: u8A ^ u8B
}
u8Shl: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 89
.value: (u8A) << shift
}
u8Shr: uint8 {
.kind: variable(u32)
.base: `uint8`
.size: 1
.name: 'u8Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 90
.value: (u8A) >> shift
}
u8Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 91
.value: !(u8B)
}
u8Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 92
.value: u8A == u8B
}
u8Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 93
.value: u8A != u8B
}
u8Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 94
.value: u8A < u8B
}
u8Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 95
.value: u8A <= u8B
}
u8Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 96
.value: u8A > u8B
}
u8Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u8Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 97
.value: u8A >= u8B
}
i16A: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 99
.value: a
}
i16B: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 100
.value: b
}
i16Pls: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 101
.value: +i16B
}
i16Neg: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 102
.value: -i16B
}
i16Cmt: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 103
.value: ~i16B
}
i16Add: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 104
.value: i16A + i16B
}
i16Sub: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 105
.value: i16A - i16B
}
i16Mul: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 106
.value: i16A * i16B
}
i16Div: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 107
.value: i16A / i16B
}
i16Mod: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 108
.value: i16A % i16B
}
i16And: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 109
.value: i16A & i16B
}
i16Ior: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 110
.value: i16A | i16B
}
i16Xor: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 111
.value: i16A ^ i16B
}
i16Shl: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 112
.value: (i16A) << shift
}
i16Shr: int16 {
.kind: variable(i32)
.base: `int16`
.size: 2
.name: 'i16Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 113
.value: (i16A) >> shift
}
i16Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 114
.value: !(i16B)
}
i16Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 115
.value: i16A == i16B
}
i16Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 116
.value: i16A != i16B
}
i16Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 117
.value: i16A < i16B
}
i16Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 118
.value: i16A <= i16B
}
i16Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 119
.value: i16A > i16B
}
i16Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i16Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 120
.value: i16A >= i16B
}
u16A: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 122
.value: a
}
u16B: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 123
.value: b
}
u16Pls: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 124
.value: +u16B
}
u16Neg: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 125
.value: -u16B
}
u16Cmt: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 126
.value: ~u16B
}
u16Add: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 127
.value: u16A + u16B
}
u16Sub: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 128
.value: u16A - u16B
}
u16Mul: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 129
.value: u16A * u16B
}
u16Div: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 130
.value: u16A / u16B
}
u16Mod: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 131
.value: u16A % u16B
}
u16And: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 132
.value: u16A & u16B
}
u16Ior: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 133
.value: u16A | u16B
}
u16Xor: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 134
.value: u16A ^ u16B
}
u16Shl: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 135
.value: (u16A) << shift
}
u16Shr: uint16 {
.kind: variable(u32)
.base: `uint16`
.size: 2
.name: 'u16Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 136
.value: (u16A) >> shift
}
u16Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 137
.value: !(u16B)
}
u16Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 138
.value: u16A == u16B
}
u16Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 139
.value: u16A != u16B
}
u16Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 140
.value: u16A < u16B
}
u16Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 141
.value: u16A <= u16B
}
u16Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 142
.value: u16A > u16B
}
u16Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u16Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 143
.value: u16A >= u16B
}
i32A: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 145
.value: a
}
i32B: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 146
.value: b
}
i32Pls: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 147
.value: +i32B
}
i32Neg: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 148
.value: -i32B
}
i32Cmt: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 149
.value: ~i32B
}
i32Add: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 150
.value: i32A + i32B
}
i32Sub: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 151
.value: i32A - i32B
}
i32Mul: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 152
.value: i32A * i32B
}
i32Div: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 153
.value: i32A / i32B
}
i32Mod: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 154
.value: i32A % i32B
}
i32And: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 155
.value: i32A & i32B
}
i32Ior: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 156
.value: i32A | i32B
}
i32Xor: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 157
.value: i32A ^ i32B
}
i32Shl: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 158
.value: i32A << shift
}
i32Shr: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'i32Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 159
.value: i32A >> shift
}
i32Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 160
.value: !(i32B)
}
i32Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 161
.value: i32A == i32B
}
i32Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 162
.value: i32A != i32B
}
i32Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 163
.value: i32A < i32B
}
i32Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 164
.value: i32A <= i32B
}
i32Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 165
.value: i32A > i32B
}
i32Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i32Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 166
.value: i32A >= i32B
}
u32A: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 168
.value: a
}
u32B: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 169
.value: b
}
u32Pls: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 170
.value: +u32B
}
u32Neg: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 171
.value: -u32B
}
u32Cmt: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 172
.value: ~u32B
}
u32Add: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 173
.value: u32A + u32B
}
u32Sub: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 174
.value: u32A - u32B
}
u32Mul: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 175
.value: u32A * u32B
}
u32Div: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 176
.value: u32A / u32B
}
u32Mod: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 177
.value: u32A % u32B
}
u32And: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 178
.value: u32A & u32B
}
u32Ior: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 179
.value: u32A | u32B
}
u32Xor: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 180
.value: u32A ^ u32B
}
u32Shl: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 181
.value: u32A << shift
}
u32Shr: uint32 {
.kind: variable(u32)
.base: `uint32`
.size: 4
.name: 'u32Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 182
.value: u32A >> shift
}
u32Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 183
.value: !(u32B)
}
u32Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 184
.value: u32A == u32B
}
u32Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 185
.value: u32A != u32B
}
u32Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 186
.value: u32A < u32B
}
u32Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 187
.value: u32A <= u32B
}
u32Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 188
.value: u32A > u32B
}
u32Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u32Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 189
.value: u32A >= u32B
}
i64A: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 191
.value: a
}
i64B: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 192
.value: b
}
i64Pls: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 193
.value: +i64B
}
i64Neg: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 194
.value: -i64B
}
i64Cmt: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 195
.value: ~i64B
}
i64Add: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 196
.value: i64A + i64B
}
i64Sub: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 197
.value: i64A - i64B
}
i64Mul: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 198
.value: i64A * i64B
}
i64Div: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 199
.value: i64A / i64B
}
i64Mod: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 200
.value: i64A % i64B
}
i64And: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 201
.value: i64A & i64B
}
i64Ior: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 202
.value: i64A | i64B
}
i64Xor: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 203
.value: i64A ^ i64B
}
i64Shl: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 204
.value: i64A << shift
}
i64Shr: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'i64Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 205
.value: i64A >> shift
}
i64Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 206
.value: !(i64B)
}
i64Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 207
.value: i64A == i64B
}
i64Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 208
.value: i64A != i64B
}
i64Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 209
.value: i64A < i64B
}
i64Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 210
.value: i64A <= i64B
}
i64Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 211
.value: i64A > i64B
}
i64Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'i64Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 212
.value: i64A >= i64B
}
u64A: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 214
.value: a
}
u64B: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 215
.value: b
}
u64Pls: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 216
.value: +u64B
}
u64Neg: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 217
.value: -u64B
}
u64Cmt: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Cmt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 218
.value: ~u64B
}
u64Add: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 219
.value: u64A + u64B
}
u64Sub: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 220
.value: u64A - u64B
}
u64Mul: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 221
.value: u64A * u64B
}
u64Div: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 222
.value: u64A / u64B
}
u64Mod: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 223
.value: u64A % u64B
}
u64And: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64And'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 224
.value: u64A & u64B
}
u64Ior: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Ior'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 225
.value: u64A | u64B
}
u64Xor: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Xor'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 226
.value: u64A ^ u64B
}
u64Shl: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Shl'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 227
.value: u64A << shift
}
u64Shr: uint64 {
.kind: variable(u64)
.base: `uint64`
.size: 8
.name: 'u64Shr'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 228
.value: u64A >> shift
}
u64Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 229
.value: !(u64B)
}
u64Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 230
.value: u64A == u64B
}
u64Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 231
.value: u64A != u64B
}
u64Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 232
.value: u64A < u64B
}
u64Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 233
.value: u64A <= u64B
}
u64Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 234
.value: u64A > u64B
}
u64Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'u64Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 235
.value: u64A >= u64B
}
f32A: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 237
.value: a
}
f32B: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 238
.value: b
}
f32Pls: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 239
.value: +f32B
}
f32Neg: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 240
.value: -f32B
}
f32Add: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 242
.value: f32A + f32B
}
f32Sub: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 243
.value: f32A - f32B
}
f32Mul: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 244
.value: f32A * f32B
}
f32Div: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 245
.value: f32A / f32B
}
f32Mod: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'f32Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 246
.value: f32A % f32B
}
f32Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 252
.value: !(f32B)
}
f32Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 253
.value: f32A == f32B
}
f32Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 254
.value: f32A != f32B
}
f32Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 255
.value: f32A < f32B
}
f32Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 256
.value: f32A <= f32B
}
f32Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 257
.value: f32A > f32B
}
f32Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f32Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 258
.value: f32A >= f32B
}
f64A: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64A'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 260
.value: a
}
f64B: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64B'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 261
.value: b
}
f64Pls: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Pls'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 262
.value: +f64B
}
f64Neg: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Neg'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 263
.value: -f64B
}
f64Add: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Add'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 265
.value: f64A + f64B
}
f64Sub: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Sub'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 266
.value: f64A - f64B
}
f64Mul: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Mul'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 267
.value: f64A * f64B
}
f64Div: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Div'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 268
.value: f64A / f64B
}
f64Mod: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'f64Mod'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 269
.value: f64A % f64B
}
f64Not: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Not'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 275
.value: !(f64B)
}
f64Ceq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Ceq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 276
.value: f64A == f64B
}
f64Cne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Cne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 277
.value: f64A != f64B
}
f64Clt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Clt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 278
.value: f64A < f64B
}
f64Cle: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Cle'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 279
.value: f64A <= f64B
}
f64Cgt: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Cgt'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 280
.value: f64A > f64B
}
f64Cge: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'f64Cge'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 281
.value: f64A >= f64B
}
ptrA: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrA'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 283
.value: null
}
ptrB: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrB'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 284
.value: pointer(shift)
}
ptrCeq: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'ptrCeq'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 299
.value: ptrA == ptrB
}
ptrCne: bool {
.kind: variable(bool)
.base: `bool`
.size: 1
.name: 'ptrCne'
.file: 'extras/Tests/lang.useOperator.ci'
.line: 300
.value: ptrA != ptrB
}
arrFixedNoInit: int64[7] {
.kind: variable(val)
.base: `int64[7]`
.size: 56
.name: 'arrFixedNoInit'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 8
}
arrSliceNoInit: int64[] {
.kind: variable(arr)
.base: `int64[]`
.size: 8
.name: 'arrSliceNoInit'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 9
}
arrPtrNoInit: int64[*] {
.kind: variable(ref)
.base: `int64[*]`
.size: 4
.name: 'arrPtrNoInit'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 10
}
arrSliceInitNull: int64[] {
.kind: variable(arr)
.base: `int64[]`
.size: 8
.name: 'arrSliceInitNull'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 13
.value: null
}
arrPtrInitNull: int64[*] {
.kind: variable(ref)
.base: `int64[*]`
.size: 4
.name: 'arrPtrInitNull'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 14
.value: null
}
arrSliceInitFixed: int64[] {
.kind: variable(arr)
.base: `int64[]`
.size: 8
.name: 'arrSliceInitFixed'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 17
.value: arrFixedNoInit
}
arrPtrInitFixed: int64[*] {
.kind: variable(ref)
.base: `int64[*]`
.size: 4
.name: 'arrPtrInitFixed'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 18
.value: arrFixedNoInit
}
arrSliceInitSlice: int64[] {
.kind: variable(arr)
.base: `int64[]`
.size: 8
.name: 'arrSliceInitSlice'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 21
.value: arrSliceInitFixed
}
arrPtrInitSlice: int64[*] {
.kind: variable(ref)
.base: `int64[*]`
.size: 4
.name: 'arrPtrInitSlice'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 22
.value: arrSliceInitFixed
}
arrPtrInitPtr: int64[*] {
.kind: variable(ref)
.base: `int64[*]`
.size: 4
.name: 'arrPtrInitPtr'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 26
.value: arrPtrInitFixed
}
arrSliceInitString: char[] {
.kind: variable(arr)
.base: `char[]`
.size: 8
.name: 'arrSliceInitString'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 37
.value: "string"
}
arrPtrInitString: char[*] {
.kind: variable(ref)
.base: `char[*]`
.size: 4
.name: 'arrPtrInitString'
.file: 'extras/Tests/lang.varInitArray.ci'
.line: 38
.value: "string"
}
value: int64 {
.kind: static variable(i64)
.base: `int64`
.size: 8
.name: 'value'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 7
.value: 42
}
valueRef: int64 {
.kind: variable(ref)
.base: `int64`
.size: 4
.name: 'valueRef'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 8
.value: value
}
valuePtr: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'valuePtr'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 9
.value: value
}
valueVar: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'valueVar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 10
.value: value
}
fromRef: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'fromRef'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 12
.value: valueRef
}
fromPtr: int64 {
.kind: variable(ref)
.base: `int64`
.size: 4
.name: 'fromPtr'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 13
.value: valuePtr
}
fromVar: int64 {
.kind: variable(ref)
.base: `int64`
.size: 4
.name: 'fromVar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 14
.value: valueVar
}
nullRef: int64 {
.kind: variable(ref)
.base: `int64`
.size: 4
.name: 'nullRef'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 16
.value: null
}
nullPtr: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'nullPtr'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 17
.value: null
}
nullVar: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'nullVar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 18
.value: null
}
nullTyp: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'nullTyp'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 19
.value: null
}
nullFun: function {
.kind: variable(ref)
.base: `function`
.size: 4
.name: 'nullFun'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 20
.value: null
}
nullObj: object {
.kind: variable(ref)
.base: `object`
.size: 4
.name: 'nullObj'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 21
.value: null
}
typePtr: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'typePtr'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 23
.value: int64
}
typeVar: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'typeVar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 24
.value: int64
}
typeTyp: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typeTyp'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 25
.value: int64
}
local: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'local'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 27
.value: value
}
copyVal: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'copyVal'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 28
.value: local
}
copyRef: int64 {
.kind: variable(ref)
.base: `int64`
.size: 4
.name: 'copyRef'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 29
.value: valueRef
}
copyPtr: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'copyPtr'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 30
.value: valuePtr
}
copyVar: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'copyVar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 31
.value: valueVar
}
copyTyp: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'copyTyp'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 32
.value: typeTyp
}
ptrVoid: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrVoid'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 35
.value: void
}
ptrBool: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrBool'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 36
.value: bool
}
ptrChar: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrChar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 37
.value: char
}
ptrInt8: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrInt8'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 38
.value: int8
}
ptrInt16: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrInt16'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 39
.value: int16
}
ptrInt32: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrInt32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 40
.value: int32
}
ptrInt64: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrInt64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 41
.value: int64
}
ptrUint8: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrUint8'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 42
.value: uint8
}
ptrUint16: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrUint16'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 43
.value: uint16
}
ptrUint32: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrUint32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 44
.value: uint32
}
ptrUint64: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrUint64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 45
.value: uint64
}
ptrFloat32: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrFloat32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 46
.value: float32
}
ptrFloat64: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrFloat64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 47
.value: float64
}
ptrTypename: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrTypename'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 48
.value: typename
}
ptrFunction: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrFunction'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 49
.value: function
}
ptrPointer: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrPointer'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 50
.value: pointer
}
ptrVariant: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrVariant'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 51
.value: variant
}
ptrObject: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'ptrObject'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 52
.value: object
}
varVoid: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varVoid'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 55
.value: void
}
varBool: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varBool'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 56
.value: bool
}
varChar: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varChar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 57
.value: char
}
varInt8: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varInt8'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 58
.value: int8
}
varInt16: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varInt16'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 59
.value: int16
}
varInt32: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varInt32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 60
.value: int32
}
varInt64: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varInt64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 61
.value: int64
}
varUint8: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varUint8'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 62
.value: uint8
}
varUint16: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varUint16'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 63
.value: uint16
}
varUint32: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varUint32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 64
.value: uint32
}
varUint64: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varUint64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 65
.value: uint64
}
varFloat32: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varFloat32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 66
.value: float32
}
varFloat64: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varFloat64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 67
.value: float64
}
varTypename: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varTypename'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 68
.value: typename
}
varFunction: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varFunction'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 69
.value: function
}
varPointer: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varPointer'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 70
.value: pointer
}
varVariant: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varVariant'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 71
.value: variant
}
varObject: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'varObject'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 72
.value: object
}
typVoid: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typVoid'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 75
.value: void
}
typBool: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typBool'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 76
.value: bool
}
typChar: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typChar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 77
.value: char
}
typInt8: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typInt8'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 78
.value: int8
}
typInt16: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typInt16'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 79
.value: int16
}
typInt32: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typInt32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 80
.value: int32
}
typInt64: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typInt64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 81
.value: int64
}
typUint8: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typUint8'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 82
.value: uint8
}
typUint16: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typUint16'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 83
.value: uint16
}
typUint32: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typUint32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 84
.value: uint32
}
typUint64: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typUint64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 85
.value: uint64
}
typFloat32: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typFloat32'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 86
.value: float32
}
typFloat64: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typFloat64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 87
.value: float64
}
typTypename: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typTypename'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 88
.value: typename
}
typFunction: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typFunction'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 89
.value: function
}
typPointer: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typPointer'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 90
.value: pointer
}
typVariant: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typVariant'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 91
.value: variant
}
typObject: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typObject'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 92
.value: object
}
valueOfPtr: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'valueOfPtr'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 95
.value: pointer(value)
}
valueOfVar: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'valueOfVar'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 96
.value: variant(value)
}
valueOfTyp: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'valueOfTyp'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 97
.value: typename(value)
}
typeOfValue: typename {
.kind: variable(ref)
.base: `typename`
.size: 4
.name: 'typeOfValue'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 99
.value: typename(value)
}
copyPtrFloat64: variant {
.kind: variable(var)
.base: `variant`
.size: 8
.name: 'copyPtrFloat64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 105
.value: ptrFloat64
}
copyVarFloat64: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'copyVarFloat64'
.file: 'extras/Tests/lang.varInitByRef.ci'
.line: 108
.value: varFloat64
}
localNoInit: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'localNoInit'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 7
}
globalNoInit: int64 {
.kind: static variable(i64)
.base: `int64`
.size: 8
.name: 'globalNoInit'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 8
}
localInitValue: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'localInitValue'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 9
.value: 42
}
globalInitValue: int64 {
.kind: static variable(i64)
.base: `int64`
.size: 8
.name: 'globalInitValue'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 10
.value: 1024
}
localInitLocal: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'localInitLocal'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 11
.value: localInitValue
}
globalInitLocal: int64 {
.kind: static variable(i64)
.base: `int64`
.size: 8
.name: 'globalInitLocal'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 12
.value: localInitValue
}
localInitGlobal: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'localInitGlobal'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 13
.value: globalInitValue
}
globalInitGlobal: int64 {
.kind: static variable(i64)
.base: `int64`
.size: 8
.name: 'globalInitGlobal'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 14
.value: globalInitValue
}
InitMember: typename {
.kind: static const typename(val)
.base: `typename`
.size: 16
.name: 'InitMember'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 17
.field intMember: int32 (size: 4 -> variable(i32))
.field intMemberDef: int32 (size: 4 -> variable(i32))
.field intConstMember: int32 (size: 4 -> const variable(i32))
.field intConstMemberDef: int32 (size: 4 -> const variable(i32))
.field intGlobal: int32 (size: 4 -> static variable(i32))
.field intConstant: int32 (size: 4 -> static const variable(i32))
}
InitMember.intMember: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'intMember'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 20
.owner: InitMember
}
InitMember.intMemberDef: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'intMemberDef'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 24
.owner: InitMember
.value: 42
}
InitMember.intConstMember: int32 {
.kind: const variable(i32)
.base: `int32`
.size: 4
.name: 'intConstMember'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 29
.owner: InitMember
}
InitMember.intConstMemberDef: int32 {
.kind: const variable(i32)
.base: `int32`
.size: 4
.name: 'intConstMemberDef'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 34
.owner: InitMember
.value: 43
}
InitMember.intGlobal: int32 {
.kind: static variable(i32)
.base: `int32`
.size: 4
.name: 'intGlobal'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 38
.owner: InitMember
.value: 44
}
InitMember.intConstant: int32 {
.kind: static const variable(i32)
.base: `int32`
.size: 4
.name: 'intConstant'
.file: 'extras/Tests/lang.varInitByVal.ci'
.line: 43
.owner: InitMember
.value: 45
}
pi64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'pi64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 3
.value: 3.141593
}
e64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'e64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 4
.value: 2.718282
}
pi32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'pi32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 6
.value: pi64
}
e32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'e32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 7
.value: e64
}
rgb888(r: int32, g: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'rgb888'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 10
.param .result: int32 (size: 4 -> i32)
.param r: int32 (size: 4 -> i32)
.param g: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.value: r << 16 & 16711680 | g << 8 & 65280 | b & 255
}
rgb565(r: int32, g: int32, b: int32): int32: function {
.kind: inline
.base: `function`
.size: 0
.name: 'rgb565'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 12
.param .result: int32 (size: 4 -> i32)
.param r: int32 (size: 4 -> i32)
.param g: int32 (size: 4 -> i32)
.param b: int32 (size: 4 -> i32)
.value: r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31
}
r_comp: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'r_comp'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 14
.value: 14 << 3
}
g_comp: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'g_comp'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 15
.value: 63 << 2
}
b_comp: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'b_comp'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 16
.value: 31 << 3
}
r5g6b5: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'r5g6b5'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 18
.value: rgb565(r_comp, g_comp, b_comp)
}
r8g8b8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'r8g8b8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 19
.value: rgb888(r_comp, g_comp, b_comp)
}
zxtR5: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zxtR5'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 21
.value: uint32.zxt(r5g6b5, 11, 5)
}
zxtG6: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zxtG6'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 22
.value: uint32.zxt(r5g6b5, 5, 6)
}
zxtB5: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zxtB5'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 23
.value: uint32.zxt(r5g6b5, 0, 5)
}
sxtR5: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sxtR5'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 25
.value: uint32.sxt(r5g6b5, 11, 5)
}
sxtG6: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sxtG6'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 26
.value: uint32.sxt(r5g6b5, 5, 6)
}
sxtB5: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sxtB5'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 27
.value: uint32.sxt(r5g6b5, 0, 5)
}
zxtR8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zxtR8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 29
.value: uint32.zxt(r8g8b8, 16, 8)
}
zxtG8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zxtG8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 30
.value: uint32.zxt(r8g8b8, 8, 8)
}
zxtB8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'zxtB8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 31
.value: uint32.zxt(r8g8b8, 0, 8)
}
sxtR8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sxtR8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 33
.value: uint32.sxt(r8g8b8, 16, 8)
}
sxtG8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sxtG8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 34
.value: uint32.sxt(r8g8b8, 8, 8)
}
sxtB8: int32 {
.kind: variable(i32)
.base: `int32`
.size: 4
.name: 'sxtB8'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 35
.value: uint32.sxt(r8g8b8, 0, 8)
}
sinF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'sinF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 37
.value: float64.sin(pi64 / (2))
}
cosF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'cosF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 38
.value: float64.cos(pi64 / (2))
}
tanF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'tanF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 39
.value: float64.tan(pi64 / (4))
}
logF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'logF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 40
.value: float64.log(e64 * e64 * e64)
}
expF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'expF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 41
.value: float64.exp(1.000000)
}
powF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'powF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 42
.value: float64.pow(pi64 * pi64, 0.500000)
}
sqrtF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'sqrtF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 43
.value: float64.sqrt(pi64 * pi64)
}
atanF64: float64 {
.kind: variable(f64)
.base: `float64`
.size: 8
.name: 'atanF64'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 44
.value: float64.atan2(pi64, 1.000000)
}
sinF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'sinF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 46
.value: float32.sin(pi32 / (2))
}
cosF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'cosF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 47
.value: float32.cos(pi32 / (2))
}
tanF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'tanF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 48
.value: float32.tan(pi32 / (4))
}
logF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'logF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 49
.value: float32.log(e32 * e32 * e32)
}
expF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'expF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 50
.value: float32.exp(1.000000)
}
powF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'powF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 51
.value: float32.pow(pi32 * pi32, 0.500000)
}
sqrtF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'sqrtF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 52
.value: float32.sqrt(pi32 * pi32)
}
atanF32: float32 {
.kind: variable(f32)
.base: `float32`
.size: 4
.name: 'atanF32'
.file: 'extras/Tests/stdc.nfcNumber.ci'
.line: 53
.value: float32.atan2(pi32, 1.000000)
}
realloc(data: pointer, size: int32): pointer: function {
.kind: inline
.base: `function`
.size: 0
.name: 'realloc'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 3
.param .result: pointer (size: 4 -> ref)
.param data: pointer (size: 4 -> ref)
.param size: int32 (size: 4 -> i32)
.value: pointer.alloc(data, size)
}
malloc(size: int32): pointer: function {
.kind: inline
.base: `function`
.size: 0
.name: 'malloc'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 4
.param .result: pointer (size: 4 -> ref)
.param size: int32 (size: 4 -> i32)
.value: pointer.alloc(null, size)
}
free(data: pointer): pointer: function {
.kind: inline
.base: `function`
.size: 0
.name: 'free'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 5
.param .result: pointer (size: 4 -> ref)
.param data: pointer (size: 4 -> ref)
.value: pointer.alloc(data, 0)
}
p1: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'p1'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 7
.value: malloc(1024)
}
p2: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'p2'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 8
.value: malloc(80)
}
p3: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'p3'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 9
.value: malloc(160)
}
p4: pointer {
.kind: variable(ref)
.base: `pointer`
.size: 4
.name: 'p4'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 10
.value: malloc(820)
}
val1: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'val1'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 23
.value: 42
}
val2: int64 {
.kind: variable(i64)
.base: `int64`
.size: 8
.name: 'val2'
.file: 'extras/Tests/stdc.nfcMemory.ci'
.line: 24
.value: 96
}
.main(): void: function {
.kind: static function
.base: `function`
.size: 5024
.name: '.main'
.print: '.main'
.field typename: typename (size: 136 -> static const typename(ref))
.field void: typename (size: 0 -> static const typename(void))
.field bool: typename (size: 1 -> static const typename(bool))
.field char: typename (size: 1 -> static const typename(u32))
.field int8: typename (size: 1 -> static const typename(i32))
.field int16: typename (size: 2 -> static const typename(i32))
.field int32: typename (size: 4 -> static const typename(i32))
.field int64: typename (size: 8 -> static const typename(i64))
.field uint8: typename (size: 1 -> static const typename(u32))
.field uint16: typename (size: 2 -> static const typename(u32))
.field uint32: typename (size: 4 -> static const typename(u32))
.field uint64: typename (size: 8 -> static const typename(u64))
.field float32: typename (size: 4 -> static const typename(f32))
.field float64: typename (size: 8 -> static const typename(f64))
.field pointer: typename (size: 4 -> static const typename(ref))
.field variant: typename (size: 8 -> static const typename(var))
.field function: typename (size: 8 -> static const typename(ref))
.field object: typename (size: 4 -> static const typename(ref))
.field null: pointer (size: 0 -> static const inline)
.field true: bool (size: 0 -> static const inline)
.field false: bool (size: 0 -> static const inline)
.field int: typename (size: 0 -> static const inline)
.field byte: typename (size: 0 -> static const inline)
.field float: typename (size: 0 -> static const inline)
.field double: typename (size: 0 -> static const inline)
.field .cstr: char (size: 4 -> static const typename(arr))
.field emit: function (size: 0 -> static const typename(void))
.field halt: function (size: 0 -> static const inline)
.field CLOCKS_PER_SEC: int32 (size: 0 -> i32)
.field RAND_MAX: int32 (size: 0 -> i32)
.field raise: function (size: 0 -> static const inline)
.field tryExec: function (size: 0 -> static const inline)
.field System: void (size: 0 -> static const typename(void))
.field verbose: function (size: 0 -> inline)
.field verbose: function (size: 0 -> inline)
.field trace: function (size: 0 -> inline)
.field trace: function (size: 0 -> inline)
.field debug: function (size: 0 -> inline)
.field debug: function (size: 0 -> inline)
.field info: function (size: 0 -> inline)
.field info: function (size: 0 -> inline)
.field warn: function (size: 0 -> inline)
.field warn: function (size: 0 -> inline)
.field error: function (size: 0 -> inline)
.field error: function (size: 0 -> inline)
.field abort: function (size: 0 -> inline)
.field abort: function (size: 0 -> inline)
.field abort: function (size: 0 -> inline)
.field assert: function (size: 0 -> inline)
.field assert: function (size: 0 -> inline)
.field assert: function (size: 0 -> inline)
.field sizeof: function (size: 0 -> inline)
.field integer: typename (size: 0 -> inline)
.field t: int32 (size: 4 -> variable(i32))
.field forIdx: int32 (size: 4 -> variable(i32))
.field rgbF32: typename (size: 16 -> static const typename(val))
.field rgbU8: typename (size: 3 -> static const typename(val))
.field color: typename (size: 4 -> static const typename(val))
.field Color: object (size: 20 -> static const typename(ref))
.field record_pack0: typename (size: 8 -> static const typename(val))
.field record_pack1: typename (size: 17 -> static const typename(val))
.field record_pack2: typename (size: 20 -> static const typename(val))
.field record_pack4: typename (size: 24 -> static const typename(val))
.field record_pack8: typename (size: 32 -> static const typename(val))
.field record_packDef: typename (size: 32 -> static const typename(val))
.field zero: function (size: 0 -> inline)
.field last: function (size: 0 -> inline)
.field sum: function (size: 0 -> inline)
.field any: function (size: 0 -> inline)
.field min: function (size: 0 -> inline)
.field sum: function (size: 0 -> inline)
.field any: function (size: 0 -> inline)
.field min: function (size: 0 -> inline)
.field ma: int32 (size: 4 -> variable(i32))
.field mb: int32 (size: 4 -> variable(i32))
.field mc: int32 (size: 4 -> variable(i32))
.field zeroVal: int32 (size: 4 -> variable(i32))
.field zeroVar: int32 (size: 4 -> variable(i32))
.field zeroXpr: int32 (size: 4 -> variable(i32))
.field lastVal: int32 (size: 4 -> variable(i32))
.field lastVar: int32 (size: 4 -> variable(i32))
.field lastXpr: int32 (size: 4 -> variable(i32))
.field sum2Val: int32 (size: 4 -> variable(i32))
.field sum2Var: int32 (size: 4 -> variable(i32))
.field sum2Xpr: int32 (size: 4 -> variable(i32))
.field any2Val: int32 (size: 4 -> variable(i32))
.field any2Var: int32 (size: 4 -> variable(i32))
.field any2Xpr: int32 (size: 4 -> variable(i32))
.field min2Val: int32 (size: 4 -> variable(i32))
.field min2Var: int32 (size: 4 -> variable(i32))
.field min2Xpr: int32 (size: 4 -> variable(i32))
.field any3Val: int32 (size: 4 -> variable(i32))
.field any3Var: int32 (size: 4 -> variable(i32))
.field any3Xpr: int32 (size: 4 -> variable(i32))
.field min3Val: int32 (size: 4 -> variable(i32))
.field min3Var: int32 (size: 4 -> variable(i32))
.field min3Xpr: int32 (size: 4 -> variable(i32))
.field overload: typename (size: 0 -> inline)
.field overload: function (size: 0 -> inline)
.field overload: function (size: 0 -> inline)
.field overload: function (size: 0 -> inline)
.field overload: function (size: 0 -> inline)
.field overload1: float32 (size: 4 -> variable(f32))
.field overload2: float32 (size: 4 -> variable(f32))
.field overload3: float32 (size: 4 -> variable(f32))
.field overload4: float32 (size: 4 -> variable(f32))
.field overload5: float32 (size: 4 -> variable(f32))
.field emitldz32: int32 (size: 4 -> variable(i32))
.field emitldz64: int64 (size: 8 -> variable(i64))
.field emitA: int32 (size: 4 -> variable(i32))
.field emitB: int32 (size: 4 -> variable(i32))
.field emitAddI32: int32 (size: 4 -> variable(i32))
.field emitDivI32: int32 (size: 4 -> variable(i32))
.field emitNfcF32: float32 (size: 4 -> variable(f32))
.field sizeofVoid: int32 (size: 4 -> variable(i32))
.field sizeofBool: int32 (size: 4 -> variable(i32))
.field sizeofChar: int32 (size: 4 -> variable(i32))
.field sizeofInt8: int32 (size: 4 -> variable(i32))
.field sizeofInt16: int32 (size: 4 -> variable(i32))
.field sizeofInt32: int32 (size: 4 -> variable(i32))
.field sizeofInt64: int32 (size: 4 -> variable(i32))
.field sizeofUint8: int32 (size: 4 -> variable(i32))
.field sizeofUint16: int32 (size: 4 -> variable(i32))
.field sizeofUint32: int32 (size: 4 -> variable(i32))
.field sizeofUint64: int32 (size: 4 -> variable(i32))
.field sizeofFloat32: int32 (size: 4 -> variable(i32))
.field sizeofFloat64: int32 (size: 4 -> variable(i32))
.field sizeofPointer: int32 (size: 4 -> variable(i32))
.field sizeofVariant: int32 (size: 4 -> variable(i32))
.field sizeofTypename: int32 (size: 4 -> variable(i32))
.field sizeofFunction: int32 (size: 4 -> variable(i32))
.field sizeofObject: int32 (size: 4 -> variable(i32))
.field RecordSizeof: object (size: 12 -> static const typename(ref))
.field RecordSizeofExt: RecordSizeof (size: 16 -> static const typename(ref))
.field typeofRecord: typename (size: 4 -> variable(ref))
.field nameOfRecord: char[*] (size: 4 -> variable(ref))
.field offsetOfRecord: int32 (size: 4 -> variable(i32))
.field sizeOfRecord: int32 (size: 4 -> variable(i32))
.field fileOfRecord: char[*] (size: 4 -> variable(ref))
.field lineOfRecord: int32 (size: 4 -> variable(i32))
.field typeofBase: typename (size: 4 -> variable(ref))
.field nameOfBase: char[*] (size: 4 -> variable(ref))
.field offsetOfBase: int32 (size: 4 -> variable(i32))
.field sizeOfBase: int32 (size: 4 -> variable(i32))
.field fileOfBase: char[*] (size: 4 -> variable(ref))
.field lineOfBase: int32 (size: 4 -> variable(i32))
.field typeofBase1: typename (size: 4 -> variable(ref))
.field offsetOfBase1: int32 (size: 4 -> variable(i32))
.field sizeOfBase1: int32 (size: 4 -> variable(i32))
.field typeofBase2: typename (size: 4 -> variable(ref))
.field offsetOfBase2: int32 (size: 4 -> variable(i32))
.field sizeOfBase2: int32 (size: 4 -> variable(i32))
.field empty: function (size: 1 -> static const function)
.field funAdd: function (size: 8 -> static const function)
.field funAddResult: int32 (size: 4 -> variable(i32))
.field funAddRef: function (size: 4 -> variable(ref))
.field funAddRefResult: int32 (size: 4 -> variable(i32))
.field funMul: function (size: 4 -> variable(ref))
.field funMulResult: int32 (size: 4 -> variable(i32))
.field funMulRef: function (size: 4 -> variable(ref))
.field funMulRefResult: int32 (size: 4 -> variable(i32))
.field funMul: function (size: 8 -> static const function)
.field fib: function (size: 86 -> static const function)
.field fibonacci_13: uint32 (size: 4 -> variable(u32))
.field a: typename (size: 0 -> inline)
.field b: typename (size: 0 -> inline)
.field shift: int32 (size: 4 -> variable(i32))
.field boolA: bool (size: 1 -> variable(bool))
.field boolB: bool (size: 1 -> variable(bool))
.field boolAnd: bool (size: 1 -> variable(bool))
.field boolIor: bool (size: 1 -> variable(bool))
.field boolXor: bool (size: 1 -> variable(bool))
.field boolNot: bool (size: 1 -> variable(bool))
.field boolCeq: bool (size: 1 -> variable(bool))
.field boolCne: bool (size: 1 -> variable(bool))
.field boolClt: bool (size: 1 -> variable(bool))
.field boolCle: bool (size: 1 -> variable(bool))
.field boolCgt: bool (size: 1 -> variable(bool))
.field boolCge: bool (size: 1 -> variable(bool))
.field chrA: char (size: 1 -> variable(u32))
.field chrB: char (size: 1 -> variable(u32))
.field chrPls: char (size: 1 -> variable(u32))
.field chrNeg: char (size: 1 -> variable(u32))
.field chrCmt: char (size: 1 -> variable(u32))
.field chrAdd: char (size: 1 -> variable(u32))
.field chrSub: char (size: 1 -> variable(u32))
.field chrMul: char (size: 1 -> variable(u32))
.field chrDiv: char (size: 1 -> variable(u32))
.field chrMod: char (size: 1 -> variable(u32))
.field chrAnd: char (size: 1 -> variable(u32))
.field chrIor: char (size: 1 -> variable(u32))
.field chrXor: char (size: 1 -> variable(u32))
.field chrShl: char (size: 1 -> variable(u32))
.field chrShr: char (size: 1 -> variable(u32))
.field chrNot: bool (size: 1 -> variable(bool))
.field chrCeq: bool (size: 1 -> variable(bool))
.field chrCne: bool (size: 1 -> variable(bool))
.field chrClt: bool (size: 1 -> variable(bool))
.field chrCle: bool (size: 1 -> variable(bool))
.field chrCgt: bool (size: 1 -> variable(bool))
.field chrCge: bool (size: 1 -> variable(bool))
.field i8A: int8 (size: 1 -> variable(i32))
.field i8B: int8 (size: 1 -> variable(i32))
.field i8Pls: int8 (size: 1 -> variable(i32))
.field i8Neg: int8 (size: 1 -> variable(i32))
.field i8Cmt: int8 (size: 1 -> variable(i32))
.field i8Add: int8 (size: 1 -> variable(i32))
.field i8Sub: int8 (size: 1 -> variable(i32))
.field i8Mul: int8 (size: 1 -> variable(i32))
.field i8Div: int8 (size: 1 -> variable(i32))
.field i8Mod: int8 (size: 1 -> variable(i32))
.field i8And: int8 (size: 1 -> variable(i32))
.field i8Ior: int8 (size: 1 -> variable(i32))
.field i8Xor: int8 (size: 1 -> variable(i32))
.field i8Shl: int8 (size: 1 -> variable(i32))
.field i8Shr: int8 (size: 1 -> variable(i32))
.field i8Not: bool (size: 1 -> variable(bool))
.field i8Ceq: bool (size: 1 -> variable(bool))
.field i8Cne: bool (size: 1 -> variable(bool))
.field i8Clt: bool (size: 1 -> variable(bool))
.field i8Cle: bool (size: 1 -> variable(bool))
.field i8Cgt: bool (size: 1 -> variable(bool))
.field i8Cge: bool (size: 1 -> variable(bool))
.field u8A: uint8 (size: 1 -> variable(u32))
.field u8B: uint8 (size: 1 -> variable(u32))
.field u8Pls: uint8 (size: 1 -> variable(u32))
.field u8Neg: uint8 (size: 1 -> variable(u32))
.field u8Cmt: uint8 (size: 1 -> variable(u32))
.field u8Add: uint8 (size: 1 -> variable(u32))
.field u8Sub: uint8 (size: 1 -> variable(u32))
.field u8Mul: uint8 (size: 1 -> variable(u32))
.field u8Div: uint8 (size: 1 -> variable(u32))
.field u8Mod: uint8 (size: 1 -> variable(u32))
.field u8And: uint8 (size: 1 -> variable(u32))
.field u8Ior: uint8 (size: 1 -> variable(u32))
.field u8Xor: uint8 (size: 1 -> variable(u32))
.field u8Shl: uint8 (size: 1 -> variable(u32))
.field u8Shr: uint8 (size: 1 -> variable(u32))
.field u8Not: bool (size: 1 -> variable(bool))
.field u8Ceq: bool (size: 1 -> variable(bool))
.field u8Cne: bool (size: 1 -> variable(bool))
.field u8Clt: bool (size: 1 -> variable(bool))
.field u8Cle: bool (size: 1 -> variable(bool))
.field u8Cgt: bool (size: 1 -> variable(bool))
.field u8Cge: bool (size: 1 -> variable(bool))
.field i16A: int16 (size: 2 -> variable(i32))
.field i16B: int16 (size: 2 -> variable(i32))
.field i16Pls: int16 (size: 2 -> variable(i32))
.field i16Neg: int16 (size: 2 -> variable(i32))
.field i16Cmt: int16 (size: 2 -> variable(i32))
.field i16Add: int16 (size: 2 -> variable(i32))
.field i16Sub: int16 (size: 2 -> variable(i32))
.field i16Mul: int16 (size: 2 -> variable(i32))
.field i16Div: int16 (size: 2 -> variable(i32))
.field i16Mod: int16 (size: 2 -> variable(i32))
.field i16And: int16 (size: 2 -> variable(i32))
.field i16Ior: int16 (size: 2 -> variable(i32))
.field i16Xor: int16 (size: 2 -> variable(i32))
.field i16Shl: int16 (size: 2 -> variable(i32))
.field i16Shr: int16 (size: 2 -> variable(i32))
.field i16Not: bool (size: 1 -> variable(bool))
.field i16Ceq: bool (size: 1 -> variable(bool))
.field i16Cne: bool (size: 1 -> variable(bool))
.field i16Clt: bool (size: 1 -> variable(bool))
.field i16Cle: bool (size: 1 -> variable(bool))
.field i16Cgt: bool (size: 1 -> variable(bool))
.field i16Cge: bool (size: 1 -> variable(bool))
.field u16A: uint16 (size: 2 -> variable(u32))
.field u16B: uint16 (size: 2 -> variable(u32))
.field u16Pls: uint16 (size: 2 -> variable(u32))
.field u16Neg: uint16 (size: 2 -> variable(u32))
.field u16Cmt: uint16 (size: 2 -> variable(u32))
.field u16Add: uint16 (size: 2 -> variable(u32))
.field u16Sub: uint16 (size: 2 -> variable(u32))
.field u16Mul: uint16 (size: 2 -> variable(u32))
.field u16Div: uint16 (size: 2 -> variable(u32))
.field u16Mod: uint16 (size: 2 -> variable(u32))
.field u16And: uint16 (size: 2 -> variable(u32))
.field u16Ior: uint16 (size: 2 -> variable(u32))
.field u16Xor: uint16 (size: 2 -> variable(u32))
.field u16Shl: uint16 (size: 2 -> variable(u32))
.field u16Shr: uint16 (size: 2 -> variable(u32))
.field u16Not: bool (size: 1 -> variable(bool))
.field u16Ceq: bool (size: 1 -> variable(bool))
.field u16Cne: bool (size: 1 -> variable(bool))
.field u16Clt: bool (size: 1 -> variable(bool))
.field u16Cle: bool (size: 1 -> variable(bool))
.field u16Cgt: bool (size: 1 -> variable(bool))
.field u16Cge: bool (size: 1 -> variable(bool))
.field i32A: int32 (size: 4 -> variable(i32))
.field i32B: int32 (size: 4 -> variable(i32))
.field i32Pls: int32 (size: 4 -> variable(i32))
.field i32Neg: int32 (size: 4 -> variable(i32))
.field i32Cmt: int32 (size: 4 -> variable(i32))
.field i32Add: int32 (size: 4 -> variable(i32))
.field i32Sub: int32 (size: 4 -> variable(i32))
.field i32Mul: int32 (size: 4 -> variable(i32))
.field i32Div: int32 (size: 4 -> variable(i32))
.field i32Mod: int32 (size: 4 -> variable(i32))
.field i32And: int32 (size: 4 -> variable(i32))
.field i32Ior: int32 (size: 4 -> variable(i32))
.field i32Xor: int32 (size: 4 -> variable(i32))
.field i32Shl: int32 (size: 4 -> variable(i32))
.field i32Shr: int32 (size: 4 -> variable(i32))
.field i32Not: bool (size: 1 -> variable(bool))
.field i32Ceq: bool (size: 1 -> variable(bool))
.field i32Cne: bool (size: 1 -> variable(bool))
.field i32Clt: bool (size: 1 -> variable(bool))
.field i32Cle: bool (size: 1 -> variable(bool))
.field i32Cgt: bool (size: 1 -> variable(bool))
.field i32Cge: bool (size: 1 -> variable(bool))
.field u32A: uint32 (size: 4 -> variable(u32))
.field u32B: uint32 (size: 4 -> variable(u32))
.field u32Pls: uint32 (size: 4 -> variable(u32))
.field u32Neg: uint32 (size: 4 -> variable(u32))
.field u32Cmt: uint32 (size: 4 -> variable(u32))
.field u32Add: uint32 (size: 4 -> variable(u32))
.field u32Sub: uint32 (size: 4 -> variable(u32))
.field u32Mul: uint32 (size: 4 -> variable(u32))
.field u32Div: uint32 (size: 4 -> variable(u32))
.field u32Mod: uint32 (size: 4 -> variable(u32))
.field u32And: uint32 (size: 4 -> variable(u32))
.field u32Ior: uint32 (size: 4 -> variable(u32))
.field u32Xor: uint32 (size: 4 -> variable(u32))
.field u32Shl: uint32 (size: 4 -> variable(u32))
.field u32Shr: uint32 (size: 4 -> variable(u32))
.field u32Not: bool (size: 1 -> variable(bool))
.field u32Ceq: bool (size: 1 -> variable(bool))
.field u32Cne: bool (size: 1 -> variable(bool))
.field u32Clt: bool (size: 1 -> variable(bool))
.field u32Cle: bool (size: 1 -> variable(bool))
.field u32Cgt: bool (size: 1 -> variable(bool))
.field u32Cge: bool (size: 1 -> variable(bool))
.field i64A: int64 (size: 8 -> variable(i64))
.field i64B: int64 (size: 8 -> variable(i64))
.field i64Pls: int64 (size: 8 -> variable(i64))
.field i64Neg: int64 (size: 8 -> variable(i64))
.field i64Cmt: int64 (size: 8 -> variable(i64))
.field i64Add: int64 (size: 8 -> variable(i64))
.field i64Sub: int64 (size: 8 -> variable(i64))
.field i64Mul: int64 (size: 8 -> variable(i64))
.field i64Div: int64 (size: 8 -> variable(i64))
.field i64Mod: int64 (size: 8 -> variable(i64))
.field i64And: int64 (size: 8 -> variable(i64))
.field i64Ior: int64 (size: 8 -> variable(i64))
.field i64Xor: int64 (size: 8 -> variable(i64))
.field i64Shl: int64 (size: 8 -> variable(i64))
.field i64Shr: int64 (size: 8 -> variable(i64))
.field i64Not: bool (size: 1 -> variable(bool))
.field i64Ceq: bool (size: 1 -> variable(bool))
.field i64Cne: bool (size: 1 -> variable(bool))
.field i64Clt: bool (size: 1 -> variable(bool))
.field i64Cle: bool (size: 1 -> variable(bool))
.field i64Cgt: bool (size: 1 -> variable(bool))
.field i64Cge: bool (size: 1 -> variable(bool))
.field u64A: uint64 (size: 8 -> variable(u64))
.field u64B: uint64 (size: 8 -> variable(u64))
.field u64Pls: uint64 (size: 8 -> variable(u64))
.field u64Neg: uint64 (size: 8 -> variable(u64))
.field u64Cmt: uint64 (size: 8 -> variable(u64))
.field u64Add: uint64 (size: 8 -> variable(u64))
.field u64Sub: uint64 (size: 8 -> variable(u64))
.field u64Mul: uint64 (size: 8 -> variable(u64))
.field u64Div: uint64 (size: 8 -> variable(u64))
.field u64Mod: uint64 (size: 8 -> variable(u64))
.field u64And: uint64 (size: 8 -> variable(u64))
.field u64Ior: uint64 (size: 8 -> variable(u64))
.field u64Xor: uint64 (size: 8 -> variable(u64))
.field u64Shl: uint64 (size: 8 -> variable(u64))
.field u64Shr: uint64 (size: 8 -> variable(u64))
.field u64Not: bool (size: 1 -> variable(bool))
.field u64Ceq: bool (size: 1 -> variable(bool))
.field u64Cne: bool (size: 1 -> variable(bool))
.field u64Clt: bool (size: 1 -> variable(bool))
.field u64Cle: bool (size: 1 -> variable(bool))
.field u64Cgt: bool (size: 1 -> variable(bool))
.field u64Cge: bool (size: 1 -> variable(bool))
.field f32A: float32 (size: 4 -> variable(f32))
.field f32B: float32 (size: 4 -> variable(f32))
.field f32Pls: float32 (size: 4 -> variable(f32))
.field f32Neg: float32 (size: 4 -> variable(f32))
.field f32Add: float32 (size: 4 -> variable(f32))
.field f32Sub: float32 (size: 4 -> variable(f32))
.field f32Mul: float32 (size: 4 -> variable(f32))
.field f32Div: float32 (size: 4 -> variable(f32))
.field f32Mod: float32 (size: 4 -> variable(f32))
.field f32Not: bool (size: 1 -> variable(bool))
.field f32Ceq: bool (size: 1 -> variable(bool))
.field f32Cne: bool (size: 1 -> variable(bool))
.field f32Clt: bool (size: 1 -> variable(bool))
.field f32Cle: bool (size: 1 -> variable(bool))
.field f32Cgt: bool (size: 1 -> variable(bool))
.field f32Cge: bool (size: 1 -> variable(bool))
.field f64A: float64 (size: 8 -> variable(f64))
.field f64B: float64 (size: 8 -> variable(f64))
.field f64Pls: float64 (size: 8 -> variable(f64))
.field f64Neg: float64 (size: 8 -> variable(f64))
.field f64Add: float64 (size: 8 -> variable(f64))
.field f64Sub: float64 (size: 8 -> variable(f64))
.field f64Mul: float64 (size: 8 -> variable(f64))
.field f64Div: float64 (size: 8 -> variable(f64))
.field f64Mod: float64 (size: 8 -> variable(f64))
.field f64Not: bool (size: 1 -> variable(bool))
.field f64Ceq: bool (size: 1 -> variable(bool))
.field f64Cne: bool (size: 1 -> variable(bool))
.field f64Clt: bool (size: 1 -> variable(bool))
.field f64Cle: bool (size: 1 -> variable(bool))
.field f64Cgt: bool (size: 1 -> variable(bool))
.field f64Cge: bool (size: 1 -> variable(bool))
.field ptrA: pointer (size: 4 -> variable(ref))
.field ptrB: pointer (size: 4 -> variable(ref))
.field ptrCeq: bool (size: 1 -> variable(bool))
.field ptrCne: bool (size: 1 -> variable(bool))
.field arrFixedNoInit: int64[7] (size: 56 -> variable(val))
.field arrSliceNoInit: int64[] (size: 8 -> variable(arr))
.field arrPtrNoInit: int64[*] (size: 4 -> variable(ref))
.field arrSliceInitNull: int64[] (size: 8 -> variable(arr))
.field arrPtrInitNull: int64[*] (size: 4 -> variable(ref))
.field arrSliceInitFixed: int64[] (size: 8 -> variable(arr))
.field arrPtrInitFixed: int64[*] (size: 4 -> variable(ref))
.field arrSliceInitSlice: int64[] (size: 8 -> variable(arr))
.field arrPtrInitSlice: int64[*] (size: 4 -> variable(ref))
.field arrPtrInitPtr: int64[*] (size: 4 -> variable(ref))
.field arrSliceInitString: char[] (size: 8 -> variable(arr))
.field arrPtrInitString: char[*] (size: 4 -> variable(ref))
.field value: int64 (size: 8 -> static variable(i64))
.field valueRef: int64 (size: 4 -> variable(ref))
.field valuePtr: pointer (size: 4 -> variable(ref))
.field valueVar: variant (size: 8 -> variable(var))
.field fromRef: int64 (size: 8 -> variable(i64))
.field fromPtr: int64 (size: 4 -> variable(ref))
.field fromVar: int64 (size: 4 -> variable(ref))
.field nullRef: int64 (size: 4 -> variable(ref))
.field nullPtr: pointer (size: 4 -> variable(ref))
.field nullVar: variant (size: 8 -> variable(var))
.field nullTyp: typename (size: 4 -> variable(ref))
.field nullFun: function (size: 4 -> variable(ref))
.field nullObj: object (size: 4 -> variable(ref))
.field typePtr: pointer (size: 4 -> variable(ref))
.field typeVar: variant (size: 8 -> variable(var))
.field typeTyp: typename (size: 4 -> variable(ref))
.field local: int64 (size: 8 -> variable(i64))
.field copyVal: int64 (size: 8 -> variable(i64))
.field copyRef: int64 (size: 4 -> variable(ref))
.field copyPtr: pointer (size: 4 -> variable(ref))
.field copyVar: variant (size: 8 -> variable(var))
.field copyTyp: typename (size: 4 -> variable(ref))
.field ptrVoid: pointer (size: 4 -> variable(ref))
.field ptrBool: pointer (size: 4 -> variable(ref))
.field ptrChar: pointer (size: 4 -> variable(ref))
.field ptrInt8: pointer (size: 4 -> variable(ref))
.field ptrInt16: pointer (size: 4 -> variable(ref))
.field ptrInt32: pointer (size: 4 -> variable(ref))
.field ptrInt64: pointer (size: 4 -> variable(ref))
.field ptrUint8: pointer (size: 4 -> variable(ref))
.field ptrUint16: pointer (size: 4 -> variable(ref))
.field ptrUint32: pointer (size: 4 -> variable(ref))
.field ptrUint64: pointer (size: 4 -> variable(ref))
.field ptrFloat32: pointer (size: 4 -> variable(ref))
.field ptrFloat64: pointer (size: 4 -> variable(ref))
.field ptrTypename: pointer (size: 4 -> variable(ref))
.field ptrFunction: pointer (size: 4 -> variable(ref))
.field ptrPointer: pointer (size: 4 -> variable(ref))
.field ptrVariant: pointer (size: 4 -> variable(ref))
.field ptrObject: pointer (size: 4 -> variable(ref))
.field varVoid: variant (size: 8 -> variable(var))
.field varBool: variant (size: 8 -> variable(var))
.field varChar: variant (size: 8 -> variable(var))
.field varInt8: variant (size: 8 -> variable(var))
.field varInt16: variant (size: 8 -> variable(var))
.field varInt32: variant (size: 8 -> variable(var))
.field varInt64: variant (size: 8 -> variable(var))
.field varUint8: variant (size: 8 -> variable(var))
.field varUint16: variant (size: 8 -> variable(var))
.field varUint32: variant (size: 8 -> variable(var))
.field varUint64: variant (size: 8 -> variable(var))
.field varFloat32: variant (size: 8 -> variable(var))
.field varFloat64: variant (size: 8 -> variable(var))
.field varTypename: variant (size: 8 -> variable(var))
.field varFunction: variant (size: 8 -> variable(var))
.field varPointer: variant (size: 8 -> variable(var))
.field varVariant: variant (size: 8 -> variable(var))
.field varObject: variant (size: 8 -> variable(var))
.field typVoid: typename (size: 4 -> variable(ref))
.field typBool: typename (size: 4 -> variable(ref))
.field typChar: typename (size: 4 -> variable(ref))
.field typInt8: typename (size: 4 -> variable(ref))
.field typInt16: typename (size: 4 -> variable(ref))
.field typInt32: typename (size: 4 -> variable(ref))
.field typInt64: typename (size: 4 -> variable(ref))
.field typUint8: typename (size: 4 -> variable(ref))
.field typUint16: typename (size: 4 -> variable(ref))
.field typUint32: typename (size: 4 -> variable(ref))
.field typUint64: typename (size: 4 -> variable(ref))
.field typFloat32: typename (size: 4 -> variable(ref))
.field typFloat64: typename (size: 4 -> variable(ref))
.field typTypename: typename (size: 4 -> variable(ref))
.field typFunction: typename (size: 4 -> variable(ref))
.field typPointer: typename (size: 4 -> variable(ref))
.field typVariant: typename (size: 4 -> variable(ref))
.field typObject: typename (size: 4 -> variable(ref))
.field valueOfPtr: pointer (size: 4 -> variable(ref))
.field valueOfVar: variant (size: 8 -> variable(var))
.field valueOfTyp: typename (size: 4 -> variable(ref))
.field typeOfValue: typename (size: 4 -> variable(ref))
.field copyPtrFloat64: variant (size: 8 -> variable(var))
.field copyVarFloat64: pointer (size: 4 -> variable(ref))
.field localNoInit: int64 (size: 8 -> variable(i64))
.field globalNoInit: int64 (size: 8 -> static variable(i64))
.field localInitValue: int64 (size: 8 -> variable(i64))
.field globalInitValue: int64 (size: 8 -> static variable(i64))
.field localInitLocal: int64 (size: 8 -> variable(i64))
.field globalInitLocal: int64 (size: 8 -> static variable(i64))
.field localInitGlobal: int64 (size: 8 -> variable(i64))
.field globalInitGlobal: int64 (size: 8 -> static variable(i64))
.field InitMember: typename (size: 16 -> static const typename(val))
.field pi64: float64 (size: 8 -> variable(f64))
.field e64: float64 (size: 8 -> variable(f64))
.field pi32: float32 (size: 4 -> variable(f32))
.field e32: float32 (size: 4 -> variable(f32))
.field rgb888: function (size: 0 -> inline)
.field rgb565: function (size: 0 -> inline)
.field r_comp: int32 (size: 4 -> variable(i32))
.field g_comp: int32 (size: 4 -> variable(i32))
.field b_comp: int32 (size: 4 -> variable(i32))
.field r5g6b5: int32 (size: 4 -> variable(i32))
.field r8g8b8: int32 (size: 4 -> variable(i32))
.field zxtR5: int32 (size: 4 -> variable(i32))
.field zxtG6: int32 (size: 4 -> variable(i32))
.field zxtB5: int32 (size: 4 -> variable(i32))
.field sxtR5: int32 (size: 4 -> variable(i32))
.field sxtG6: int32 (size: 4 -> variable(i32))
.field sxtB5: int32 (size: 4 -> variable(i32))
.field zxtR8: int32 (size: 4 -> variable(i32))
.field zxtG8: int32 (size: 4 -> variable(i32))
.field zxtB8: int32 (size: 4 -> variable(i32))
.field sxtR8: int32 (size: 4 -> variable(i32))
.field sxtG8: int32 (size: 4 -> variable(i32))
.field sxtB8: int32 (size: 4 -> variable(i32))
.field sinF64: float64 (size: 8 -> variable(f64))
.field cosF64: float64 (size: 8 -> variable(f64))
.field tanF64: float64 (size: 8 -> variable(f64))
.field logF64: float64 (size: 8 -> variable(f64))
.field expF64: float64 (size: 8 -> variable(f64))
.field powF64: float64 (size: 8 -> variable(f64))
.field sqrtF64: float64 (size: 8 -> variable(f64))
.field atanF64: float64 (size: 8 -> variable(f64))
.field sinF32: float32 (size: 4 -> variable(f32))
.field cosF32: float32 (size: 4 -> variable(f32))
.field tanF32: float32 (size: 4 -> variable(f32))
.field logF32: float32 (size: 4 -> variable(f32))
.field expF32: float32 (size: 4 -> variable(f32))
.field powF32: float32 (size: 4 -> variable(f32))
.field sqrtF32: float32 (size: 4 -> variable(f32))
.field atanF32: float32 (size: 4 -> variable(f32))
.field realloc: function (size: 0 -> inline)
.field malloc: function (size: 0 -> inline)
.field free: function (size: 0 -> inline)
.field p1: pointer (size: 4 -> variable(ref))
.field p2: pointer (size: 4 -> variable(ref))
.field p3: pointer (size: 4 -> variable(ref))
.field p4: pointer (size: 4 -> variable(ref))
.field val1: int64 (size: 8 -> variable(i64))
.field val2: int64 (size: 8 -> variable(i64))
.field .main: function (size: 5024 -> static function)
.param .result: void (size: 0 -> variable)
.value: {
	static intGlobal: int32 := 44;
	static const intConstant: int32 := 45;
	{
		static if (typename(raise) == function) {
			verbose(message: char[*], inspect: variant): void := raise(raise.verbose, message, inspect, raise.noTrace);
			verbose(message: char[*]): void := raise(raise.verbose, message, null, raise.noTrace);
			trace(message: char[*], inspect: variant): void := raise(raise.debug, message, inspect, raise.defTrace);
			trace(message: char[*]): void := raise(raise.debug, message, null, raise.defTrace);
			debug(message: char[*], inspect: variant): void := raise(raise.debug, message, inspect, raise.noTrace);
			debug(message: char[*]): void := raise(raise.debug, message, null, raise.noTrace);
			info(message: char[*], inspect: variant): void := raise(raise.info, message, inspect, raise.noTrace);
			info(message: char[*]): void := raise(raise.info, message, null, raise.noTrace);
			warn(message: char[*], inspect: variant): void := raise(raise.warn, message, inspect, raise.noTrace);
			warn(message: char[*]): void := raise(raise.warn, message, null, raise.noTrace);
			error(message: char[*], inspect: variant): void := raise(raise.error, message, inspect, raise.defTrace);
			error(message: char[*]): void := raise(raise.error, message, null, raise.defTrace);
			abort(message: char[*], inspect: variant): void := raise(raise.abort, message, inspect, raise.defTrace);
			abort(message: char[*]): void := raise(raise.abort, message, null, raise.defTrace);
			abort(): void := raise(raise.abort, "execution aborted!", null, raise.defTrace);
			assert(condition: bool, message: char[*], inspect: variant): void := void(condition ? void(0) : abort(message, inspect));
			assert(condition: bool, message: char[*]): void := void(condition ? void(0) : abort(message));
			assert(condition: bool): void := void(condition ? void(0) : abort("assertion failed!"));
		}
		sizeof(type: typename): int32 := int32(type.size);
	}
	{
		integer: typename := int64;
		static if (0 == 0) {
			raise(raise.debug, "0 == 0", null, 1);
		}
		static if (0 != 0) {
			raise(raise.debug, "0 != 0", null, 2);
		}
		static if (0 == 0) {
			raise(raise.debug, "0 == 0", null, 3);
		}
		else {
			raise(raise.debug, "0 != 0", null, 4);
		}
		static if (0 != 0) {
			raise(raise.debug, "0 != 0", null, 5);
		}
		else {
			raise(raise.debug, "0 == 0", null, 6);
		}
		{
			t: int32 := 0;
			if (t == 0) {
				raise(raise.debug, "t == 0", t, 7);
			}
			if (t != 0) {
				raise(raise.debug, "t != 0", t, 8);
			}
			if (t == 0) {
				raise(raise.debug, "t == 0", t, 10);
			}
			else {
				raise(raise.debug, "t != 0", t, 9);
			}
			if (t != 0) {
				raise(raise.debug, "t != 0", t, 11);
			}
			else {
				raise(raise.debug, "t == 0", t, 12);
			}
		}
		static if (typename(int64) == null) {
			abort("integer is not declared");
		}
		static if (typename(int64) != typename) {
			abort("integer is not a type");
		}
		for ( ; ; ) {
			debug("for ( ; ; )");
			break;
		}
		for (i: int32 := 0; i < 2; i := i + 1) {
			debug("for (int i = 0; i < 2; i += 1)", i);
		}
		forIdx: int32;
		for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1) {
			debug("for (forIdx = 0; forIdx < 2; forIdx += 1)", forIdx);
		}
		static const rgbF32: struct {
			r: float32;
			g: float32;
			b: float32;
		};
		static const rgbU8: struct {
			b: uint8;
			g: uint8;
			r: uint8;
		};
		static const color: struct {
			col: uint32;
			rgb: rgbU8;
		};
		static const Color: struct {
			value: rgbF32;
		};
		static const record_pack0: struct {
			_0: uint8;
			a: uint64;
			_1: uint8;
			b: uint32;
			_2: uint8;
			c: uint16;
		};
		static const record_pack1: struct {
			_0: uint8;
			a: uint64;
			_1: uint8;
			b: uint32;
			_2: uint8;
			c: uint16;
		};
		static const record_pack2: struct {
			_0: uint8;
			a: uint64;
			_1: uint8;
			b: uint32;
			_2: uint8;
			c: uint16;
		};
		static const record_pack4: struct {
			_0: uint8;
			a: uint64;
			_1: uint8;
			b: uint32;
			_2: uint8;
			c: uint16;
		};
		static const record_pack8: struct {
			_0: uint8;
			a: uint64;
			_1: uint8;
			b: uint32;
			_2: uint8;
			c: uint16;
		};
		static const record_packDef: struct {
			_0: uint8;
			a: uint64;
			_1: uint8;
			b: uint32;
			_2: uint8;
			c: uint16;
		};
		zero(a: int32, b: int32): int32 := 0;
		last(a: int32, b: int32): int32 := b;
		sum(a: int32, b: int32): int32 := a + b;
		any(a: int32, b: int32): int32 := (a) ? a : b;
		min(a: int32, b: int32): int32 := a < b ? a : b;
		sum(a: int32, b: int32, c: int32): int32 := sum(sum(a, b), c);
		any(a: int32, b: int32, c: int32): int32 := any(any(a, b), c);
		min(a: int32, b: int32, c: int32): int32 := min(min(a, b), c);
		ma: int32 := 3;
		mb: int32 := 6;
		mc: int32 := 9;
		zeroVal: int32 := zero(2, 3);
		zeroVar: int32 := zero(ma, mb);
		zeroXpr: int32 := zero(ma + mb, mb + mc);
		lastVal: int32 := last(2, 3);
		lastVar: int32 := last(ma, mb);
		lastXpr: int32 := last(ma + mb, mb + mc);
		sum2Val: int32 := sum(3, 12);
		sum2Var: int32 := sum(ma, mb);
		sum2Xpr: int32 := sum(ma + mb, mb + mc);
		any2Val: int32 := any(3, 12);
		any2Var: int32 := any(ma, mb);
		any2Xpr: int32 := any(ma + mb, mb + mc);
		min2Val: int32 := min(3, 12);
		min2Var: int32 := min(ma, mb);
		min2Xpr: int32 := min(ma + mb, mb + mc);
		any3Val: int32 := any(3, 2, 6);
		any3Var: int32 := any(ma, mb, mc);
		any3Xpr: int32 := any(ma + mb, mb + mc, mc + ma);
		min3Val: int32 := min(3, 2, 6);
		min3Var: int32 := min(ma, mb, mc);
		min3Xpr: int32 := min(ma + mb, mb + mc, mc + ma);
		overload: typename := 1;
		overload(): int32 := 2;
		overload(a: int32): int32 := 3;
		overload(a: float32): int32 := 4;
		overload(a: int32, b: int32): int32 := 5;
		overload1: float32 := overload;
		overload2: float32 := overload();
		overload3: float32 := overload(0);
		overload4: float32 := overload(0.000000);
		overload5: float32 := overload(0, 0);
		emitldz32: int32 := emit(load.z32);
		emitldz64: int64 := emit(load.z64);
		emitA: int32 := 42;
		emitB: int32 := 96;
		emitAddI32: int32 := emit(int32(emitA), int32(emitB), add.i32);
		emitDivI32: int32 := emit(int32(10), int32(5), div.i32);
		emitNfcF32: float32 := emit(float32(3.140000 / (2)), float32.sin);
		sizeofVoid: int32 := sizeof(void);
		sizeofBool: int32 := sizeof(bool);
		sizeofChar: int32 := sizeof(char);
		sizeofInt8: int32 := sizeof(int8);
		sizeofInt16: int32 := sizeof(int16);
		sizeofInt32: int32 := sizeof(int32);
		sizeofInt64: int32 := sizeof(int64);
		sizeofUint8: int32 := sizeof(uint8);
		sizeofUint16: int32 := sizeof(uint16);
		sizeofUint32: int32 := sizeof(uint32);
		sizeofUint64: int32 := sizeof(uint64);
		sizeofFloat32: int32 := sizeof(float32);
		sizeofFloat64: int32 := sizeof(float64);
		sizeofPointer: int32 := sizeof(pointer);
		sizeofVariant: int32 := sizeof(variant);
		sizeofTypename: int32 := sizeof(typename);
		sizeofFunction: int32 := sizeof(function);
		sizeofObject: int32 := sizeof(object);
		static const RecordSizeof: struct {
			x: int64 := 0;
		};
		static const RecordSizeofExt: struct {
			y: int32 := 0;
		};
		typeofRecord: typename := RecordSizeofExt;
		nameOfRecord: char[*] := typename.name(typeofRecord);
		offsetOfRecord: int32 := typeofRecord.offset;
		sizeOfRecord: int32 := sizeof(typeofRecord);
		fileOfRecord: char[*] := typename.file(typeofRecord);
		lineOfRecord: int32 := typename.line(typeofRecord);
		typeofBase: typename := typename.base(typeofRecord);
		nameOfBase: char[*] := typename.name(typeofBase);
		offsetOfBase: int32 := typeofBase.offset;
		sizeOfBase: int32 := sizeof(typeofBase);
		fileOfBase: char[*] := typename.file(typeofBase);
		lineOfBase: int32 := typename.line(typeofBase);
		typeofBase1: typename := typename.base(typeofBase);
		offsetOfBase1: int32 := typeofBase1.offset;
		sizeOfBase1: int32 := typeofBase1.size;
		typeofBase2: typename := typename.base(typeofBase1);
		offsetOfBase2: int32 := typeofBase2.offset;
		sizeOfBase2: int32 := typeofBase2.size;
		static const empty(): void := {
		}
;
		static const funAdd(x: int32, y: int32): int32 := {
			return .result := x + y;
		}
;
		funAddResult: int32 := funAdd(2, 7);
		funAddRef(x: int32, y: int32): int32 := funAdd;
		funAddRefResult: int32 := funAddRef(2, 8);
		funMul(x: int32, y: int32): int32 := funMul;
		funMulResult: int32 := funMul(2, 6);
		funMulRef(x: int32, y: int32): int32 := funMul;
		funMulRefResult: int32 := funMulRef(2, 7);
		static const funMul(x: int32, y: int32): int32 := {
			return .result := x * y;
		}
;
		static const fib(n: uint32): uint32 := {
			if (n <= (1)) {
				if (n <= (0)) {
					return .result := (0);
				}
				return .result := (1);
			}
			return .result := fib(n - (1)) + fib(n - (2));
		}
;
		fibonacci_13: uint32 := fib(13);
		a: typename := 96.300000;
		b: typename := 42.140000;
		shift: int32 := 2;
		boolA: bool := true;
		boolB: bool := !false;
		boolAnd: bool := boolA & boolB;
		boolIor: bool := boolA | boolB;
		boolXor: bool := boolA ^ boolB;
		boolNot: bool := !boolB;
		boolCeq: bool := boolA == boolB;
		boolCne: bool := boolA != boolB;
		boolClt: bool := boolA < boolB;
		boolCle: bool := boolA <= boolB;
		boolCgt: bool := boolA > boolB;
		boolCge: bool := boolA >= boolB;
		chrA: char := 'a';
		chrB: char := 'b';
		chrPls: char := +chrB;
		chrNeg: char := -chrB;
		chrCmt: char := ~chrB;
		chrAdd: char := chrA + chrB;
		chrSub: char := chrA - chrB;
		chrMul: char := chrA * chrB;
		chrDiv: char := chrA / chrB;
		chrMod: char := chrA % chrB;
		chrAnd: char := chrA & chrB;
		chrIor: char := chrA | chrB;
		chrXor: char := chrA ^ chrB;
		chrShl: char := (chrA) << shift;
		chrShr: char := (chrA) >> shift;
		chrNot: bool := !(chrB);
		chrCeq: bool := chrA == chrB;
		chrCne: bool := chrA != chrB;
		chrClt: bool := chrA < chrB;
		chrCle: bool := chrA <= chrB;
		chrCgt: bool := chrA > chrB;
		chrCge: bool := chrA >= chrB;
		i8A: int8 := a;
		i8B: int8 := b;
		i8Pls: int8 := +i8B;
		i8Neg: int8 := -i8B;
		i8Cmt: int8 := ~i8B;
		i8Add: int8 := i8A + i8B;
		i8Sub: int8 := i8A - i8B;
		i8Mul: int8 := i8A * i8B;
		i8Div: int8 := i8A / i8B;
		i8Mod: int8 := i8A % i8B;
		i8And: int8 := i8A & i8B;
		i8Ior: int8 := i8A | i8B;
		i8Xor: int8 := i8A ^ i8B;
		i8Shl: int8 := (i8A) << shift;
		i8Shr: int8 := (i8A) >> shift;
		i8Not: bool := !(i8B);
		i8Ceq: bool := i8A == i8B;
		i8Cne: bool := i8A != i8B;
		i8Clt: bool := i8A < i8B;
		i8Cle: bool := i8A <= i8B;
		i8Cgt: bool := i8A > i8B;
		i8Cge: bool := i8A >= i8B;
		u8A: uint8 := a;
		u8B: uint8 := b;
		u8Pls: uint8 := +u8B;
		u8Neg: uint8 := -u8B;
		u8Cmt: uint8 := ~u8B;
		u8Add: uint8 := u8A + u8B;
		u8Sub: uint8 := u8A - u8B;
		u8Mul: uint8 := u8A * u8B;
		u8Div: uint8 := u8A / u8B;
		u8Mod: uint8 := u8A % u8B;
		u8And: uint8 := u8A & u8B;
		u8Ior: uint8 := u8A | u8B;
		u8Xor: uint8 := u8A ^ u8B;
		u8Shl: uint8 := (u8A) << shift;
		u8Shr: uint8 := (u8A) >> shift;
		u8Not: bool := !(u8B);
		u8Ceq: bool := u8A == u8B;
		u8Cne: bool := u8A != u8B;
		u8Clt: bool := u8A < u8B;
		u8Cle: bool := u8A <= u8B;
		u8Cgt: bool := u8A > u8B;
		u8Cge: bool := u8A >= u8B;
		i16A: int16 := a;
		i16B: int16 := b;
		i16Pls: int16 := +i16B;
		i16Neg: int16 := -i16B;
		i16Cmt: int16 := ~i16B;
		i16Add: int16 := i16A + i16B;
		i16Sub: int16 := i16A - i16B;
		i16Mul: int16 := i16A * i16B;
		i16Div: int16 := i16A / i16B;
		i16Mod: int16 := i16A % i16B;
		i16And: int16 := i16A & i16B;
		i16Ior: int16 := i16A | i16B;
		i16Xor: int16 := i16A ^ i16B;
		i16Shl: int16 := (i16A) << shift;
		i16Shr: int16 := (i16A) >> shift;
		i16Not: bool := !(i16B);
		i16Ceq: bool := i16A == i16B;
		i16Cne: bool := i16A != i16B;
		i16Clt: bool := i16A < i16B;
		i16Cle: bool := i16A <= i16B;
		i16Cgt: bool := i16A > i16B;
		i16Cge: bool := i16A >= i16B;
		u16A: uint16 := a;
		u16B: uint16 := b;
		u16Pls: uint16 := +u16B;
		u16Neg: uint16 := -u16B;
		u16Cmt: uint16 := ~u16B;
		u16Add: uint16 := u16A + u16B;
		u16Sub: uint16 := u16A - u16B;
		u16Mul: uint16 := u16A * u16B;
		u16Div: uint16 := u16A / u16B;
		u16Mod: uint16 := u16A % u16B;
		u16And: uint16 := u16A & u16B;
		u16Ior: uint16 := u16A | u16B;
		u16Xor: uint16 := u16A ^ u16B;
		u16Shl: uint16 := (u16A) << shift;
		u16Shr: uint16 := (u16A) >> shift;
		u16Not: bool := !(u16B);
		u16Ceq: bool := u16A == u16B;
		u16Cne: bool := u16A != u16B;
		u16Clt: bool := u16A < u16B;
		u16Cle: bool := u16A <= u16B;
		u16Cgt: bool := u16A > u16B;
		u16Cge: bool := u16A >= u16B;
		i32A: int32 := a;
		i32B: int32 := b;
		i32Pls: int32 := +i32B;
		i32Neg: int32 := -i32B;
		i32Cmt: int32 := ~i32B;
		i32Add: int32 := i32A + i32B;
		i32Sub: int32 := i32A - i32B;
		i32Mul: int32 := i32A * i32B;
		i32Div: int32 := i32A / i32B;
		i32Mod: int32 := i32A % i32B;
		i32And: int32 := i32A & i32B;
		i32Ior: int32 := i32A | i32B;
		i32Xor: int32 := i32A ^ i32B;
		i32Shl: int32 := i32A << shift;
		i32Shr: int32 := i32A >> shift;
		i32Not: bool := !(i32B);
		i32Ceq: bool := i32A == i32B;
		i32Cne: bool := i32A != i32B;
		i32Clt: bool := i32A < i32B;
		i32Cle: bool := i32A <= i32B;
		i32Cgt: bool := i32A > i32B;
		i32Cge: bool := i32A >= i32B;
		u32A: uint32 := a;
		u32B: uint32 := b;
		u32Pls: uint32 := +u32B;
		u32Neg: uint32 := -u32B;
		u32Cmt: uint32 := ~u32B;
		u32Add: uint32 := u32A + u32B;
		u32Sub: uint32 := u32A - u32B;
		u32Mul: uint32 := u32A * u32B;
		u32Div: uint32 := u32A / u32B;
		u32Mod: uint32 := u32A % u32B;
		u32And: uint32 := u32A & u32B;
		u32Ior: uint32 := u32A | u32B;
		u32Xor: uint32 := u32A ^ u32B;
		u32Shl: uint32 := u32A << shift;
		u32Shr: uint32 := u32A >> shift;
		u32Not: bool := !(u32B);
		u32Ceq: bool := u32A == u32B;
		u32Cne: bool := u32A != u32B;
		u32Clt: bool := u32A < u32B;
		u32Cle: bool := u32A <= u32B;
		u32Cgt: bool := u32A > u32B;
		u32Cge: bool := u32A >= u32B;
		i64A: int64 := a;
		i64B: int64 := b;
		i64Pls: int64 := +i64B;
		i64Neg: int64 := -i64B;
		i64Cmt: int64 := ~i64B;
		i64Add: int64 := i64A + i64B;
		i64Sub: int64 := i64A - i64B;
		i64Mul: int64 := i64A * i64B;
		i64Div: int64 := i64A / i64B;
		i64Mod: int64 := i64A % i64B;
		i64And: int64 := i64A & i64B;
		i64Ior: int64 := i64A | i64B;
		i64Xor: int64 := i64A ^ i64B;
		i64Shl: int64 := i64A << shift;
		i64Shr: int64 := i64A >> shift;
		i64Not: bool := !(i64B);
		i64Ceq: bool := i64A == i64B;
		i64Cne: bool := i64A != i64B;
		i64Clt: bool := i64A < i64B;
		i64Cle: bool := i64A <= i64B;
		i64Cgt: bool := i64A > i64B;
		i64Cge: bool := i64A >= i64B;
		u64A: uint64 := a;
		u64B: uint64 := b;
		u64Pls: uint64 := +u64B;
		u64Neg: uint64 := -u64B;
		u64Cmt: uint64 := ~u64B;
		u64Add: uint64 := u64A + u64B;
		u64Sub: uint64 := u64A - u64B;
		u64Mul: uint64 := u64A * u64B;
		u64Div: uint64 := u64A / u64B;
		u64Mod: uint64 := u64A % u64B;
		u64And: uint64 := u64A & u64B;
		u64Ior: uint64 := u64A | u64B;
		u64Xor: uint64 := u64A ^ u64B;
		u64Shl: uint64 := u64A << shift;
		u64Shr: uint64 := u64A >> shift;
		u64Not: bool := !(u64B);
		u64Ceq: bool := u64A == u64B;
		u64Cne: bool := u64A != u64B;
		u64Clt: bool := u64A < u64B;
		u64Cle: bool := u64A <= u64B;
		u64Cgt: bool := u64A > u64B;
		u64Cge: bool := u64A >= u64B;
		f32A: float32 := a;
		f32B: float32 := b;
		f32Pls: float32 := +f32B;
		f32Neg: float32 := -f32B;
		f32Add: float32 := f32A + f32B;
		f32Sub: float32 := f32A - f32B;
		f32Mul: float32 := f32A * f32B;
		f32Div: float32 := f32A / f32B;
		f32Mod: float32 := f32A % f32B;
		f32Not: bool := !(f32B);
		f32Ceq: bool := f32A == f32B;
		f32Cne: bool := f32A != f32B;
		f32Clt: bool := f32A < f32B;
		f32Cle: bool := f32A <= f32B;
		f32Cgt: bool := f32A > f32B;
		f32Cge: bool := f32A >= f32B;
		f64A: float64 := a;
		f64B: float64 := b;
		f64Pls: float64 := +f64B;
		f64Neg: float64 := -f64B;
		f64Add: float64 := f64A + f64B;
		f64Sub: float64 := f64A - f64B;
		f64Mul: float64 := f64A * f64B;
		f64Div: float64 := f64A / f64B;
		f64Mod: float64 := f64A % f64B;
		f64Not: bool := !(f64B);
		f64Ceq: bool := f64A == f64B;
		f64Cne: bool := f64A != f64B;
		f64Clt: bool := f64A < f64B;
		f64Cle: bool := f64A <= f64B;
		f64Cgt: bool := f64A > f64B;
		f64Cge: bool := f64A >= f64B;
		ptrA: pointer := null;
		ptrB: pointer := pointer(shift);
		ptrCeq: bool := ptrA == ptrB;
		ptrCne: bool := ptrA != ptrB;
		static if (typename(int64) == null) {
			integer: typename := int32;
		}
		arrFixedNoInit: int64[7];
		arrSliceNoInit: int64[];
		arrPtrNoInit: int64[*];
		arrSliceInitNull: int64[] := null;
		arrPtrInitNull: int64[*] := null;
		arrSliceInitFixed: int64[] := arrFixedNoInit;
		arrPtrInitFixed: int64[*] := arrFixedNoInit;
		arrSliceInitSlice: int64[] := arrSliceInitFixed;
		arrPtrInitSlice: int64[*] := arrSliceInitFixed;
		arrPtrInitPtr: int64[*] := arrPtrInitFixed;
		arrSliceInitString: char[] := "string";
		arrPtrInitString: char[*] := "string";
		assert(arrFixedNoInit.length == 7);
		assert(arrSliceNoInit.length == (0), "This one might fail");
		assert(arrSliceInitNull.length == (0));
		assert(arrSliceInitSlice.length == arrSliceInitFixed.length);
		static if (typename(int64) == null) {
			integer: typename := int32;
		}
		static value: int64 := 42;
		valueRef: int64 := value;
		valuePtr: pointer := value;
		valueVar: variant := value;
		fromRef: int64 := valueRef;
		fromPtr: int64 := valuePtr;
		fromVar: int64 := valueVar;
		nullRef: int64 := null;
		nullPtr: pointer := null;
		nullVar: variant := null;
		nullTyp: typename := null;
		nullFun: function := null;
		nullObj: object := null;
		typePtr: pointer := int64;
		typeVar: variant := int64;
		typeTyp: typename := int64;
		local: int64 := value;
		copyVal: int64 := local;
		copyRef: int64 := valueRef;
		copyPtr: pointer := valuePtr;
		copyVar: variant := valueVar;
		copyTyp: typename := typeTyp;
		ptrVoid: pointer := void;
		ptrBool: pointer := bool;
		ptrChar: pointer := char;
		ptrInt8: pointer := int8;
		ptrInt16: pointer := int16;
		ptrInt32: pointer := int32;
		ptrInt64: pointer := int64;
		ptrUint8: pointer := uint8;
		ptrUint16: pointer := uint16;
		ptrUint32: pointer := uint32;
		ptrUint64: pointer := uint64;
		ptrFloat32: pointer := float32;
		ptrFloat64: pointer := float64;
		ptrTypename: pointer := typename;
		ptrFunction: pointer := function;
		ptrPointer: pointer := pointer;
		ptrVariant: pointer := variant;
		ptrObject: pointer := object;
		varVoid: variant := void;
		varBool: variant := bool;
		varChar: variant := char;
		varInt8: variant := int8;
		varInt16: variant := int16;
		varInt32: variant := int32;
		varInt64: variant := int64;
		varUint8: variant := uint8;
		varUint16: variant := uint16;
		varUint32: variant := uint32;
		varUint64: variant := uint64;
		varFloat32: variant := float32;
		varFloat64: variant := float64;
		varTypename: variant := typename;
		varFunction: variant := function;
		varPointer: variant := pointer;
		varVariant: variant := variant;
		varObject: variant := object;
		typVoid: typename := void;
		typBool: typename := bool;
		typChar: typename := char;
		typInt8: typename := int8;
		typInt16: typename := int16;
		typInt32: typename := int32;
		typInt64: typename := int64;
		typUint8: typename := uint8;
		typUint16: typename := uint16;
		typUint32: typename := uint32;
		typUint64: typename := uint64;
		typFloat32: typename := float32;
		typFloat64: typename := float64;
		typTypename: typename := typename;
		typFunction: typename := function;
		typPointer: typename := pointer;
		typVariant: typename := variant;
		typObject: typename := object;
		valueOfPtr: pointer := pointer(value);
		valueOfVar: variant := variant(value);
		valueOfTyp: typename := typename(value);
		typeOfValue: typename := typename(value);
		copyPtrFloat64: variant := ptrFloat64;
		copyVarFloat64: pointer := varFloat64;
		static if (typename(int64) == null) {
			integer: typename := int32;
		}
		localNoInit: int64;
		static globalNoInit: int64;
		localInitValue: int64 := 42;
		static globalInitValue: int64 := 1024;
		localInitLocal: int64 := localInitValue;
		static globalInitLocal: int64 := localInitValue;
		localInitGlobal: int64 := globalInitValue;
		static globalInitGlobal: int64 := globalInitValue;
		static const InitMember: struct {
			intMember: int32;
			intMemberDef: int32 := 42;
			const intConstMember: int32;
			const intConstMemberDef: int32 := 43;
			static intGlobal: int32 := 44;
			static const intConstant: int32 := 45;
		};
		pi64: float64 := 3.141593;
		e64: float64 := 2.718282;
		pi32: float32 := pi64;
		e32: float32 := e64;
		rgb888(r: int32, g: int32, b: int32): int32 := r << 16 & 16711680 | g << 8 & 65280 | b & 255;
		rgb565(r: int32, g: int32, b: int32): int32 := r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31;
		r_comp: int32 := 14 << 3;
		g_comp: int32 := 63 << 2;
		b_comp: int32 := 31 << 3;
		r5g6b5: int32 := rgb565(r_comp, g_comp, b_comp);
		r8g8b8: int32 := rgb888(r_comp, g_comp, b_comp);
		zxtR5: int32 := uint32.zxt(r5g6b5, 11, 5);
		zxtG6: int32 := uint32.zxt(r5g6b5, 5, 6);
		zxtB5: int32 := uint32.zxt(r5g6b5, 0, 5);
		sxtR5: int32 := uint32.sxt(r5g6b5, 11, 5);
		sxtG6: int32 := uint32.sxt(r5g6b5, 5, 6);
		sxtB5: int32 := uint32.sxt(r5g6b5, 0, 5);
		zxtR8: int32 := uint32.zxt(r8g8b8, 16, 8);
		zxtG8: int32 := uint32.zxt(r8g8b8, 8, 8);
		zxtB8: int32 := uint32.zxt(r8g8b8, 0, 8);
		sxtR8: int32 := uint32.sxt(r8g8b8, 16, 8);
		sxtG8: int32 := uint32.sxt(r8g8b8, 8, 8);
		sxtB8: int32 := uint32.sxt(r8g8b8, 0, 8);
		sinF64: float64 := float64.sin(pi64 / (2));
		cosF64: float64 := float64.cos(pi64 / (2));
		tanF64: float64 := float64.tan(pi64 / (4));
		logF64: float64 := float64.log(e64 * e64 * e64);
		expF64: float64 := float64.exp(1.000000);
		powF64: float64 := float64.pow(pi64 * pi64, 0.500000);
		sqrtF64: float64 := float64.sqrt(pi64 * pi64);
		atanF64: float64 := float64.atan2(pi64, 1.000000);
		sinF32: float32 := float32.sin(pi32 / (2));
		cosF32: float32 := float32.cos(pi32 / (2));
		tanF32: float32 := float32.tan(pi32 / (4));
		logF32: float32 := float32.log(e32 * e32 * e32);
		expF32: float32 := float32.exp(1.000000);
		powF32: float32 := float32.pow(pi32 * pi32, 0.500000);
		sqrtF32: float32 := float32.sqrt(pi32 * pi32);
		atanF32: float32 := float32.atan2(pi32, 1.000000);
		realloc(data: pointer, size: int32): pointer := pointer.alloc(data, size);
		malloc(size: int32): pointer := pointer.alloc(null, size);
		free(data: pointer): pointer := pointer.alloc(data, 0);
		p1: pointer := malloc(1024);
		p2: pointer := malloc(80);
		p3: pointer := malloc(160);
		p4: pointer := malloc(820);
		pointer.fill(p1, 0, 1024);
		pointer.copy(p1, p3, 160);
		free(p1);
		free(p2);
		free(p3);
		free(p4);
		val1: int64 := 42;
		val2: int64 := 96;
		debug("val1", val1);
		debug("val2", val2);
		pointer.copy(pointer(val2), pointer(val1), 8);
		pointer.fill(pointer(val1), 0, 8);
		debug("val1", val1);
		debug("val2", val2);
		assert(5 == 5, "5 != 5");
	}
}
.instructions: [5024 bytes]
	extras/Tests/lang.varInitByVal.ci:38: (9 bytes): static intGlobal: int32 := 44;
	<.main+?>:    load.c32 44
	<.main+?>:    store.m32 .?????? ;InitMember.intGlobal
	extras/Tests/lang.varInitByVal.ci:43: (9 bytes): static const intConstant: int32 := 45;
	<.main+?>:    load.c32 45
	<.main+?>:    store.m32 .?????? ;InitMember.intConstant
	extras/Tests/lang.statementIf.ci:4: (39 bytes): raise(raise.debug, "0 == 0", null, 1);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 4
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"0 == 0"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 1
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementIf.ci:12: (39 bytes): raise(raise.debug, "0 == 0", null, 3);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 12
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"0 == 0"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 3
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementIf.ci:22: (39 bytes): raise(raise.debug, "0 == 0", null, 6);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 22
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"0 == 0"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 6
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementIf.ci:26: (5 bytes): t: int32 := 0
	<.main+?>:    load.c32 0
	extras/Tests/lang.statementIf.ci:28: (50 bytes): if (t == 0)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 0
	<.main+?>:    ceq.i32
	<.main+?>:    jz <.main+?>
	extras/Tests/lang.statementIf.ci:29: (38 bytes): raise(raise.debug, "t == 0", t, 7);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 29
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"t == 0"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 7
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementIf.ci:32: (50 bytes): if (t != 0)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 0
	<.main+?>:    ceq.i32
	<.main+?>:    jnz <.main+?>
	extras/Tests/lang.statementIf.ci:33: (38 bytes): raise(raise.debug, "t != 0", t, 8);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 33
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"t != 0"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementIf.ci:36: (92 bytes): if (t == 0)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 0
	<.main+?>:    ceq.i32
	<.main+?>:    jz <.main+?>
	extras/Tests/lang.statementIf.ci:37: (38 bytes): raise(raise.debug, "t == 0", t, 10);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 37
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"t == 0"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 10
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	<.main+?>:    jmp <.main+?>
	extras/Tests/lang.statementIf.ci:40: (38 bytes): raise(raise.debug, "t != 0", t, 9);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 40
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"t != 0"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 9
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementIf.ci:43: (92 bytes): if (t != 0)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 0
	<.main+?>:    ceq.i32
	<.main+?>:    jnz <.main+?>
	extras/Tests/lang.statementIf.ci:44: (38 bytes): raise(raise.debug, "t != 0", t, 11);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 44
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"t != 0"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 11
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	<.main+?>:    jmp <.main+?>
	extras/Tests/lang.statementIf.ci:47: (38 bytes): raise(raise.debug, "t == 0", t, 12);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementIf.ci"
	<.main+?>:    load.c32 47
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"t == 0"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 12
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementFor.ci:3: (51 bytes): for ( ; ; )
	<.main+?>:    jmp <.main+?>
	extras/Tests/lang.statementFor.ci:4: (39 bytes): debug("for ( ; ; )");
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementFor.ci"
	<.main+?>:    load.c32 4
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"for ( ; ; )"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementFor.ci:5: (4 bytes): break;
	<.main+?>:    jmp <.main+?>
	:: (4 bytes)
	<.main+?>:    jmp <.main+?>
	extras/Tests/lang.statementFor.ci:8: (67 bytes): for (i: int32 := 0; i < 2; i := i + 1)
	<.main+?>:    load.c32 0
	<.main+?>:    jmp <.main+?>
	extras/Tests/lang.statementFor.ci:9: (38 bytes): debug("for (int i = 0; i < 2; i += 1)", i);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementFor.ci"
	<.main+?>:    load.c32 9
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"for (int i = 0; i < 2; i += 1)"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementFor.ci:8: (4 bytes): i := i + 1
	<.main+?>:    inc.i32(+1)
	extras/Tests/lang.statementFor.ci:8: (12 bytes): i < 2
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 2
	<.main+?>:    clt.i32
	<.main+?>:    jnz <.main+?>
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.statementFor.ci:12: (5 bytes): forIdx: int32
	<.main+?>:    load.c32 0
	extras/Tests/lang.statementFor.ci:13: (65 bytes): for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)
	<.main+?>:    load.c32 0
	<.main+?>:    set.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	extras/Tests/lang.statementFor.ci:14: (38 bytes): debug("for (forIdx = 0; forIdx < 2; forIdx += 1)", forIdx);
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.statementFor.ci"
	<.main+?>:    load.c32 14
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"for (forIdx = 0; forIdx < 2; forIdx += 1)"
	<.main+?>:    load.ref .?????? ;int32
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.statementFor.ci:13: (4 bytes): forIdx := forIdx + 1
	<.main+?>:    inc.i32(+1)
	extras/Tests/lang.statementFor.ci:13: (12 bytes): forIdx < 2
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 2
	<.main+?>:    clt.i32
	<.main+?>:    jnz <.main+?>
	extras/Tests/lang.inlineArgs.ci:16: (5 bytes): ma: int32 := 3
	<.main+?>:    load.c32 3
	extras/Tests/lang.inlineArgs.ci:17: (5 bytes): mb: int32 := 6
	<.main+?>:    load.c32 6
	extras/Tests/lang.inlineArgs.ci:18: (5 bytes): mc: int32 := 9
	<.main+?>:    load.c32 9
	extras/Tests/lang.inlineArgs.ci:20: (5 bytes): zeroVal: int32 := zero(2, 3)
	<.main+?>:    load.c32 0
	extras/Tests/lang.inlineArgs.ci:21: (5 bytes): zeroVar: int32 := zero(ma, mb)
	<.main+?>:    load.c32 0
	extras/Tests/lang.inlineArgs.ci:22: (5 bytes): zeroXpr: int32 := zero(ma + mb, mb + mc)
	<.main+?>:    load.c32 0
	extras/Tests/lang.inlineArgs.ci:24: (5 bytes): lastVal: int32 := last(2, 3)
	<.main+?>:    load.c32 3
	extras/Tests/lang.inlineArgs.ci:25: (2 bytes): lastVar: int32 := last(ma, mb)
	<.main+?>:    dup.x1 sp(5)
	extras/Tests/lang.inlineArgs.ci:26: (5 bytes): lastXpr: int32 := last(ma + mb, mb + mc)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    add.i32
	extras/Tests/lang.inlineArgs.ci:28: (9 bytes): sum2Val: int32 := sum(3, 12)
	<.main+?>:    load.c32 3
	<.main+?>:    inc.i32(+12)
	extras/Tests/lang.inlineArgs.ci:29: (5 bytes): sum2Var: int32 := sum(ma, mb)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    add.i32
	extras/Tests/lang.inlineArgs.ci:30: (11 bytes): sum2Xpr: int32 := sum(ma + mb, mb + mc)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    add.i32
	<.main+?>:    add.i32
	extras/Tests/lang.inlineArgs.ci:32: (24 bytes): any2Val: int32 := any(3, 12)
	<.main+?>:    load.c32 3
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.c32 12
	<.main+?>:    set.x1 sp(1)
	extras/Tests/lang.inlineArgs.ci:33: (18 bytes): any2Var: int32 := any(ma, mb)
	<.main+?>:    dup.x1 sp(12)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(12)
	<.main+?>:    set.x1 sp(1)
	extras/Tests/lang.inlineArgs.ci:34: (24 bytes): any2Xpr: int32 := any(ma + mb, mb + mc)
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    add.i32
	<.main+?>:    set.x1 sp(1)
	extras/Tests/lang.inlineArgs.ci:36: (33 bytes): min2Val: int32 := min(3, 12)
	<.main+?>:    load.c32 3
	<.main+?>:    load.c32 12
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.inlineArgs.ci:37: (27 bytes): min2Var: int32 := min(ma, mb)
	<.main+?>:    dup.x1 sp(15)
	<.main+?>:    dup.x1 sp(15)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.inlineArgs.ci:38: (33 bytes): min2Xpr: int32 := min(ma + mb, mb + mc)
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.inlineArgs.ci:45: (43 bytes): any3Val: int32 := any(3, 2, 6)
	<.main+?>:    load.c32 3
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.c32 2
	<.main+?>:    set.x1 sp(1)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.c32 6
	<.main+?>:    set.x1 sp(1)
	extras/Tests/lang.inlineArgs.ci:46: (34 bytes): any3Var: int32 := any(ma, mb, mc)
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    set.x1 sp(1)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(17)
	<.main+?>:    set.x1 sp(1)
	extras/Tests/lang.inlineArgs.ci:47: (43 bytes): any3Xpr: int32 := any(ma + mb, mb + mc, mc + ma)
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    add.i32
	<.main+?>:    set.x1 sp(1)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    dup.x1 sp(21)
	<.main+?>:    add.i32
	<.main+?>:    set.x1 sp(1)
	extras/Tests/lang.inlineArgs.ci:49: (61 bytes): min3Val: int32 := min(3, 2, 6)
	<.main+?>:    load.c32 3
	<.main+?>:    load.c32 2
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	<.main+?>:    load.c32 6
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.inlineArgs.ci:50: (52 bytes): min3Var: int32 := min(ma, mb, mc)
	<.main+?>:    dup.x1 sp(21)
	<.main+?>:    dup.x1 sp(21)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	<.main+?>:    dup.x1 sp(20)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.inlineArgs.ci:51: (61 bytes): min3Xpr: int32 := min(ma + mb, mb + mc, mc + ma)
	<.main+?>:    dup.x1 sp(22)
	<.main+?>:    dup.x1 sp(22)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(22)
	<.main+?>:    dup.x1 sp(22)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	<.main+?>:    dup.x1 sp(21)
	<.main+?>:    dup.x1 sp(24)
	<.main+?>:    add.i32
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    clt.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    jmp <.main+?>
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    set.x1 sp(2)
	<.main+?>:    inc.sp(-4)
	extras/Tests/test.inlineOverload.ci:9: (5 bytes): overload1: float32 := overload
	<.main+?>:    load.f32 1.000000
	extras/Tests/test.inlineOverload.ci:10: (5 bytes): overload2: float32 := overload()
	<.main+?>:    load.f32 2.000000
	extras/Tests/test.inlineOverload.ci:11: (5 bytes): overload3: float32 := overload(0)
	<.main+?>:    load.f32 3.000000
	extras/Tests/test.inlineOverload.ci:12: (5 bytes): overload4: float32 := overload(0.000000)
	<.main+?>:    load.f32 1.000000
	extras/Tests/test.inlineOverload.ci:13: (5 bytes): overload5: float32 := overload(0, 0)
	<.main+?>:    load.f32 5.000000
	extras/Tests/lang.inlineEmit.ci:3: (1 bytes): emitldz32: int32 := emit(load.z32)
	<.main+?>:    load.z32
	extras/Tests/lang.inlineEmit.ci:4: (1 bytes): emitldz64: int64 := emit(load.z64)
	<.main+?>:    load.z64
	extras/Tests/lang.inlineEmit.ci:6: (5 bytes): emitA: int32 := 42
	<.main+?>:    load.c32 42
	extras/Tests/lang.inlineEmit.ci:7: (5 bytes): emitB: int32 := 96
	<.main+?>:    load.c32 96
	extras/Tests/lang.inlineEmit.ci:9: (5 bytes): emitAddI32: int32 := emit(int32(emitA), int32(emitB), add.i32)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    add.i32
	extras/Tests/lang.inlineEmit.ci:10: (11 bytes): emitDivI32: int32 := emit(int32(10), int32(5), div.i32)
	<.main+?>:    load.c32 10
	<.main+?>:    load.c32 5
	<.main+?>:    div.i32
	extras/Tests/lang.inlineEmit.ci:11: (24 bytes): emitNfcF32: float32 := emit(float32(3.140000 / (2)), float32.sin)
	<.main+?>:    load.f64 3.140000
	<.main+?>:    load.f64 2.000000
	<.main+?>:    div.f64
	<.main+?>:    f64.2f32
	<.main+?>:    nfc(21) ;float32.sin(x: float32): float32
	extras/Tests/lang.reflection.ci:3: (4 bytes): sizeofVoid: int32 := sizeof(void)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:4: (4 bytes): sizeofBool: int32 := sizeof(bool)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:5: (4 bytes): sizeofChar: int32 := sizeof(char)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:6: (4 bytes): sizeofInt8: int32 := sizeof(int8)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:7: (4 bytes): sizeofInt16: int32 := sizeof(int16)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:8: (4 bytes): sizeofInt32: int32 := sizeof(int32)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:9: (4 bytes): sizeofInt64: int32 := sizeof(int64)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:10: (4 bytes): sizeofUint8: int32 := sizeof(uint8)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:11: (4 bytes): sizeofUint16: int32 := sizeof(uint16)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:12: (4 bytes): sizeofUint32: int32 := sizeof(uint32)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:13: (4 bytes): sizeofUint64: int32 := sizeof(uint64)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:14: (4 bytes): sizeofFloat32: int32 := sizeof(float32)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:15: (4 bytes): sizeofFloat64: int32 := sizeof(float64)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:16: (4 bytes): sizeofPointer: int32 := sizeof(pointer)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:17: (4 bytes): sizeofVariant: int32 := sizeof(variant)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:18: (4 bytes): sizeofTypename: int32 := sizeof(typename)
	<.main+?>:    load.m32 .?????? ;typename+24
	extras/Tests/lang.reflection.ci:19: (4 bytes): sizeofFunction: int32 := sizeof(function)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:20: (4 bytes): sizeofObject: int32 := sizeof(object)
	<.main+?>:    load.m32 .??????
	extras/Tests/lang.reflection.ci:30: (5 bytes): typeofRecord: typename := RecordSizeofExt
	<.main+?>:    load.ref .?????? ;RecordSizeofExt
	extras/Tests/lang.reflection.ci:31: (6 bytes): nameOfRecord: char[*] := typename.name(typeofRecord)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    nfc(4) ;typename.name(type: typename): .cstr
	extras/Tests/lang.reflection.ci:32: (7 bytes): offsetOfRecord: int32 := typeofRecord.offset
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    inc.i32(+32)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:33: (7 bytes): sizeOfRecord: int32 := sizeof(typeofRecord)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    inc.i32(+24)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:34: (6 bytes): fileOfRecord: char[*] := typename.file(typeofRecord)
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    nfc(2) ;typename.file(type: typename): .cstr
	extras/Tests/lang.reflection.ci:35: (6 bytes): lineOfRecord: int32 := typename.line(typeofRecord)
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    nfc(3) ;typename.line(type: typename): int32
	extras/Tests/lang.reflection.ci:37: (6 bytes): typeofBase: typename := typename.base(typeofRecord)
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    nfc(1) ;typename.base(type: typename): typename
	extras/Tests/lang.reflection.ci:38: (6 bytes): nameOfBase: char[*] := typename.name(typeofBase)
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    nfc(4) ;typename.name(type: typename): .cstr
	extras/Tests/lang.reflection.ci:39: (7 bytes): offsetOfBase: int32 := typeofBase.offset
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    inc.i32(+32)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:40: (7 bytes): sizeOfBase: int32 := sizeof(typeofBase)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    inc.i32(+24)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:41: (6 bytes): fileOfBase: char[*] := typename.file(typeofBase)
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    nfc(2) ;typename.file(type: typename): .cstr
	extras/Tests/lang.reflection.ci:42: (6 bytes): lineOfBase: int32 := typename.line(typeofBase)
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    nfc(3) ;typename.line(type: typename): int32
	extras/Tests/lang.reflection.ci:44: (6 bytes): typeofBase1: typename := typename.base(typeofBase)
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    nfc(1) ;typename.base(type: typename): typename
	extras/Tests/lang.reflection.ci:45: (7 bytes): offsetOfBase1: int32 := typeofBase1.offset
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    inc.i32(+32)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:46: (7 bytes): sizeOfBase1: int32 := typeofBase1.size
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    inc.i32(+24)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:48: (6 bytes): typeofBase2: typename := typename.base(typeofBase1)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    nfc(1) ;typename.base(type: typename): typename
	extras/Tests/lang.reflection.ci:49: (7 bytes): offsetOfBase2: int32 := typeofBase2.offset
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    inc.i32(+32)
	<.main+?>:    load.m32
	extras/Tests/lang.reflection.ci:50: (7 bytes): sizeOfBase2: int32 := typeofBase2.size
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    inc.i32(+24)
	<.main+?>:    load.m32
	extras/Tests/lang.function.ci:13: (25 bytes): funAddResult: int32 := funAdd(2, 7)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 2
	<.main+?>:    load.c32 7
	<.main+?>:    load.ref .?????? ;funAdd(x: int32, y: int32): int32
	<.main+?>:    call
	<.main+?>:    inc.sp(-8)
	extras/Tests/lang.function.ci:16: (5 bytes): funAddRef(x: int32, y: int32): int32 := funAdd
	<.main+?>:    load.ref .?????? ;funAdd(x: int32, y: int32): int32
	extras/Tests/lang.function.ci:19: (22 bytes): funAddRefResult: int32 := funAddRef(2, 8)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 2
	<.main+?>:    load.c32 8
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    call
	<.main+?>:    inc.sp(-8)
	extras/Tests/lang.function.ci:22: (5 bytes): funMul(x: int32, y: int32): int32 := funMul
	<.main+?>:    load.ref .?????? ;funMul(x: int32, y: int32): int32
	extras/Tests/lang.function.ci:25: (22 bytes): funMulResult: int32 := funMul(2, 6)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 2
	<.main+?>:    load.c32 6
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    call
	<.main+?>:    inc.sp(-8)
	extras/Tests/lang.function.ci:28: (2 bytes): funMulRef(x: int32, y: int32): int32 := funMul
	<.main+?>:    dup.x1 sp(1)
	extras/Tests/lang.function.ci:31: (22 bytes): funMulRefResult: int32 := funMulRef(2, 7)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 2
	<.main+?>:    load.c32 7
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    call
	<.main+?>:    inc.sp(-8)
	extras/Tests/lang.function.ci:50: (20 bytes): fibonacci_13: uint32 := fib(13)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 13
	<.main+?>:    load.ref .?????? ;fib(n: uint32): uint32
	<.main+?>:    call
	<.main+?>:    inc.sp(-4)
	extras/Tests/lang.useOperator.ci:5: (5 bytes): shift: int32 := 2
	<.main+?>:    load.c32 2
	extras/Tests/lang.useOperator.ci:7: (5 bytes): boolA: bool := true
	<.main+?>:    load.c32 1
	extras/Tests/lang.useOperator.ci:8: (6 bytes): boolB: bool := !false
	<.main+?>:    load.c32 0
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:17: (11 bytes): boolAnd: bool := boolA & boolB
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m8
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:18: (11 bytes): boolIor: bool := boolA | boolB
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m8
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:19: (11 bytes): boolXor: bool := boolA ^ boolB
	<.main+?>:    load.sp(+12)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+12)
	<.main+?>:    load.m8
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:22: (6 bytes): boolNot: bool := !boolB
	<.main+?>:    load.sp(+12)
	<.main+?>:    load.m8
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:23: (11 bytes): boolCeq: bool := boolA == boolB
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:24: (12 bytes): boolCne: bool := boolA != boolB
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:25: (11 bytes): boolClt: bool := boolA < boolB
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    clt.i32
	extras/Tests/lang.useOperator.ci:26: (12 bytes): boolCle: bool := boolA <= boolB
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    cgt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:27: (11 bytes): boolCgt: bool := boolA > boolB
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    cgt.i32
	extras/Tests/lang.useOperator.ci:28: (12 bytes): boolCge: bool := boolA >= boolB
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    clt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:30: (5 bytes): chrA: char := 'a'
	<.main+?>:    load.c32 97
	extras/Tests/lang.useOperator.ci:31: (5 bytes): chrB: char := 'b'
	<.main+?>:    load.c32 98
	extras/Tests/lang.useOperator.ci:32: (6 bytes): chrPls: char := +chrB
	<.main+?>:    load.sp(+0)
	<.main+?>:    load.m8
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:33: (6 bytes): chrNeg: char := -chrB
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m8
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:34: (6 bytes): chrCmt: char := ~chrB
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m8
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:35: (11 bytes): chrAdd: char := chrA + chrB
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m8
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:36: (11 bytes): chrSub: char := chrA - chrB
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:37: (11 bytes): chrMul: char := chrA * chrB
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    mul.u32
	extras/Tests/lang.useOperator.ci:38: (11 bytes): chrDiv: char := chrA / chrB
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    div.u32
	extras/Tests/lang.useOperator.ci:39: (11 bytes): chrMod: char := chrA % chrB
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    mod.u32
	extras/Tests/lang.useOperator.ci:40: (11 bytes): chrAnd: char := chrA & chrB
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:41: (11 bytes): chrIor: char := chrA | chrB
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:42: (11 bytes): chrXor: char := chrA ^ chrB
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m8
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:43: (8 bytes): chrShl: char := (chrA) << shift
	<.main+?>:    load.sp(+48)
	<.main+?>:    load.m8
	<.main+?>:    dup.x1 sp(26)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:44: (8 bytes): chrShr: char := (chrA) >> shift
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m8
	<.main+?>:    dup.x1 sp(27)
	<.main+?>:    sar.b32
	extras/Tests/lang.useOperator.ci:45: (7 bytes): chrNot: bool := !(chrB)
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m8
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:46: (11 bytes): chrCeq: bool := chrA == chrB
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:47: (12 bytes): chrCne: bool := chrA != chrB
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:48: (11 bytes): chrClt: bool := chrA < chrB
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m8
	<.main+?>:    clt.u32
	extras/Tests/lang.useOperator.ci:49: (12 bytes): chrCle: bool := chrA <= chrB
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m8
	<.main+?>:    cgt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:50: (11 bytes): chrCgt: bool := chrA > chrB
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m8
	<.main+?>:    cgt.u32
	extras/Tests/lang.useOperator.ci:51: (12 bytes): chrCge: bool := chrA >= chrB
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m8
	<.main+?>:    clt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:53: (5 bytes): i8A: int8 := a
	<.main+?>:    load.c32 96
	extras/Tests/lang.useOperator.ci:54: (5 bytes): i8B: int8 := b
	<.main+?>:    load.c32 42
	extras/Tests/lang.useOperator.ci:55: (6 bytes): i8Pls: int8 := +i8B
	<.main+?>:    load.sp(+0)
	<.main+?>:    load.m8
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:56: (6 bytes): i8Neg: int8 := -i8B
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m8
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:57: (6 bytes): i8Cmt: int8 := ~i8B
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m8
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:58: (11 bytes): i8Add: int8 := i8A + i8B
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m8
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:59: (11 bytes): i8Sub: int8 := i8A - i8B
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:60: (11 bytes): i8Mul: int8 := i8A * i8B
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    mul.i32
	extras/Tests/lang.useOperator.ci:61: (11 bytes): i8Div: int8 := i8A / i8B
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    div.i32
	extras/Tests/lang.useOperator.ci:62: (11 bytes): i8Mod: int8 := i8A % i8B
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    mod.i32
	extras/Tests/lang.useOperator.ci:63: (11 bytes): i8And: int8 := i8A & i8B
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:64: (11 bytes): i8Ior: int8 := i8A | i8B
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:65: (11 bytes): i8Xor: int8 := i8A ^ i8B
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m8
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:66: (8 bytes): i8Shl: int8 := (i8A) << shift
	<.main+?>:    load.sp(+48)
	<.main+?>:    load.m8
	<.main+?>:    dup.x1 sp(48)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:67: (8 bytes): i8Shr: int8 := (i8A) >> shift
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m8
	<.main+?>:    dup.x1 sp(49)
	<.main+?>:    sar.b32
	extras/Tests/lang.useOperator.ci:68: (7 bytes): i8Not: bool := !(i8B)
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m8
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:69: (11 bytes): i8Ceq: bool := i8A == i8B
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:70: (12 bytes): i8Cne: bool := i8A != i8B
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:71: (11 bytes): i8Clt: bool := i8A < i8B
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m8
	<.main+?>:    clt.i32
	extras/Tests/lang.useOperator.ci:72: (12 bytes): i8Cle: bool := i8A <= i8B
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m8
	<.main+?>:    cgt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:73: (11 bytes): i8Cgt: bool := i8A > i8B
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m8
	<.main+?>:    cgt.i32
	extras/Tests/lang.useOperator.ci:74: (12 bytes): i8Cge: bool := i8A >= i8B
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m8
	<.main+?>:    clt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:76: (5 bytes): u8A: uint8 := a
	<.main+?>:    load.c32 96
	extras/Tests/lang.useOperator.ci:77: (5 bytes): u8B: uint8 := b
	<.main+?>:    load.c32 42
	extras/Tests/lang.useOperator.ci:78: (6 bytes): u8Pls: uint8 := +u8B
	<.main+?>:    load.sp(+0)
	<.main+?>:    load.m8
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:79: (6 bytes): u8Neg: uint8 := -u8B
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m8
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:80: (6 bytes): u8Cmt: uint8 := ~u8B
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m8
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:81: (11 bytes): u8Add: uint8 := u8A + u8B
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m8
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:82: (11 bytes): u8Sub: uint8 := u8A - u8B
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m8
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:83: (11 bytes): u8Mul: uint8 := u8A * u8B
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m8
	<.main+?>:    mul.u32
	extras/Tests/lang.useOperator.ci:84: (11 bytes): u8Div: uint8 := u8A / u8B
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m8
	<.main+?>:    div.u32
	extras/Tests/lang.useOperator.ci:85: (11 bytes): u8Mod: uint8 := u8A % u8B
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m8
	<.main+?>:    mod.u32
	extras/Tests/lang.useOperator.ci:86: (11 bytes): u8And: uint8 := u8A & u8B
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m8
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:87: (11 bytes): u8Ior: uint8 := u8A | u8B
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m8
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:88: (11 bytes): u8Xor: uint8 := u8A ^ u8B
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m8
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:89: (8 bytes): u8Shl: uint8 := (u8A) << shift
	<.main+?>:    load.sp(+48)
	<.main+?>:    load.m8
	<.main+?>:    dup.x1 sp(70)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:90: (8 bytes): u8Shr: uint8 := (u8A) >> shift
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m8
	<.main+?>:    dup.x1 sp(71)
	<.main+?>:    sar.b32
	extras/Tests/lang.useOperator.ci:91: (7 bytes): u8Not: bool := !(u8B)
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m8
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:92: (11 bytes): u8Ceq: bool := u8A == u8B
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:93: (12 bytes): u8Cne: bool := u8A != u8B
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m8
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:94: (11 bytes): u8Clt: bool := u8A < u8B
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m8
	<.main+?>:    clt.u32
	extras/Tests/lang.useOperator.ci:95: (12 bytes): u8Cle: bool := u8A <= u8B
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m8
	<.main+?>:    cgt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:96: (11 bytes): u8Cgt: bool := u8A > u8B
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m8
	<.main+?>:    cgt.u32
	extras/Tests/lang.useOperator.ci:97: (12 bytes): u8Cge: bool := u8A >= u8B
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m8
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m8
	<.main+?>:    clt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:99: (5 bytes): i16A: int16 := a
	<.main+?>:    load.c32 96
	extras/Tests/lang.useOperator.ci:100: (5 bytes): i16B: int16 := b
	<.main+?>:    load.c32 42
	extras/Tests/lang.useOperator.ci:101: (6 bytes): i16Pls: int16 := +i16B
	<.main+?>:    load.sp(+0)
	<.main+?>:    load.m16
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:102: (6 bytes): i16Neg: int16 := -i16B
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m16
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:103: (6 bytes): i16Cmt: int16 := ~i16B
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m16
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:104: (11 bytes): i16Add: int16 := i16A + i16B
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m16
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:105: (11 bytes): i16Sub: int16 := i16A - i16B
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m16
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:106: (11 bytes): i16Mul: int16 := i16A * i16B
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m16
	<.main+?>:    mul.i32
	extras/Tests/lang.useOperator.ci:107: (11 bytes): i16Div: int16 := i16A / i16B
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m16
	<.main+?>:    div.i32
	extras/Tests/lang.useOperator.ci:108: (11 bytes): i16Mod: int16 := i16A % i16B
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m16
	<.main+?>:    mod.i32
	extras/Tests/lang.useOperator.ci:109: (11 bytes): i16And: int16 := i16A & i16B
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m16
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:110: (11 bytes): i16Ior: int16 := i16A | i16B
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m16
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:111: (11 bytes): i16Xor: int16 := i16A ^ i16B
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m16
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:112: (8 bytes): i16Shl: int16 := (i16A) << shift
	<.main+?>:    load.sp(+48)
	<.main+?>:    load.m16
	<.main+?>:    dup.x1 sp(92)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:113: (8 bytes): i16Shr: int16 := (i16A) >> shift
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m16
	<.main+?>:    dup.x1 sp(93)
	<.main+?>:    sar.b32
	extras/Tests/lang.useOperator.ci:114: (7 bytes): i16Not: bool := !(i16B)
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m16
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:115: (11 bytes): i16Ceq: bool := i16A == i16B
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m16
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:116: (12 bytes): i16Cne: bool := i16A != i16B
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m16
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:117: (11 bytes): i16Clt: bool := i16A < i16B
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m16
	<.main+?>:    clt.i32
	extras/Tests/lang.useOperator.ci:118: (12 bytes): i16Cle: bool := i16A <= i16B
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m16
	<.main+?>:    cgt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:119: (11 bytes): i16Cgt: bool := i16A > i16B
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m16
	<.main+?>:    cgt.i32
	extras/Tests/lang.useOperator.ci:120: (12 bytes): i16Cge: bool := i16A >= i16B
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m16
	<.main+?>:    clt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:122: (5 bytes): u16A: uint16 := a
	<.main+?>:    load.c32 96
	extras/Tests/lang.useOperator.ci:123: (5 bytes): u16B: uint16 := b
	<.main+?>:    load.c32 42
	extras/Tests/lang.useOperator.ci:124: (6 bytes): u16Pls: uint16 := +u16B
	<.main+?>:    load.sp(+0)
	<.main+?>:    load.m16
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:125: (6 bytes): u16Neg: uint16 := -u16B
	<.main+?>:    load.sp(+4)
	<.main+?>:    load.m16
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:126: (6 bytes): u16Cmt: uint16 := ~u16B
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.m16
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:127: (11 bytes): u16Add: uint16 := u16A + u16B
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+16)
	<.main+?>:    load.m16
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:128: (11 bytes): u16Sub: uint16 := u16A - u16B
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.m16
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:129: (11 bytes): u16Mul: uint16 := u16A * u16B
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+24)
	<.main+?>:    load.m16
	<.main+?>:    mul.u32
	extras/Tests/lang.useOperator.ci:130: (11 bytes): u16Div: uint16 := u16A / u16B
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.m16
	<.main+?>:    div.u32
	extras/Tests/lang.useOperator.ci:131: (11 bytes): u16Mod: uint16 := u16A % u16B
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+32)
	<.main+?>:    load.m16
	<.main+?>:    mod.u32
	extras/Tests/lang.useOperator.ci:132: (11 bytes): u16And: uint16 := u16A & u16B
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+36)
	<.main+?>:    load.m16
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:133: (11 bytes): u16Ior: uint16 := u16A | u16B
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+40)
	<.main+?>:    load.m16
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:134: (11 bytes): u16Xor: uint16 := u16A ^ u16B
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+44)
	<.main+?>:    load.m16
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:135: (8 bytes): u16Shl: uint16 := (u16A) << shift
	<.main+?>:    load.sp(+48)
	<.main+?>:    load.m16
	<.main+?>:    dup.x1 sp(114)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:136: (8 bytes): u16Shr: uint16 := (u16A) >> shift
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m16
	<.main+?>:    dup.x1 sp(115)
	<.main+?>:    sar.b32
	extras/Tests/lang.useOperator.ci:137: (7 bytes): u16Not: bool := !(u16B)
	<.main+?>:    load.sp(+52)
	<.main+?>:    load.m16
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:138: (11 bytes): u16Ceq: bool := u16A == u16B
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+60)
	<.main+?>:    load.m16
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:139: (12 bytes): u16Cne: bool := u16A != u16B
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+64)
	<.main+?>:    load.m16
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:140: (11 bytes): u16Clt: bool := u16A < u16B
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+68)
	<.main+?>:    load.m16
	<.main+?>:    clt.u32
	extras/Tests/lang.useOperator.ci:141: (12 bytes): u16Cle: bool := u16A <= u16B
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+72)
	<.main+?>:    load.m16
	<.main+?>:    cgt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:142: (11 bytes): u16Cgt: bool := u16A > u16B
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+76)
	<.main+?>:    load.m16
	<.main+?>:    cgt.u32
	extras/Tests/lang.useOperator.ci:143: (12 bytes): u16Cge: bool := u16A >= u16B
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m16
	<.main+?>:    load.sp(+80)
	<.main+?>:    load.m16
	<.main+?>:    clt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:145: (5 bytes): i32A: int32 := a
	<.main+?>:    load.c32 96
	extras/Tests/lang.useOperator.ci:146: (5 bytes): i32B: int32 := b
	<.main+?>:    load.c32 42
	extras/Tests/lang.useOperator.ci:147: (3 bytes): i32Pls: int32 := +i32B
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:148: (3 bytes): i32Neg: int32 := -i32B
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:149: (3 bytes): i32Cmt: int32 := ~i32B
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:150: (5 bytes): i32Add: int32 := i32A + i32B
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:151: (5 bytes): i32Sub: int32 := i32A - i32B
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:152: (5 bytes): i32Mul: int32 := i32A * i32B
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    mul.i32
	extras/Tests/lang.useOperator.ci:153: (5 bytes): i32Div: int32 := i32A / i32B
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    div.i32
	extras/Tests/lang.useOperator.ci:154: (5 bytes): i32Mod: int32 := i32A % i32B
	<.main+?>:    dup.x1 sp(8)
	<.main+?>:    dup.x1 sp(8)
	<.main+?>:    mod.i32
	extras/Tests/lang.useOperator.ci:155: (5 bytes): i32And: int32 := i32A & i32B
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:156: (5 bytes): i32Ior: int32 := i32A | i32B
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:157: (5 bytes): i32Xor: int32 := i32A ^ i32B
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:158: (5 bytes): i32Shl: int32 := i32A << shift
	<.main+?>:    dup.x1 sp(12)
	<.main+?>:    dup.x1 sp(136)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:159: (5 bytes): i32Shr: int32 := i32A >> shift
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    dup.x1 sp(137)
	<.main+?>:    sar.b32
	extras/Tests/lang.useOperator.ci:160: (4 bytes): i32Not: bool := !(i32B)
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:161: (5 bytes): i32Ceq: bool := i32A == i32B
	<.main+?>:    dup.x1 sp(15)
	<.main+?>:    dup.x1 sp(15)
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:162: (6 bytes): i32Cne: bool := i32A != i32B
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:163: (5 bytes): i32Clt: bool := i32A < i32B
	<.main+?>:    dup.x1 sp(17)
	<.main+?>:    dup.x1 sp(17)
	<.main+?>:    clt.i32
	extras/Tests/lang.useOperator.ci:164: (6 bytes): i32Cle: bool := i32A <= i32B
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    cgt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:165: (5 bytes): i32Cgt: bool := i32A > i32B
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    cgt.i32
	extras/Tests/lang.useOperator.ci:166: (6 bytes): i32Cge: bool := i32A >= i32B
	<.main+?>:    dup.x1 sp(20)
	<.main+?>:    dup.x1 sp(20)
	<.main+?>:    clt.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:168: (5 bytes): u32A: uint32 := a
	<.main+?>:    load.c32 96
	extras/Tests/lang.useOperator.ci:169: (5 bytes): u32B: uint32 := b
	<.main+?>:    load.c32 42
	extras/Tests/lang.useOperator.ci:170: (3 bytes): u32Pls: uint32 := +u32B
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:171: (3 bytes): u32Neg: uint32 := -u32B
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    neg.i32
	extras/Tests/lang.useOperator.ci:172: (3 bytes): u32Cmt: uint32 := ~u32B
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    cmt.b32
	extras/Tests/lang.useOperator.ci:173: (5 bytes): u32Add: uint32 := u32A + u32B
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    add.i32
	extras/Tests/lang.useOperator.ci:174: (5 bytes): u32Sub: uint32 := u32A - u32B
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    sub.i32
	extras/Tests/lang.useOperator.ci:175: (5 bytes): u32Mul: uint32 := u32A * u32B
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    mul.u32
	extras/Tests/lang.useOperator.ci:176: (5 bytes): u32Div: uint32 := u32A / u32B
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    div.u32
	extras/Tests/lang.useOperator.ci:177: (5 bytes): u32Mod: uint32 := u32A % u32B
	<.main+?>:    dup.x1 sp(8)
	<.main+?>:    dup.x1 sp(8)
	<.main+?>:    mod.u32
	extras/Tests/lang.useOperator.ci:178: (5 bytes): u32And: uint32 := u32A & u32B
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    and.b32
	extras/Tests/lang.useOperator.ci:179: (5 bytes): u32Ior: uint32 := u32A | u32B
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    or.b32
	extras/Tests/lang.useOperator.ci:180: (5 bytes): u32Xor: uint32 := u32A ^ u32B
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    xor.b32
	extras/Tests/lang.useOperator.ci:181: (5 bytes): u32Shl: uint32 := u32A << shift
	<.main+?>:    dup.x1 sp(12)
	<.main+?>:    dup.x1 sp(158)
	<.main+?>:    shl.b32
	extras/Tests/lang.useOperator.ci:182: (5 bytes): u32Shr: uint32 := u32A >> shift
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    dup.x1 sp(159)
	<.main+?>:    shr.b32
	extras/Tests/lang.useOperator.ci:183: (4 bytes): u32Not: bool := !(u32B)
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    i32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:184: (5 bytes): u32Ceq: bool := u32A == u32B
	<.main+?>:    dup.x1 sp(15)
	<.main+?>:    dup.x1 sp(15)
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:185: (6 bytes): u32Cne: bool := u32A != u32B
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    dup.x1 sp(16)
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:186: (5 bytes): u32Clt: bool := u32A < u32B
	<.main+?>:    dup.x1 sp(17)
	<.main+?>:    dup.x1 sp(17)
	<.main+?>:    clt.u32
	extras/Tests/lang.useOperator.ci:187: (6 bytes): u32Cle: bool := u32A <= u32B
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    dup.x1 sp(18)
	<.main+?>:    cgt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:188: (5 bytes): u32Cgt: bool := u32A > u32B
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    dup.x1 sp(19)
	<.main+?>:    cgt.u32
	extras/Tests/lang.useOperator.ci:189: (6 bytes): u32Cge: bool := u32A >= u32B
	<.main+?>:    dup.x1 sp(20)
	<.main+?>:    dup.x1 sp(20)
	<.main+?>:    clt.u32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:191: (9 bytes): i64A: int64 := a
	<.main+?>:    load.c64 96
	extras/Tests/lang.useOperator.ci:192: (9 bytes): i64B: int64 := b
	<.main+?>:    load.c64 42
	extras/Tests/lang.useOperator.ci:193: (3 bytes): i64Pls: int64 := +i64B
	<.main+?>:    dup.x2 sp(0)
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:194: (3 bytes): i64Neg: int64 := -i64B
	<.main+?>:    dup.x2 sp(2)
	<.main+?>:    neg.i64
	extras/Tests/lang.useOperator.ci:195: (3 bytes): i64Cmt: int64 := ~i64B
	<.main+?>:    dup.x2 sp(4)
	<.main+?>:    cmt.b64
	extras/Tests/lang.useOperator.ci:196: (5 bytes): i64Add: int64 := i64A + i64B
	<.main+?>:    dup.x2 sp(8)
	<.main+?>:    dup.x2 sp(8)
	<.main+?>:    add.i64
	extras/Tests/lang.useOperator.ci:197: (5 bytes): i64Sub: int64 := i64A - i64B
	<.main+?>:    dup.x2 sp(10)
	<.main+?>:    dup.x2 sp(10)
	<.main+?>:    sub.i64
	extras/Tests/lang.useOperator.ci:198: (5 bytes): i64Mul: int64 := i64A * i64B
	<.main+?>:    dup.x2 sp(12)
	<.main+?>:    dup.x2 sp(12)
	<.main+?>:    mul.i64
	extras/Tests/lang.useOperator.ci:199: (5 bytes): i64Div: int64 := i64A / i64B
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    div.i64
	extras/Tests/lang.useOperator.ci:200: (5 bytes): i64Mod: int64 := i64A % i64B
	<.main+?>:    dup.x2 sp(16)
	<.main+?>:    dup.x2 sp(16)
	<.main+?>:    mod.i64
	extras/Tests/lang.useOperator.ci:201: (5 bytes): i64And: int64 := i64A & i64B
	<.main+?>:    dup.x2 sp(18)
	<.main+?>:    dup.x2 sp(18)
	<.main+?>:    and.b64
	extras/Tests/lang.useOperator.ci:202: (5 bytes): i64Ior: int64 := i64A | i64B
	<.main+?>:    dup.x2 sp(20)
	<.main+?>:    dup.x2 sp(20)
	<.main+?>:    or.b64
	extras/Tests/lang.useOperator.ci:203: (5 bytes): i64Xor: int64 := i64A ^ i64B
	<.main+?>:    dup.x2 sp(22)
	<.main+?>:    dup.x2 sp(22)
	<.main+?>:    xor.b64
	extras/Tests/lang.useOperator.ci:204: (5 bytes): i64Shl: int64 := i64A << shift
	<.main+?>:    dup.x2 sp(24)
	<.main+?>:    dup.x1 sp(194)
	<.main+?>:    shl.b64
	extras/Tests/lang.useOperator.ci:205: (5 bytes): i64Shr: int64 := i64A >> shift
	<.main+?>:    dup.x2 sp(26)
	<.main+?>:    dup.x1 sp(196)
	<.main+?>:    sar.b64
	extras/Tests/lang.useOperator.ci:206: (4 bytes): i64Not: bool := !(i64B)
	<.main+?>:    dup.x2 sp(26)
	<.main+?>:    i64.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:207: (5 bytes): i64Ceq: bool := i64A == i64B
	<.main+?>:    dup.x2 sp(29)
	<.main+?>:    dup.x2 sp(29)
	<.main+?>:    ceq.i64
	extras/Tests/lang.useOperator.ci:208: (6 bytes): i64Cne: bool := i64A != i64B
	<.main+?>:    dup.x2 sp(30)
	<.main+?>:    dup.x2 sp(30)
	<.main+?>:    ceq.i64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:209: (5 bytes): i64Clt: bool := i64A < i64B
	<.main+?>:    dup.x2 sp(31)
	<.main+?>:    dup.x2 sp(31)
	<.main+?>:    clt.i64
	extras/Tests/lang.useOperator.ci:210: (6 bytes): i64Cle: bool := i64A <= i64B
	<.main+?>:    dup.x2 sp(32)
	<.main+?>:    dup.x2 sp(32)
	<.main+?>:    cgt.i64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:211: (5 bytes): i64Cgt: bool := i64A > i64B
	<.main+?>:    dup.x2 sp(33)
	<.main+?>:    dup.x2 sp(33)
	<.main+?>:    cgt.i64
	extras/Tests/lang.useOperator.ci:212: (6 bytes): i64Cge: bool := i64A >= i64B
	<.main+?>:    dup.x2 sp(34)
	<.main+?>:    dup.x2 sp(34)
	<.main+?>:    clt.i64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:214: (9 bytes): u64A: uint64 := a
	<.main+?>:    load.c64 96
	extras/Tests/lang.useOperator.ci:215: (9 bytes): u64B: uint64 := b
	<.main+?>:    load.c64 42
	extras/Tests/lang.useOperator.ci:216: (3 bytes): u64Pls: uint64 := +u64B
	<.main+?>:    dup.x2 sp(0)
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:217: (3 bytes): u64Neg: uint64 := -u64B
	<.main+?>:    dup.x2 sp(2)
	<.main+?>:    neg.i64
	extras/Tests/lang.useOperator.ci:218: (3 bytes): u64Cmt: uint64 := ~u64B
	<.main+?>:    dup.x2 sp(4)
	<.main+?>:    cmt.b64
	extras/Tests/lang.useOperator.ci:219: (5 bytes): u64Add: uint64 := u64A + u64B
	<.main+?>:    dup.x2 sp(8)
	<.main+?>:    dup.x2 sp(8)
	<.main+?>:    add.i64
	extras/Tests/lang.useOperator.ci:220: (5 bytes): u64Sub: uint64 := u64A - u64B
	<.main+?>:    dup.x2 sp(10)
	<.main+?>:    dup.x2 sp(10)
	<.main+?>:    sub.i64
	extras/Tests/lang.useOperator.ci:221: (5 bytes): u64Mul: uint64 := u64A * u64B
	<.main+?>:    dup.x2 sp(12)
	<.main+?>:    dup.x2 sp(12)
	<.main+?>:    mul.u64
	extras/Tests/lang.useOperator.ci:222: (5 bytes): u64Div: uint64 := u64A / u64B
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    div.u64
	extras/Tests/lang.useOperator.ci:223: (5 bytes): u64Mod: uint64 := u64A % u64B
	<.main+?>:    dup.x2 sp(16)
	<.main+?>:    dup.x2 sp(16)
	<.main+?>:    mod.u64
	extras/Tests/lang.useOperator.ci:224: (5 bytes): u64And: uint64 := u64A & u64B
	<.main+?>:    dup.x2 sp(18)
	<.main+?>:    dup.x2 sp(18)
	<.main+?>:    and.b64
	extras/Tests/lang.useOperator.ci:225: (5 bytes): u64Ior: uint64 := u64A | u64B
	<.main+?>:    dup.x2 sp(20)
	<.main+?>:    dup.x2 sp(20)
	<.main+?>:    or.b64
	extras/Tests/lang.useOperator.ci:226: (5 bytes): u64Xor: uint64 := u64A ^ u64B
	<.main+?>:    dup.x2 sp(22)
	<.main+?>:    dup.x2 sp(22)
	<.main+?>:    xor.b64
	extras/Tests/lang.useOperator.ci:227: (5 bytes): u64Shl: uint64 := u64A << shift
	<.main+?>:    dup.x2 sp(24)
	<.main+?>:    dup.x1 sp(231)
	<.main+?>:    shl.b64
	extras/Tests/lang.useOperator.ci:228: (5 bytes): u64Shr: uint64 := u64A >> shift
	<.main+?>:    dup.x2 sp(26)
	<.main+?>:    dup.x1 sp(233)
	<.main+?>:    shr.b64
	extras/Tests/lang.useOperator.ci:229: (4 bytes): u64Not: bool := !(u64B)
	<.main+?>:    dup.x2 sp(26)
	<.main+?>:    i64.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:230: (5 bytes): u64Ceq: bool := u64A == u64B
	<.main+?>:    dup.x2 sp(29)
	<.main+?>:    dup.x2 sp(29)
	<.main+?>:    ceq.i64
	extras/Tests/lang.useOperator.ci:231: (6 bytes): u64Cne: bool := u64A != u64B
	<.main+?>:    dup.x2 sp(30)
	<.main+?>:    dup.x2 sp(30)
	<.main+?>:    ceq.i64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:232: (5 bytes): u64Clt: bool := u64A < u64B
	<.main+?>:    dup.x2 sp(31)
	<.main+?>:    dup.x2 sp(31)
	<.main+?>:    clt.u64
	extras/Tests/lang.useOperator.ci:233: (6 bytes): u64Cle: bool := u64A <= u64B
	<.main+?>:    dup.x2 sp(32)
	<.main+?>:    dup.x2 sp(32)
	<.main+?>:    cgt.u64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:234: (5 bytes): u64Cgt: bool := u64A > u64B
	<.main+?>:    dup.x2 sp(33)
	<.main+?>:    dup.x2 sp(33)
	<.main+?>:    cgt.u64
	extras/Tests/lang.useOperator.ci:235: (6 bytes): u64Cge: bool := u64A >= u64B
	<.main+?>:    dup.x2 sp(34)
	<.main+?>:    dup.x2 sp(34)
	<.main+?>:    clt.u64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:237: (5 bytes): f32A: float32 := a
	<.main+?>:    load.f32 96.300003
	extras/Tests/lang.useOperator.ci:238: (5 bytes): f32B: float32 := b
	<.main+?>:    load.f32 42.139999
	extras/Tests/lang.useOperator.ci:239: (3 bytes): f32Pls: float32 := +f32B
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:240: (3 bytes): f32Neg: float32 := -f32B
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    neg.f32
	extras/Tests/lang.useOperator.ci:242: (5 bytes): f32Add: float32 := f32A + f32B
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    add.f32
	extras/Tests/lang.useOperator.ci:243: (5 bytes): f32Sub: float32 := f32A - f32B
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    sub.f32
	extras/Tests/lang.useOperator.ci:244: (5 bytes): f32Mul: float32 := f32A * f32B
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    mul.f32
	extras/Tests/lang.useOperator.ci:245: (5 bytes): f32Div: float32 := f32A / f32B
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    div.f32
	extras/Tests/lang.useOperator.ci:246: (5 bytes): f32Mod: float32 := f32A % f32B
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    mod.f32
	extras/Tests/lang.useOperator.ci:252: (4 bytes): f32Not: bool := !(f32B)
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    f32.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:253: (5 bytes): f32Ceq: bool := f32A == f32B
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    ceq.f32
	extras/Tests/lang.useOperator.ci:254: (6 bytes): f32Cne: bool := f32A != f32B
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    ceq.f32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:255: (5 bytes): f32Clt: bool := f32A < f32B
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    clt.f32
	extras/Tests/lang.useOperator.ci:256: (6 bytes): f32Cle: bool := f32A <= f32B
	<.main+?>:    dup.x1 sp(12)
	<.main+?>:    dup.x1 sp(12)
	<.main+?>:    cgt.f32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:257: (5 bytes): f32Cgt: bool := f32A > f32B
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    dup.x1 sp(13)
	<.main+?>:    cgt.f32
	extras/Tests/lang.useOperator.ci:258: (6 bytes): f32Cge: bool := f32A >= f32B
	<.main+?>:    dup.x1 sp(14)
	<.main+?>:    dup.x1 sp(14)
	<.main+?>:    clt.f32
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:260: (9 bytes): f64A: float64 := a
	<.main+?>:    load.f64 96.300000
	extras/Tests/lang.useOperator.ci:261: (9 bytes): f64B: float64 := b
	<.main+?>:    load.f64 42.140000
	extras/Tests/lang.useOperator.ci:262: (3 bytes): f64Pls: float64 := +f64B
	<.main+?>:    dup.x2 sp(0)
	<.main+?>:    nop
	extras/Tests/lang.useOperator.ci:263: (3 bytes): f64Neg: float64 := -f64B
	<.main+?>:    dup.x2 sp(2)
	<.main+?>:    neg.f64
	extras/Tests/lang.useOperator.ci:265: (5 bytes): f64Add: float64 := f64A + f64B
	<.main+?>:    dup.x2 sp(6)
	<.main+?>:    dup.x2 sp(6)
	<.main+?>:    add.f64
	extras/Tests/lang.useOperator.ci:266: (5 bytes): f64Sub: float64 := f64A - f64B
	<.main+?>:    dup.x2 sp(8)
	<.main+?>:    dup.x2 sp(8)
	<.main+?>:    sub.f64
	extras/Tests/lang.useOperator.ci:267: (5 bytes): f64Mul: float64 := f64A * f64B
	<.main+?>:    dup.x2 sp(10)
	<.main+?>:    dup.x2 sp(10)
	<.main+?>:    mul.f64
	extras/Tests/lang.useOperator.ci:268: (5 bytes): f64Div: float64 := f64A / f64B
	<.main+?>:    dup.x2 sp(12)
	<.main+?>:    dup.x2 sp(12)
	<.main+?>:    div.f64
	extras/Tests/lang.useOperator.ci:269: (5 bytes): f64Mod: float64 := f64A % f64B
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    mod.f64
	extras/Tests/lang.useOperator.ci:275: (4 bytes): f64Not: bool := !(f64B)
	<.main+?>:    dup.x2 sp(14)
	<.main+?>:    f64.2bool
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:276: (5 bytes): f64Ceq: bool := f64A == f64B
	<.main+?>:    dup.x2 sp(17)
	<.main+?>:    dup.x2 sp(17)
	<.main+?>:    ceq.f64
	extras/Tests/lang.useOperator.ci:277: (6 bytes): f64Cne: bool := f64A != f64B
	<.main+?>:    dup.x2 sp(18)
	<.main+?>:    dup.x2 sp(18)
	<.main+?>:    ceq.f64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:278: (5 bytes): f64Clt: bool := f64A < f64B
	<.main+?>:    dup.x2 sp(19)
	<.main+?>:    dup.x2 sp(19)
	<.main+?>:    clt.f64
	extras/Tests/lang.useOperator.ci:279: (6 bytes): f64Cle: bool := f64A <= f64B
	<.main+?>:    dup.x2 sp(20)
	<.main+?>:    dup.x2 sp(20)
	<.main+?>:    cgt.f64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:280: (5 bytes): f64Cgt: bool := f64A > f64B
	<.main+?>:    dup.x2 sp(21)
	<.main+?>:    dup.x2 sp(21)
	<.main+?>:    cgt.f64
	extras/Tests/lang.useOperator.ci:281: (6 bytes): f64Cge: bool := f64A >= f64B
	<.main+?>:    dup.x2 sp(22)
	<.main+?>:    dup.x2 sp(22)
	<.main+?>:    clt.f64
	<.main+?>:    not.b32
	extras/Tests/lang.useOperator.ci:283: (5 bytes): ptrA: pointer := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.useOperator.ci:284: (4 bytes): ptrB: pointer := pointer(shift)
	<.main+?>:    load.sp(+1128)
	extras/Tests/lang.useOperator.ci:299: (5 bytes): ptrCeq: bool := ptrA == ptrB
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    ceq.i32
	extras/Tests/lang.useOperator.ci:300: (6 bytes): ptrCne: bool := ptrA != ptrB
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    ceq.i32
	<.main+?>:    not.b32
	extras/Tests/lang.varInitArray.ci:8: (4 bytes): arrFixedNoInit: int64[7]
	<.main+?>:    inc.sp(+56)
	extras/Tests/lang.varInitArray.ci:9: (4 bytes): arrSliceNoInit: int64[]
	<.main+?>:    inc.sp(+8)
	extras/Tests/lang.varInitArray.ci:10: (4 bytes): arrPtrNoInit: int64[*]
	<.main+?>:    inc.sp(+4)
	extras/Tests/lang.varInitArray.ci:13: (10 bytes): arrSliceInitNull: int64[] := null
	<.main+?>:    load.c32 0
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitArray.ci:14: (5 bytes): arrPtrInitNull: int64[*] := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitArray.ci:17: (9 bytes): arrSliceInitFixed: int64[] := arrFixedNoInit
	<.main+?>:    load.c32 7
	<.main+?>:    load.sp(+28)
	extras/Tests/lang.varInitArray.ci:18: (4 bytes): arrPtrInitFixed: int64[*] := arrFixedNoInit
	<.main+?>:    load.sp(+32)
	extras/Tests/lang.varInitArray.ci:21: (2 bytes): arrSliceInitSlice: int64[] := arrSliceInitFixed
	<.main+?>:    dup.x2 sp(1)
	extras/Tests/lang.varInitArray.ci:22: (4 bytes): arrPtrInitSlice: int64[*] := arrSliceInitFixed
	<.main+?>:    load.sp(+12)
	extras/Tests/lang.varInitArray.ci:26: (2 bytes): arrPtrInitPtr: int64[*] := arrPtrInitFixed
	<.main+?>:    dup.x1 sp(3)
	extras/Tests/lang.varInitArray.ci:37: (10 bytes): arrSliceInitString: char[] := "string"
	<.main+?>:    load.c32 6
	<.main+?>:    load.ref .?????? ;"string"
	extras/Tests/lang.varInitArray.ci:38: (5 bytes): arrPtrInitString: char[*] := "string"
	<.main+?>:    load.ref .?????? ;"string"
	extras/Tests/lang.varInitArray.ci:47: (58 bytes): assert(arrFixedNoInit.length == 7);
	<.main+?>:    load.c32 7
	<.main+?>:    load.c32 7
	<.main+?>:    ceq.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.varInitArray.ci"
	<.main+?>:    load.c32 47
	<.main+?>:    load.c32 -1
	<.main+?>:    load.ref .?????? ;"assertion failed!"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 128
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.varInitArray.ci:48: (55 bytes): assert(arrSliceNoInit.length == (0), "This one might fail");
	<.main+?>:    dup.x1 sp(14)
	<.main+?>:    load.c32 0
	<.main+?>:    ceq.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.varInitArray.ci"
	<.main+?>:    load.c32 48
	<.main+?>:    load.c32 -1
	<.main+?>:    load.ref .?????? ;"This one might fail"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 128
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.varInitArray.ci:50: (55 bytes): assert(arrSliceInitNull.length == (0));
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    load.c32 0
	<.main+?>:    ceq.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.varInitArray.ci"
	<.main+?>:    load.c32 50
	<.main+?>:    load.c32 -1
	<.main+?>:    load.ref .?????? ;"assertion failed!"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 128
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.varInitArray.ci:51: (52 bytes): assert(arrSliceInitSlice.length == arrSliceInitFixed.length);
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    ceq.i32
	<.main+?>:    jz <.main+?>
	<.main+?>:    jmp <.main+?>
	<.main+?>:    load.ref .?????? ;"extras/Tests/lang.varInitArray.ci"
	<.main+?>:    load.c32 51
	<.main+?>:    load.c32 -1
	<.main+?>:    load.ref .?????? ;"assertion failed!"
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 128
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/lang.varInitByRef.ci:7: (13 bytes): static value: int64 := 42
	<.main+?>:    load.c64 42
	<.main+?>:    store.m64 .?????? ;value
	extras/Tests/lang.varInitByRef.ci:8: (5 bytes): valueRef: int64 := value
	<.main+?>:    load.ref .?????? ;value
	extras/Tests/lang.varInitByRef.ci:9: (5 bytes): valuePtr: pointer := value
	<.main+?>:    load.ref .?????? ;value
	extras/Tests/lang.varInitByRef.ci:10: (10 bytes): valueVar: variant := value
	<.main+?>:    load.ref .?????? ;int64
	<.main+?>:    load.ref .?????? ;value
	extras/Tests/lang.varInitByRef.ci:12: (3 bytes): fromRef: int64 := valueRef
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    load.m64
	extras/Tests/lang.varInitByRef.ci:13: (2 bytes): fromPtr: int64 := valuePtr
	<.main+?>:    dup.x1 sp(4)
	extras/Tests/lang.varInitByRef.ci:14: (2 bytes): fromVar: int64 := valueVar
	<.main+?>:    dup.x1 sp(3)
	extras/Tests/lang.varInitByRef.ci:16: (5 bytes): nullRef: int64 := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitByRef.ci:17: (5 bytes): nullPtr: pointer := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitByRef.ci:18: (10 bytes): nullVar: variant := null
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitByRef.ci:19: (5 bytes): nullTyp: typename := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitByRef.ci:20: (5 bytes): nullFun: function := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitByRef.ci:21: (5 bytes): nullObj: object := null
	<.main+?>:    load.ref .?????? ;null
	extras/Tests/lang.varInitByRef.ci:23: (5 bytes): typePtr: pointer := int64
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:24: (10 bytes): typeVar: variant := int64
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:25: (5 bytes): typeTyp: typename := int64
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:27: (4 bytes): local: int64 := value
	<.main+?>:    load.m64 .?????? ;value
	extras/Tests/lang.varInitByRef.ci:28: (2 bytes): copyVal: int64 := local
	<.main+?>:    dup.x2 sp(0)
	extras/Tests/lang.varInitByRef.ci:29: (2 bytes): copyRef: int64 := valueRef
	<.main+?>:    dup.x1 sp(22)
	extras/Tests/lang.varInitByRef.ci:30: (2 bytes): copyPtr: pointer := valuePtr
	<.main+?>:    dup.x1 sp(22)
	extras/Tests/lang.varInitByRef.ci:31: (2 bytes): copyVar: variant := valueVar
	<.main+?>:    dup.x2 sp(21)
	extras/Tests/lang.varInitByRef.ci:32: (2 bytes): copyTyp: typename := typeTyp
	<.main+?>:    dup.x1 sp(8)
	extras/Tests/lang.varInitByRef.ci:35: (5 bytes): ptrVoid: pointer := void
	<.main+?>:    load.ref .?????? ;void
	extras/Tests/lang.varInitByRef.ci:36: (5 bytes): ptrBool: pointer := bool
	<.main+?>:    load.ref .?????? ;bool
	extras/Tests/lang.varInitByRef.ci:37: (5 bytes): ptrChar: pointer := char
	<.main+?>:    load.ref .?????? ;char
	extras/Tests/lang.varInitByRef.ci:38: (5 bytes): ptrInt8: pointer := int8
	<.main+?>:    load.ref .?????? ;int8
	extras/Tests/lang.varInitByRef.ci:39: (5 bytes): ptrInt16: pointer := int16
	<.main+?>:    load.ref .?????? ;int16
	extras/Tests/lang.varInitByRef.ci:40: (5 bytes): ptrInt32: pointer := int32
	<.main+?>:    load.ref .?????? ;int32
	extras/Tests/lang.varInitByRef.ci:41: (5 bytes): ptrInt64: pointer := int64
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:42: (5 bytes): ptrUint8: pointer := uint8
	<.main+?>:    load.ref .?????? ;uint8
	extras/Tests/lang.varInitByRef.ci:43: (5 bytes): ptrUint16: pointer := uint16
	<.main+?>:    load.ref .?????? ;uint16
	extras/Tests/lang.varInitByRef.ci:44: (5 bytes): ptrUint32: pointer := uint32
	<.main+?>:    load.ref .?????? ;uint32
	extras/Tests/lang.varInitByRef.ci:45: (5 bytes): ptrUint64: pointer := uint64
	<.main+?>:    load.ref .?????? ;uint64
	extras/Tests/lang.varInitByRef.ci:46: (5 bytes): ptrFloat32: pointer := float32
	<.main+?>:    load.ref .?????? ;float32
	extras/Tests/lang.varInitByRef.ci:47: (5 bytes): ptrFloat64: pointer := float64
	<.main+?>:    load.ref .?????? ;float64
	extras/Tests/lang.varInitByRef.ci:48: (5 bytes): ptrTypename: pointer := typename
	<.main+?>:    load.ref .?????? ;typename
	extras/Tests/lang.varInitByRef.ci:49: (5 bytes): ptrFunction: pointer := function
	<.main+?>:    load.ref .?????? ;function
	extras/Tests/lang.varInitByRef.ci:50: (5 bytes): ptrPointer: pointer := pointer
	<.main+?>:    load.ref .?????? ;pointer
	extras/Tests/lang.varInitByRef.ci:51: (5 bytes): ptrVariant: pointer := variant
	<.main+?>:    load.ref .?????? ;variant
	extras/Tests/lang.varInitByRef.ci:52: (5 bytes): ptrObject: pointer := object
	<.main+?>:    load.ref .?????? ;object
	extras/Tests/lang.varInitByRef.ci:55: (10 bytes): varVoid: variant := void
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;void
	extras/Tests/lang.varInitByRef.ci:56: (10 bytes): varBool: variant := bool
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;bool
	extras/Tests/lang.varInitByRef.ci:57: (10 bytes): varChar: variant := char
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;char
	extras/Tests/lang.varInitByRef.ci:58: (10 bytes): varInt8: variant := int8
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;int8
	extras/Tests/lang.varInitByRef.ci:59: (10 bytes): varInt16: variant := int16
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;int16
	extras/Tests/lang.varInitByRef.ci:60: (10 bytes): varInt32: variant := int32
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;int32
	extras/Tests/lang.varInitByRef.ci:61: (10 bytes): varInt64: variant := int64
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:62: (10 bytes): varUint8: variant := uint8
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;uint8
	extras/Tests/lang.varInitByRef.ci:63: (10 bytes): varUint16: variant := uint16
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;uint16
	extras/Tests/lang.varInitByRef.ci:64: (10 bytes): varUint32: variant := uint32
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;uint32
	extras/Tests/lang.varInitByRef.ci:65: (10 bytes): varUint64: variant := uint64
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;uint64
	extras/Tests/lang.varInitByRef.ci:66: (10 bytes): varFloat32: variant := float32
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;float32
	extras/Tests/lang.varInitByRef.ci:67: (10 bytes): varFloat64: variant := float64
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;float64
	extras/Tests/lang.varInitByRef.ci:68: (10 bytes): varTypename: variant := typename
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;typename
	extras/Tests/lang.varInitByRef.ci:69: (10 bytes): varFunction: variant := function
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;function
	extras/Tests/lang.varInitByRef.ci:70: (10 bytes): varPointer: variant := pointer
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;pointer
	extras/Tests/lang.varInitByRef.ci:71: (10 bytes): varVariant: variant := variant
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;variant
	extras/Tests/lang.varInitByRef.ci:72: (10 bytes): varObject: variant := object
	<.main+?>:    load.ref .?????? ;typename
	<.main+?>:    load.ref .?????? ;object
	extras/Tests/lang.varInitByRef.ci:75: (5 bytes): typVoid: typename := void
	<.main+?>:    load.ref .?????? ;void
	extras/Tests/lang.varInitByRef.ci:76: (5 bytes): typBool: typename := bool
	<.main+?>:    load.ref .?????? ;bool
	extras/Tests/lang.varInitByRef.ci:77: (5 bytes): typChar: typename := char
	<.main+?>:    load.ref .?????? ;char
	extras/Tests/lang.varInitByRef.ci:78: (5 bytes): typInt8: typename := int8
	<.main+?>:    load.ref .?????? ;int8
	extras/Tests/lang.varInitByRef.ci:79: (5 bytes): typInt16: typename := int16
	<.main+?>:    load.ref .?????? ;int16
	extras/Tests/lang.varInitByRef.ci:80: (5 bytes): typInt32: typename := int32
	<.main+?>:    load.ref .?????? ;int32
	extras/Tests/lang.varInitByRef.ci:81: (5 bytes): typInt64: typename := int64
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:82: (5 bytes): typUint8: typename := uint8
	<.main+?>:    load.ref .?????? ;uint8
	extras/Tests/lang.varInitByRef.ci:83: (5 bytes): typUint16: typename := uint16
	<.main+?>:    load.ref .?????? ;uint16
	extras/Tests/lang.varInitByRef.ci:84: (5 bytes): typUint32: typename := uint32
	<.main+?>:    load.ref .?????? ;uint32
	extras/Tests/lang.varInitByRef.ci:85: (5 bytes): typUint64: typename := uint64
	<.main+?>:    load.ref .?????? ;uint64
	extras/Tests/lang.varInitByRef.ci:86: (5 bytes): typFloat32: typename := float32
	<.main+?>:    load.ref .?????? ;float32
	extras/Tests/lang.varInitByRef.ci:87: (5 bytes): typFloat64: typename := float64
	<.main+?>:    load.ref .?????? ;float64
	extras/Tests/lang.varInitByRef.ci:88: (5 bytes): typTypename: typename := typename
	<.main+?>:    load.ref .?????? ;typename
	extras/Tests/lang.varInitByRef.ci:89: (5 bytes): typFunction: typename := function
	<.main+?>:    load.ref .?????? ;function
	extras/Tests/lang.varInitByRef.ci:90: (5 bytes): typPointer: typename := pointer
	<.main+?>:    load.ref .?????? ;pointer
	extras/Tests/lang.varInitByRef.ci:91: (5 bytes): typVariant: typename := variant
	<.main+?>:    load.ref .?????? ;variant
	extras/Tests/lang.varInitByRef.ci:92: (5 bytes): typObject: typename := object
	<.main+?>:    load.ref .?????? ;object
	extras/Tests/lang.varInitByRef.ci:95: (5 bytes): valueOfPtr: pointer := pointer(value)
	<.main+?>:    load.ref .?????? ;value
	extras/Tests/lang.varInitByRef.ci:96: (10 bytes): valueOfVar: variant := variant(value)
	<.main+?>:    load.ref .?????? ;int64
	<.main+?>:    load.ref .?????? ;value
	extras/Tests/lang.varInitByRef.ci:97: (5 bytes): valueOfTyp: typename := typename(value)
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:99: (5 bytes): typeOfValue: typename := typename(value)
	<.main+?>:    load.ref .?????? ;int64
	extras/Tests/lang.varInitByRef.ci:105: (7 bytes): copyPtrFloat64: variant := ptrFloat64
	<.main+?>:    load.ref .?????? ;pointer
	<.main+?>:    dup.x1 sp(65)
	extras/Tests/lang.varInitByRef.ci:108: (2 bytes): copyVarFloat64: pointer := varFloat64
	<.main+?>:    dup.x1 sp(35)
	extras/Tests/lang.varInitByVal.ci:7: (9 bytes): localNoInit: int64
	<.main+?>:    load.c64 0
	extras/Tests/lang.varInitByVal.ci:8: (13 bytes): static globalNoInit: int64
	<.main+?>:    load.c64 0
	<.main+?>:    store.m64 .?????? ;globalNoInit
	extras/Tests/lang.varInitByVal.ci:9: (9 bytes): localInitValue: int64 := 42
	<.main+?>:    load.c64 42
	extras/Tests/lang.varInitByVal.ci:10: (13 bytes): static globalInitValue: int64 := 1024
	<.main+?>:    load.c64 1024
	<.main+?>:    store.m64 .?????? ;globalInitValue
	extras/Tests/lang.varInitByVal.ci:11: (2 bytes): localInitLocal: int64 := localInitValue
	<.main+?>:    dup.x2 sp(0)
	extras/Tests/lang.varInitByVal.ci:12: (6 bytes): static globalInitLocal: int64 := localInitValue
	<.main+?>:    dup.x2 sp(2)
	<.main+?>:    store.m64 .?????? ;globalInitLocal
	extras/Tests/lang.varInitByVal.ci:13: (4 bytes): localInitGlobal: int64 := globalInitValue
	<.main+?>:    load.m64 .?????? ;globalInitValue
	extras/Tests/lang.varInitByVal.ci:14: (8 bytes): static globalInitGlobal: int64 := globalInitValue
	<.main+?>:    load.m64 .?????? ;globalInitValue
	<.main+?>:    store.m64 .?????? ;globalInitGlobal
	extras/Tests/stdc.nfcNumber.ci:3: (9 bytes): pi64: float64 := 3.141593
	<.main+?>:    load.f64 3.141593
	extras/Tests/stdc.nfcNumber.ci:4: (9 bytes): e64: float64 := 2.718282
	<.main+?>:    load.f64 2.718282
	extras/Tests/stdc.nfcNumber.ci:6: (3 bytes): pi32: float32 := pi64
	<.main+?>:    dup.x2 sp(2)
	<.main+?>:    f64.2f32
	extras/Tests/stdc.nfcNumber.ci:7: (3 bytes): e32: float32 := e64
	<.main+?>:    dup.x2 sp(1)
	<.main+?>:    f64.2f32
	extras/Tests/stdc.nfcNumber.ci:14: (7 bytes): r_comp: int32 := 14 << 3
	<.main+?>:    load.c32 14
	<.main+?>:    b32.shl 0x003
	extras/Tests/stdc.nfcNumber.ci:15: (7 bytes): g_comp: int32 := 63 << 2
	<.main+?>:    load.c32 63
	<.main+?>:    b32.shl 0x002
	extras/Tests/stdc.nfcNumber.ci:16: (7 bytes): b_comp: int32 := 31 << 3
	<.main+?>:    load.c32 31
	<.main+?>:    b32.shl 0x003
	extras/Tests/stdc.nfcNumber.ci:18: (28 bytes): r5g6b5: int32 := rgb565(r_comp, g_comp, b_comp)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    b32.shl 0x008
	<.main+?>:    load.c32 63488
	<.main+?>:    and.b32
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    b32.shl 0x003
	<.main+?>:    load.c32 2016
	<.main+?>:    and.b32
	<.main+?>:    or.b32
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    b32.sar 0x003
	<.main+?>:    b32.and 0x01f
	<.main+?>:    or.b32
	extras/Tests/stdc.nfcNumber.ci:19: (26 bytes): r8g8b8: int32 := rgb888(r_comp, g_comp, b_comp)
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    b32.shl 0x010
	<.main+?>:    load.c32 16711680
	<.main+?>:    and.b32
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    b32.shl 0x008
	<.main+?>:    load.c32 65280
	<.main+?>:    and.b32
	<.main+?>:    or.b32
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    b32.and 0x0ff
	<.main+?>:    or.b32
	extras/Tests/stdc.nfcNumber.ci:21: (16 bytes): zxtR5: int32 := uint32.zxt(r5g6b5, 11, 5)
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    load.c32 11
	<.main+?>:    load.c32 5
	<.main+?>:    nfc(17) ;uint32.zxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:22: (16 bytes): zxtG6: int32 := uint32.zxt(r5g6b5, 5, 6)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    load.c32 5
	<.main+?>:    load.c32 6
	<.main+?>:    nfc(17) ;uint32.zxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:23: (16 bytes): zxtB5: int32 := uint32.zxt(r5g6b5, 0, 5)
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 5
	<.main+?>:    nfc(17) ;uint32.zxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:25: (16 bytes): sxtR5: int32 := uint32.sxt(r5g6b5, 11, 5)
	<.main+?>:    dup.x1 sp(4)
	<.main+?>:    load.c32 11
	<.main+?>:    load.c32 5
	<.main+?>:    nfc(18) ;uint32.sxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:26: (16 bytes): sxtG6: int32 := uint32.sxt(r5g6b5, 5, 6)
	<.main+?>:    dup.x1 sp(5)
	<.main+?>:    load.c32 5
	<.main+?>:    load.c32 6
	<.main+?>:    nfc(18) ;uint32.sxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:27: (16 bytes): sxtB5: int32 := uint32.sxt(r5g6b5, 0, 5)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 5
	<.main+?>:    nfc(18) ;uint32.sxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:29: (16 bytes): zxtR8: int32 := uint32.zxt(r8g8b8, 16, 8)
	<.main+?>:    dup.x1 sp(6)
	<.main+?>:    load.c32 16
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(17) ;uint32.zxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:30: (16 bytes): zxtG8: int32 := uint32.zxt(r8g8b8, 8, 8)
	<.main+?>:    dup.x1 sp(7)
	<.main+?>:    load.c32 8
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(17) ;uint32.zxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:31: (16 bytes): zxtB8: int32 := uint32.zxt(r8g8b8, 0, 8)
	<.main+?>:    dup.x1 sp(8)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(17) ;uint32.zxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:33: (16 bytes): sxtR8: int32 := uint32.sxt(r8g8b8, 16, 8)
	<.main+?>:    dup.x1 sp(9)
	<.main+?>:    load.c32 16
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(18) ;uint32.sxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:34: (16 bytes): sxtG8: int32 := uint32.sxt(r8g8b8, 8, 8)
	<.main+?>:    dup.x1 sp(10)
	<.main+?>:    load.c32 8
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(18) ;uint32.sxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:35: (16 bytes): sxtB8: int32 := uint32.sxt(r8g8b8, 0, 8)
	<.main+?>:    dup.x1 sp(11)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(18) ;uint32.sxt(value: int32, offs: int32, count: int32): int32
	extras/Tests/stdc.nfcNumber.ci:37: (16 bytes): sinF64: float64 := float64.sin(pi64 / (2))
	<.main+?>:    dup.x2 sp(21)
	<.main+?>:    load.f64 2.000000
	<.main+?>:    div.f64
	<.main+?>:    nfc(29) ;float64.sin(x: float64): float64
	extras/Tests/stdc.nfcNumber.ci:38: (16 bytes): cosF64: float64 := float64.cos(pi64 / (2))
	<.main+?>:    dup.x2 sp(23)
	<.main+?>:    load.f64 2.000000
	<.main+?>:    div.f64
	<.main+?>:    nfc(30) ;float64.cos(x: float64): float64
	extras/Tests/stdc.nfcNumber.ci:39: (16 bytes): tanF64: float64 := float64.tan(pi64 / (4))
	<.main+?>:    dup.x2 sp(25)
	<.main+?>:    load.f64 4.000000
	<.main+?>:    div.f64
	<.main+?>:    nfc(31) ;float64.tan(x: float64): float64
	extras/Tests/stdc.nfcNumber.ci:40: (12 bytes): logF64: float64 := float64.log(e64 * e64 * e64)
	<.main+?>:    dup.x2 sp(25)
	<.main+?>:    dup.x2 sp(27)
	<.main+?>:    mul.f64
	<.main+?>:    dup.x2 sp(27)
	<.main+?>:    mul.f64
	<.main+?>:    nfc(32) ;float64.log(x: float64): float64
	extras/Tests/stdc.nfcNumber.ci:41: (13 bytes): expF64: float64 := float64.exp(1.000000)
	<.main+?>:    load.f64 1.000000
	<.main+?>:    nfc(33) ;float64.exp(x: float64): float64
	extras/Tests/stdc.nfcNumber.ci:42: (18 bytes): powF64: float64 := float64.pow(pi64 * pi64, 0.500000)
	<.main+?>:    dup.x2 sp(31)
	<.main+?>:    dup.x2 sp(33)
	<.main+?>:    mul.f64
	<.main+?>:    load.f64 0.500000
	<.main+?>:    nfc(34) ;float64.pow(x: float64, y: float64): float64
	extras/Tests/stdc.nfcNumber.ci:43: (9 bytes): sqrtF64: float64 := float64.sqrt(pi64 * pi64)
	<.main+?>:    dup.x2 sp(33)
	<.main+?>:    dup.x2 sp(35)
	<.main+?>:    mul.f64
	<.main+?>:    nfc(35) ;float64.sqrt(x: float64): float64
	extras/Tests/stdc.nfcNumber.ci:44: (15 bytes): atanF64: float64 := float64.atan2(pi64, 1.000000)
	<.main+?>:    dup.x2 sp(35)
	<.main+?>:    load.f64 1.000000
	<.main+?>:    nfc(36) ;float64.atan2(x: float64, y: float64): float64
	extras/Tests/stdc.nfcNumber.ci:46: (12 bytes): sinF32: float32 := float32.sin(pi32 / (2))
	<.main+?>:    dup.x1 sp(34)
	<.main+?>:    load.f32 2.000000
	<.main+?>:    div.f32
	<.main+?>:    nfc(21) ;float32.sin(x: float32): float32
	extras/Tests/stdc.nfcNumber.ci:47: (12 bytes): cosF32: float32 := float32.cos(pi32 / (2))
	<.main+?>:    dup.x1 sp(35)
	<.main+?>:    load.f32 2.000000
	<.main+?>:    div.f32
	<.main+?>:    nfc(22) ;float32.cos(x: float32): float32
	extras/Tests/stdc.nfcNumber.ci:48: (12 bytes): tanF32: float32 := float32.tan(pi32 / (4))
	<.main+?>:    dup.x1 sp(36)
	<.main+?>:    load.f32 4.000000
	<.main+?>:    div.f32
	<.main+?>:    nfc(23) ;float32.tan(x: float32): float32
	extras/Tests/stdc.nfcNumber.ci:49: (12 bytes): logF32: float32 := float32.log(e32 * e32 * e32)
	<.main+?>:    dup.x1 sp(36)
	<.main+?>:    dup.x1 sp(37)
	<.main+?>:    mul.f32
	<.main+?>:    dup.x1 sp(37)
	<.main+?>:    mul.f32
	<.main+?>:    nfc(24) ;float32.log(x: float32): float32
	extras/Tests/stdc.nfcNumber.ci:50: (9 bytes): expF32: float32 := float32.exp(1.000000)
	<.main+?>:    load.f32 1.000000
	<.main+?>:    nfc(25) ;float32.exp(x: float32): float32
	extras/Tests/stdc.nfcNumber.ci:51: (14 bytes): powF32: float32 := float32.pow(pi32 * pi32, 0.500000)
	<.main+?>:    dup.x1 sp(39)
	<.main+?>:    dup.x1 sp(40)
	<.main+?>:    mul.f32
	<.main+?>:    load.f32 0.500000
	<.main+?>:    nfc(26) ;float32.pow(x: float32, y: float32): float32
	extras/Tests/stdc.nfcNumber.ci:52: (9 bytes): sqrtF32: float32 := float32.sqrt(pi32 * pi32)
	<.main+?>:    dup.x1 sp(40)
	<.main+?>:    dup.x1 sp(41)
	<.main+?>:    mul.f32
	<.main+?>:    nfc(27) ;float32.sqrt(x: float32): float32
	extras/Tests/stdc.nfcNumber.ci:53: (11 bytes): atanF32: float32 := float32.atan2(pi32, 1.000000)
	<.main+?>:    dup.x1 sp(41)
	<.main+?>:    load.f32 1.000000
	<.main+?>:    nfc(28) ;float32.atan2(x: float32, y: float32): float32
	extras/Tests/stdc.nfcMemory.ci:7: (14 bytes): p1: pointer := malloc(1024)
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 1024
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	extras/Tests/stdc.nfcMemory.ci:8: (14 bytes): p2: pointer := malloc(80)
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 80
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	extras/Tests/stdc.nfcMemory.ci:9: (14 bytes): p3: pointer := malloc(160)
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 160
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	extras/Tests/stdc.nfcMemory.ci:10: (14 bytes): p4: pointer := malloc(820)
	<.main+?>:    load.ref .?????? ;null
	<.main+?>:    load.c32 820
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	extras/Tests/stdc.nfcMemory.ci:13: (20 bytes): pointer.fill(p1, 0, 1024);
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 1024
	<.main+?>:    nfc(8) ;pointer.fill(dst: pointer, value: int32, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:14: (17 bytes): pointer.copy(p1, p3, 160);
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    load.c32 160
	<.main+?>:    nfc(9) ;pointer.copy(dst: pointer, src: pointer, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:17: (15 bytes): free(p1);
	<.main+?>:    dup.x1 sp(3)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:18: (15 bytes): free(p2);
	<.main+?>:    dup.x1 sp(2)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:19: (15 bytes): free(p3);
	<.main+?>:    dup.x1 sp(1)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:20: (15 bytes): free(p4);
	<.main+?>:    dup.x1 sp(0)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(7) ;pointer.alloc(ptr: pointer, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:23: (9 bytes): val1: int64 := 42
	<.main+?>:    load.c64 42
	extras/Tests/stdc.nfcMemory.ci:24: (9 bytes): val2: int64 := 96
	<.main+?>:    load.c64 96
	extras/Tests/stdc.nfcMemory.ci:26: (38 bytes): debug("val1", val1);
	<.main+?>:    load.ref .?????? ;"extras/Tests/stdc.nfcMemory.ci"
	<.main+?>:    load.c32 26
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"val1"
	<.main+?>:    load.ref .?????? ;int64
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/stdc.nfcMemory.ci:27: (38 bytes): debug("val2", val2);
	<.main+?>:    load.ref .?????? ;"extras/Tests/stdc.nfcMemory.ci"
	<.main+?>:    load.c32 27
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"val2"
	<.main+?>:    load.ref .?????? ;int64
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/stdc.nfcMemory.ci:29: (21 bytes): pointer.copy(pointer(val2), pointer(val1), 8);
	<.main+?>:    load.sp(+0)
	<.main+?>:    load.sp(+12)
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(9) ;pointer.copy(dst: pointer, src: pointer, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:30: (22 bytes): pointer.fill(pointer(val1), 0, 8);
	<.main+?>:    load.sp(+8)
	<.main+?>:    load.c32 0
	<.main+?>:    load.c32 8
	<.main+?>:    nfc(8) ;pointer.fill(dst: pointer, value: int32, size: int32): pointer
	<.main+?>:    inc.sp(-4)
	extras/Tests/stdc.nfcMemory.ci:32: (38 bytes): debug("val1", val1);
	<.main+?>:    load.ref .?????? ;"extras/Tests/stdc.nfcMemory.ci"
	<.main+?>:    load.c32 32
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"val1"
	<.main+?>:    load.ref .?????? ;int64
	<.main+?>:    load.sp(+28)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	extras/Tests/stdc.nfcMemory.ci:33: (38 bytes): debug("val2", val2);
	<.main+?>:    load.ref .?????? ;"extras/Tests/stdc.nfcMemory.ci"
	<.main+?>:    load.c32 33
	<.main+?>:    load.c32 3
	<.main+?>:    load.ref .?????? ;"val2"
	<.main+?>:    load.ref .?????? ;int64
	<.main+?>:    load.sp(+20)
	<.main+?>:    load.c32 0
	<.main+?>:    nfc(5) ;raise(file: char[*], line: int32, level: int32, message: char[*], inspect: variant, maxTrace: int32): void
	<.main+?>:    nfc(0) ;halt(): void
}

---------- Execute:

---------- Globals:
extras/Tests/lang.statementIf.ci:26: t: int32(0)
extras/Tests/lang.statementFor.ci:12: forIdx: int32(2)
extras/Tests/lang.inlineArgs.ci:16: ma: int32(3)
extras/Tests/lang.inlineArgs.ci:17: mb: int32(6)
extras/Tests/lang.inlineArgs.ci:18: mc: int32(9)
extras/Tests/lang.inlineArgs.ci:20: zeroVal: int32(0)
extras/Tests/lang.inlineArgs.ci:21: zeroVar: int32(0)
extras/Tests/lang.inlineArgs.ci:22: zeroXpr: int32(0)
extras/Tests/lang.inlineArgs.ci:24: lastVal: int32(3)
extras/Tests/lang.inlineArgs.ci:25: lastVar: int32(6)
extras/Tests/lang.inlineArgs.ci:26: lastXpr: int32(15)
extras/Tests/lang.inlineArgs.ci:28: sum2Val: int32(15)
extras/Tests/lang.inlineArgs.ci:29: sum2Var: int32(9)
extras/Tests/lang.inlineArgs.ci:30: sum2Xpr: int32(24)
extras/Tests/lang.inlineArgs.ci:32: any2Val: int32(3)
extras/Tests/lang.inlineArgs.ci:33: any2Var: int32(3)
extras/Tests/lang.inlineArgs.ci:34: any2Xpr: int32(9)
extras/Tests/lang.inlineArgs.ci:36: min2Val: int32(3)
extras/Tests/lang.inlineArgs.ci:37: min2Var: int32(3)
extras/Tests/lang.inlineArgs.ci:38: min2Xpr: int32(9)
extras/Tests/lang.inlineArgs.ci:45: any3Val: int32(3)
extras/Tests/lang.inlineArgs.ci:46: any3Var: int32(3)
extras/Tests/lang.inlineArgs.ci:47: any3Xpr: int32(9)
extras/Tests/lang.inlineArgs.ci:49: min3Val: int32(2)
extras/Tests/lang.inlineArgs.ci:50: min3Var: int32(3)
extras/Tests/lang.inlineArgs.ci:51: min3Xpr: int32(9)
extras/Tests/test.inlineOverload.ci:9: overload1: float32(1.000000)
extras/Tests/test.inlineOverload.ci:10: overload2: float32(2.000000)
extras/Tests/test.inlineOverload.ci:11: overload3: float32(3.000000)
extras/Tests/test.inlineOverload.ci:12: overload4: float32(FIXME: 4.000000)
extras/Tests/test.inlineOverload.ci:13: overload5: float32(5.000000)
extras/Tests/lang.inlineEmit.ci:3: emitldz32: int32(0)
extras/Tests/lang.inlineEmit.ci:4: emitldz64: int64(0)
extras/Tests/lang.inlineEmit.ci:6: emitA: int32(42)
extras/Tests/lang.inlineEmit.ci:7: emitB: int32(96)
extras/Tests/lang.inlineEmit.ci:9: emitAddI32: int32(138)
extras/Tests/lang.inlineEmit.ci:10: emitDivI32: int32(2)
extras/Tests/lang.inlineEmit.ci:11: emitNfcF32: float32(1.000000)
extras/Tests/lang.reflection.ci:3: sizeofVoid: int32(0)
extras/Tests/lang.reflection.ci:4: sizeofBool: int32(1)
extras/Tests/lang.reflection.ci:5: sizeofChar: int32(1)
extras/Tests/lang.reflection.ci:6: sizeofInt8: int32(1)
extras/Tests/lang.reflection.ci:7: sizeofInt16: int32(2)
extras/Tests/lang.reflection.ci:8: sizeofInt32: int32(4)
extras/Tests/lang.reflection.ci:9: sizeofInt64: int32(8)
extras/Tests/lang.reflection.ci:10: sizeofUint8: int32(1)
extras/Tests/lang.reflection.ci:11: sizeofUint16: int32(2)
extras/Tests/lang.reflection.ci:12: sizeofUint32: int32(4)
extras/Tests/lang.reflection.ci:13: sizeofUint64: int32(8)
extras/Tests/lang.reflection.ci:14: sizeofFloat32: int32(4)
extras/Tests/lang.reflection.ci:15: sizeofFloat64: int32(8)
extras/Tests/lang.reflection.ci:16: sizeofPointer: int32(4)
extras/Tests/lang.reflection.ci:17: sizeofVariant: int32(8)
extras/Tests/lang.reflection.ci:18: sizeofTypename: int32(136)
extras/Tests/lang.reflection.ci:19: sizeofFunction: int32(8)
extras/Tests/lang.reflection.ci:20: sizeofObject: int32(4)
extras/Tests/lang.reflection.ci:30: typeofRecord: typename(RecordSizeofExt)
extras/Tests/lang.reflection.ci:31: nameOfRecord: char[*]("RecordSizeofExt")
extras/Tests/lang.reflection.ci:32: offsetOfRecord: int32(78080)
extras/Tests/lang.reflection.ci:33: sizeOfRecord: int32(16)
extras/Tests/lang.reflection.ci:34: fileOfRecord: char[*]("extras/Tests/lang.reflection.ci")
extras/Tests/lang.reflection.ci:35: lineOfRecord: int32(26)
extras/Tests/lang.reflection.ci:37: typeofBase: typename(RecordSizeof)
extras/Tests/lang.reflection.ci:38: nameOfBase: char[*]("RecordSizeof")
extras/Tests/lang.reflection.ci:39: offsetOfBase: int32(77808)
extras/Tests/lang.reflection.ci:40: sizeOfBase: int32(12)
extras/Tests/lang.reflection.ci:41: fileOfBase: char[*]("extras/Tests/lang.reflection.ci")
extras/Tests/lang.reflection.ci:42: lineOfBase: int32(22)
extras/Tests/lang.reflection.ci:44: typeofBase1: typename(object)
extras/Tests/lang.reflection.ci:45: offsetOfBase1: int32(2472)
extras/Tests/lang.reflection.ci:46: sizeOfBase1: int32(4)
extras/Tests/lang.reflection.ci:48: typeofBase2: typename(typename)
extras/Tests/lang.reflection.ci:49: offsetOfBase2: int32(8)
extras/Tests/lang.reflection.ci:50: sizeOfBase2: int32(136)
extras/Tests/lang.function.ci:13: funAddResult: int32(9)
extras/Tests/lang.function.ci:16: funAddRef: function(<funAdd @024821>)
extras/Tests/lang.function.ci:19: funAddRefResult: int32(10)
extras/Tests/lang.function.ci:22: funMul: function(<funMul @024829>)
extras/Tests/lang.function.ci:25: funMulResult: int32(12)
extras/Tests/lang.function.ci:28: funMulRef: function(<funMul @024829>)
extras/Tests/lang.function.ci:31: funMulRefResult: int32(14)
extras/Tests/lang.function.ci:50: fibonacci_13: uint32(233)
extras/Tests/lang.useOperator.ci:5: shift: int32(2)
extras/Tests/lang.useOperator.ci:7: boolA: bool(1)
extras/Tests/lang.useOperator.ci:8: boolB: bool(1)
extras/Tests/lang.useOperator.ci:17: boolAnd: bool(1)
extras/Tests/lang.useOperator.ci:18: boolIor: bool(1)
extras/Tests/lang.useOperator.ci:19: boolXor: bool(0)
extras/Tests/lang.useOperator.ci:22: boolNot: bool(0)
extras/Tests/lang.useOperator.ci:23: boolCeq: bool(1)
extras/Tests/lang.useOperator.ci:24: boolCne: bool(0)
extras/Tests/lang.useOperator.ci:25: boolClt: bool(0)
extras/Tests/lang.useOperator.ci:26: boolCle: bool(1)
extras/Tests/lang.useOperator.ci:27: boolCgt: bool(0)
extras/Tests/lang.useOperator.ci:28: boolCge: bool(1)
extras/Tests/lang.useOperator.ci:30: chrA: char('a')
extras/Tests/lang.useOperator.ci:31: chrB: char('b')
extras/Tests/lang.useOperator.ci:32: chrPls: char('b')
extras/Tests/lang.useOperator.ci:33: chrNeg: char('�')
extras/Tests/lang.useOperator.ci:34: chrCmt: char('�')
extras/Tests/lang.useOperator.ci:35: chrAdd: char('�')
extras/Tests/lang.useOperator.ci:36: chrSub: char('�')
extras/Tests/lang.useOperator.ci:37: chrMul: char('\"')
extras/Tests/lang.useOperator.ci:38: chrDiv: char('')
extras/Tests/lang.useOperator.ci:39: chrMod: char('a')
extras/Tests/lang.useOperator.ci:40: chrAnd: char('`')
extras/Tests/lang.useOperator.ci:41: chrIor: char('c')
extras/Tests/lang.useOperator.ci:42: chrXor: char('')
extras/Tests/lang.useOperator.ci:43: chrShl: char('�')
extras/Tests/lang.useOperator.ci:44: chrShr: char('')
extras/Tests/lang.useOperator.ci:45: chrNot: bool(0)
extras/Tests/lang.useOperator.ci:46: chrCeq: bool(0)
extras/Tests/lang.useOperator.ci:47: chrCne: bool(1)
extras/Tests/lang.useOperator.ci:48: chrClt: bool(1)
extras/Tests/lang.useOperator.ci:49: chrCle: bool(1)
extras/Tests/lang.useOperator.ci:50: chrCgt: bool(0)
extras/Tests/lang.useOperator.ci:51: chrCge: bool(0)
extras/Tests/lang.useOperator.ci:53: i8A: int8(96)
extras/Tests/lang.useOperator.ci:54: i8B: int8(42)
extras/Tests/lang.useOperator.ci:55: i8Pls: int8(42)
extras/Tests/lang.useOperator.ci:56: i8Neg: int8(-42)
extras/Tests/lang.useOperator.ci:57: i8Cmt: int8(-43)
extras/Tests/lang.useOperator.ci:58: i8Add: int8(-118)
extras/Tests/lang.useOperator.ci:59: i8Sub: int8(54)
extras/Tests/lang.useOperator.ci:60: i8Mul: int8(-64)
extras/Tests/lang.useOperator.ci:61: i8Div: int8(2)
extras/Tests/lang.useOperator.ci:62: i8Mod: int8(12)
extras/Tests/lang.useOperator.ci:63: i8And: int8(32)
extras/Tests/lang.useOperator.ci:64: i8Ior: int8(106)
extras/Tests/lang.useOperator.ci:65: i8Xor: int8(74)
extras/Tests/lang.useOperator.ci:66: i8Shl: int8(-128)
extras/Tests/lang.useOperator.ci:67: i8Shr: int8(24)
extras/Tests/lang.useOperator.ci:68: i8Not: bool(0)
extras/Tests/lang.useOperator.ci:69: i8Ceq: bool(0)
extras/Tests/lang.useOperator.ci:70: i8Cne: bool(1)
extras/Tests/lang.useOperator.ci:71: i8Clt: bool(0)
extras/Tests/lang.useOperator.ci:72: i8Cle: bool(0)
extras/Tests/lang.useOperator.ci:73: i8Cgt: bool(1)
extras/Tests/lang.useOperator.ci:74: i8Cge: bool(1)
extras/Tests/lang.useOperator.ci:76: u8A: uint8(96)
extras/Tests/lang.useOperator.ci:77: u8B: uint8(42)
extras/Tests/lang.useOperator.ci:78: u8Pls: uint8(42)
extras/Tests/lang.useOperator.ci:79: u8Neg: uint8(214)
extras/Tests/lang.useOperator.ci:80: u8Cmt: uint8(213)
extras/Tests/lang.useOperator.ci:81: u8Add: uint8(138)
extras/Tests/lang.useOperator.ci:82: u8Sub: uint8(54)
extras/Tests/lang.useOperator.ci:83: u8Mul: uint8(192)
extras/Tests/lang.useOperator.ci:84: u8Div: uint8(2)
extras/Tests/lang.useOperator.ci:85: u8Mod: uint8(12)
extras/Tests/lang.useOperator.ci:86: u8And: uint8(32)
extras/Tests/lang.useOperator.ci:87: u8Ior: uint8(106)
extras/Tests/lang.useOperator.ci:88: u8Xor: uint8(74)
extras/Tests/lang.useOperator.ci:89: u8Shl: uint8(128)
extras/Tests/lang.useOperator.ci:90: u8Shr: uint8(24)
extras/Tests/lang.useOperator.ci:91: u8Not: bool(0)
extras/Tests/lang.useOperator.ci:92: u8Ceq: bool(0)
extras/Tests/lang.useOperator.ci:93: u8Cne: bool(1)
extras/Tests/lang.useOperator.ci:94: u8Clt: bool(0)
extras/Tests/lang.useOperator.ci:95: u8Cle: bool(0)
extras/Tests/lang.useOperator.ci:96: u8Cgt: bool(1)
extras/Tests/lang.useOperator.ci:97: u8Cge: bool(1)
extras/Tests/lang.useOperator.ci:99: i16A: int16(96)
extras/Tests/lang.useOperator.ci:100: i16B: int16(42)
extras/Tests/lang.useOperator.ci:101: i16Pls: int16(42)
extras/Tests/lang.useOperator.ci:102: i16Neg: int16(-42)
extras/Tests/lang.useOperator.ci:103: i16Cmt: int16(-43)
extras/Tests/lang.useOperator.ci:104: i16Add: int16(138)
extras/Tests/lang.useOperator.ci:105: i16Sub: int16(54)
extras/Tests/lang.useOperator.ci:106: i16Mul: int16(4032)
extras/Tests/lang.useOperator.ci:107: i16Div: int16(2)
extras/Tests/lang.useOperator.ci:108: i16Mod: int16(12)
extras/Tests/lang.useOperator.ci:109: i16And: int16(32)
extras/Tests/lang.useOperator.ci:110: i16Ior: int16(106)
extras/Tests/lang.useOperator.ci:111: i16Xor: int16(74)
extras/Tests/lang.useOperator.ci:112: i16Shl: int16(384)
extras/Tests/lang.useOperator.ci:113: i16Shr: int16(24)
extras/Tests/lang.useOperator.ci:114: i16Not: bool(0)
extras/Tests/lang.useOperator.ci:115: i16Ceq: bool(0)
extras/Tests/lang.useOperator.ci:116: i16Cne: bool(1)
extras/Tests/lang.useOperator.ci:117: i16Clt: bool(0)
extras/Tests/lang.useOperator.ci:118: i16Cle: bool(0)
extras/Tests/lang.useOperator.ci:119: i16Cgt: bool(1)
extras/Tests/lang.useOperator.ci:120: i16Cge: bool(1)
extras/Tests/lang.useOperator.ci:122: u16A: uint16(96)
extras/Tests/lang.useOperator.ci:123: u16B: uint16(42)
extras/Tests/lang.useOperator.ci:124: u16Pls: uint16(42)
extras/Tests/lang.useOperator.ci:125: u16Neg: uint16(65494)
extras/Tests/lang.useOperator.ci:126: u16Cmt: uint16(65493)
extras/Tests/lang.useOperator.ci:127: u16Add: uint16(138)
extras/Tests/lang.useOperator.ci:128: u16Sub: uint16(54)
extras/Tests/lang.useOperator.ci:129: u16Mul: uint16(4032)
extras/Tests/lang.useOperator.ci:130: u16Div: uint16(2)
extras/Tests/lang.useOperator.ci:131: u16Mod: uint16(12)
extras/Tests/lang.useOperator.ci:132: u16And: uint16(32)
extras/Tests/lang.useOperator.ci:133: u16Ior: uint16(106)
extras/Tests/lang.useOperator.ci:134: u16Xor: uint16(74)
extras/Tests/lang.useOperator.ci:135: u16Shl: uint16(384)
extras/Tests/lang.useOperator.ci:136: u16Shr: uint16(24)
extras/Tests/lang.useOperator.ci:137: u16Not: bool(0)
extras/Tests/lang.useOperator.ci:138: u16Ceq: bool(0)
extras/Tests/lang.useOperator.ci:139: u16Cne: bool(1)
extras/Tests/lang.useOperator.ci:140: u16Clt: bool(0)
extras/Tests/lang.useOperator.ci:141: u16Cle: bool(0)
extras/Tests/lang.useOperator.ci:142: u16Cgt: bool(1)
extras/Tests/lang.useOperator.ci:143: u16Cge: bool(1)
extras/Tests/lang.useOperator.ci:145: i32A: int32(96)
extras/Tests/lang.useOperator.ci:146: i32B: int32(42)
extras/Tests/lang.useOperator.ci:147: i32Pls: int32(42)
extras/Tests/lang.useOperator.ci:148: i32Neg: int32(-42)
extras/Tests/lang.useOperator.ci:149: i32Cmt: int32(-43)
extras/Tests/lang.useOperator.ci:150: i32Add: int32(138)
extras/Tests/lang.useOperator.ci:151: i32Sub: int32(54)
extras/Tests/lang.useOperator.ci:152: i32Mul: int32(4032)
extras/Tests/lang.useOperator.ci:153: i32Div: int32(2)
extras/Tests/lang.useOperator.ci:154: i32Mod: int32(12)
extras/Tests/lang.useOperator.ci:155: i32And: int32(32)
extras/Tests/lang.useOperator.ci:156: i32Ior: int32(106)
extras/Tests/lang.useOperator.ci:157: i32Xor: int32(74)
extras/Tests/lang.useOperator.ci:158: i32Shl: int32(384)
extras/Tests/lang.useOperator.ci:159: i32Shr: int32(24)
extras/Tests/lang.useOperator.ci:160: i32Not: bool(0)
extras/Tests/lang.useOperator.ci:161: i32Ceq: bool(0)
extras/Tests/lang.useOperator.ci:162: i32Cne: bool(1)
extras/Tests/lang.useOperator.ci:163: i32Clt: bool(0)
extras/Tests/lang.useOperator.ci:164: i32Cle: bool(0)
extras/Tests/lang.useOperator.ci:165: i32Cgt: bool(1)
extras/Tests/lang.useOperator.ci:166: i32Cge: bool(1)
extras/Tests/lang.useOperator.ci:168: u32A: uint32(96)
extras/Tests/lang.useOperator.ci:169: u32B: uint32(42)
extras/Tests/lang.useOperator.ci:170: u32Pls: uint32(42)
extras/Tests/lang.useOperator.ci:171: u32Neg: uint32(4294967254)
extras/Tests/lang.useOperator.ci:172: u32Cmt: uint32(4294967253)
extras/Tests/lang.useOperator.ci:173: u32Add: uint32(138)
extras/Tests/lang.useOperator.ci:174: u32Sub: uint32(54)
extras/Tests/lang.useOperator.ci:175: u32Mul: uint32(4032)
extras/Tests/lang.useOperator.ci:176: u32Div: uint32(2)
extras/Tests/lang.useOperator.ci:177: u32Mod: uint32(12)
extras/Tests/lang.useOperator.ci:178: u32And: uint32(32)
extras/Tests/lang.useOperator.ci:179: u32Ior: uint32(106)
extras/Tests/lang.useOperator.ci:180: u32Xor: uint32(74)
extras/Tests/lang.useOperator.ci:181: u32Shl: uint32(384)
extras/Tests/lang.useOperator.ci:182: u32Shr: uint32(24)
extras/Tests/lang.useOperator.ci:183: u32Not: bool(0)
extras/Tests/lang.useOperator.ci:184: u32Ceq: bool(0)
extras/Tests/lang.useOperator.ci:185: u32Cne: bool(1)
extras/Tests/lang.useOperator.ci:186: u32Clt: bool(0)
extras/Tests/lang.useOperator.ci:187: u32Cle: bool(0)
extras/Tests/lang.useOperator.ci:188: u32Cgt: bool(1)
extras/Tests/lang.useOperator.ci:189: u32Cge: bool(1)
extras/Tests/lang.useOperator.ci:191: i64A: int64(96)
extras/Tests/lang.useOperator.ci:192: i64B: int64(42)
extras/Tests/lang.useOperator.ci:193: i64Pls: int64(42)
extras/Tests/lang.useOperator.ci:194: i64Neg: int64(-42)
extras/Tests/lang.useOperator.ci:195: i64Cmt: int64(-43)
extras/Tests/lang.useOperator.ci:196: i64Add: int64(138)
extras/Tests/lang.useOperator.ci:197: i64Sub: int64(54)
extras/Tests/lang.useOperator.ci:198: i64Mul: int64(4032)
extras/Tests/lang.useOperator.ci:199: i64Div: int64(2)
extras/Tests/lang.useOperator.ci:200: i64Mod: int64(12)
extras/Tests/lang.useOperator.ci:201: i64And: int64(32)
extras/Tests/lang.useOperator.ci:202: i64Ior: int64(106)
extras/Tests/lang.useOperator.ci:203: i64Xor: int64(74)
extras/Tests/lang.useOperator.ci:204: i64Shl: int64(384)
extras/Tests/lang.useOperator.ci:205: i64Shr: int64(24)
extras/Tests/lang.useOperator.ci:206: i64Not: bool(0)
extras/Tests/lang.useOperator.ci:207: i64Ceq: bool(0)
extras/Tests/lang.useOperator.ci:208: i64Cne: bool(1)
extras/Tests/lang.useOperator.ci:209: i64Clt: bool(0)
extras/Tests/lang.useOperator.ci:210: i64Cle: bool(0)
extras/Tests/lang.useOperator.ci:211: i64Cgt: bool(1)
extras/Tests/lang.useOperator.ci:212: i64Cge: bool(1)
extras/Tests/lang.useOperator.ci:214: u64A: uint64(96)
extras/Tests/lang.useOperator.ci:215: u64B: uint64(42)
extras/Tests/lang.useOperator.ci:216: u64Pls: uint64(42)
extras/Tests/lang.useOperator.ci:217: u64Neg: uint64(18446744073709551574)
extras/Tests/lang.useOperator.ci:218: u64Cmt: uint64(18446744073709551573)
extras/Tests/lang.useOperator.ci:219: u64Add: uint64(138)
extras/Tests/lang.useOperator.ci:220: u64Sub: uint64(54)
extras/Tests/lang.useOperator.ci:221: u64Mul: uint64(4032)
extras/Tests/lang.useOperator.ci:222: u64Div: uint64(2)
extras/Tests/lang.useOperator.ci:223: u64Mod: uint64(12)
extras/Tests/lang.useOperator.ci:224: u64And: uint64(32)
extras/Tests/lang.useOperator.ci:225: u64Ior: uint64(106)
extras/Tests/lang.useOperator.ci:226: u64Xor: uint64(74)
extras/Tests/lang.useOperator.ci:227: u64Shl: uint64(384)
extras/Tests/lang.useOperator.ci:228: u64Shr: uint64(24)
extras/Tests/lang.useOperator.ci:229: u64Not: bool(0)
extras/Tests/lang.useOperator.ci:230: u64Ceq: bool(0)
extras/Tests/lang.useOperator.ci:231: u64Cne: bool(1)
extras/Tests/lang.useOperator.ci:232: u64Clt: bool(0)
extras/Tests/lang.useOperator.ci:233: u64Cle: bool(0)
extras/Tests/lang.useOperator.ci:234: u64Cgt: bool(1)
extras/Tests/lang.useOperator.ci:235: u64Cge: bool(1)
extras/Tests/lang.useOperator.ci:237: f32A: float32(96.300003)
extras/Tests/lang.useOperator.ci:238: f32B: float32(42.139999)
extras/Tests/lang.useOperator.ci:239: f32Pls: float32(42.139999)
extras/Tests/lang.useOperator.ci:240: f32Neg: float32(-42.139999)
extras/Tests/lang.useOperator.ci:242: f32Add: float32(138.440002)
extras/Tests/lang.useOperator.ci:243: f32Sub: float32(54.160004)
extras/Tests/lang.useOperator.ci:244: f32Mul: float32(4058.082031)
extras/Tests/lang.useOperator.ci:245: f32Div: float32(2.285240)
extras/Tests/lang.useOperator.ci:246: f32Mod: float32(12.020004)
extras/Tests/lang.useOperator.ci:252: f32Not: bool(0)
extras/Tests/lang.useOperator.ci:253: f32Ceq: bool(0)
extras/Tests/lang.useOperator.ci:254: f32Cne: bool(1)
extras/Tests/lang.useOperator.ci:255: f32Clt: bool(0)
extras/Tests/lang.useOperator.ci:256: f32Cle: bool(0)
extras/Tests/lang.useOperator.ci:257: f32Cgt: bool(1)
extras/Tests/lang.useOperator.ci:258: f32Cge: bool(1)
extras/Tests/lang.useOperator.ci:260: f64A: float64(96.300000)
extras/Tests/lang.useOperator.ci:261: f64B: float64(42.140000)
extras/Tests/lang.useOperator.ci:262: f64Pls: float64(42.140000)
extras/Tests/lang.useOperator.ci:263: f64Neg: float64(-42.140000)
extras/Tests/lang.useOperator.ci:265: f64Add: float64(138.440000)
extras/Tests/lang.useOperator.ci:266: f64Sub: float64(54.160000)
extras/Tests/lang.useOperator.ci:267: f64Mul: float64(4058.082000)
extras/Tests/lang.useOperator.ci:268: f64Div: float64(2.285240)
extras/Tests/lang.useOperator.ci:269: f64Mod: float64(12.020000)
extras/Tests/lang.useOperator.ci:275: f64Not: bool(0)
extras/Tests/lang.useOperator.ci:276: f64Ceq: bool(0)
extras/Tests/lang.useOperator.ci:277: f64Cne: bool(1)
extras/Tests/lang.useOperator.ci:278: f64Clt: bool(0)
extras/Tests/lang.useOperator.ci:279: f64Cle: bool(0)
extras/Tests/lang.useOperator.ci:280: f64Cgt: bool(1)
extras/Tests/lang.useOperator.ci:281: f64Cge: bool(1)
extras/Tests/lang.useOperator.ci:283: ptrA: pointer(null)
extras/Tests/lang.useOperator.ci:284: ptrB: pointer({})
extras/Tests/lang.useOperator.ci:299: ptrCeq: bool(0)
extras/Tests/lang.useOperator.ci:300: ptrCne: bool(1)
extras/Tests/lang.varInitArray.ci:8: arrFixedNoInit: int64[7]([7] {FIXME: random values})
extras/Tests/lang.varInitArray.ci:9: arrSliceNoInit: int64[](null)
extras/Tests/lang.varInitArray.ci:10: arrPtrNoInit: int64[*](null)
extras/Tests/lang.varInitArray.ci:13: arrSliceInitNull: int64[](null)
extras/Tests/lang.varInitArray.ci:14: arrPtrInitNull: int64[*](null)
extras/Tests/lang.varInitArray.ci:17: arrSliceInitFixed: int64[]([7] {FIXME: random values})
extras/Tests/lang.varInitArray.ci:18: arrPtrInitFixed: int64[*]([*] {...})
extras/Tests/lang.varInitArray.ci:21: arrSliceInitSlice: int64[]([7] {FIXME: random values})
extras/Tests/lang.varInitArray.ci:22: arrPtrInitSlice: int64[*]([*] {...})
extras/Tests/lang.varInitArray.ci:26: arrPtrInitPtr: int64[*]([*] {...})
extras/Tests/lang.varInitArray.ci:37: arrSliceInitString: char[]([6] {'s', 't', 'r', 'i', 'n', 'g'})
extras/Tests/lang.varInitArray.ci:38: arrPtrInitString: char[*]("string")
extras/Tests/lang.varInitByRef.ci:7: value: int64(42)
extras/Tests/lang.varInitByRef.ci:8: valueRef: int64(42)
extras/Tests/lang.varInitByRef.ci:9: valuePtr: pointer(<value @024888>)
extras/Tests/lang.varInitByRef.ci:10: valueVar: variant({int64: 42})
extras/Tests/lang.varInitByRef.ci:12: fromRef: int64(42)
extras/Tests/lang.varInitByRef.ci:13: fromPtr: int64(42)
extras/Tests/lang.varInitByRef.ci:14: fromVar: int64(42)
extras/Tests/lang.varInitByRef.ci:16: nullRef: int64(null)
extras/Tests/lang.varInitByRef.ci:17: nullPtr: pointer(null)
extras/Tests/lang.varInitByRef.ci:18: nullVar: variant(null)
extras/Tests/lang.varInitByRef.ci:19: nullTyp: typename(null)
extras/Tests/lang.varInitByRef.ci:20: nullFun: function(null)
extras/Tests/lang.varInitByRef.ci:21: nullObj: object(null)
extras/Tests/lang.varInitByRef.ci:23: typePtr: pointer(<int64 @000400>)
extras/Tests/lang.varInitByRef.ci:24: typeVar: variant({typename: int64})
extras/Tests/lang.varInitByRef.ci:25: typeTyp: typename(int64)
extras/Tests/lang.varInitByRef.ci:27: local: int64(42)
extras/Tests/lang.varInitByRef.ci:28: copyVal: int64(42)
extras/Tests/lang.varInitByRef.ci:29: copyRef: int64(42)
extras/Tests/lang.varInitByRef.ci:30: copyPtr: pointer(<value @024888>)
extras/Tests/lang.varInitByRef.ci:31: copyVar: variant({int64: 42})
extras/Tests/lang.varInitByRef.ci:32: copyTyp: typename(int64)
extras/Tests/lang.varInitByRef.ci:35: ptrVoid: pointer(<void @0000a0>)
extras/Tests/lang.varInitByRef.ci:36: ptrBool: pointer(<bool @000130>)
extras/Tests/lang.varInitByRef.ci:37: ptrChar: pointer(<char @0001c0>)
extras/Tests/lang.varInitByRef.ci:38: ptrInt8: pointer(<int8 @000250>)
extras/Tests/lang.varInitByRef.ci:39: ptrInt16: pointer(<int16 @0002e0>)
extras/Tests/lang.varInitByRef.ci:40: ptrInt32: pointer(<int32 @000370>)
extras/Tests/lang.varInitByRef.ci:41: ptrInt64: pointer(<int64 @000400>)
extras/Tests/lang.varInitByRef.ci:42: ptrUint8: pointer(<uint8 @000490>)
extras/Tests/lang.varInitByRef.ci:43: ptrUint16: pointer(<uint16 @000520>)
extras/Tests/lang.varInitByRef.ci:44: ptrUint32: pointer(<uint32 @0005b0>)
extras/Tests/lang.varInitByRef.ci:45: ptrUint64: pointer(<uint64 @000640>)
extras/Tests/lang.varInitByRef.ci:46: ptrFloat32: pointer(<float32 @0006d0>)
extras/Tests/lang.varInitByRef.ci:47: ptrFloat64: pointer(<float64 @000760>)
extras/Tests/lang.varInitByRef.ci:48: ptrTypename: pointer(<typename @000008>)
extras/Tests/lang.varInitByRef.ci:49: ptrFunction: pointer(<function @000910>)
extras/Tests/lang.varInitByRef.ci:50: ptrPointer: pointer(<pointer @0007f0>)
extras/Tests/lang.varInitByRef.ci:51: ptrVariant: pointer(<variant @000880>)
extras/Tests/lang.varInitByRef.ci:52: ptrObject: pointer(<object @0009a8>)
extras/Tests/lang.varInitByRef.ci:55: varVoid: variant({typename: void})
extras/Tests/lang.varInitByRef.ci:56: varBool: variant({typename: bool})
extras/Tests/lang.varInitByRef.ci:57: varChar: variant({typename: char})
extras/Tests/lang.varInitByRef.ci:58: varInt8: variant({typename: int8})
extras/Tests/lang.varInitByRef.ci:59: varInt16: variant({typename: int16})
extras/Tests/lang.varInitByRef.ci:60: varInt32: variant({typename: int32})
extras/Tests/lang.varInitByRef.ci:61: varInt64: variant({typename: int64})
extras/Tests/lang.varInitByRef.ci:62: varUint8: variant({typename: uint8})
extras/Tests/lang.varInitByRef.ci:63: varUint16: variant({typename: uint16})
extras/Tests/lang.varInitByRef.ci:64: varUint32: variant({typename: uint32})
extras/Tests/lang.varInitByRef.ci:65: varUint64: variant({typename: uint64})
extras/Tests/lang.varInitByRef.ci:66: varFloat32: variant({typename: float32})
extras/Tests/lang.varInitByRef.ci:67: varFloat64: variant({typename: float64})
extras/Tests/lang.varInitByRef.ci:68: varTypename: variant({typename: typename})
extras/Tests/lang.varInitByRef.ci:69: varFunction: variant({typename: function})
extras/Tests/lang.varInitByRef.ci:70: varPointer: variant({typename: pointer})
extras/Tests/lang.varInitByRef.ci:71: varVariant: variant({typename: variant})
extras/Tests/lang.varInitByRef.ci:72: varObject: variant({typename: object})
extras/Tests/lang.varInitByRef.ci:75: typVoid: typename(void)
extras/Tests/lang.varInitByRef.ci:76: typBool: typename(bool)
extras/Tests/lang.varInitByRef.ci:77: typChar: typename(char)
extras/Tests/lang.varInitByRef.ci:78: typInt8: typename(int8)
extras/Tests/lang.varInitByRef.ci:79: typInt16: typename(int16)
extras/Tests/lang.varInitByRef.ci:80: typInt32: typename(int32)
extras/Tests/lang.varInitByRef.ci:81: typInt64: typename(int64)
extras/Tests/lang.varInitByRef.ci:82: typUint8: typename(uint8)
extras/Tests/lang.varInitByRef.ci:83: typUint16: typename(uint16)
extras/Tests/lang.varInitByRef.ci:84: typUint32: typename(uint32)
extras/Tests/lang.varInitByRef.ci:85: typUint64: typename(uint64)
extras/Tests/lang.varInitByRef.ci:86: typFloat32: typename(float32)
extras/Tests/lang.varInitByRef.ci:87: typFloat64: typename(float64)
extras/Tests/lang.varInitByRef.ci:88: typTypename: typename(typename)
extras/Tests/lang.varInitByRef.ci:89: typFunction: typename(function)
extras/Tests/lang.varInitByRef.ci:90: typPointer: typename(pointer)
extras/Tests/lang.varInitByRef.ci:91: typVariant: typename(variant)
extras/Tests/lang.varInitByRef.ci:92: typObject: typename(object)
extras/Tests/lang.varInitByRef.ci:95: valueOfPtr: pointer(<value @024888>)
extras/Tests/lang.varInitByRef.ci:96: valueOfVar: variant({int64: 42})
extras/Tests/lang.varInitByRef.ci:97: valueOfTyp: typename(int64)
extras/Tests/lang.varInitByRef.ci:99: typeOfValue: typename(int64)
extras/Tests/lang.varInitByRef.ci:105: copyPtrFloat64: variant({pointer: <float64 @000760>})
extras/Tests/lang.varInitByRef.ci:108: copyVarFloat64: pointer(<float64 @000760>)
extras/Tests/lang.varInitByVal.ci:7: localNoInit: int64(0)
extras/Tests/lang.varInitByVal.ci:8: globalNoInit: int64(0)
extras/Tests/lang.varInitByVal.ci:9: localInitValue: int64(42)
extras/Tests/lang.varInitByVal.ci:10: globalInitValue: int64(1024)
extras/Tests/lang.varInitByVal.ci:11: localInitLocal: int64(42)
extras/Tests/lang.varInitByVal.ci:12: globalInitLocal: int64(42)
extras/Tests/lang.varInitByVal.ci:13: localInitGlobal: int64(1024)
extras/Tests/lang.varInitByVal.ci:14: globalInitGlobal: int64(1024)
extras/Tests/lang.varInitByVal.ci:38: InitMember.intGlobal: int32(44)
extras/Tests/lang.varInitByVal.ci:43: InitMember.intConstant: int32(45)
extras/Tests/stdc.nfcNumber.ci:3: pi64: float64(3.141593)
extras/Tests/stdc.nfcNumber.ci:4: e64: float64(2.718282)
extras/Tests/stdc.nfcNumber.ci:6: pi32: float32(3.141593)
extras/Tests/stdc.nfcNumber.ci:7: e32: float32(2.718282)
extras/Tests/stdc.nfcNumber.ci:14: r_comp: int32(112)
extras/Tests/stdc.nfcNumber.ci:15: g_comp: int32(252)
extras/Tests/stdc.nfcNumber.ci:16: b_comp: int32(248)
extras/Tests/stdc.nfcNumber.ci:18: r5g6b5: int32(30719)
extras/Tests/stdc.nfcNumber.ci:19: r8g8b8: int32(7404792)
extras/Tests/stdc.nfcNumber.ci:21: zxtR5: int32(14)
extras/Tests/stdc.nfcNumber.ci:22: zxtG6: int32(63)
extras/Tests/stdc.nfcNumber.ci:23: zxtB5: int32(31)
extras/Tests/stdc.nfcNumber.ci:25: sxtR5: int32(14)
extras/Tests/stdc.nfcNumber.ci:26: sxtG6: int32(-1)
extras/Tests/stdc.nfcNumber.ci:27: sxtB5: int32(-1)
extras/Tests/stdc.nfcNumber.ci:29: zxtR8: int32(112)
extras/Tests/stdc.nfcNumber.ci:30: zxtG8: int32(252)
extras/Tests/stdc.nfcNumber.ci:31: zxtB8: int32(248)
extras/Tests/stdc.nfcNumber.ci:33: sxtR8: int32(112)
extras/Tests/stdc.nfcNumber.ci:34: sxtG8: int32(-4)
extras/Tests/stdc.nfcNumber.ci:35: sxtB8: int32(-8)
extras/Tests/stdc.nfcNumber.ci:37: sinF64: float64(1.000000)
extras/Tests/stdc.nfcNumber.ci:38: cosF64: float64(0.000000)
extras/Tests/stdc.nfcNumber.ci:39: tanF64: float64(1.000000)
extras/Tests/stdc.nfcNumber.ci:40: logF64: float64(3.000000)
extras/Tests/stdc.nfcNumber.ci:41: expF64: float64(2.718282)
extras/Tests/stdc.nfcNumber.ci:42: powF64: float64(3.141593)
extras/Tests/stdc.nfcNumber.ci:43: sqrtF64: float64(3.141593)
extras/Tests/stdc.nfcNumber.ci:44: atanF64: float64(1.262627)
extras/Tests/stdc.nfcNumber.ci:46: sinF32: float32(1.000000)
extras/Tests/stdc.nfcNumber.ci:47: cosF32: float32(-0.000000)
extras/Tests/stdc.nfcNumber.ci:48: tanF32: float32(1.000000)
extras/Tests/stdc.nfcNumber.ci:49: logF32: float32(3.000000)
extras/Tests/stdc.nfcNumber.ci:50: expF32: float32(2.718282)
extras/Tests/stdc.nfcNumber.ci:51: powF32: float32(3.141593)
extras/Tests/stdc.nfcNumber.ci:52: sqrtF32: float32(3.141593)
extras/Tests/stdc.nfcNumber.ci:53: atanF32: float32(1.262627)
extras/Tests/stdc.nfcMemory.ci:7: p1: pointer({})
extras/Tests/stdc.nfcMemory.ci:8: p2: pointer({})
extras/Tests/stdc.nfcMemory.ci:9: p3: pointer({})
extras/Tests/stdc.nfcMemory.ci:10: p4: pointer({})
extras/Tests/stdc.nfcMemory.ci:23: val1: int64(0)
extras/Tests/stdc.nfcMemory.ci:24: val2: int64(42)

---------- Memory layout:
memory[meta] @000000; size: 149536(146.0 Kb)
memory[code] @0248b8; size: 5024(4.9 Kb)
memory[heap] @025c58; size: 336574(328.7 Kb)
memory[stack] @04ff54; size: 163778(159.9 Kb)

---------- Memory allocations:
memory[free] @025c68; size: 336528(328.6 Kb)

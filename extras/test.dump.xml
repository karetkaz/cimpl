<main token="{}" type="void" kind="static const typename(void)">
	<stmt token="{}" type="void" kind="static const typename(void)" file="lib/stdlib.ci:8">
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="byte">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="float">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(32)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(33)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(34)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(35)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(36)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(37)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(38)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(39)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="double">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
				</field>
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(raise) == function)">
			<test token="==" type="bool" kind="static const typename(bool)" value="typename(raise) == function">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(raise)">
					<push token=".variable" type="function" kind="static const typename(ref)" value="raise">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</call>
				</left>
				<right token=".variable" type="typename" kind="static const typename(ref)" value="function">
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="lib/stdlib.ci:12">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="verbose(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.verbose, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.verbose">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="verbose">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="verbose(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.verbose, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.verbose">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="verbose">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="debug(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="debug(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="trace(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.defTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="trace(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.defTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="info(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.info, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.info">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="info">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="info(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.info, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.info">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="info">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="warn(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.warn, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.warn">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="warn">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="warn(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.warn, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.warn">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="warn">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="error(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.error, raise.defTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.error">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="error">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="error(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.error, raise.defTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.error">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="error">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abort(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="abort">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abort(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="abort">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abort(): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, &quot;execution aborted!&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="abort">
							</right>
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
							</right>
						</push>
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;execution aborted!&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assert(condition: bool, message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="void(condition ? void(0) : abort(message, inspect))">
						<push token="?:" type="void" kind="static const typename(void)" value="condition ? void(0) : abort(message, inspect)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="condition">
							</test>
							<left token="()" type="void" kind="static const typename(void)" value="void(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								<call token=".variable" type="typename" kind="static const typename(ref)" value="void">
								</call>
							</left>
							<right token="()" type="void" kind="static const typename(void)" value="abort(message, inspect)">
								<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
								</push>
								<push token=".variable" type="variant" kind="static const typename(var)" value="inspect">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort">
								</call>
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="void">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assert(condition: bool, message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="void(condition ? void(0) : abort(message))">
						<push token="?:" type="void" kind="static const typename(void)" value="condition ? void(0) : abort(message)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="condition">
							</test>
							<left token="()" type="void" kind="static const typename(void)" value="void(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								<call token=".variable" type="typename" kind="static const typename(ref)" value="void">
								</call>
							</left>
							<right token="()" type="void" kind="static const typename(void)" value="abort(message)">
								<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort">
								</call>
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="void">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assert(condition: bool): void">
					<init token="()" type="void" kind="static const typename(void)" value="void(condition ? void(0) : abort(&quot;assertion failed!&quot;))">
						<push token="?:" type="void" kind="static const typename(void)" value="condition ? void(0) : abort(&quot;assertion failed!&quot;)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="condition">
							</test>
							<left token="()" type="void" kind="static const typename(void)" value="void(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								<call token=".variable" type="typename" kind="static const typename(ref)" value="void">
								</call>
							</left>
							<right token="()" type="void" kind="static const typename(void)" value="abort(&quot;assertion failed!&quot;)">
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed!&quot;" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort">
								</call>
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="void">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="NotEquals">
					<field token=".variable" type="variant" kind="static const typename(var)" value="expected">
					</field>
					<field token=".variable" type="variant" kind="static const typename(var)" value="returned">
					</field>
					<field token=".variable" type="variant" kind="static const typename(var)" value="argument">
						<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</init>
					</field>
					<field token=".variable" type="char[*]" kind="static typename(arr)" value="message">
						<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</init>
					</field>
				</stmt>
				<stmt token=".variable" type="function" kind="static const typename(ref)" value="assertEq(expected: int32, returned: int32, message: char[*]): void">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/std/debug.ci:64">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (returned == expected)">
							<test token="==" type="bool" kind="static const typename(bool)" value="returned == expected">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="returned">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="expected">
								</right>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/debug.ci:65">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return;" />
							</then>
						</stmt>
						<stmt token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
							<init token="{}" type="NotEquals" kind="static const typename(val)">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := (expected);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := (expected)">
										<left token="." type="variant" kind="static const typename(var)" value="details.expected">
											<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="expected">
											</right>
										</left>
										<right token="()" type="variant" kind="static const typename(var)" value="(expected)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="expected">
											</push>
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := (returned);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := (returned)">
										<left token="." type="variant" kind="static const typename(var)" value="details.returned">
											<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="variant" kind="static const typename(var)" value="returned">
											</right>
										</left>
										<right token="()" type="variant" kind="static const typename(var)" value="(returned)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="returned">
											</push>
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (message);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (message)">
										<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
											<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message">
											</right>
										</left>
										<right token="()" type="char[*]" kind="static typename(arr)" value="(message)">
											<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
											</push>
										</right>
									</expr>
								</stmt>
								<stmt token=":=" type="void" kind="static const typename(void)" value="details.argument := (null)">
									<left token="." type="variant" kind="static const typename(var)" value="details.argument">
										<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
										</left>
										<right token=".variable" type="variant" kind="static const typename(var)" value="argument">
										</right>
									</left>
									<right token="()" type="variant" kind="static const typename(var)" value="(null)">
										<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
										</push>
									</right>
								</stmt>
							</init>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.abort, raise.defTrace, &quot;assertion failed&quot;, details);">
							<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, &quot;assertion failed&quot;, details)">
								<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
									<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
									</left>
									<right token=".variable" type="int64" kind="static const typename(i64)" value="abort">
									</right>
								</push>
								<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
									<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
									</left>
									<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace">
									</right>
								</push>
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
								<push token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
									<init token="{}" type="NotEquals" kind="static const typename(val)">
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := (expected);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := (expected)">
												<left token="." type="variant" kind="static const typename(var)" value="details.expected">
													<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
													</left>
													<right token=".variable" type="variant" kind="static const typename(var)" value="expected">
													</right>
												</left>
												<right token="()" type="variant" kind="static const typename(var)" value="(expected)">
													<push token=".variable" type="int32" kind="static const typename(i32)" value="expected">
													</push>
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := (returned);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := (returned)">
												<left token="." type="variant" kind="static const typename(var)" value="details.returned">
													<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
													</left>
													<right token=".variable" type="variant" kind="static const typename(var)" value="returned">
													</right>
												</left>
												<right token="()" type="variant" kind="static const typename(var)" value="(returned)">
													<push token=".variable" type="int32" kind="static const typename(i32)" value="returned">
													</push>
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (message);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (message)">
												<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
													<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
													</left>
													<right token=".variable" type="char[*]" kind="static typename(arr)" value="message">
													</right>
												</left>
												<right token="()" type="char[*]" kind="static typename(arr)" value="(message)">
													<push token=".variable" type="char[*]" kind="static typename(arr)" value="message">
													</push>
												</right>
											</expr>
										</stmt>
										<stmt token=":=" type="void" kind="static const typename(void)" value="details.argument := (null)">
											<left token="." type="variant" kind="static const typename(var)" value="details.argument">
												<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
												</left>
												<right token=".variable" type="variant" kind="static const typename(var)" value="argument">
												</right>
											</left>
											<right token="()" type="variant" kind="static const typename(var)" value="(null)">
												<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
												</push>
											</right>
										</stmt>
									</init>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</call>
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assertEq(expected: int32, returned: int32): void">
					<init token="()" type="void" kind="static const typename(void)" value="assertEq(expected, returned, null)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="expected">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="returned">
						</push>
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
						</call>
					</init>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sizeof(type: typename): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="int32(type.size)">
				<push token="." type="int32" kind="static const typename(i32)" value="type.size">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="type">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="size">
					</right>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Math">
			<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="0.693147" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="1.442695" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="2.302585" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="0.434294" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="1.618034" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="1.414214" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="1.648721" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="1.772454" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="1.272020" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="-nan" />
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="inf" />
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:22">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (1))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (1)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(1)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:23">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:24">
									<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
										<init token="-" type="float64" kind="static const typename(f64)" value="-modf(-x, &amp;intPart)">
											<right token="()" type="float64" kind="static const typename(f64)" value="modf(-x, &amp;intPart)">
												<push token="-" type="float64" kind="static const typename(f64)" value="-x">
													<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
													</right>
												</push>
												<push token="&amp;" type="float64" kind="static const typename(f64)" value="&amp;intPart">
													<right token=".variable" type="float64" kind="static const typename(f64)" value="intPart">
													</right>
												</push>
												<call token=".variable" type="function" kind="static const typename(ref)" value="modf">
												</call>
											</right>
										</init>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt="intPart := -intPart;">
										<expr token=":=" type="float64" kind="static const typename(f64)" value="intPart := -intPart">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="intPart">
											</left>
											<right token="-" type="float64" kind="static const typename(f64)" value="-intPart">
												<right token=".variable" type="float64" kind="static const typename(f64)" value="intPart">
												</right>
											</right>
										</expr>
									</stmt>
									<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
										<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
											<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="intPart := (0);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="intPart := (0)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="intPart">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token="%" type="float64" kind="static const typename(f64)" value="x % (1)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(1)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</init>
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="intPart := x - result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value="intPart := x - result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="intPart">
							</left>
							<right token="-" type="float64" kind="static const typename(f64)" value="x - result">
								<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
								</right>
							</right>
						</expr>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:47">
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="modf(x, &amp;result);">
						<expr token="()" type="float64" kind="static const typename(f64)" value="modf(x, &amp;result)">
							<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</push>
							<push token="&amp;" type="float64" kind="static const typename(f64)" value="&amp;result">
								<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
								</right>
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="modf">
							</call>
						</expr>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
				<init token="-" type="float64" kind="static const typename(f64)" value="-floor(-x)">
					<right token="()" type="float64" kind="static const typename(f64)" value="floor(-x)">
						<push token="-" type="float64" kind="static const typename(f64)" value="-x">
							<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="floor">
						</call>
					</right>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="floor(x + 0.500000)">
					<push token="+" type="float64" kind="static const typename(f64)" value="x + 0.500000">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
						</left>
						<right token=".literal" type="float64" kind="static const typename(f64)" value="0.500000" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</call>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
				<init token="-" type="int32" kind="static const typename(i32)" value="int32(x &gt; (0)) - int32(x &lt; (0))">
					<left token="()" type="int32" kind="static const typename(i32)" value="int32(x &gt; (0))">
						<push token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; (0)">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</left>
							<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						</call>
					</left>
					<right token="()" type="int32" kind="static const typename(i32)" value="int32(x &lt; (0))">
						<push token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</left>
							<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						</call>
					</right>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
				<init token="-" type="int32" kind="static const typename(i32)" value="int32(x &gt; (0)) - int32(x &lt; (0))">
					<left token="()" type="int32" kind="static const typename(i32)" value="int32(x &gt; (0))">
						<push token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						</call>
					</left>
					<right token="()" type="int32" kind="static const typename(i32)" value="int32(x &lt; (0))">
						<push token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						</call>
					</right>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:77">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</left>
							<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:78">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -x;">
								<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := -x">
									<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
									</left>
									<right token="-" type="float32" kind="static const typename(f32)" value="-x">
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x;">
						<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := x">
							<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:85">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:86">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := -x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-x">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := x">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:93">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((val := val % mod) &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="(val := val % mod) &lt; (0)">
							<left token="()" type="float32" kind="static const typename(f32)" value="(val := val % mod)">
								<push token=":=" type="float32" kind="static const typename(f32)" value="val := val % mod">
									<left token=".variable" type="float32" kind="static const typename(f32)" value="val">
									</left>
									<right token="%" type="float32" kind="static const typename(f32)" value="val % mod">
										<left token=".variable" type="float32" kind="static const typename(f32)" value="val">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="mod">
										</right>
									</right>
								</push>
							</left>
							<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:94">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := val + mod;">
								<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := val + mod">
									<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="val + mod">
										<left token=".variable" type="float32" kind="static const typename(f32)" value="val">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="mod">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := val;">
						<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := val">
							<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="val">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:101">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((val := val % mod) &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="(val := val % mod) &lt; (0)">
							<left token="()" type="float64" kind="static const typename(f64)" value="(val := val % mod)">
								<push token=":=" type="float64" kind="static const typename(f64)" value="val := val % mod">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="val">
									</left>
									<right token="%" type="float64" kind="static const typename(f64)" value="val % mod">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="val">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="mod">
										</right>
									</right>
								</push>
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:102">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := val + mod;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := val + mod">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="+" type="float64" kind="static const typename(f64)" value="val + mod">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="val">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="mod">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := val;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := val">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="val">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:115">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (a &lt; b)">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:116">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := a;">
								<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := a">
									<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := b;">
						<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := b">
							<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:123">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (a &lt; b)">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:124">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := a;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := a">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := b;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := b">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:137">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (a &gt; b)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="a &gt; b">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:138">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := a;">
								<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := a">
									<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := b;">
						<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := b">
							<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:145">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (a &gt; b)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="a &gt; b">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:146">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := a;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := a">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := b;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := b">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:159">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t &lt; a)">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="t &lt; a">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="t">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:160">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := a;">
								<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := a">
									<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t &gt; b)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="t &gt; b">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="t">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:163">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := b;">
								<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := b">
									<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := t;">
						<expr token=":=" type="float32" kind="static const typename(f32)" value=".result := t">
							<left token=".variable" type="float32" kind="static const typename(f32)" value=".result">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="t">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:170">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t &lt; a)">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="t &lt; a">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="t">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:171">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := a;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := a">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t &gt; b)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="t &gt; b">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="t">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:174">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := b;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := b">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := t;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := t">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="t">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
				<init token="+" type="float32" kind="static const typename(f32)" value="a + t * (b - a)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="a">
					</left>
					<right token="*" type="float32" kind="static const typename(f32)" value="t * (b - a)">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="t">
						</left>
						<right token="()" type="float32" kind="static const typename(f32)" value="(b - a)">
							<push token="-" type="float32" kind="static const typename(f32)" value="b - a">
								<left token=".variable" type="float32" kind="static const typename(f32)" value="b">
								</left>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
								</right>
							</push>
						</right>
					</right>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
				<init token="+" type="float64" kind="static const typename(f64)" value="a + t * (b - a)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
					</left>
					<right token="*" type="float64" kind="static const typename(f64)" value="t * (b - a)">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="t">
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="(b - a)">
							<push token="-" type="float64" kind="static const typename(f64)" value="b - a">
								<left token=".variable" type="float64" kind="static const typename(f64)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
								</right>
							</push>
						</right>
					</right>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
				<init token="*" type="float32" kind="static const typename(f32)" value="t * t * ((3) - (2) * t)">
					<left token="*" type="float32" kind="static const typename(f32)" value="t * t">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="t">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="t">
						</right>
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="((3) - (2) * t)">
						<push token="-" type="float32" kind="static const typename(f32)" value="(3) - (2) * t">
							<left token="()" type="float32" kind="static const typename(f32)" value="(3)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</left>
							<right token="*" type="float32" kind="static const typename(f32)" value="(2) * t">
								<left token="()" type="float32" kind="static const typename(f32)" value="(2)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
								</left>
								<right token=".variable" type="float32" kind="static const typename(f32)" value="t">
								</right>
							</right>
						</push>
					</right>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
				<init token="*" type="float64" kind="static const typename(f64)" value="t * t * ((3) - (2) * t)">
					<left token="*" type="float64" kind="static const typename(f64)" value="t * t">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="t">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="t">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="((3) - (2) * t)">
						<push token="-" type="float64" kind="static const typename(f64)" value="(3) - (2) * t">
							<left token="()" type="float64" kind="static const typename(f64)" value="(3)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</left>
							<right token="*" type="float64" kind="static const typename(f64)" value="(2) * t">
								<left token="()" type="float64" kind="static const typename(f64)" value="(2)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="t">
								</right>
							</right>
						</push>
					</right>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
				<init token="()" type="float32" kind="static const typename(f32)" value="smooth(clamp((t - a) / (b - a), float32(0), float32(1)))">
					<push token="()" type="float32" kind="static const typename(f32)" value="clamp((t - a) / (b - a), float32(0), float32(1))">
						<push token="/" type="float32" kind="static const typename(f32)" value="(t - a) / (b - a)">
							<left token="()" type="float32" kind="static const typename(f32)" value="(t - a)">
								<push token="-" type="float32" kind="static const typename(f32)" value="t - a">
									<left token=".variable" type="float32" kind="static const typename(f32)" value="t">
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
									</right>
								</push>
							</left>
							<right token="()" type="float32" kind="static const typename(f32)" value="(b - a)">
								<push token="-" type="float32" kind="static const typename(f32)" value="b - a">
									<left token=".variable" type="float32" kind="static const typename(f32)" value="b">
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
									</right>
								</push>
							</right>
						</push>
						<push token="()" type="float32" kind="static const typename(f32)" value="float32(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
								</field>
							</call>
						</push>
						<push token="()" type="float32" kind="static const typename(f32)" value="float32(1)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
								</field>
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="clamp">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="smooth">
					</call>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="smooth(clamp((t - a) / (b - a), float64(0), float64(1)))">
					<push token="()" type="float64" kind="static const typename(f64)" value="clamp((t - a) / (b - a), float64(0), float64(1))">
						<push token="/" type="float64" kind="static const typename(f64)" value="(t - a) / (b - a)">
							<left token="()" type="float64" kind="static const typename(f64)" value="(t - a)">
								<push token="-" type="float64" kind="static const typename(f64)" value="t - a">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="t">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
									</right>
								</push>
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(b - a)">
								<push token="-" type="float64" kind="static const typename(f64)" value="b - a">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="b">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
									</right>
								</push>
							</right>
						</push>
						<push token="()" type="float64" kind="static const typename(f64)" value="float64(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</call>
						</push>
						<push token="()" type="float64" kind="static const typename(f64)" value="float64(1)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="clamp">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="smooth">
					</call>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:201">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (data.length == (0))">
						<test token="==" type="bool" kind="static const typename(bool)" value="data.length == (0)">
							<left token="." type="uint32" kind="static const typename(u32)" value="data.length">
								<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
								</left>
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
								</right>
							</left>
							<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:202">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := nan;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := nan">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="nan">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token="[]" type="float64" kind="static const typename(f64)" value="data[0]">
							<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</init>
					</stmt>
					<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; (data.length); i := i + 1)">
						<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</init>
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; (data.length)">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="()" type="int32" kind="static const typename(i32)" value="(data.length)">
								<push token="." type="uint32" kind="static const typename(u32)" value="data.length">
									<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
									</left>
									<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
									</right>
								</push>
							</right>
						</test>
						<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</step>
						<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:206">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (result &gt; data[i])">
								<test token="&gt;" type="bool" kind="static const typename(bool)" value="result &gt; data[i]">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="[]" type="float64" kind="static const typename(f64)" value="data[i]">
										<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:207">
									<stmt token=";" type="void" kind="static const typename(void)" stmt="result := data[i];">
										<expr token=":=" type="float64" kind="static const typename(f64)" value="result := data[i]">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
											</left>
											<right token="[]" type="float64" kind="static const typename(f64)" value="data[i]">
												<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
												</right>
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
						</stmt>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:215">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (data.length == (0))">
						<test token="==" type="bool" kind="static const typename(bool)" value="data.length == (0)">
							<left token="." type="uint32" kind="static const typename(u32)" value="data.length">
								<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
								</left>
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
								</right>
							</left>
							<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:216">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := nan;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := nan">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="nan">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token="[]" type="float64" kind="static const typename(f64)" value="data[0]">
							<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</init>
					</stmt>
					<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; (data.length); i := i + 1)">
						<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</init>
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; (data.length)">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="()" type="int32" kind="static const typename(i32)" value="(data.length)">
								<push token="." type="uint32" kind="static const typename(u32)" value="data.length">
									<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
									</left>
									<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
									</right>
								</push>
							</right>
						</test>
						<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</step>
						<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:220">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (result &lt; data[i])">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="result &lt; data[i]">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="[]" type="float64" kind="static const typename(f64)" value="data[i]">
										<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:221">
									<stmt token=";" type="void" kind="static const typename(void)" stmt="result := data[i];">
										<expr token=":=" type="float64" kind="static const typename(f64)" value="result := data[i]">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
											</left>
											<right token="[]" type="float64" kind="static const typename(f64)" value="data[i]">
												<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
												</right>
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
						</stmt>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:229">
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</stmt>
					<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; (data.length); i := i + 1)">
						<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</init>
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; (data.length)">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="()" type="int32" kind="static const typename(i32)" value="(data.length)">
								<push token="." type="uint32" kind="static const typename(u32)" value="data.length">
									<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
									</left>
									<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
									</right>
								</push>
							</right>
						</test>
						<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</step>
						<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:231">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := result + data[i];">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := result + data[i]">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="+" type="float64" kind="static const typename(f64)" value="result + data[i]">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</left>
										<right token="[]" type="float64" kind="static const typename(f64)" value="data[i]">
											<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
						</stmt>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:238">
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := sum(...data) / (data.length);">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := sum(...data) / (data.length)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token="/" type="float64" kind="static const typename(f64)" value="sum(...data) / (data.length)">
								<left token="()" type="float64" kind="static const typename(f64)" value="sum(...data)">
									<push token="..." type="float64[]" kind="static typename(arr)" value="...data">
										<right token=".variable" type="float64[]" kind="static typename(arr)" value="data">
										</right>
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
									</call>
								</left>
								<right token="()" type="float64" kind="static const typename(f64)" value="(data.length)">
									<push token="." type="uint32" kind="static const typename(u32)" value="data.length">
										<left token=".variable" type="float64[]" kind="static typename(arr)" value="data">
										</left>
										<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
										</right>
									</push>
								</right>
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="(a0)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="a0">
					</push>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="(a0 + x * a1)">
					<push token="+" type="float64" kind="static const typename(f64)" value="a0 + x * a1">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="a0">
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="x * a1">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="a1">
							</right>
						</right>
					</push>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="(a0 + x * eval(x, a1, a2))">
					<push token="+" type="float64" kind="static const typename(f64)" value="a0 + x * eval(x, a1, a2)">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="a0">
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="x * eval(x, a1, a2)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="eval(x, a1, a2)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
								</push>
								<push token=".variable" type="float64" kind="static const typename(f64)" value="a1">
								</push>
								<push token=".variable" type="float64" kind="static const typename(f64)" value="a2">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="eval">
								</call>
							</right>
						</right>
					</push>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="(a0 + x * eval(x, a1, a2, a3))">
					<push token="+" type="float64" kind="static const typename(f64)" value="a0 + x * eval(x, a1, a2, a3)">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="a0">
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="x * eval(x, a1, a2, a3)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="eval(x, a1, a2, a3)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
								</push>
								<push token=".variable" type="float64" kind="static const typename(f64)" value="a1">
								</push>
								<push token=".variable" type="float64" kind="static const typename(f64)" value="a2">
								</push>
								<push token=".variable" type="float64" kind="static const typename(f64)" value="a3">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="eval">
								</call>
							</right>
						</right>
					</push>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:255">
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</stmt>
					<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &gt;= 0; i := i - 1)">
						<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token="-" type="uint32" kind="static const typename(u32)" value="polynomial.length - (1)">
								<left token="." type="uint32" kind="static const typename(u32)" value="polynomial.length">
									<left token=".variable" type="float64[]" kind="static typename(arr)" value="polynomial">
									</left>
									<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
									</right>
								</left>
								<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</init>
						</init>
						<test token="&gt;=" type="bool" kind="static const typename(bool)" value="i &gt;= 0">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</test>
						<step token=":=" type="int32" kind="static const typename(i32)" value="i := i - 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token="-" type="int32" kind="static const typename(i32)" value="i - 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</step>
						<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:257">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := result * x + polynomial[i];">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := result * x + polynomial[i]">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="+" type="float64" kind="static const typename(f64)" value="result * x + polynomial[i]">
										<left token="*" type="float64" kind="static const typename(f64)" value="result * x">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
											</right>
										</left>
										<right token="[]" type="float64" kind="static const typename(f64)" value="polynomial[i]">
											<left token=".variable" type="float64[]" kind="static typename(arr)" value="polynomial">
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
						</stmt>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:264">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (a &lt; b)">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
							<left token=".variable" type="float32" kind="static const typename(f32)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:265">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (eps &lt; (b - a))">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="eps &lt; (b - a)">
									<left token=".variable" type="float32" kind="static const typename(f32)" value="eps">
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(b - a)">
										<push token="-" type="float32" kind="static const typename(f32)" value="b - a">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="b">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="a">
											</right>
										</push>
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:266">
									<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -1;">
										<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := -1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
											</left>
											<right token="-" type="int32" kind="static const typename(i32)" value="-1">
												<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:270">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (eps &lt; (a - b))">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="eps &lt; (a - b)">
									<left token=".variable" type="float32" kind="static const typename(f32)" value="eps">
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(a - b)">
										<push token="-" type="float32" kind="static const typename(f32)" value="a - b">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="a">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="b">
											</right>
										</push>
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:271">
									<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := +1;">
										<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := +1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
											</left>
											<right token="+" type="int32" kind="static const typename(i32)" value="+1">
												<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
						</else>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := 0;">
						<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := 0">
							<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:279">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (a &lt; b)">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:280">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (eps &lt; (b - a))">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="eps &lt; (b - a)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="eps">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="(b - a)">
										<push token="-" type="float64" kind="static const typename(f64)" value="b - a">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="b">
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="a">
											</right>
										</push>
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:281">
									<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -1;">
										<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := -1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
											</left>
											<right token="-" type="int32" kind="static const typename(i32)" value="-1">
												<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:285">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (eps &lt; (a - b))">
								<test token="&lt;" type="bool" kind="static const typename(bool)" value="eps &lt; (a - b)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="eps">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="(a - b)">
										<push token="-" type="float64" kind="static const typename(f64)" value="a - b">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
											</right>
										</push>
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:286">
									<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := +1;">
										<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := +1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
											</left>
											<right token="+" type="int32" kind="static const typename(i32)" value="+1">
												<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
						</else>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := 0;">
						<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := 0">
							<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:294">
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="x">
						<init token=".variable" type="float64" kind="static const typename(f64)" value="arg">
						</init>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:309">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="x := -x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="x := -x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-x">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="quad := quad + 2;">
								<expr token=":=" type="int32" kind="static const typename(i32)" value="quad := quad + 2">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
									</left>
									<right token="+" type="int32" kind="static const typename(i32)" value="quad + 2">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="y">
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="x := x * (1) / PIO2;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value="x := x * (1) / PIO2">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="*" type="float64" kind="static const typename(f64)" value="x * (1) / PIO2">
								<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
								</left>
								<right token="/" type="float64" kind="static const typename(f64)" value="(1) / PIO2">
									<left token="()" type="float64" kind="static const typename(f64)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="PIO2">
									</right>
								</right>
							</right>
						</expr>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &gt; (32764))">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; (32764)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(32764)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="32764" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:316">
							<stmt token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="y := modf(x, &amp;e);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="y := modf(x, &amp;e)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="y">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="modf(x, &amp;e)">
										<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</push>
										<push token="&amp;" type="float64" kind="static const typename(f64)" value="&amp;e">
											<right token=".variable" type="float64" kind="static const typename(f64)" value="e">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="modf">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="e := e + (quad);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="e := e + (quad)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="e">
									</left>
									<right token="+" type="float64" kind="static const typename(f64)" value="e + (quad)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="e">
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="(quad)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="quad">
											</push>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f">
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="modf(0.250000 * e, &amp;f);">
								<expr token="()" type="float64" kind="static const typename(f64)" value="modf(0.250000 * e, &amp;f)">
									<push token="*" type="float64" kind="static const typename(f64)" value="0.250000 * e">
										<left token=".literal" type="float64" kind="static const typename(f64)" value="0.250000" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="e">
										</right>
									</push>
									<push token="&amp;" type="float64" kind="static const typename(f64)" value="&amp;f">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="f">
										</right>
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="modf">
									</call>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="quad := (e - (4) * f);">
								<expr token=":=" type="int32" kind="static const typename(i32)" value="quad := (e - (4) * f)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
									</left>
									<right token="()" type="int32" kind="static const typename(i32)" value="(e - (4) * f)">
										<push token="-" type="float64" kind="static const typename(f64)" value="e - (4) * f">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="e">
											</left>
											<right token="*" type="float64" kind="static const typename(f64)" value="(4) * f">
												<left token="()" type="float64" kind="static const typename(f64)" value="(4)">
													<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="f">
												</right>
											</right>
										</push>
									</right>
								</expr>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:325">
							<stmt token=".variable" type="int32" kind="static const typename(i32)" value="k">
								<init token=".variable" type="float64" kind="static const typename(f64)" value="x">
									<init token=".variable" type="float64" kind="static const typename(f64)" value="arg">
									</init>
								</init>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="y := x - (k);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="y := x - (k)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="y">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="x - (k)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="(k)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="k">
											</push>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="quad := quad + k;">
								<expr token=":=" type="int32" kind="static const typename(i32)" value="quad := quad + k">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
									</left>
									<right token="+" type="int32" kind="static const typename(i32)" value="quad + k">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="k">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="quad := quad &amp; 3;">
								<expr token=":=" type="int32" kind="static const typename(i32)" value="quad := quad &amp; 3">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
									</left>
									<right token="&amp;" type="int32" kind="static const typename(i32)" value="quad &amp; 3">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
									</right>
								</expr>
							</stmt>
						</else>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (quad &amp; 1)">
						<test token="&amp;" type="int32" kind="static const typename(i32)" value="quad &amp; 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:331">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="y := (1) - y;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="y := (1) - y">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="y">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="(1) - y">
										<left token="()" type="float64" kind="static const typename(f64)" value="(1)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (quad &gt; 1)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="quad &gt; 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="quad">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:334">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="y := -y;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="y := -y">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="y">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-y">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
						<init token="*" type="float64" kind="static const typename(f64)" value="y * y">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="y">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
							</right>
						</init>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="temp1">
						<init token="*" type="float64" kind="static const typename(f64)" value="((((p4 * ysq + p3) * ysq + p2) * ysq + p1) * ysq + p0) * y">
							<left token="()" type="float64" kind="static const typename(f64)" value="((((p4 * ysq + p3) * ysq + p2) * ysq + p1) * ysq + p0)">
								<push token="+" type="float64" kind="static const typename(f64)" value="(((p4 * ysq + p3) * ysq + p2) * ysq + p1) * ysq + p0">
									<left token="*" type="float64" kind="static const typename(f64)" value="(((p4 * ysq + p3) * ysq + p2) * ysq + p1) * ysq">
										<left token="()" type="float64" kind="static const typename(f64)" value="(((p4 * ysq + p3) * ysq + p2) * ysq + p1)">
											<push token="+" type="float64" kind="static const typename(f64)" value="((p4 * ysq + p3) * ysq + p2) * ysq + p1">
												<left token="*" type="float64" kind="static const typename(f64)" value="((p4 * ysq + p3) * ysq + p2) * ysq">
													<left token="()" type="float64" kind="static const typename(f64)" value="((p4 * ysq + p3) * ysq + p2)">
														<push token="+" type="float64" kind="static const typename(f64)" value="(p4 * ysq + p3) * ysq + p2">
															<left token="*" type="float64" kind="static const typename(f64)" value="(p4 * ysq + p3) * ysq">
																<left token="()" type="float64" kind="static const typename(f64)" value="(p4 * ysq + p3)">
																	<push token="+" type="float64" kind="static const typename(f64)" value="p4 * ysq + p3">
																		<left token="*" type="float64" kind="static const typename(f64)" value="p4 * ysq">
																			<left token=".variable" type="float64" kind="static const typename(f64)" value="p4">
																			</left>
																			<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
																			</right>
																		</left>
																		<right token=".variable" type="float64" kind="static const typename(f64)" value="p3">
																		</right>
																	</push>
																</left>
																<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
																</right>
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="p2">
															</right>
														</push>
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
													</right>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="p1">
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="p0">
									</right>
								</push>
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
							</right>
						</init>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="temp2">
						<init token="()" type="float64" kind="static const typename(f64)" value="((((ysq + q3) * ysq + q2) * ysq + q1) * ysq + q0)">
							<push token="+" type="float64" kind="static const typename(f64)" value="(((ysq + q3) * ysq + q2) * ysq + q1) * ysq + q0">
								<left token="*" type="float64" kind="static const typename(f64)" value="(((ysq + q3) * ysq + q2) * ysq + q1) * ysq">
									<left token="()" type="float64" kind="static const typename(f64)" value="(((ysq + q3) * ysq + q2) * ysq + q1)">
										<push token="+" type="float64" kind="static const typename(f64)" value="((ysq + q3) * ysq + q2) * ysq + q1">
											<left token="*" type="float64" kind="static const typename(f64)" value="((ysq + q3) * ysq + q2) * ysq">
												<left token="()" type="float64" kind="static const typename(f64)" value="((ysq + q3) * ysq + q2)">
													<push token="+" type="float64" kind="static const typename(f64)" value="(ysq + q3) * ysq + q2">
														<left token="*" type="float64" kind="static const typename(f64)" value="(ysq + q3) * ysq">
															<left token="()" type="float64" kind="static const typename(f64)" value="(ysq + q3)">
																<push token="+" type="float64" kind="static const typename(f64)" value="ysq + q3">
																	<left token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
																	</left>
																	<right token=".variable" type="float64" kind="static const typename(f64)" value="q3">
																	</right>
																</push>
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
															</right>
														</left>
														<right token=".variable" type="float64" kind="static const typename(f64)" value="q2">
														</right>
													</push>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
												</right>
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="q1">
											</right>
										</push>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="ysq">
									</right>
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="q0">
								</right>
							</push>
						</init>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := temp1 / temp2;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := temp1 / temp2">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token="/" type="float64" kind="static const typename(f64)" value="temp1 / temp2">
								<left token=".variable" type="float64" kind="static const typename(f64)" value="temp1">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="temp2">
								</right>
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="sinCos(arg, 0)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="arg">
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sinCos">
					</call>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="sinCos(abs(arg), 1)">
					<push token="()" type="float64" kind="static const typename(f64)" value="abs(arg)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="arg">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="abs">
						</call>
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sinCos">
					</call>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:351">
					<stmt token=".variable" type="bool" kind="static const typename(bool)" value="complement">
						<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
						</init>
					</stmt>
					<stmt token=".variable" type="bool" kind="static const typename(bool)" value="negate">
						<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
						</init>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (arg &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="arg &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="arg">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:367">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="arg := -arg;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="arg := -arg">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="arg">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-arg">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="arg">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="negate := true;">
								<expr token=":=" type="bool" kind="static const typename(bool)" value="negate := true">
									<left token=".variable" type="bool" kind="static const typename(bool)" value="negate">
									</left>
									<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="arg := (2) * arg / PIO2;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value="arg := (2) * arg / PIO2">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="arg">
							</left>
							<right token="/" type="float64" kind="static const typename(f64)" value="(2) * arg / PIO2">
								<left token="*" type="float64" kind="static const typename(f64)" value="(2) * arg">
									<left token="()" type="float64" kind="static const typename(f64)" value="(2)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="arg">
									</right>
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="PIO2">
								</right>
							</right>
						</expr>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="e">
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="x">
						<init token="()" type="float64" kind="static const typename(f64)" value="modf(arg, &amp;e)">
							<push token=".variable" type="float64" kind="static const typename(f64)" value="arg">
							</push>
							<push token="&amp;" type="float64" kind="static const typename(f64)" value="&amp;e">
								<right token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</right>
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="modf">
							</call>
						</init>
					</stmt>
					<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token="%" type="int32" kind="static const typename(i32)" value="int32(e) % 4">
							<left token="()" type="int32" kind="static const typename(i32)" value="int32(e)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</push>
								<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
								</call>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="4" />
						</init>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i == 0)">
						<test token="==" type="bool" kind="static const typename(bool)" value="i == 0">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</test>
						<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:378">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i == 1)">
								<test token="==" type="bool" kind="static const typename(bool)" value="i == 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:378">
									<stmt token=";" type="void" kind="static const typename(void)" stmt="x := (1) - x;">
										<expr token=":=" type="float64" kind="static const typename(f64)" value="x := (1) - x">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
											</left>
											<right token="-" type="float64" kind="static const typename(f64)" value="(1) - x">
												<left token="()" type="float64" kind="static const typename(f64)" value="(1)">
													<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
												</right>
											</right>
										</expr>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt="complement := true;">
										<expr token=":=" type="bool" kind="static const typename(bool)" value="complement := true">
											<left token=".variable" type="bool" kind="static const typename(bool)" value="complement">
											</left>
											<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
											</right>
										</expr>
									</stmt>
								</then>
								<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:382">
									<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i == 2)">
										<test token="==" type="bool" kind="static const typename(bool)" value="i == 2">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
										</test>
										<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:382">
											<stmt token=";" type="void" kind="static const typename(void)" stmt="negate := !negate;">
												<expr token=":=" type="bool" kind="static const typename(bool)" value="negate := !negate">
													<left token=".variable" type="bool" kind="static const typename(bool)" value="negate">
													</left>
													<right token="!" type="bool" kind="static const typename(bool)" value="!negate">
														<right token=".variable" type="bool" kind="static const typename(bool)" value="negate">
														</right>
													</right>
												</expr>
											</stmt>
											<stmt token=";" type="void" kind="static const typename(void)" stmt="complement := true;">
												<expr token=":=" type="bool" kind="static const typename(bool)" value="complement := true">
													<left token=".variable" type="bool" kind="static const typename(bool)" value="complement">
													</left>
													<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
													</right>
												</expr>
											</stmt>
										</then>
										<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:386">
											<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i == 3)">
												<test token="==" type="bool" kind="static const typename(bool)" value="i == 3">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
													</left>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
												</test>
												<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:386">
													<stmt token=";" type="void" kind="static const typename(void)" stmt="x := (1) - x;">
														<expr token=":=" type="float64" kind="static const typename(f64)" value="x := (1) - x">
															<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
															</left>
															<right token="-" type="float64" kind="static const typename(f64)" value="(1) - x">
																<left token="()" type="float64" kind="static const typename(f64)" value="(1)">
																	<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
																</left>
																<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
																</right>
															</right>
														</expr>
													</stmt>
													<stmt token=";" type="void" kind="static const typename(void)" stmt="negate := !negate;">
														<expr token=":=" type="bool" kind="static const typename(bool)" value="negate := !negate">
															<left token=".variable" type="bool" kind="static const typename(bool)" value="negate">
															</left>
															<right token="!" type="bool" kind="static const typename(bool)" value="!negate">
																<right token=".variable" type="bool" kind="static const typename(bool)" value="negate">
																</right>
															</right>
														</expr>
													</stmt>
												</then>
											</stmt>
										</else>
									</stmt>
								</else>
							</stmt>
						</else>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
						<init token="*" type="float64" kind="static const typename(f64)" value="x * x">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</right>
						</init>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token="*" type="float64" kind="static const typename(f64)" value="((((p4 * xsq + p3) * xsq + p2) * xsq + p1) * xsq + p0) * x">
							<left token="()" type="float64" kind="static const typename(f64)" value="((((p4 * xsq + p3) * xsq + p2) * xsq + p1) * xsq + p0)">
								<push token="+" type="float64" kind="static const typename(f64)" value="(((p4 * xsq + p3) * xsq + p2) * xsq + p1) * xsq + p0">
									<left token="*" type="float64" kind="static const typename(f64)" value="(((p4 * xsq + p3) * xsq + p2) * xsq + p1) * xsq">
										<left token="()" type="float64" kind="static const typename(f64)" value="(((p4 * xsq + p3) * xsq + p2) * xsq + p1)">
											<push token="+" type="float64" kind="static const typename(f64)" value="((p4 * xsq + p3) * xsq + p2) * xsq + p1">
												<left token="*" type="float64" kind="static const typename(f64)" value="((p4 * xsq + p3) * xsq + p2) * xsq">
													<left token="()" type="float64" kind="static const typename(f64)" value="((p4 * xsq + p3) * xsq + p2)">
														<push token="+" type="float64" kind="static const typename(f64)" value="(p4 * xsq + p3) * xsq + p2">
															<left token="*" type="float64" kind="static const typename(f64)" value="(p4 * xsq + p3) * xsq">
																<left token="()" type="float64" kind="static const typename(f64)" value="(p4 * xsq + p3)">
																	<push token="+" type="float64" kind="static const typename(f64)" value="p4 * xsq + p3">
																		<left token="*" type="float64" kind="static const typename(f64)" value="p4 * xsq">
																			<left token=".variable" type="float64" kind="static const typename(f64)" value="p4">
																			</left>
																			<right token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
																			</right>
																		</left>
																		<right token=".variable" type="float64" kind="static const typename(f64)" value="p3">
																		</right>
																	</push>
																</left>
																<right token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
																</right>
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="p2">
															</right>
														</push>
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
													</right>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="p1">
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="p0">
									</right>
								</push>
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</right>
						</init>
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="result := result / (((xsq + q2) * xsq + q1) * xsq + q0);">
						<expr token=":=" type="float64" kind="static const typename(f64)" value="result := result / (((xsq + q2) * xsq + q1) * xsq + q0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</left>
							<right token="/" type="float64" kind="static const typename(f64)" value="result / (((xsq + q2) * xsq + q1) * xsq + q0)">
								<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
								</left>
								<right token="+" type="float64" kind="static const typename(f64)" value="((xsq + q2) * xsq + q1) * xsq + q0">
									<left token="*" type="float64" kind="static const typename(f64)" value="((xsq + q2) * xsq + q1) * xsq">
										<left token="()" type="float64" kind="static const typename(f64)" value="((xsq + q2) * xsq + q1)">
											<push token="+" type="float64" kind="static const typename(f64)" value="(xsq + q2) * xsq + q1">
												<left token="*" type="float64" kind="static const typename(f64)" value="(xsq + q2) * xsq">
													<left token="()" type="float64" kind="static const typename(f64)" value="(xsq + q2)">
														<push token="+" type="float64" kind="static const typename(f64)" value="xsq + q2">
															<left token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="q2">
															</right>
														</push>
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
													</right>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="q1">
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="xsq">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="q0">
									</right>
								</right>
							</right>
						</expr>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (complement)">
						<test token=".variable" type="bool" kind="static const typename(bool)" value="complement">
							<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
								<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
							</init>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:395">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (result == (0))">
								<test token="==" type="bool" kind="static const typename(bool)" value="result == (0)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:396">
									<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := nan;">
										<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := nan">
											<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="nan">
											</right>
										</expr>
									</stmt>
								</then>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := (1) / result;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := (1) / result">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="(1) / result">
										<left token="()" type="float64" kind="static const typename(f64)" value="(1)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (negate)">
						<test token=".variable" type="bool" kind="static const typename(bool)" value="negate">
							<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
								<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
							</init>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:401">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -result;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := -result">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-result">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:408">
					<stmt token=".variable" type="bool" kind="static const typename(bool)" value="negate">
						<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
						</init>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:421">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="x := -x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="x := -x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-x">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="negate := true;">
								<expr token=":=" type="bool" kind="static const typename(bool)" value="negate := true">
									<left token=".variable" type="bool" kind="static const typename(bool)" value="negate">
									</left>
									<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &gt; (21))">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; (21)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(21)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="21" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:426">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := float64.exp(x) / (2);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := float64.exp(x) / (2)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="float64.exp(x) / (2)">
										<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(x)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
												</right>
											</call>
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &gt; 0.500000)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; 0.500000">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token=".literal" type="float64" kind="static const typename(f64)" value="0.500000" />
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:431">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := (float64.exp(x) - float64.exp(-x)) / (2);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := (float64.exp(x) - float64.exp(-x)) / (2)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="(float64.exp(x) - float64.exp(-x)) / (2)">
										<left token="()" type="float64" kind="static const typename(f64)" value="(float64.exp(x) - float64.exp(-x))">
											<push token="-" type="float64" kind="static const typename(f64)" value="float64.exp(x) - float64.exp(-x)">
												<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(x)">
													<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
													</push>
													<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
														<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
															<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
															</field>
														</left>
														<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
														</right>
													</call>
												</left>
												<right token="()" type="float64" kind="static const typename(f64)" value="float64.exp(-x)">
													<push token="-" type="float64" kind="static const typename(f64)" value="-x">
														<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
														</right>
													</push>
													<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
														<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
															<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
															</field>
															<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
															</field>
														</left>
														<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
														</right>
													</call>
												</right>
											</push>
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
										</right>
									</right>
								</expr>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:434">
							<stmt token=".variable" type="float64" kind="static const typename(f64)" value="sq">
								<init token="*" type="float64" kind="static const typename(f64)" value="x * x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</right>
								</init>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="*" type="float64" kind="static const typename(f64)" value="(((P3 * sq + P2) * sq + P1) * sq + P0) * x">
										<left token="()" type="float64" kind="static const typename(f64)" value="(((P3 * sq + P2) * sq + P1) * sq + P0)">
											<push token="+" type="float64" kind="static const typename(f64)" value="((P3 * sq + P2) * sq + P1) * sq + P0">
												<left token="*" type="float64" kind="static const typename(f64)" value="((P3 * sq + P2) * sq + P1) * sq">
													<left token="()" type="float64" kind="static const typename(f64)" value="((P3 * sq + P2) * sq + P1)">
														<push token="+" type="float64" kind="static const typename(f64)" value="(P3 * sq + P2) * sq + P1">
															<left token="*" type="float64" kind="static const typename(f64)" value="(P3 * sq + P2) * sq">
																<left token="()" type="float64" kind="static const typename(f64)" value="(P3 * sq + P2)">
																	<push token="+" type="float64" kind="static const typename(f64)" value="P3 * sq + P2">
																		<left token="*" type="float64" kind="static const typename(f64)" value="P3 * sq">
																			<left token=".variable" type="float64" kind="static const typename(f64)" value="P3">
																			</left>
																			<right token=".variable" type="float64" kind="static const typename(f64)" value="sq">
																			</right>
																		</left>
																		<right token=".variable" type="float64" kind="static const typename(f64)" value="P2">
																		</right>
																	</push>
																</left>
																<right token=".variable" type="float64" kind="static const typename(f64)" value="sq">
																</right>
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="P1">
															</right>
														</push>
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="sq">
													</right>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="P0">
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := result / (((sq + Q2) * sq + Q1) * sq + Q0);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := result / (((sq + Q2) * sq + Q1) * sq + Q0)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="result / (((sq + Q2) * sq + Q1) * sq + Q0)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</left>
										<right token="+" type="float64" kind="static const typename(f64)" value="((sq + Q2) * sq + Q1) * sq + Q0">
											<left token="*" type="float64" kind="static const typename(f64)" value="((sq + Q2) * sq + Q1) * sq">
												<left token="()" type="float64" kind="static const typename(f64)" value="((sq + Q2) * sq + Q1)">
													<push token="+" type="float64" kind="static const typename(f64)" value="(sq + Q2) * sq + Q1">
														<left token="*" type="float64" kind="static const typename(f64)" value="(sq + Q2) * sq">
															<left token="()" type="float64" kind="static const typename(f64)" value="(sq + Q2)">
																<push token="+" type="float64" kind="static const typename(f64)" value="sq + Q2">
																	<left token=".variable" type="float64" kind="static const typename(f64)" value="sq">
																	</left>
																	<right token=".variable" type="float64" kind="static const typename(f64)" value="Q2">
																	</right>
																</push>
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="sq">
															</right>
														</left>
														<right token=".variable" type="float64" kind="static const typename(f64)" value="Q1">
														</right>
													</push>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="sq">
												</right>
											</left>
											<right token=".variable" type="float64" kind="static const typename(f64)" value="Q0">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
						</else>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (negate)">
						<test token=".variable" type="bool" kind="static const typename(bool)" value="negate">
							<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
								<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
							</init>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:440">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -result;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := -result">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-result">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:447">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:448">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="x := -x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="x := -x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-x">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &gt; (21))">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; (21)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(21)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="21" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:451">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := float64.exp(x) / (2);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := float64.exp(x) / (2)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="float64.exp(x) / (2)">
										<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(x)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
												</right>
											</call>
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := (float64.exp(x) + float64.exp(-x)) / (2);">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := (float64.exp(x) + float64.exp(-x)) / (2)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token="/" type="float64" kind="static const typename(f64)" value="(float64.exp(x) + float64.exp(-x)) / (2)">
								<left token="()" type="float64" kind="static const typename(f64)" value="(float64.exp(x) + float64.exp(-x))">
									<push token="+" type="float64" kind="static const typename(f64)" value="float64.exp(x) + float64.exp(-x)">
										<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(x)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
												</right>
											</call>
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="float64.exp(-x)">
											<push token="-" type="float64" kind="static const typename(f64)" value="-x">
												<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
												</right>
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
												</right>
											</call>
										</right>
									</push>
								</left>
								<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
								</right>
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
				<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:462">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x == (0))">
						<test token="==" type="bool" kind="static const typename(bool)" value="x == (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:463">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="bool" kind="static const typename(bool)" value="negate">
						<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
							<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
						</init>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &lt; (0))">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="x &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:469">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="negate := true;">
								<expr token=":=" type="bool" kind="static const typename(bool)" value="negate := true">
									<left token=".variable" type="bool" kind="static const typename(bool)" value="negate">
									</left>
									<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt="x := -x;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="x := -x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-x">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &gt; (1))">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; (1)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(1)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</right>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:474">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := nan;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := nan">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="nan">
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token=".variable" type="float64" kind="static const typename(f64)" value="result">
						<init token="()" type="float64" kind="static const typename(f64)" value="float64.sqrt((1) - x * x)">
							<push token="-" type="float64" kind="static const typename(f64)" value="(1) - x * x">
								<left token="()" type="float64" kind="static const typename(f64)" value="(1)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</left>
								<right token="*" type="float64" kind="static const typename(f64)" value="x * x">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</right>
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.sqrt">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt">
								</right>
							</call>
						</init>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (x &gt; 0.700000)">
						<test token="&gt;" type="bool" kind="static const typename(bool)" value="x &gt; 0.700000">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</left>
							<right token=".literal" type="float64" kind="static const typename(f64)" value="0.700000" />
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:480">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := pi / (2) - float64.atan2(result, x);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := pi / (2) - float64.atan2(result, x)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="pi / (2) - float64.atan2(result, x)">
										<left token="/" type="float64" kind="static const typename(f64)" value="pi / (2)">
											<left token=".variable" type="float64" kind="static const typename(f64)" value="pi">
											</left>
											<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
												<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
											</right>
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(result, x)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="result">
											</push>
											<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="atan2">
												</right>
											</call>
										</right>
									</right>
								</expr>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:483">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="result := float64.atan2(x, result);">
								<expr token=":=" type="float64" kind="static const typename(f64)" value="result := float64.atan2(x, result)">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="result">
									</left>
									<right token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(x, result)">
										<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</push>
										<push token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</push>
										<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
											<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
												<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
												</field>
												<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
												</field>
											</left>
											<right token=".variable" type="function" kind="static const typename(ref)" value="atan2">
											</right>
										</call>
									</right>
								</expr>
							</stmt>
						</else>
					</stmt>
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (negate)">
						<test token=".variable" type="bool" kind="static const typename(bool)" value="negate">
							<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
								<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
							</init>
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math.ci:487">
							<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -result;">
								<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := -result">
									<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
									</left>
									<right token="-" type="float64" kind="static const typename(f64)" value="-result">
										<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
										</right>
									</right>
								</expr>
							</stmt>
						</then>
					</stmt>
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
						<expr token=":=" type="float64" kind="static const typename(f64)" value=".result := result">
							<left token=".variable" type="float64" kind="static const typename(f64)" value=".result">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="result">
							</right>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="(pi / (2) - asin(x))">
					<push token="-" type="float64" kind="static const typename(f64)" value="pi / (2) - asin(x)">
						<left token="/" type="float64" kind="static const typename(f64)" value="pi / (2)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</right>
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="asin(x)">
							<push token=".variable" type="float64" kind="static const typename(f64)" value="x">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="asin">
							</call>
						</right>
					</push>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="float64(degrees * pi / (180))">
					<push token="/" type="float64" kind="static const typename(f64)" value="degrees * pi / (180)">
						<left token="*" type="float64" kind="static const typename(f64)" value="degrees * pi">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</right>
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="(180)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="180" />
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</call>
				</init>
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
				<init token="()" type="float64" kind="static const typename(f64)" value="float64(radians * (180) / pi)">
					<push token="/" type="float64" kind="static const typename(f64)" value="radians * (180) / pi">
						<left token="*" type="float64" kind="static const typename(f64)" value="radians * (180)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="radians">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(180)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="180" />
							</right>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</call>
				</init>
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Complex">
			<field token=".variable" type="float64" kind="static const typename(f64)" value="re">
			</field>
			<field token=".variable" type="float64" kind="static const typename(f64)" value="im">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="Complex(re: float64): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Complex.ci:24">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := re;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := re">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
									</right>
								</expr>
							</stmt>
							<stmt token=":=" type="void" kind="static const typename(void)" value=".result.im := (0)">
								<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
									<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
									</right>
								</left>
								<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</right>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="Complex(re: float64, im: float64): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Complex.ci:31">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := re;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := re">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := im;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := im">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="neg(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(emit(struct(a), neg.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), neg.p2d)">
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="neg.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="neg">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Complex">
					<field token=".variable" type="float64" kind="static const typename(f64)" value="re">
					</field>
					<field token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: Complex, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(emit(struct(a), struct(b), add.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), add.p2d)">
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="add.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="add">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Complex">
					<field token=".variable" type="float64" kind="static const typename(f64)" value="re">
					</field>
					<field token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re + b, a.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a.re + b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="a.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a + b.re, b.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a + b.re">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="b.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: Complex, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(emit(struct(a), struct(b), sub.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), sub.p2d)">
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="sub.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="sub">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Complex">
					<field token=".variable" type="float64" kind="static const typename(f64)" value="re">
					</field>
					<field token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re - b, a.im)">
				<push token="-" type="float64" kind="static const typename(f64)" value="a.re - b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="a.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a - b.re, b.im)">
				<push token="-" type="float64" kind="static const typename(f64)" value="a - b.re">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="b.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: Complex, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64)">
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="int32" kind="static const typename(i32)" value="swz.x2">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="swz">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="x2">
						</right>
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="mul.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="mul">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<push token="." type="float64" kind="static const typename(f64)" value="add.f64">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="add">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="f64">
						</right>
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="mul.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="mul">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<push token="." type="int32" kind="static const typename(i32)" value="swz.x2">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="swz">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="x2">
						</right>
					</push>
					<push token="." type="float64" kind="static const typename(f64)" value="sub.f64">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="sub">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="f64">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Complex">
					<field token=".variable" type="float64" kind="static const typename(f64)" value="re">
					</field>
					<field token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re * b, a.im * b)">
				<push token="*" type="float64" kind="static const typename(f64)" value="a.re * b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="a.im * b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
						</right>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a * b.re, a * b.im)">
				<push token="*" type="float64" kind="static const typename(f64)" value="a * b.re">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="a * b.im">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a">
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
						</right>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="div(a: Complex, b: Complex): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Complex.ci:86">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (Math.abs(b.re) &gt;= Math.abs(b.im))">
					<test token="&gt;=" type="bool" kind="static const typename(bool)" value="Math.abs(b.re) &gt;= Math.abs(b.im)">
						<left token="()" type="float64" kind="static const typename(f64)" value="Math.abs(b.re)">
							<push token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
									<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
								</right>
							</call>
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="Math.abs(b.im)">
							<push token="." type="float64" kind="static const typename(f64)" value="b.im">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
									<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
								</right>
							</call>
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Complex.ci:90">
						<stmt token=".variable" type="float64" kind="static const typename(f64)" value="r">
							<init token="/" type="float64" kind="static const typename(f64)" value="b.im / b.re">
								<left token="." type="float64" kind="static const typename(f64)" value="b.im">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
									</right>
								</left>
								<right token="." type="float64" kind="static const typename(f64)" value="b.re">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
									</right>
								</right>
							</init>
						</stmt>
						<stmt token=".variable" type="float64" kind="static const typename(f64)" value="den">
							<init token="+" type="float64" kind="static const typename(f64)" value="b.re + r * b.im">
								<left token="." type="float64" kind="static const typename(f64)" value="b.re">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
									</right>
								</left>
								<right token="*" type="float64" kind="static const typename(f64)" value="r * b.im">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="r">
									</left>
									<right token="." type="float64" kind="static const typename(f64)" value="b.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
										</right>
									</right>
								</right>
							</init>
						</stmt>
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
							<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
								<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
								</left>
								<right token="{}" type="void" kind="static const typename(void)">
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := (a.re + r * a.im) / den;">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := (a.re + r * a.im) / den">
											<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
												<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
												</right>
											</left>
											<right token="/" type="float64" kind="static const typename(f64)" value="(a.re + r * a.im) / den">
												<left token="()" type="float64" kind="static const typename(f64)" value="(a.re + r * a.im)">
													<push token="+" type="float64" kind="static const typename(f64)" value="a.re + r * a.im">
														<left token="." type="float64" kind="static const typename(f64)" value="a.re">
															<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
															</right>
														</left>
														<right token="*" type="float64" kind="static const typename(f64)" value="r * a.im">
															<left token=".variable" type="float64" kind="static const typename(f64)" value="r">
															</left>
															<right token="." type="float64" kind="static const typename(f64)" value="a.im">
																<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
																</left>
																<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
																</right>
															</right>
														</right>
													</push>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="den">
												</right>
											</right>
										</expr>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := (a.im - r * a.re) / den;">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := (a.im - r * a.re) / den">
											<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
												<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
												</right>
											</left>
											<right token="/" type="float64" kind="static const typename(f64)" value="(a.im - r * a.re) / den">
												<left token="()" type="float64" kind="static const typename(f64)" value="(a.im - r * a.re)">
													<push token="-" type="float64" kind="static const typename(f64)" value="a.im - r * a.re">
														<left token="." type="float64" kind="static const typename(f64)" value="a.im">
															<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
															</left>
															<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
															</right>
														</left>
														<right token="*" type="float64" kind="static const typename(f64)" value="r * a.re">
															<left token=".variable" type="float64" kind="static const typename(f64)" value="r">
															</left>
															<right token="." type="float64" kind="static const typename(f64)" value="a.re">
																<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
																</left>
																<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
																</right>
															</right>
														</right>
													</push>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="den">
												</right>
											</right>
										</expr>
									</stmt>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="r">
					<init token="/" type="float64" kind="static const typename(f64)" value="b.re / b.im">
						<left token="." type="float64" kind="static const typename(f64)" value="b.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="b.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="den">
					<init token="+" type="float64" kind="static const typename(f64)" value="b.im + r * b.re">
						<left token="." type="float64" kind="static const typename(f64)" value="b.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="r * b.re">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="r">
							</left>
							<right token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</right>
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := (a.re * r + a.im) / den;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := (a.re * r + a.im) / den">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
										</right>
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="(a.re * r + a.im) / den">
										<left token="()" type="float64" kind="static const typename(f64)" value="(a.re * r + a.im)">
											<push token="+" type="float64" kind="static const typename(f64)" value="a.re * r + a.im">
												<left token="*" type="float64" kind="static const typename(f64)" value="a.re * r">
													<left token="." type="float64" kind="static const typename(f64)" value="a.re">
														<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
														</left>
														<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
														</right>
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="r">
													</right>
												</left>
												<right token="." type="float64" kind="static const typename(f64)" value="a.im">
													<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
													</right>
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="den">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := (a.im * r - a.re) / den;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := (a.im * r - a.re) / den">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
										</right>
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="(a.im * r - a.re) / den">
										<left token="()" type="float64" kind="static const typename(f64)" value="(a.im * r - a.re)">
											<push token="-" type="float64" kind="static const typename(f64)" value="a.im * r - a.re">
												<left token="*" type="float64" kind="static const typename(f64)" value="a.im * r">
													<left token="." type="float64" kind="static const typename(f64)" value="a.im">
														<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
														</left>
														<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
														</right>
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="r">
													</right>
												</left>
												<right token="." type="float64" kind="static const typename(f64)" value="a.re">
													<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
													</right>
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="den">
										</right>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="div(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(a, Complex(b))">
				<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="Complex(b)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="b">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="div(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(Complex(a), b)">
				<push token="()" type="Complex" kind="static const typename(val)" value="Complex(a)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
					</call>
				</push>
				<push token=".variable" type="Complex" kind="static const typename(val)" value="b">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abs(a: Complex): float64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sqrt(a.re * a.re + a.im * a.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a.re * a.re + a.im * a.im">
					<left token="*" type="float64" kind="static const typename(f64)" value="a.re * a.re">
						<left token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</right>
					</left>
					<right token="*" type="float64" kind="static const typename(f64)" value="a.im * a.im">
						<left token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</right>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="arg(a: Complex): float64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(a.re, a.im)">
				<push token="." type="float64" kind="static const typename(f64)" value="a.re">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="a.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="atan2">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="inv(a: Complex): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Complex.ci:117">
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="d">
					<init token="+" type="float64" kind="static const typename(f64)" value="a.re * a.re + a.im * a.im">
						<left token="*" type="float64" kind="static const typename(f64)" value="a.re * a.re">
							<left token="." type="float64" kind="static const typename(f64)" value="a.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</left>
							<right token="." type="float64" kind="static const typename(f64)" value="a.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</right>
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="a.im * a.im">
							<left token="." type="float64" kind="static const typename(f64)" value="a.im">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
								</right>
							</left>
							<right token="." type="float64" kind="static const typename(f64)" value="a.im">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
								</right>
							</right>
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := +a.re / d;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := +a.re / d">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
										</right>
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="+a.re / d">
										<left token="+" type="float64" kind="static const typename(f64)" value="+a.re">
											<right token="." type="float64" kind="static const typename(f64)" value="a.re">
												<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
												</right>
											</right>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="d">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := -a.im / d;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := -a.im / d">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
										</right>
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="-a.im / d">
										<left token="-" type="float64" kind="static const typename(f64)" value="-a.im">
											<right token="." type="float64" kind="static const typename(f64)" value="a.im">
												<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
												</right>
											</right>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="d">
										</right>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="conj(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re, -a.im)">
				<push token="." type="float64" kind="static const typename(f64)" value="a.re">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
					</right>
				</push>
				<push token="-" type="float64" kind="static const typename(f64)" value="-a.im">
					<right token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
						</right>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="exp(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.exp(a.re) * float64.cos(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
							</right>
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
							</right>
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.exp(a.re) * float64.sin(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
							</right>
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
							</right>
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="log(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.log(abs(a)), arg(a))">
				<push token="()" type="float64" kind="static const typename(f64)" value="float64.log(abs(a))">
					<push token="()" type="float64" kind="static const typename(f64)" value="abs(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="abs">
						</call>
					</push>
					<call token="." type="function" kind="static const typename(ref)" value="float64.log">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
							<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
							</field>
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="log">
						</right>
					</call>
				</push>
				<push token="()" type="float64" kind="static const typename(f64)" value="arg(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="arg">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="pow(a: Complex, b: Complex): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Complex.ci:135">
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="r">
					<init token="()" type="float64" kind="static const typename(f64)" value="abs(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="abs">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="t">
					<init token="()" type="float64" kind="static const typename(f64)" value="arg(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="arg">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="u">
					<init token="+" type="float64" kind="static const typename(f64)" value="b.re * t + b.im * float64.log(r)">
						<left token="*" type="float64" kind="static const typename(f64)" value="b.re * t">
							<left token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="t">
							</right>
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="b.im * float64.log(r)">
							<left token="." type="float64" kind="static const typename(f64)" value="b.im">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
								</right>
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="float64.log(r)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="r">
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="float64.log">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
										<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
										</field>
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="log">
									</right>
								</call>
							</right>
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="v">
					<init token="*" type="float64" kind="static const typename(f64)" value="float64.pow(r, b.re) * float64.exp(-b.im * t)">
						<left token="()" type="float64" kind="static const typename(f64)" value="float64.pow(r, b.re)">
							<push token=".variable" type="float64" kind="static const typename(f64)" value="r">
							</push>
							<push token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.pow">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="pow">
								</right>
							</call>
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="float64.exp(-b.im * t)">
							<push token="*" type="float64" kind="static const typename(f64)" value="-b.im * t">
								<left token="-" type="float64" kind="static const typename(f64)" value="-b.im">
									<right token="." type="float64" kind="static const typename(f64)" value="b.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value="b">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
										</right>
									</right>
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="t">
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
								</right>
							</call>
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := v * float64.cos(u);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := v * float64.cos(u)">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
										</right>
									</left>
									<right token="*" type="float64" kind="static const typename(f64)" value="v * float64.cos(u)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="v">
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(u)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="u">
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
												</right>
											</call>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := v * float64.sin(u);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := v * float64.sin(u)">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
										</right>
									</left>
									<right token="*" type="float64" kind="static const typename(f64)" value="v * float64.sin(u)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="v">
										</left>
										<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(u)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="u">
											</push>
											<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
													<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
													</field>
													<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
													</field>
												</left>
												<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
												</right>
											</call>
										</right>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="pow(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="pow(a, Complex(b))">
				<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="Complex(b)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="b">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="pow">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sin(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.sin(a.re) * Math.cosh(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.sin(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
							</right>
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.cosh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.cosh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
								<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="cosh">
							</right>
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="+float64.cos(a.re) * Math.sinh(a.im)">
					<left token="+" type="float64" kind="static const typename(f64)" value="+float64.cos(a.re)">
						<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(a.re)">
							<push token="." type="float64" kind="static const typename(f64)" value="a.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
								</right>
							</call>
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.sinh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.sinh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
								<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="sinh">
							</right>
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cos(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.cos(a.re) * Math.cosh(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.cos(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
							</right>
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.cosh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.cosh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
								<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="cosh">
							</right>
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="-float64.sin(a.re) * Math.sinh(a.im)">
					<left token="-" type="float64" kind="static const typename(f64)" value="-float64.sin(a.re)">
						<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(a.re)">
							<push token="." type="float64" kind="static const typename(f64)" value="a.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
								</right>
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
								</right>
							</call>
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.sinh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.sinh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
								<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="sinh">
							</right>
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="tan(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(sin(a), cos(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sin(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sin">
					</call>
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="cos(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="cos">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cot(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(cos(a), sin(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="cos(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="cos">
					</call>
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="sin(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sin">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sinh(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(sub(exp(a), exp(neg(a))), 2)">
				<push token="()" type="Complex" kind="static const typename(val)" value="sub(exp(a), exp(neg(a)))">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(neg(a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="neg(a)">
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="neg">
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sub">
					</call>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cosh(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(add(exp(a), exp(neg(a))), 2)">
				<push token="()" type="Complex" kind="static const typename(val)" value="add(exp(a), exp(neg(a)))">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(neg(a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="neg(a)">
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="neg">
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="add">
					</call>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="tanh(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sub(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul">
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sub">
					</call>
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="add(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul">
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="add">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="coth(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))">
				<push token="()" type="Complex" kind="static const typename(val)" value="add(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul">
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="add">
					</call>
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="sub(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul">
							</call>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp">
						</call>
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sub">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sec(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(cos(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="cos(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="cos">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="csc(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(sin(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sin(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sin">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sech(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(cosh(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="cosh(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="cosh">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="csch(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(sinh(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sinh(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sinh">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="toCartesian(x: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="x.re * float64.cos(x.im)">
					<left token="." type="float64" kind="static const typename(f64)" value="x.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="x">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(x.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="x.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="x">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
							</right>
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="x.re * float64.sin(x.im)">
					<left token="." type="float64" kind="static const typename(f64)" value="x.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="x">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(x.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="x.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="x">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
							</right>
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="toPolar(x: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(abs(x), arg(x))">
				<push token="()" type="float64" kind="static const typename(f64)" value="abs(x)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="x">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</call>
				</push>
				<push token="()" type="float64" kind="static const typename(f64)" value="arg(x)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="x">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="arg">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="vec4f">
			<field token=".variable" type="float32[4]" kind="static typename(arr)" value="data">
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
			</field>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="vec4f(x: float32, y: float32, z: float32, w: float32): vec4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Vector4f.ci:26">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="vec4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x := x;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x := x">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x">
										<left token=".variable" type="vec4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y := y;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y := y">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y">
										<left token=".variable" type="vec4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z := z;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z := z">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z">
										<left token=".variable" type="vec4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w := w;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w := w">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w">
										<left token=".variable" type="vec4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="vec4f(x: float32, y: float32, z: float32): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(x, y, z, 1.000000)">
				<push token=".variable" type="float32" kind="static const typename(f32)" value="x">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="y">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="z">
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="vec4f(x: float32, y: float32): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(x, y, 0.000000, 1.000000)">
				<push token=".variable" type="float32" kind="static const typename(f32)" value="x">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="y">
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="vec4f(xyz: vec4f, w: float32): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(xyz.x, xyz.y, xyz.z, w)">
				<push token="." type="float32" kind="static const typename(f32)" value="xyz.x">
					<left token=".variable" type="vec4f" kind="static const typename(val)" value="xyz">
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
					</right>
				</push>
				<push token="." type="float32" kind="static const typename(f32)" value="xyz.y">
					<left token=".variable" type="vec4f" kind="static const typename(val)" value="xyz">
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
					</right>
				</push>
				<push token="." type="float32" kind="static const typename(f32)" value="xyz.z">
					<left token=".variable" type="vec4f" kind="static const typename(val)" value="xyz">
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
					</right>
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="w">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="vec4f(val: float32): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(val, val, val, val)">
				<push token=".variable" type="float32" kind="static const typename(f32)" value="val">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="val">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="val">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="val">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="neg(rhs: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(emit(struct(rhs), neg.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(rhs), neg.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="neg.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="neg">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec4f">
					<field token=".variable" type="float32[4]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(lhs: vec4f, rhs: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(emit(struct(lhs), struct(rhs), add.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), add.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="add.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="add">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec4f">
					<field token=".variable" type="float32[4]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(lhs: vec4f, rhs: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(emit(struct(lhs), struct(rhs), sub.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), sub.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="sub.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="sub">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec4f">
					<field token=".variable" type="float32[4]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(lhs: vec4f, rhs: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(emit(struct(lhs), struct(rhs), mul.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), mul.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="mul.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="mul">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec4f">
					<field token=".variable" type="float32[4]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="div(lhs: vec4f, rhs: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(emit(struct(lhs), struct(rhs), div.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), div.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="div.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="div">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec4f">
					<field token=".variable" type="float32[4]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(lhs: vec4f, rhs: vec4f): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32(emit(struct(lhs), struct(rhs), min.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), min.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="min.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="min">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="max(lhs: vec4f, rhs: vec4f): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32(emit(struct(lhs), struct(rhs), max.p4f))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), max.p4f)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="max.p4f">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="max">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p4f">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dp3(lhs: vec4f, rhs: vec4f): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32(emit(struct(lhs), struct(rhs), p4x.dp3))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), p4x.dp3)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="float32" kind="static const typename(f32)" value="p4x.dp3">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="p4x">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="dp3">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dph(lhs: vec4f, rhs: vec4f): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32(emit(struct(lhs), struct(rhs), p4x.dph))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), p4x.dph)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="float32" kind="static const typename(f32)" value="p4x.dph">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="p4x">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="dph">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dp4(lhs: vec4f, rhs: vec4f): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32(emit(struct(lhs), struct(rhs), p4x.dp4))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(lhs), struct(rhs), p4x.dp4)">
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(lhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="lhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec4f" kind="static const typename(val)" value="struct(rhs)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="float32" kind="static const typename(f32)" value="p4x.dp4">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="p4x">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="dp4">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cross(a: vec4f, b: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)">
				<push token="-" type="float32" kind="static const typename(f32)" value="a.y * b.z - a.z * b.y">
					<left token="*" type="float32" kind="static const typename(f32)" value="a.y * b.z">
						<left token="." type="float32" kind="static const typename(f32)" value="a.y">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
							</right>
						</left>
						<right token="." type="float32" kind="static const typename(f32)" value="b.z">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
							</right>
						</right>
					</left>
					<right token="*" type="float32" kind="static const typename(f32)" value="a.z * b.y">
						<left token="." type="float32" kind="static const typename(f32)" value="a.z">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
							</right>
						</left>
						<right token="." type="float32" kind="static const typename(f32)" value="b.y">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
							</right>
						</right>
					</right>
				</push>
				<push token="-" type="float32" kind="static const typename(f32)" value="a.z * b.x - a.x * b.z">
					<left token="*" type="float32" kind="static const typename(f32)" value="a.z * b.x">
						<left token="." type="float32" kind="static const typename(f32)" value="a.z">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
							</right>
						</left>
						<right token="." type="float32" kind="static const typename(f32)" value="b.x">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</right>
					</left>
					<right token="*" type="float32" kind="static const typename(f32)" value="a.x * b.z">
						<left token="." type="float32" kind="static const typename(f32)" value="a.x">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</left>
						<right token="." type="float32" kind="static const typename(f32)" value="b.z">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
							</right>
						</right>
					</right>
				</push>
				<push token="-" type="float32" kind="static const typename(f32)" value="a.x * b.y - a.y * b.x">
					<left token="*" type="float32" kind="static const typename(f32)" value="a.x * b.y">
						<left token="." type="float32" kind="static const typename(f32)" value="a.x">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</left>
						<right token="." type="float32" kind="static const typename(f32)" value="b.y">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
							</right>
						</right>
					</left>
					<right token="*" type="float32" kind="static const typename(f32)" value="a.y * b.x">
						<left token="." type="float32" kind="static const typename(f32)" value="a.y">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="a">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
							</right>
						</left>
						<right token="." type="float32" kind="static const typename(f32)" value="b.x">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="b">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</right>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="length(v: vec4f): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sqrt(dp3(v, v))">
				<push token="()" type="float32" kind="static const typename(f32)" value="dp3(v, v)">
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="v">
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="v">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp3">
					</call>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="normalize(v: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="div(v, vec4f(length(v)))">
				<push token=".variable" type="vec4f" kind="static const typename(val)" value="v">
				</push>
				<push token="()" type="vec4f" kind="static const typename(val)" value="vec4f(length(v))">
					<push token="()" type="float32" kind="static const typename(f32)" value="length(v)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="v">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="length">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="eval(v: vec4f, x: float32): float32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32((((v.w * x + v.z) * x + v.y) * x) + v.x)">
				<push token="+" type="float32" kind="static const typename(f32)" value="(((v.w * x + v.z) * x + v.y) * x) + v.x">
					<left token="()" type="float32" kind="static const typename(f32)" value="(((v.w * x + v.z) * x + v.y) * x)">
						<push token="*" type="float32" kind="static const typename(f32)" value="((v.w * x + v.z) * x + v.y) * x">
							<left token="()" type="float32" kind="static const typename(f32)" value="((v.w * x + v.z) * x + v.y)">
								<push token="+" type="float32" kind="static const typename(f32)" value="(v.w * x + v.z) * x + v.y">
									<left token="*" type="float32" kind="static const typename(f32)" value="(v.w * x + v.z) * x">
										<left token="()" type="float32" kind="static const typename(f32)" value="(v.w * x + v.z)">
											<push token="+" type="float32" kind="static const typename(f32)" value="v.w * x + v.z">
												<left token="*" type="float32" kind="static const typename(f32)" value="v.w * x">
													<left token="." type="float32" kind="static const typename(f32)" value="v.w">
														<left token=".variable" type="vec4f" kind="static const typename(val)" value="v">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
														</right>
													</left>
													<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
													</right>
												</left>
												<right token="." type="float32" kind="static const typename(f32)" value="v.z">
													<left token=".variable" type="vec4f" kind="static const typename(val)" value="v">
													</left>
													<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
													</right>
												</right>
											</push>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="v.y">
										<left token=".variable" type="vec4f" kind="static const typename(val)" value="v">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</right>
								</push>
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</push>
					</left>
					<right token="." type="float32" kind="static const typename(f32)" value="v.x">
						<left token=".variable" type="vec4f" kind="static const typename(val)" value="v">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
						</right>
					</right>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mat4f">
			<field token=".variable" type="float32[16]" kind="static typename(arr)" value="data">
			</field>
			<field token=".variable" type="float32[4][4]" kind="static typename(arr)" value="m">
			</field>
			<field token=".variable" type="vec4f[4]" kind="static typename(arr)" value="v">
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
			</field>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:65">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.x := xx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.x := xx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="xx">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.y := xy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.y := xy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="xy">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.z := xz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.z := xz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="xz">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.w := xw;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.w := xw">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="xw">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.x := yx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.x := yx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="yx">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.y := yy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.y := yy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="yy">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.z := yz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.z := yz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="yz">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.w := yw;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.w := yw">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="yw">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.x := zx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.x := zx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="zx">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.y := zy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.y := zy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="zy">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.z := zz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.z := zz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.w := zw;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.w := zw">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="zw">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.x := wx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.x := wx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="wx">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.y := wy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.y := wy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="wy">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.z := wz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.z := wz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="wz">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.w := ww;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.w := ww">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token=".variable" type="float32" kind="static const typename(f32)" value="ww">
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:75">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x := x;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x := x">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
										</right>
									</left>
									<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y := y;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y := y">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
										</right>
									</left>
									<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z := z;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z := z">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
										</right>
									</left>
									<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w := w;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w := w">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
										</right>
									</left>
									<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dp3(mat: mat4f, vec: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)">
				<push token="()" type="float32" kind="static const typename(f32)" value="dp3(mat.x, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.x">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp3">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dp3(mat.y, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.y">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp3">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dp3(mat.z, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.z">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp3">
					</call>
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dph(mat: mat4f, vec: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))">
				<push token="()" type="float32" kind="static const typename(f32)" value="dph(mat.x, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.x">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dph">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dph(mat.y, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.y">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dph">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dph(mat.z, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.z">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dph">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dph(mat.w, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.w">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dph">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dp4(mat: mat4f, vec: vec4f): vec4f">
			<init token="()" type="vec4f" kind="static const typename(val)" value="vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))">
				<push token="()" type="float32" kind="static const typename(f32)" value="dp4(mat.x, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.x">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dp4(mat.y, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.y">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dp4(mat.z, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.z">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
					</call>
				</push>
				<push token="()" type="float32" kind="static const typename(f32)" value="dp4(mat.w, vec)">
					<push token="." type="vec4f" kind="static const typename(val)" value="mat.w">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
						</left>
						<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
						</right>
					</push>
					<push token=".variable" type="vec4f" kind="static const typename(val)" value="vec">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="transpose(mat: mat4f): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:87">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xx := mat.xx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xx := mat.xx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xx">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.xx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xx">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xy := mat.yx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xy := mat.yx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xy">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.yx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yx">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xz := mat.zx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xz := mat.zx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xz">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.zx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zx">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xw := mat.wx;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xw := mat.wx">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xw">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.wx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="wx">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yx := mat.xy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yx := mat.xy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yx">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.xy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xy">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yy := mat.yy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yy := mat.yy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yy">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.yy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yy">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yz := mat.zy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yz := mat.zy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yz">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.zy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zy">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yw := mat.wy;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yw := mat.wy">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yw">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.wy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="wy">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zx := mat.xz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zx := mat.xz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zx">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.xz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xz">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zy := mat.yz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zy := mat.yz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zy">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.yz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yz">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zz := mat.zz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zz := mat.zz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.zz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zw := mat.wz;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zw := mat.wz">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zw">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.wz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="wz">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.wx := mat.xw;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.wx := mat.xw">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.wx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="wx">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.xw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xw">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.wy := mat.yw;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.wy := mat.yw">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.wy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="wy">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.yw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yw">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.wz := mat.zw;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.wz := mat.zw">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.wz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="wz">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.zw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zw">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.ww := mat.ww;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.ww := mat.ww">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.ww">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="ww">
										</right>
									</left>
									<right token="." type="float32" kind="static const typename(f32)" value="mat.ww">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value="mat">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="ww">
										</right>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="mul(lhs: mat4f, rhs: mat4f): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:97">
				<stmt token=".variable" type="mat4f" kind="static const typename(val)" value="transposed">
					<init token="()" type="mat4f" kind="static const typename(val)" value="transpose(rhs)">
						<push token=".variable" type="mat4f" kind="static const typename(val)" value="rhs">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="transpose">
						</call>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x := dp4(transposed, lhs.x);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x := dp4(transposed, lhs.x)">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
										</right>
									</left>
									<right token="()" type="vec4f" kind="static const typename(val)" value="dp4(transposed, lhs.x)">
										<push token=".variable" type="mat4f" kind="static const typename(val)" value="transposed">
										</push>
										<push token="." type="vec4f" kind="static const typename(val)" value="lhs.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value="lhs">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y := dp4(transposed, lhs.y);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y := dp4(transposed, lhs.y)">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
										</right>
									</left>
									<right token="()" type="vec4f" kind="static const typename(val)" value="dp4(transposed, lhs.y)">
										<push token=".variable" type="mat4f" kind="static const typename(val)" value="transposed">
										</push>
										<push token="." type="vec4f" kind="static const typename(val)" value="lhs.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value="lhs">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z := dp4(transposed, lhs.z);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z := dp4(transposed, lhs.z)">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
										</right>
									</left>
									<right token="()" type="vec4f" kind="static const typename(val)" value="dp4(transposed, lhs.z)">
										<push token=".variable" type="mat4f" kind="static const typename(val)" value="transposed">
										</push>
										<push token="." type="vec4f" kind="static const typename(val)" value="lhs.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value="lhs">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w := dp4(transposed, lhs.w);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w := dp4(transposed, lhs.w)">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
										</right>
									</left>
									<right token="()" type="vec4f" kind="static const typename(val)" value="dp4(transposed, lhs.w)">
										<push token=".variable" type="mat4f" kind="static const typename(val)" value="transposed">
										</push>
										<push token="." type="vec4f" kind="static const typename(val)" value="lhs.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value="lhs">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="dp4">
										</call>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="rotation(center: vec4f, direction: vec4f, angle: float32): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:111">
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="len">
					<init token="()" type="float32" kind="static const typename(f32)" value="length(direction)">
						<push token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="length">
						</call>
					</init>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((len) &lt; 0.000000)">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="(len) &lt; 0.000000">
						<left token="()" type="float64" kind="static const typename(f64)" value="(len)">
							<push token=".variable" type="float32" kind="static const typename(f32)" value="len">
							</push>
						</left>
						<right token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:113">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;invalid direction of rotation&quot;, direction);">
							<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;invalid direction of rotation&quot;, direction)">
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;invalid direction of rotation&quot;" />
								<push token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
								</call>
							</expr>
						</stmt>
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
							<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
								<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
								</left>
								<right token="{}" type="void" kind="static const typename(void)">
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x := vec4f(0, 0, 0, 0);">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.x := vec4f(0, 0, 0, 0)">
											<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
												<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
												</left>
												<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
												</right>
											</left>
											<right token="()" type="vec4f" kind="static const typename(val)" value="vec4f(0, 0, 0, 0)">
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
												</call>
											</right>
										</expr>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y := vec4f(0, 0, 0, 0);">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.y := vec4f(0, 0, 0, 0)">
											<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
												<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
												</left>
												<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
												</right>
											</left>
											<right token="()" type="vec4f" kind="static const typename(val)" value="vec4f(0, 0, 0, 0)">
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
												</call>
											</right>
										</expr>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z := vec4f(0, 0, 0, 0);">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.z := vec4f(0, 0, 0, 0)">
											<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
												<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
												</left>
												<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
												</right>
											</left>
											<right token="()" type="vec4f" kind="static const typename(val)" value="vec4f(0, 0, 0, 0)">
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
												</call>
											</right>
										</expr>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w := vec4f(0, 0, 0, 0);">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.w := vec4f(0, 0, 0, 0)">
											<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
												<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
												</left>
												<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
												</right>
											</left>
											<right token="()" type="vec4f" kind="static const typename(val)" value="vec4f(0, 0, 0, 0)">
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
												<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
												</call>
											</right>
										</expr>
									</stmt>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="x">
					<init token="/" type="float32" kind="static const typename(f32)" value="direction.x / len">
						<left token="." type="float32" kind="static const typename(f32)" value="direction.x">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
							</right>
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="len">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="y">
					<init token="/" type="float32" kind="static const typename(f32)" value="direction.y / len">
						<left token="." type="float32" kind="static const typename(f32)" value="direction.y">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
							</right>
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="len">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="z">
					<init token="/" type="float32" kind="static const typename(f32)" value="direction.z / len">
						<left token="." type="float32" kind="static const typename(f32)" value="direction.z">
							<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
							</right>
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="len">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="cx">
					<init token="." type="float32" kind="static const typename(f32)" value="center.x">
						<left token=".variable" type="vec4f" kind="static const typename(val)" value="center">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="cy">
					<init token="." type="float32" kind="static const typename(f32)" value="center.y">
						<left token=".variable" type="vec4f" kind="static const typename(val)" value="center">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="cz">
					<init token="." type="float32" kind="static const typename(f32)" value="center.z">
						<left token=".variable" type="vec4f" kind="static const typename(val)" value="center">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="xx">
					<init token="*" type="float32" kind="static const typename(f32)" value="x * x">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="xy">
					<init token="*" type="float32" kind="static const typename(f32)" value="x * y">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="xz">
					<init token="*" type="float32" kind="static const typename(f32)" value="x * z">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="yy">
					<init token="*" type="float32" kind="static const typename(f32)" value="y * y">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="y">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="yz">
					<init token="*" type="float32" kind="static const typename(f32)" value="y * z">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="y">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="zz">
					<init token="*" type="float32" kind="static const typename(f32)" value="z * z">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="z">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="s">
					<init token="()" type="float32" kind="static const typename(f32)" value="float32.sin(angle)">
						<push token=".variable" type="float32" kind="static const typename(f32)" value="angle">
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float32.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
							</right>
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="c">
					<init token="()" type="float32" kind="static const typename(f32)" value="float32.cos(angle)">
						<push token=".variable" type="float32" kind="static const typename(f32)" value="angle">
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float32.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
								<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
							</right>
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="float32" kind="static const typename(f32)" value="k">
					<init token="-" type="float32" kind="static const typename(f32)" value="(1) - c">
						<left token="()" type="float32" kind="static const typename(f32)" value="(1)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="c">
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xx := xx + (yy + zz) * c;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xx := xx + (yy + zz) * c">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xx">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="xx + (yy + zz) * c">
										<left token=".variable" type="float32" kind="static const typename(f32)" value="xx">
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="(yy + zz) * c">
											<left token="()" type="float32" kind="static const typename(f32)" value="(yy + zz)">
												<push token="+" type="float32" kind="static const typename(f32)" value="yy + zz">
													<left token=".variable" type="float32" kind="static const typename(f32)" value="yy">
													</left>
													<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="c">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xy := xy * k - z * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xy := xy * k - z * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xy">
										</right>
									</left>
									<right token="-" type="float32" kind="static const typename(f32)" value="xy * k - z * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="xy * k">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="xy">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="z * s">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="z">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xz := xz * k + y * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xz := xz * k + y * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xz">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="xz * k + y * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="xz * k">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="xz">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="y * s">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="y">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.xw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="xw">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="(cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="(cx * (yy + zz) - x * (cy * y + cz * z)) * k">
											<left token="()" type="float32" kind="static const typename(f32)" value="(cx * (yy + zz) - x * (cy * y + cz * z))">
												<push token="-" type="float32" kind="static const typename(f32)" value="cx * (yy + zz) - x * (cy * y + cz * z)">
													<left token="*" type="float32" kind="static const typename(f32)" value="cx * (yy + zz)">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cx">
														</left>
														<right token="()" type="float32" kind="static const typename(f32)" value="(yy + zz)">
															<push token="+" type="float32" kind="static const typename(f32)" value="yy + zz">
																<left token=".variable" type="float32" kind="static const typename(f32)" value="yy">
																</left>
																<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
																</right>
															</push>
														</right>
													</left>
													<right token="*" type="float32" kind="static const typename(f32)" value="x * (cy * y + cz * z)">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
														</left>
														<right token="()" type="float32" kind="static const typename(f32)" value="(cy * y + cz * z)">
															<push token="+" type="float32" kind="static const typename(f32)" value="cy * y + cz * z">
																<left token="*" type="float32" kind="static const typename(f32)" value="cy * y">
																	<left token=".variable" type="float32" kind="static const typename(f32)" value="cy">
																	</left>
																	<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
																	</right>
																</left>
																<right token="*" type="float32" kind="static const typename(f32)" value="cz * z">
																	<left token=".variable" type="float32" kind="static const typename(f32)" value="cz">
																	</left>
																	<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
																	</right>
																</right>
															</push>
														</right>
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="(cy * z - cz * y) * s">
											<left token="()" type="float32" kind="static const typename(f32)" value="(cy * z - cz * y)">
												<push token="-" type="float32" kind="static const typename(f32)" value="cy * z - cz * y">
													<left token="*" type="float32" kind="static const typename(f32)" value="cy * z">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cy">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
														</right>
													</left>
													<right token="*" type="float32" kind="static const typename(f32)" value="cz * y">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cz">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
														</right>
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yx := xy * k + z * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yx := xy * k + z * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yx">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="xy * k + z * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="xy * k">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="xy">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="z * s">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="z">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yy := yy + (xx + zz) * c;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yy := yy + (xx + zz) * c">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yy">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="yy + (xx + zz) * c">
										<left token=".variable" type="float32" kind="static const typename(f32)" value="yy">
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="(xx + zz) * c">
											<left token="()" type="float32" kind="static const typename(f32)" value="(xx + zz)">
												<push token="+" type="float32" kind="static const typename(f32)" value="xx + zz">
													<left token=".variable" type="float32" kind="static const typename(f32)" value="xx">
													</left>
													<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="c">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yz := yz * k - x * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yz := yz * k - x * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yz">
										</right>
									</left>
									<right token="-" type="float32" kind="static const typename(f32)" value="yz * k - x * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="yz * k">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="yz">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="x * s">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.yw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="yw">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="(cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="(cy * (xx + zz) - y * (cx * x + cz * z)) * k">
											<left token="()" type="float32" kind="static const typename(f32)" value="(cy * (xx + zz) - y * (cx * x + cz * z))">
												<push token="-" type="float32" kind="static const typename(f32)" value="cy * (xx + zz) - y * (cx * x + cz * z)">
													<left token="*" type="float32" kind="static const typename(f32)" value="cy * (xx + zz)">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cy">
														</left>
														<right token="()" type="float32" kind="static const typename(f32)" value="(xx + zz)">
															<push token="+" type="float32" kind="static const typename(f32)" value="xx + zz">
																<left token=".variable" type="float32" kind="static const typename(f32)" value="xx">
																</left>
																<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
																</right>
															</push>
														</right>
													</left>
													<right token="*" type="float32" kind="static const typename(f32)" value="y * (cx * x + cz * z)">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="y">
														</left>
														<right token="()" type="float32" kind="static const typename(f32)" value="(cx * x + cz * z)">
															<push token="+" type="float32" kind="static const typename(f32)" value="cx * x + cz * z">
																<left token="*" type="float32" kind="static const typename(f32)" value="cx * x">
																	<left token=".variable" type="float32" kind="static const typename(f32)" value="cx">
																	</left>
																	<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
																	</right>
																</left>
																<right token="*" type="float32" kind="static const typename(f32)" value="cz * z">
																	<left token=".variable" type="float32" kind="static const typename(f32)" value="cz">
																	</left>
																	<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
																	</right>
																</right>
															</push>
														</right>
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="(cz * x - cx * z) * s">
											<left token="()" type="float32" kind="static const typename(f32)" value="(cz * x - cx * z)">
												<push token="-" type="float32" kind="static const typename(f32)" value="cz * x - cx * z">
													<left token="*" type="float32" kind="static const typename(f32)" value="cz * x">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cz">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
														</right>
													</left>
													<right token="*" type="float32" kind="static const typename(f32)" value="cx * z">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cx">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
														</right>
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zx := xz * k - y * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zx := xz * k - y * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zx">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zx">
										</right>
									</left>
									<right token="-" type="float32" kind="static const typename(f32)" value="xz * k - y * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="xz * k">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="xz">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="y * s">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="y">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zy := yz * k + x * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zy := yz * k + x * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zy">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zy">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="yz * k + x * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="yz * k">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="yz">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="x * s">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="x">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zz := zz + (xx + yy) * c;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zz := zz + (xx + yy) * c">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zz">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zz">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="zz + (xx + yy) * c">
										<left token=".variable" type="float32" kind="static const typename(f32)" value="zz">
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="(xx + yy) * c">
											<left token="()" type="float32" kind="static const typename(f32)" value="(xx + yy)">
												<push token="+" type="float32" kind="static const typename(f32)" value="xx + yy">
													<left token=".variable" type="float32" kind="static const typename(f32)" value="xx">
													</left>
													<right token=".variable" type="float32" kind="static const typename(f32)" value="yy">
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="c">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.zw">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="zw">
										</right>
									</left>
									<right token="+" type="float32" kind="static const typename(f32)" value="(cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s">
										<left token="*" type="float32" kind="static const typename(f32)" value="(cz * (xx + yy) - z * (cx * x + cy * y)) * k">
											<left token="()" type="float32" kind="static const typename(f32)" value="(cz * (xx + yy) - z * (cx * x + cy * y))">
												<push token="-" type="float32" kind="static const typename(f32)" value="cz * (xx + yy) - z * (cx * x + cy * y)">
													<left token="*" type="float32" kind="static const typename(f32)" value="cz * (xx + yy)">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cz">
														</left>
														<right token="()" type="float32" kind="static const typename(f32)" value="(xx + yy)">
															<push token="+" type="float32" kind="static const typename(f32)" value="xx + yy">
																<left token=".variable" type="float32" kind="static const typename(f32)" value="xx">
																</left>
																<right token=".variable" type="float32" kind="static const typename(f32)" value="yy">
																</right>
															</push>
														</right>
													</left>
													<right token="*" type="float32" kind="static const typename(f32)" value="z * (cx * x + cy * y)">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="z">
														</left>
														<right token="()" type="float32" kind="static const typename(f32)" value="(cx * x + cy * y)">
															<push token="+" type="float32" kind="static const typename(f32)" value="cx * x + cy * y">
																<left token="*" type="float32" kind="static const typename(f32)" value="cx * x">
																	<left token=".variable" type="float32" kind="static const typename(f32)" value="cx">
																	</left>
																	<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
																	</right>
																</left>
																<right token="*" type="float32" kind="static const typename(f32)" value="cy * y">
																	<left token=".variable" type="float32" kind="static const typename(f32)" value="cy">
																	</left>
																	<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
																	</right>
																</right>
															</push>
														</right>
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="k">
											</right>
										</left>
										<right token="*" type="float32" kind="static const typename(f32)" value="(cx * y - cy * x) * s">
											<left token="()" type="float32" kind="static const typename(f32)" value="(cx * y - cy * x)">
												<push token="-" type="float32" kind="static const typename(f32)" value="cx * y - cy * x">
													<left token="*" type="float32" kind="static const typename(f32)" value="cx * y">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cx">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
														</right>
													</left>
													<right token="*" type="float32" kind="static const typename(f32)" value="cy * x">
														<left token=".variable" type="float32" kind="static const typename(f32)" value="cy">
														</left>
														<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
														</right>
													</right>
												</push>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="s">
											</right>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w := vec4f(0, 0, 0, 1);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w := vec4f(0, 0, 0, 1)">
									<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
										<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
										</right>
									</left>
									<right token="()" type="vec4f" kind="static const typename(val)" value="vec4f(0, 0, 0, 1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
										</call>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rotation(direction: vec4f, angle: float32): mat4f">
			<init token="()" type="mat4f" kind="static const typename(val)" value="rotation(vec4f(0), direction, angle)">
				<push token="()" type="vec4f" kind="static const typename(val)" value="vec4f(0)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="vec4f">
					</call>
				</push>
				<push token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
				</push>
				<push token=".variable" type="float32" kind="static const typename(f32)" value="angle">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="rotation">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="translation(direction: vec4f, amount: float32): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:163">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.x := (1);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.x := (1)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.y := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.y := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.z := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.z := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.w := direction.x * amount;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.w := direction.x * amount">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="*" type="float32" kind="static const typename(f32)" value="direction.x * amount">
										<left token="." type="float32" kind="static const typename(f32)" value="direction.x">
											<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="amount">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.x := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.x := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.y := (1);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.y := (1)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.z := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.z := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.w := direction.y * amount;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.w := direction.y * amount">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="*" type="float32" kind="static const typename(f32)" value="direction.y * amount">
										<left token="." type="float32" kind="static const typename(f32)" value="direction.y">
											<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="amount">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.x := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.x := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.y := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.y := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.z := (1);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.z := (1)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.w := direction.z * amount;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.w := direction.z * amount">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="*" type="float32" kind="static const typename(f32)" value="direction.z * amount">
										<left token="." type="float32" kind="static const typename(f32)" value="direction.z">
											<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="amount">
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.x := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.x := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.y := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.y := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.z := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.z := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.w := (1);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.w := (1)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="scale(direction: vec4f, amount: float32): mat4f">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Matrix4f.ci:173">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rcp(val: float32): float32">
					<init token="?:" type="float32" kind="static const typename(f32)" value="((val &lt; (0) ? -val : val)) &lt; 0.000000 ? (0) : (1) / val">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="((val &lt; (0) ? -val : val)) &lt; 0.000000">
							<left token="()" type="float64" kind="static const typename(f64)" value="((val &lt; (0) ? -val : val))">
								<push token="()" type="float32" kind="static const typename(f32)" value="(val &lt; (0) ? -val : val)">
									<push token="?:" type="float32" kind="static const typename(f32)" value="val &lt; (0) ? -val : val">
										<test token="&lt;" type="bool" kind="static const typename(bool)" value="val &lt; (0)">
											<left token=".variable" type="float32" kind="static const typename(f32)" value="val">
											</left>
											<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
												<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
											</right>
										</test>
										<left token="-" type="float32" kind="static const typename(f32)" value="-val">
											<right token=".variable" type="float32" kind="static const typename(f32)" value="val">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="val">
										</right>
									</push>
								</push>
							</left>
							<right token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
						</test>
						<left token="()" type="float32" kind="static const typename(f32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</left>
						<right token="/" type="float32" kind="static const typename(f32)" value="(1) / val">
							<left token="()" type="float32" kind="static const typename(f32)" value="(1)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</left>
							<right token=".variable" type="float32" kind="static const typename(f32)" value="val">
							</right>
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.x := rcp(direction.x * amount);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.x := rcp(direction.x * amount)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="rcp(direction.x * amount)">
										<push token="*" type="float32" kind="static const typename(f32)" value="direction.x * amount">
											<left token="." type="float32" kind="static const typename(f32)" value="direction.x">
												<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
												</left>
												<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
												</right>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="amount">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="rcp">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.y := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.y := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.z := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.z := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x.w := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x.w := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.x.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.x">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="x">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.x := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.x := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.y := rcp(direction.y * amount);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.y := rcp(direction.y * amount)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="rcp(direction.y * amount)">
										<push token="*" type="float32" kind="static const typename(f32)" value="direction.y * amount">
											<left token="." type="float32" kind="static const typename(f32)" value="direction.y">
												<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
												</left>
												<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
												</right>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="amount">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="rcp">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.z := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.z := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y.w := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y.w := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.y.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.y">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="y">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.x := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.x := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.y := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.y := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.z := rcp(direction.z * amount);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.z := rcp(direction.z * amount)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="rcp(direction.z * amount)">
										<push token="*" type="float32" kind="static const typename(f32)" value="direction.z * amount">
											<left token="." type="float32" kind="static const typename(f32)" value="direction.z">
												<left token=".variable" type="vec4f" kind="static const typename(val)" value="direction">
												</left>
												<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
												</right>
											</left>
											<right token=".variable" type="float32" kind="static const typename(f32)" value="amount">
											</right>
										</push>
										<call token=".variable" type="function" kind="static const typename(ref)" value="rcp">
										</call>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.z.w := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.z.w := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.z.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.z">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="z">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.x := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.x := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.x">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="x">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.y := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.y := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.y">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="y">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.z := (0);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.z := (0)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.z">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="z">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(0)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.w.w := (1);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.w.w := (1)">
									<left token="." type="float32" kind="static const typename(f32)" value=".result.w.w">
										<left token="." type="vec4f" kind="static const typename(val)" value=".result.w">
											<left token=".variable" type="mat4f" kind="static const typename(val)" value=".result">
											</left>
											<right token=".variable" type="vec4f" kind="static const typename(val)" value="w">
											</right>
										</left>
										<right token=".variable" type="float32" kind="static const typename(f32)" value="w">
										</right>
									</left>
									<right token="()" type="float32" kind="static const typename(f32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
			<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
			</field>
			<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
			</field>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="vec2d(x: float64, y: float64): vec2d">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/math/Vector2d.ci:14">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="vec2d" kind="static const typename(val)" value=".result">
						</left>
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.x := x;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.x := x">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.x">
										<left token=".variable" type="vec2d" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.y := y;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.y := y">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.y">
										<left token=".variable" type="vec2d" kind="static const typename(val)" value=".result">
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
										</right>
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), add.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), add.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="add.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="add">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), sub.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), sub.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="sub.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="sub">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), mul.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), mul.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="mul.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="mul">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="div(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), div.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), div.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="div.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="div">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), min.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), min.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="min.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="min">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="max(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), max.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), max.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="emit.p4x" kind="static const typename(val)" value="max.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="max">
						</left>
						<right token=".variable" type="emit.p4x" kind="static const typename(val)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="ceq(a: vec2d, b: vec2d): vec2d">
			<init token="()" type="vec2d" kind="static const typename(val)" value="vec2d(emit(struct(a), struct(b), ceq.p2d))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(struct(a), struct(b), ceq.p2d)">
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(a)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="()" type="vec2d" kind="static const typename(val)" value="struct(b)">
						<push token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</push>
						<call token="struct" type="(null)" value="struct" />
					</push>
					<push token="." type="bool" kind="static const typename(bool)" value="ceq.p2d">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="ceq">
						</left>
						<right token=".variable" type="bool" kind="static const typename(bool)" value="p2d">
						</right>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="vec2d">
					<field token=".variable" type="float64[2]" kind="static typename(arr)" value="data">
					</field>
					<field token=".variable" type="typename" kind="static const typename(ref)" value="&lt;?&gt;">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="dot(a: vec2d, b: vec2d): float64">
			<init token="+" type="float64" kind="static const typename(f64)" value="a.x * b.x + a.y * b.y">
				<left token="*" type="float64" kind="static const typename(f64)" value="a.x * b.x">
					<left token="." type="float64" kind="static const typename(f64)" value="a.x">
						<left token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
						</right>
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.x">
						<left token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="x">
						</right>
					</right>
				</left>
				<right token="*" type="float64" kind="static const typename(f64)" value="a.y * b.y">
					<left token="." type="float64" kind="static const typename(f64)" value="a.y">
						<left token=".variable" type="vec2d" kind="static const typename(val)" value="a">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
						</right>
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.y">
						<left token=".variable" type="vec2d" kind="static const typename(val)" value="b">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="y">
						</right>
					</right>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="length(str: char[*]): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:4">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((str) == null)">
					<test token="==" type="bool" kind="static const typename(bool)" value="(str) == null">
						<left token="()" type="pointer" kind="static const typename(ref)" value="(str)">
							<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
							</push>
						</left>
						<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:5">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := 0;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := 0">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="result">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; str[result]; result := result + 1)">
					<test token="[]" type="char" kind="static const typename(i32)" value="str[result]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result">
						</right>
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="result := result + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="result">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="result + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="result">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := result">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="indexOf(str: char[*], chr: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:15">
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; str[i]; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="[]" type="char" kind="static const typename(i32)" value="str[i]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</right>
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:16">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (str[i] == chr)">
							<test token="==" type="bool" kind="static const typename(bool)" value="str[i] == chr">
								<left token="[]" type="char" kind="static const typename(i32)" value="str[i]">
									<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
									</right>
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="chr">
								</right>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:17">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := i;">
									<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := i">
										<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -1;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := -1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="-" type="int32" kind="static const typename(i32)" value="-1">
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="lastIndexOf(str: char[*], chr: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:25">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="result">
					<init token="-" type="int32" kind="static const typename(i32)" value="-1">
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</init>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; str[i]; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="[]" type="char" kind="static const typename(i32)" value="str[i]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</right>
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:27">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (str[i] == chr)">
							<test token="==" type="bool" kind="static const typename(bool)" value="str[i] == chr">
								<left token="[]" type="char" kind="static const typename(i32)" value="str[i]">
									<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
									</right>
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="chr">
								</right>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:28">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="result := i;">
									<expr token=":=" type="int32" kind="static const typename(i32)" value="result := i">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="result">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := result">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:36">
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; (with[i]) != 0; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="!=" type="bool" kind="static const typename(bool)" value="(with[i]) != 0">
						<left token="()" type="int32" kind="static const typename(i32)" value="(with[i])">
							<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
								<left token=".variable" type="char[*]" kind="static typename(arr)" value="with">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</right>
							</push>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:37">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (cmp(str[i], with[i]) != 0)">
							<test token="!=" type="bool" kind="static const typename(bool)" value="cmp(str[i], with[i]) != 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="cmp(str[i], with[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</push>
									<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="with">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="cmp">
									</call>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:38">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := false;">
									<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := false">
										<left token=".variable" type="bool" kind="static const typename(bool)" value=".result">
										</left>
										<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := true;">
					<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := true">
						<left token=".variable" type="bool" kind="static const typename(bool)" value=".result">
						</left>
						<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:46">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="withLen">
					<init token="()" type="int32" kind="static const typename(i32)" value="length(with)">
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="with">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="length">
						</call>
					</init>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="strLen">
					<init token="()" type="int32" kind="static const typename(i32)" value="length(str)">
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="length">
						</call>
					</init>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (strLen &lt; withLen)">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="strLen &lt; withLen">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="strLen">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="withLen">
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:49">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := false;">
							<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := false">
								<left token=".variable" type="bool" kind="static const typename(bool)" value=".result">
								</left>
								<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; withLen; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; withLen">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="withLen">
						</right>
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:52">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (cmp(str[strLen - withLen + i], with[i]) != 0)">
							<test token="!=" type="bool" kind="static const typename(bool)" value="cmp(str[strLen - withLen + i], with[i]) != 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="cmp(str[strLen - withLen + i], with[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[strLen - withLen + i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
										</left>
										<right token="+" type="int32" kind="static const typename(i32)" value="strLen - withLen + i">
											<left token="-" type="int32" kind="static const typename(i32)" value="strLen - withLen">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="strLen">
												</left>
												<right token=".variable" type="int32" kind="static const typename(i32)" value="withLen">
												</right>
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
											</right>
										</right>
									</push>
									<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="with">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="cmp">
									</call>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:53">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := false;">
									<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := false">
										<left token=".variable" type="bool" kind="static const typename(bool)" value=".result">
										</left>
										<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := true;">
					<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := true">
						<left token=".variable" type="bool" kind="static const typename(bool)" value=".result">
						</left>
						<right token=".variable" type="bool" kind="static const typename(bool)" value="true">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:61">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="result">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; result == 0; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="==" type="bool" kind="static const typename(bool)" value="result == 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="result">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:63">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="result := cmp(str[i], with[i]);">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="result := cmp(str[i], with[i])">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="result">
								</left>
								<right token="()" type="int32" kind="static const typename(i32)" value="cmp(str[i], with[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</push>
									<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="with">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="cmp">
									</call>
								</right>
							</expr>
						</stmt>
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((str[i]) == 0)">
							<test token="==" type="bool" kind="static const typename(bool)" value="(str[i]) == 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="(str[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</push>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:65">
								<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := result">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="ignCaseCmp(chr: char, with: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:73">
				<stmt token=".variable" type="function" kind="static const typename(ref)" value="ignCase(chr: char): char">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:74">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (chr &lt; &apos;A&apos;)">
							<test token="&lt;" type="bool" kind="static const typename(bool)" value="chr &lt; &apos;A&apos;">
								<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;A&apos;" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:75">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr;">
									<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr">
										<left token=".variable" type="char" kind="static const typename(i32)" value=".result">
										</left>
										<right token=".variable" type="char" kind="static const typename(i32)" value="chr">
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (chr &gt; &apos;Z&apos;)">
							<test token="&gt;" type="bool" kind="static const typename(bool)" value="chr &gt; &apos;Z&apos;">
								<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;Z&apos;" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:78">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr;">
									<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr">
										<left token=".variable" type="char" kind="static const typename(i32)" value=".result">
										</left>
										<right token=".variable" type="char" kind="static const typename(i32)" value="chr">
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - &apos;A&apos; + &apos;a&apos;;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - &apos;A&apos; + &apos;a&apos;">
								<left token=".variable" type="char" kind="static const typename(i32)" value=".result">
								</left>
								<right token="+" type="char" kind="static const typename(i32)" value="chr - &apos;A&apos; + &apos;a&apos;">
									<left token="-" type="char" kind="static const typename(i32)" value="chr - &apos;A&apos;">
										<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
										</left>
										<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;A&apos;" />
									</left>
									<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;a&apos;" />
								</right>
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := ignCase(chr) - ignCase(with);">
					<expr token=":=" type="char" kind="static const typename(i32)" value=".result := ignCase(chr) - ignCase(with)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="-" type="char" kind="static const typename(i32)" value="ignCase(chr) - ignCase(with)">
							<left token="()" type="char" kind="static const typename(i32)" value="ignCase(chr)">
								<push token=".variable" type="char" kind="static const typename(i32)" value="chr">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="ignCase">
								</call>
							</left>
							<right token="()" type="char" kind="static const typename(i32)" value="ignCase(with)">
								<push token=".variable" type="char" kind="static const typename(i32)" value="with">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="ignCase">
								</call>
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="caseCmp(chr: char, with: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:88">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
					<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
							<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
							</left>
							<right token=".variable" type="char" kind="static const typename(i32)" value="with">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="startsWith(str: char[*], with: char[*]): bool">
			<init token="()" type="bool" kind="static const typename(bool)" value="startsWith(str, with, caseCmp)">
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
				</push>
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="with">
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:88">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
								</left>
								<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
									</left>
									<right token=".variable" type="char" kind="static const typename(i32)" value="with">
									</right>
								</right>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="startsWith">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="endsWith(str: char[*], with: char[*]): bool">
			<init token="()" type="bool" kind="static const typename(bool)" value="endsWith(str, with, caseCmp)">
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
				</push>
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="with">
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:88">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
								</left>
								<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
									</left>
									<right token=".variable" type="char" kind="static const typename(i32)" value="with">
									</right>
								</right>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="endsWith">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="compare(str: char[*], with: char[*]): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="compare(str, with, caseCmp)">
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
				</push>
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="with">
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:88">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
								</left>
								<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr">
									</left>
									<right token=".variable" type="char" kind="static const typename(i32)" value="with">
									</right>
								</right>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="compare">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="equals(str: char[*], with: char[*]): bool">
			<init token="==" type="bool" kind="static const typename(bool)" value="compare(str, with, caseCmp) == 0">
				<left token="()" type="int32" kind="static const typename(i32)" value="compare(str, with, caseCmp)">
					<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
					</push>
					<push token=".variable" type="char[*]" kind="static typename(arr)" value="with">
					</push>
					<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="compare">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="contains(str: char[*], chr: char): bool">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="indexOf(str, chr) &gt;= 0">
				<left token="()" type="int32" kind="static const typename(i32)" value="indexOf(str, chr)">
					<push token=".variable" type="char[*]" kind="static typename(arr)" value="str">
					</push>
					<push token=".variable" type="char" kind="static const typename(i32)" value="chr">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="indexOf">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="FormatFlags">
			<field token=".variable" type="bool" kind="static const typename(bool)" value="showSign">
				<init token=".variable" type="bool" kind="static const typename(bool)" value="false">
					<init token=".literal" type="bool" kind="static const typename(bool)" value="0" />
				</init>
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="precision">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
			<field token=".variable" type="char" kind="static const typename(i32)" value="padChr">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="padLen">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: char[*]): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:127">
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; value[i]; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="[]" type="char" kind="static const typename(i32)" value="value[i]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="value">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</right>
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:128">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (pos &gt;= (output.length))">
							<test token="&gt;=" type="bool" kind="static const typename(bool)" value="pos &gt;= (output.length)">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
									<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
										<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
										</left>
										<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
										</right>
									</push>
								</right>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:129">
								<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
							</then>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := value[i];">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := value[i]">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</right>
								</left>
								<right token="[]" type="char" kind="static const typename(i32)" value="value[i]">
									<left token=".variable" type="char[*]" kind="static typename(arr)" value="value">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
									</right>
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (pos &gt;= (output.length))">
					<test token="&gt;=" type="bool" kind="static const typename(bool)" value="pos &gt;= (output.length)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
							<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
								<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
								</left>
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
								</right>
							</push>
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:136">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := (output.length - (1));">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := (output.length - (1))">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="()" type="int32" kind="static const typename(i32)" value="(output.length - (1))">
									<push token="-" type="uint32" kind="static const typename(u32)" value="output.length - (1)">
										<left token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
											</left>
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
											</right>
										</left>
										<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</push>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := (0);">
					<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := (0)">
						<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
							<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
							</right>
						</left>
						<right token="()" type="char" kind="static const typename(i32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := pos;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := pos">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:144">
				<stmt token=".variable" type="char[]" kind="static typename(arr)" value="whiteSpace">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot; 	
&quot;" />
				</stmt>
				<stmt token=".variable" type="char[]" kind="static typename(arr)" value="radixDigits">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;" />
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="len">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token=".variable" type="char[80]" kind="static typename(arr)" value="digits">
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (format.showSign)">
					<test token="." type="bool" kind="static const typename(bool)" value="format.showSign">
						<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
						</left>
						<right token=".variable" type="bool" kind="static const typename(bool)" value="showSign">
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:151">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((sign) == 0)">
							<test token="==" type="bool" kind="static const typename(bool)" value="(sign) == 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="(sign)">
									<push token=".variable" type="char" kind="static const typename(i32)" value="sign">
									</push>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:152">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="sign := &apos;+&apos;;">
									<expr token=":=" type="char" kind="static const typename(i32)" value="sign := &apos;+&apos;">
										<left token=".variable" type="char" kind="static const typename(i32)" value="sign">
										</left>
										<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;+&apos;" />
									</expr>
								</stmt>
							</then>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="radix">
					<init token="." type="int32" kind="static const typename(i32)" value="format.precision">
						<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
						</right>
					</init>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (radix == 0)">
					<test token="==" type="bool" kind="static const typename(bool)" value="radix == 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="radix">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:158">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="radix := 10;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="radix := 10">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="radix">
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="10" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(radix &gt; 1, &quot;radix is too small&quot;, radix);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(radix &gt; 1, &quot;radix is too small&quot;, radix)">
						<push token="&gt;" type="bool" kind="static const typename(bool)" value="radix &gt; 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="radix">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</push>
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;radix is too small&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="radix">
							<init token="." type="int32" kind="static const typename(i32)" value="format.precision">
								<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
								</right>
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(radix &lt; (radixDigits.length), &quot;radix is too big&quot;, radix);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(radix &lt; (radixDigits.length), &quot;radix is too big&quot;, radix)">
						<push token="&lt;" type="bool" kind="static const typename(bool)" value="radix &lt; (radixDigits.length)">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="radix">
							</left>
							<right token="()" type="int32" kind="static const typename(i32)" value="(radixDigits.length)">
								<push token="." type="uint32" kind="static const typename(u32)" value="radixDigits.length">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="radixDigits">
									</left>
									<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
									</right>
								</push>
							</right>
						</push>
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;radix is too big&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="radix">
							<init token="." type="int32" kind="static const typename(i32)" value="format.precision">
								<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
								</right>
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; value &gt; (0); value := value / (radix))">
					<test token="&gt;" type="bool" kind="static const typename(bool)" value="value &gt; (0)">
						<left token=".variable" type="uint64" kind="static const typename(u64)" value="value">
						</left>
						<right token="()" type="uint64" kind="static const typename(u64)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</test>
					<step token=":=" type="uint64" kind="static const typename(u64)" value="value := value / (radix)">
						<left token=".variable" type="uint64" kind="static const typename(u64)" value="value">
						</left>
						<right token="/" type="uint64" kind="static const typename(u64)" value="value / (radix)">
							<left token=".variable" type="uint64" kind="static const typename(u64)" value="value">
							</left>
							<right token="()" type="uint64" kind="static const typename(u64)" value="(radix)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="radix">
								</push>
							</right>
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:165">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="digits[len := len + 1] := radixDigits[value % (radix)];">
							<expr token=":=" type="char" kind="static const typename(i32)" value="digits[len := len + 1] := radixDigits[value % (radix)]">
								<left token="[]" type="char" kind="static const typename(i32)" value="digits[len := len + 1]">
									<left token=".variable" type="char[80]" kind="static typename(arr)" value="digits">
									</left>
									<right token=":=" type="int32" kind="static const typename(i32)" value="len := len + 1">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="len">
										</left>
										<right token="+" type="int32" kind="static const typename(i32)" value="len + 1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="len">
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</right>
								</left>
								<right token="[]" type="char" kind="static const typename(i32)" value="radixDigits[value % (radix)]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="radixDigits">
									</left>
									<right token="%" type="uint64" kind="static const typename(u64)" value="value % (radix)">
										<left token=".variable" type="uint64" kind="static const typename(u64)" value="value">
										</left>
										<right token="()" type="uint64" kind="static const typename(u64)" value="(radix)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="radix">
											</push>
										</right>
									</right>
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (len == 0)">
					<test token="==" type="bool" kind="static const typename(bool)" value="len == 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="len">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:168">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="digits[len := len + 1] := &apos;0&apos;;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="digits[len := len + 1] := &apos;0&apos;">
								<left token="[]" type="char" kind="static const typename(i32)" value="digits[len := len + 1]">
									<left token=".variable" type="char[80]" kind="static typename(arr)" value="digits">
									</left>
									<right token=":=" type="int32" kind="static const typename(i32)" value="len := len + 1">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="len">
										</left>
										<right token="+" type="int32" kind="static const typename(i32)" value="len + 1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="len">
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</right>
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;0&apos;" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
					<init token="-" type="int32" kind="static const typename(i32)" value="format.padLen - len">
						<left token="." type="int32" kind="static const typename(i32)" value="format.padLen">
							<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen">
							</right>
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="len">
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="char" kind="static const typename(i32)" value="padChr">
					<init token="." type="char" kind="static const typename(i32)" value="format.padChr">
						<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
						</left>
						<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
						</right>
					</init>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (padChr == &apos;&apos;)">
					<test token="==" type="bool" kind="static const typename(bool)" value="padChr == &apos;&apos;">
						<left token=".variable" type="char" kind="static const typename(i32)" value="padChr">
						</left>
						<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;&apos;" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:175">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="padChr := &apos; &apos;;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="padChr := &apos; &apos;">
								<left token=".variable" type="char" kind="static const typename(i32)" value="padChr">
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos; &apos;" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((sign) != 0)">
					<test token="!=" type="bool" kind="static const typename(bool)" value="(sign) != 0">
						<left token="()" type="int32" kind="static const typename(i32)" value="(sign)">
							<push token=".variable" type="char" kind="static const typename(i32)" value="sign">
							</push>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:180">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="maxLen := maxLen - 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="maxLen := maxLen - 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
								</left>
								<right token="-" type="int32" kind="static const typename(i32)" value="maxLen - 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (contains(whiteSpace, padChr))">
							<test token="()" type="bool" kind="static const typename(bool)" value="contains(whiteSpace, padChr)">
								<push token=".variable" type="char[]" kind="static typename(arr)" value="whiteSpace">
									<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot; 	
&quot;" />
								</push>
								<push token=".variable" type="char" kind="static const typename(i32)" value="padChr">
									<init token="." type="char" kind="static const typename(i32)" value="format.padChr">
										<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
										</left>
										<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
										</right>
									</init>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="contains">
								</call>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:182">
								<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; maxLen &gt; 0; maxLen := maxLen - 1)">
									<test token="&gt;" type="bool" kind="static const typename(bool)" value="maxLen &gt; 0">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</test>
									<step token=":=" type="int32" kind="static const typename(i32)" value="maxLen := maxLen - 1">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
										</left>
										<right token="-" type="int32" kind="static const typename(i32)" value="maxLen - 1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</step>
									<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:184">
										<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(pos &lt; (output.length));">
											<expr token="()" type="void" kind="static const typename(void)" value="assert(pos &lt; (output.length))">
												<push token="&lt;" type="bool" kind="static const typename(bool)" value="pos &lt; (output.length)">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
													</left>
													<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
														<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
															<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
															</left>
															<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
															</right>
														</push>
													</right>
												</push>
												<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
												</call>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := padChr;">
											<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := padChr">
												<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
													<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
													</left>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
													</right>
												</left>
												<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
											<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
												</left>
												<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
													</left>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
												</right>
											</expr>
										</stmt>
									</stmt>
								</stmt>
							</then>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(pos &lt; (output.length));">
							<expr token="()" type="void" kind="static const typename(void)" value="assert(pos &lt; (output.length))">
								<push token="&lt;" type="bool" kind="static const typename(bool)" value="pos &lt; (output.length)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</left>
									<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
										<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
											</left>
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
											</right>
										</push>
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
								</call>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := sign;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := sign">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</right>
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="sign">
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; maxLen &gt; 0; maxLen := maxLen - 1)">
					<test token="&gt;" type="bool" kind="static const typename(bool)" value="maxLen &gt; 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="maxLen := maxLen - 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
						</left>
						<right token="-" type="int32" kind="static const typename(i32)" value="maxLen - 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:196">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(pos &lt; (output.length));">
							<expr token="()" type="void" kind="static const typename(void)" value="assert(pos &lt; (output.length))">
								<push token="&lt;" type="bool" kind="static const typename(bool)" value="pos &lt; (output.length)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</left>
									<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
										<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
											</left>
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
											</right>
										</push>
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
								</call>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := padChr;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := padChr">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</right>
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; len; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; len">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="len">
						</right>
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:203">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(i &lt; (output.length));">
							<expr token="()" type="void" kind="static const typename(void)" value="assert(i &lt; (output.length))">
								<push token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; (output.length)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
									</left>
									<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
										<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
											</left>
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
											</right>
										</push>
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
								</call>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := digits[len - i];">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := digits[len - i]">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</right>
								</left>
								<right token="[]" type="char" kind="static const typename(i32)" value="digits[len - i]">
									<left token=".variable" type="char[80]" kind="static typename(arr)" value="digits">
									</left>
									<right token="-" type="int32" kind="static const typename(i32)" value="len - i">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="len">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
										</right>
									</right>
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (pos &gt;= (output.length))">
					<test token="&gt;=" type="bool" kind="static const typename(bool)" value="pos &gt;= (output.length)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
							<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
								<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
								</left>
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
								</right>
							</push>
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:209">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := (output.length - (1));">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := (output.length - (1))">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
								</left>
								<right token="()" type="int32" kind="static const typename(i32)" value="(output.length - (1))">
									<push token="-" type="uint32" kind="static const typename(u32)" value="output.length - (1)">
										<left token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
											</left>
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
											</right>
										</left>
										<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</push>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := (0);">
					<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := (0)">
						<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
							<left token=".variable" type="char[]" kind="static typename(arr)" value="output">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
							</right>
						</left>
						<right token="()" type="char" kind="static const typename(i32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := pos;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := pos">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, 0, uint64(value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value)">
					<push token=".variable" type="uint64" kind="static const typename(u64)" value="value">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, 0, uint64(value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value)">
					<push token=".variable" type="uint32" kind="static const typename(u32)" value="value">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, 0, uint64(value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="value">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, 0, uint64(value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="value">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: int64, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, value &lt; (0) ? (&apos;-&apos;) : 0, uint64(value &lt; (0) ? -value : value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token="?:" type="int32" kind="static const typename(i32)" value="value &lt; (0) ? (&apos;-&apos;) : 0">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="value &lt; (0)">
						<left token=".variable" type="int64" kind="static const typename(i64)" value="value">
						</left>
						<right token="()" type="int64" kind="static const typename(i64)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</test>
					<left token="()" type="int32" kind="static const typename(i32)" value="(&apos;-&apos;)">
						<push token=".literal" type="char" kind="static const typename(i32)" value="&apos;-&apos;" />
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</push>
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value &lt; (0) ? -value : value)">
					<push token="?:" type="int64" kind="static const typename(i64)" value="value &lt; (0) ? -value : value">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="value &lt; (0)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="value">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<left token="-" type="int64" kind="static const typename(i64)" value="-value">
							<right token=".variable" type="int64" kind="static const typename(i64)" value="value">
							</right>
						</left>
						<right token=".variable" type="int64" kind="static const typename(i64)" value="value">
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: int32, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, value &lt; 0 ? (&apos;-&apos;) : 0, uint64(value &lt; 0 ? -value : value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token="?:" type="int32" kind="static const typename(i32)" value="value &lt; 0 ? (&apos;-&apos;) : 0">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="value &lt; 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="value">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<left token="()" type="int32" kind="static const typename(i32)" value="(&apos;-&apos;)">
						<push token=".literal" type="char" kind="static const typename(i32)" value="&apos;-&apos;" />
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</push>
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value &lt; 0 ? -value : value)">
					<push token="?:" type="int32" kind="static const typename(i32)" value="value &lt; 0 ? -value : value">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="value &lt; 0">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="value">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</test>
						<left token="-" type="int32" kind="static const typename(i32)" value="-value">
							<right token=".variable" type="int32" kind="static const typename(i32)" value="value">
							</right>
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="value">
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: int16, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, (value) &lt; 0 ? (&apos;-&apos;) : 0, uint64((value) &lt; 0 ? -value : value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token="?:" type="int32" kind="static const typename(i32)" value="(value) &lt; 0 ? (&apos;-&apos;) : 0">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="(value) &lt; 0">
						<left token="()" type="int32" kind="static const typename(i32)" value="(value)">
							<push token=".variable" type="int16" kind="static const typename(i32)" value="value">
							</push>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<left token="()" type="int32" kind="static const typename(i32)" value="(&apos;-&apos;)">
						<push token=".literal" type="char" kind="static const typename(i32)" value="&apos;-&apos;" />
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</push>
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64((value) &lt; 0 ? -value : value)">
					<push token="?:" type="int16" kind="static const typename(i32)" value="(value) &lt; 0 ? -value : value">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="(value) &lt; 0">
							<left token="()" type="int32" kind="static const typename(i32)" value="(value)">
								<push token=".variable" type="int16" kind="static const typename(i32)" value="value">
								</push>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</test>
						<left token="-" type="int16" kind="static const typename(i32)" value="-value">
							<right token=".variable" type="int16" kind="static const typename(i32)" value="value">
							</right>
						</left>
						<right token=".variable" type="int16" kind="static const typename(i32)" value="value">
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: int8, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, (value) &lt; 0 ? (&apos;-&apos;) : 0, uint64((value) &lt; 0 ? -value : value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token="?:" type="int32" kind="static const typename(i32)" value="(value) &lt; 0 ? (&apos;-&apos;) : 0">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="(value) &lt; 0">
						<left token="()" type="int32" kind="static const typename(i32)" value="(value)">
							<push token=".variable" type="int8" kind="static const typename(i32)" value="value">
							</push>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<left token="()" type="int32" kind="static const typename(i32)" value="(&apos;-&apos;)">
						<push token=".literal" type="char" kind="static const typename(i32)" value="&apos;-&apos;" />
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</push>
				<push token="()" type="uint64" kind="static const typename(u64)" value="uint64((value) &lt; 0 ? -value : value)">
					<push token="?:" type="int8" kind="static const typename(i32)" value="(value) &lt; 0 ? -value : value">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="(value) &lt; 0">
							<left token="()" type="int32" kind="static const typename(i32)" value="(value)">
								<push token=".variable" type="int8" kind="static const typename(i32)" value="value">
								</push>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</test>
						<left token="-" type="int8" kind="static const typename(i32)" value="-value">
							<right token=".variable" type="int8" kind="static const typename(i32)" value="value">
							</right>
						</left>
						<right token=".variable" type="int8" kind="static const typename(i32)" value="value">
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: float64, format: FormatFlags): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:234">
				<stmt token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatInt">
					<init token="{}" type="FormatFlags" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatInt.showSign := format.showSign;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatInt.showSign := format.showSign">
								<left token="." type="bool" kind="static const typename(bool)" value="formatInt.showSign">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatInt">
									</left>
									<right token=".variable" type="bool" kind="static const typename(bool)" value="showSign">
									</right>
								</left>
								<right token="." type="bool" kind="static const typename(bool)" value="format.showSign">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
									</left>
									<right token=".variable" type="bool" kind="static const typename(bool)" value="showSign">
									</right>
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatInt.precision := 0;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatInt.precision := 0">
								<left token="." type="int32" kind="static const typename(i32)" value="formatInt.precision">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatInt">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatInt.padChr := format.padChr;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatInt.padChr := format.padChr">
								<left token="." type="char" kind="static const typename(i32)" value="formatInt.padChr">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatInt">
									</left>
									<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
									</right>
								</left>
								<right token="." type="char" kind="static const typename(i32)" value="format.padChr">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
									</left>
									<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
									</right>
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatInt.padLen := format.padLen - format.precision;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatInt.padLen := format.padLen - format.precision">
								<left token="." type="int32" kind="static const typename(i32)" value="formatInt.padLen">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatInt">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen">
									</right>
								</left>
								<right token="-" type="int32" kind="static const typename(i32)" value="format.padLen - format.precision">
									<left token="." type="int32" kind="static const typename(i32)" value="format.padLen">
										<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen">
										</right>
									</left>
									<right token="." type="int32" kind="static const typename(i32)" value="format.precision">
										<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
										</left>
										<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
										</right>
									</right>
								</right>
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatDec">
					<init token="{}" type="FormatFlags" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatDec.showSign := false;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatDec.showSign := false">
								<left token="." type="bool" kind="static const typename(bool)" value="formatDec.showSign">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatDec">
									</left>
									<right token=".variable" type="bool" kind="static const typename(bool)" value="showSign">
									</right>
								</left>
								<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatDec.precision := 0;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatDec.precision := 0">
								<left token="." type="int32" kind="static const typename(i32)" value="formatDec.precision">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatDec">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatDec.padChr := &apos;0&apos;;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatDec.padChr := &apos;0&apos;">
								<left token="." type="char" kind="static const typename(i32)" value="formatDec.padChr">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatDec">
									</left>
									<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
									</right>
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;0&apos;" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="formatDec.padLen := format.precision;">
							<expr token=":=" type="void" kind="static const typename(void)" value="formatDec.padLen := format.precision">
								<left token="." type="int32" kind="static const typename(i32)" value="formatDec.padLen">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatDec">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen">
									</right>
								</left>
								<right token="." type="int32" kind="static const typename(i32)" value="format.precision">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
									</right>
								</right>
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token=".variable" type="char" kind="static const typename(i32)" value="sign">
					<init token="?:" type="int32" kind="static const typename(i32)" value="value &lt; (0) ? (&apos;-&apos;) : 0">
						<test token="&lt;" type="bool" kind="static const typename(bool)" value="value &lt; (0)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="value">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</test>
						<left token="()" type="int32" kind="static const typename(i32)" value="(&apos;-&apos;)">
							<push token=".literal" type="char" kind="static const typename(i32)" value="&apos;-&apos;" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="fract">
					<init token="()" type="float64" kind="static const typename(f64)" value="Math.modf(Math.abs(value), &amp;value)">
						<push token="()" type="float64" kind="static const typename(f64)" value="Math.abs(value)">
							<push token=".variable" type="float64" kind="static const typename(f64)" value="value">
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
									<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
									</field>
									<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
									</field>
									<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
									</field>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
								</right>
							</call>
						</push>
						<push token="&amp;" type="float64" kind="static const typename(f64)" value="&amp;value">
							<right token=".variable" type="float64" kind="static const typename(f64)" value="value">
							</right>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.modf">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
								<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
								</field>
								<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
								</field>
								<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="modf">
							</right>
						</call>
					</init>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := append(output, pos, sign, uint64(value), formatInt);">
					<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := append(output, pos, sign, uint64(value), formatInt)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, sign, uint64(value), formatInt)">
							<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
							</push>
							<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
							</push>
							<push token=".variable" type="char" kind="static const typename(i32)" value="sign">
							</push>
							<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(value)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="value">
								</push>
								<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
									</field>
								</call>
							</push>
							<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatInt">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="append">
							</call>
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := append(output, pos, &quot;.&quot;);">
					<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := append(output, pos, &quot;.&quot;)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, &quot;.&quot;)">
							<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
							</push>
							<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
							</push>
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;.&quot;" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="append">
							</call>
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="fract := fract * float64.pow(10, format.precision);">
					<expr token=":=" type="float64" kind="static const typename(f64)" value="fract := fract * float64.pow(10, format.precision)">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="fract">
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="fract * float64.pow(10, format.precision)">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="fract">
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="float64.pow(10, format.precision)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
								<push token="." type="int32" kind="static const typename(i32)" value="format.precision">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
									</right>
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="float64.pow">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
										<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
										</field>
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="pow">
									</right>
								</call>
							</right>
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := append(output, pos, 0, uint64(fract), formatDec);">
					<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := append(output, pos, 0, uint64(fract), formatDec)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, 0, uint64(fract), formatDec)">
							<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
							</push>
							<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							<push token="()" type="uint64" kind="static const typename(u64)" value="uint64(fract)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="fract">
								</push>
								<call token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
									<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
									</field>
									<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
									</field>
								</call>
							</push>
							<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="formatDec">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="append">
							</call>
						</right>
					</expr>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := pos;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := pos">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="pos">
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: float32, format: FormatFlags): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, float64(value), format)">
				<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
				</push>
				<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
					<push token=".variable" type="float32" kind="static const typename(f32)" value="value">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</call>
				</push>
				<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="append">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/std/string.ci:262">
				<stmt token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
					<init token="{}" type="FormatFlags" kind="static const typename(val)">
						<stmt token=":=" type="void" kind="static const typename(void)" value="format.showSign := false">
							<left token="." type="bool" kind="static const typename(bool)" value="format.showSign">
								<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
								</left>
								<right token=".variable" type="bool" kind="static const typename(bool)" value="showSign">
								</right>
							</left>
							<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="format.precision := 0">
							<left token="." type="int32" kind="static const typename(i32)" value="format.precision">
								<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="precision">
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="format.padChr := (0)">
							<left token="." type="char" kind="static const typename(i32)" value="format.padChr">
								<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="padChr">
								</right>
							</left>
							<right token="()" type="char" kind="static const typename(i32)" value="(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="format.padLen := 0">
							<left token="." type="int32" kind="static const typename(i32)" value="format.padLen">
								<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen">
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</stmt>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := append(output, pos, value, format);">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := append(output, pos, value, format)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, value, format)">
							<push token=".variable" type="char[]" kind="static typename(arr)" value="output">
							</push>
							<push token=".variable" type="int32" kind="static const typename(i32)" value="pos">
							</push>
							<push token=".variable" type="int32" kind="static const typename(i32)" value="value">
							</push>
							<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="append">
							</call>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
	</stmt>
	<stmt token="{}" type="void" kind="static const typename(void)" file="test/test.ci:5">
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitldz32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(load.z32)">
				<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="load">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="z32">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitldz64">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(load.z64)">
				<push token="." type="int64" kind="static const typename(i64)" value="load.z64">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="load">
					</left>
					<right token=".variable" type="int64" kind="static const typename(i64)" value="z64">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitA">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitB">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitAddI32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(int32(emitA), int32(emitB), add.i32)">
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(emitA)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="emitA">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					</call>
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(emitB)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="emitB">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					</call>
				</push>
				<push token="." type="int32" kind="static const typename(i32)" value="add.i32">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="add">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="i32">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitDivI32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(int32(10), int32(5), div.i32)">
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(10)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					</call>
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(5)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					</call>
				</push>
				<push token="." type="int32" kind="static const typename(i32)" value="div.i32">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="div">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="i32">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="floatAsInt32(value: float32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="int32(emit(float32(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float32(value))">
					<push token="()" type="float32" kind="static const typename(f32)" value="float32(value)">
						<push token=".variable" type="float32" kind="static const typename(f32)" value="value">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float32">
							<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
							</field>
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="floatAsInt64(value: float64): int64">
			<init token="()" type="int64" kind="static const typename(i64)" value="int64(emit(float64(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float64(value))">
					<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="value">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
							<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
							</field>
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitFloatAsInt1">
			<init token="()" type="int32" kind="static const typename(i32)" value="floatAsInt32(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt32">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitFloatAsInt2">
			<init token="()" type="int32" kind="static const typename(i32)" value="floatAsInt32(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt32">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitFloatAsInt3">
			<init token="()" type="int64" kind="static const typename(i64)" value="floatAsInt64(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt64">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitFloatAsInt4">
			<init token="()" type="int64" kind="static const typename(i64)" value="floatAsInt64(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt64">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="char[]" kind="static typename(arr)" value="emitSlice">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(int32(3), pointer(&quot;string&quot;))">
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(3)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					</call>
				</push>
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(&quot;string&quot;)">
					<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="zero(a: int32, b: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="last(a: int32, b: int32): int32">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="b">
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sum(a: int32, b: int32): int32">
			<init token="+" type="int32" kind="static const typename(i32)" value="a + b">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="any(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="(a) ? a : b">
				<test token="()" type="bool" kind="static const typename(bool)" value="(a)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
					</push>
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="a &lt; b ? a : b">
				<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="a">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</right>
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="max(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="a &gt; b ? a : b">
				<test token="&gt;" type="bool" kind="static const typename(bool)" value="a &gt; b">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="a">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</right>
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i3">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i6">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i2">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i8">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zeroVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="zero(3, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="zero">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zeroVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="zero(i3, i6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="zero">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zeroXpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="zero(i3 + 1, i6 + 1)">
				<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="zero">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lastVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="last(3, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="last">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lastVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="last(i3, i6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="last">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lastXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="last(i3 + 1, i6 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="last(i3 + 1, i6 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="last">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(3, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(i3, i6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum2Xpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="sum(i3 + 1, i6 + 1) - 2">
				<left token="()" type="int32" kind="static const typename(i32)" value="sum(i3 + 1, i6 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(3, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="any">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(i3, i6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any2Xpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="any(i3 + 1, i6 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="any(i3 + 1, i6 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="any">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(3, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="min">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(i3, i6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2Xpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="min(i3 + 1, i6 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="min(i3 + 1, i6 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="min">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="max2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="max(3, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="max">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="max2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="max(i3, i6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="max">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="max2Xpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="max(i3 + 1, i6 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="max(i3 + 1, i6 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="max">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sumLr(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(a, sum(b, sum(c, d)))">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="sum(b, sum(c, d))">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</push>
					<push token="()" type="int32" kind="static const typename(i32)" value="sum(c, d)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sumRl(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(sum(sum(a, b), c), d)">
				<push token="()" type="int32" kind="static const typename(i32)" value="sum(sum(a, b), c)">
					<push token="()" type="int32" kind="static const typename(i32)" value="sum(a, b)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
						</call>
					</push>
					<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</call>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sumRlVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="sumLr(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sumLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sumLrVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="sumRl(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sumRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sumRlVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="sumLr(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sumLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sumLrVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="sumRl(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sumRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sumRlXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4">
				<left token="()" type="int32" kind="static const typename(i32)" value="sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sumLr">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="4" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sumLrXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4">
				<left token="()" type="int32" kind="static const typename(i32)" value="sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sumRl">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="4" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="anyLr(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(a, any(b, any(c, d)))">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="any(b, any(c, d))">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</push>
					<push token="()" type="int32" kind="static const typename(i32)" value="any(c, d)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="any">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="any">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="anyRl(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(any(any(a, b), c), d)">
				<push token="()" type="int32" kind="static const typename(i32)" value="any(any(a, b), c)">
					<push token="()" type="int32" kind="static const typename(i32)" value="any(a, b)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="any">
						</call>
					</push>
					<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="any">
					</call>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="anyRlVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="anyLr(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="anyLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="anyLrVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="anyRl(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="anyRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="anyRlVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="anyLr(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="anyLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="anyLrVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="anyRl(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="anyRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="anyRlXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="anyLr">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="anyLrXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="anyRl">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="minLr(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(a, min(b, min(c, d)))">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="min(b, min(c, d))">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</push>
					<push token="()" type="int32" kind="static const typename(i32)" value="min(c, d)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="min">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="min">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="minRl(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(min(min(a, b), c), d)">
				<push token="()" type="int32" kind="static const typename(i32)" value="min(min(a, b), c)">
					<push token="()" type="int32" kind="static const typename(i32)" value="min(a, b)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="min">
						</call>
					</push>
					<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="min">
					</call>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="minRlVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="minLr(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="minLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="minLrVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="minRl(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="minRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="minRlVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="minLr(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="minLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="minLrVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="minRl(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="minRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="minRlXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="minLr">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="minLrXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="minRl">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="maxLr(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="max(a, max(b, max(c, d)))">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="max(b, max(c, d))">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</push>
					<push token="()" type="int32" kind="static const typename(i32)" value="max(c, d)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="max">
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="max">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="max">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="maxRl(a: int32, b: int32, c: int32, d: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="max(max(max(a, b), c), d)">
				<push token="()" type="int32" kind="static const typename(i32)" value="max(max(a, b), c)">
					<push token="()" type="int32" kind="static const typename(i32)" value="max(a, b)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="a">
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="max">
						</call>
					</push>
					<push token=".variable" type="int32" kind="static const typename(i32)" value="c">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="max">
					</call>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="d">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="max">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxRlVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="maxLr(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="maxLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxLrVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="maxRl(3, 6, 2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="maxRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxRlVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="maxLr(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="maxLr">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxLrVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="maxRl(i3, i6, i2, i8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i3">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i6">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="i8">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="maxRl">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxRlXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="maxLr">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxLrXpr">
			<init token="-" type="int32" kind="static const typename(i32)" value="maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1">
				<left token="()" type="int32" kind="static const typename(i32)" value="maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)">
					<push token="+" type="int32" kind="static const typename(i32)" value="i3 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i3">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i6 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i6">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i2 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i2">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<push token="+" type="int32" kind="static const typename(i32)" value="i8 + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i8">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="maxRl">
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(a: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(a: float32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="4" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(a: int32, b: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="5" />
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload1">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="overload">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload2">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload()">
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload3">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload(0)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload4">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload(0.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload5">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload(0, 0)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Celsius">
			<field token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit">
			<field token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Celsius(value: float64): Celsius">
			<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius(emit(float64(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float64(value))">
					<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="value">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
							<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
							</field>
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Celsius">
					<field token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit(value: float64): Fahrenheit">
			<init token="()" type="Fahrenheit" kind="static const typename(val)" value="Fahrenheit(emit(float64(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float64(value))">
					<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="value">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float64">
							<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
							</field>
						</call>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
					</call>
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit">
					<field token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Celsius(value: Fahrenheit): Celsius">
			<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius((value.degrees - (32)) / 1.800000)">
				<push token="/" type="float64" kind="static const typename(f64)" value="(value.degrees - (32)) / 1.800000">
					<left token="()" type="float64" kind="static const typename(f64)" value="(value.degrees - (32))">
						<push token="-" type="float64" kind="static const typename(f64)" value="value.degrees - (32)">
							<left token="." type="float64" kind="static const typename(f64)" value="value.degrees">
								<left token=".variable" type="Fahrenheit" kind="static const typename(val)" value="value">
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
								</right>
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(32)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="32" />
							</right>
						</push>
					</left>
					<right token=".literal" type="float64" kind="static const typename(f64)" value="1.800000" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Celsius">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit(value: Celsius): Fahrenheit">
			<init token="()" type="Fahrenheit" kind="static const typename(val)" value="Fahrenheit(value.degrees * 1.800000 + (32))">
				<push token="+" type="float64" kind="static const typename(f64)" value="value.degrees * 1.800000 + (32)">
					<left token="*" type="float64" kind="static const typename(f64)" value="value.degrees * 1.800000">
						<left token="." type="float64" kind="static const typename(f64)" value="value.degrees">
							<left token=".variable" type="Celsius" kind="static const typename(val)" value="value">
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="degrees">
							</right>
						</left>
						<right token=".literal" type="float64" kind="static const typename(f64)" value="1.800000" />
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(32)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="32" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Fahrenheit">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="Celsius" kind="static const typename(val)" value="boilC">
			<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius(100.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="100.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="Celsius">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="Fahrenheit" kind="static const typename(val)" value="boilF">
			<init token="()" type="Fahrenheit" kind="static const typename(val)" value="Fahrenheit(boilC)">
				<push token=".variable" type="Celsius" kind="static const typename(val)" value="boilC">
					<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius(100.000000)">
						<push token=".literal" type="float64" kind="static const typename(f64)" value="100.000000" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="Celsius">
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Fahrenheit">
				</call>
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if ((typename(int64)) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="(typename(int64)) == null">
				<left token="()" type="pointer" kind="static const typename(ref)" value="(typename(int64))">
					<push token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
							<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
							</field>
						</call>
					</push>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/initByRef.ci:3">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</init>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="value">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromVar">
			<init token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="nullRef">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="nullPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="nullVar">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="nullTyp">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nullFun">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="object" kind="static const typename(ref)" value="nullObj">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="typePtr">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="typeVar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeTyp">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="local">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="copyVal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="local">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="copyRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="copyPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="copyVar">
			<init token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="copyTyp">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typeTyp">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void">
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(22)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(23)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(24)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(25)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(26)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(27)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(28)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(29)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
					<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(30)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
					<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(31)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(32)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(33)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(34)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(35)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(36)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(37)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(38)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(39)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename">
				<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(3)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(4)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(5)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(6)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function">
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
				<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(11)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(12)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(13)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(14)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant">
				<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
					<init token="emit" type="bool" kind="static const typename(bool)" value="nfc(1)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(2)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object">
				<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void">
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(22)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(23)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(24)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(25)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(26)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(27)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(28)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(29)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
					<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(30)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
					<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(31)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(32)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(33)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(34)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(35)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(36)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(37)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(38)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(39)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename">
				<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(3)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(4)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(5)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(6)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function">
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
				<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(11)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(12)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(13)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(14)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant">
				<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
					<init token="emit" type="bool" kind="static const typename(bool)" value="nfc(1)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(2)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object">
				<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void">
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(22)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(23)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(24)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(25)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(26)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(27)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(28)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(29)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
					<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(30)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
					<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(31)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(32)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(33)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(34)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(35)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(36)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(37)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(38)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
					<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(39)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
					<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename">
				<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(3)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(4)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
					<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(5)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
					<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(6)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function">
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
				<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(11)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(12)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(13)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(14)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant">
				<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
					<init token="emit" type="bool" kind="static const typename(bool)" value="nfc(1)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(2)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object">
				<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="valueOfPtr">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
					<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="valueOfVar">
			<init token="()" type="variant" kind="static const typename(var)" value="variant(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="variant">
					<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="valueOfTyp">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
					<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeOfValue">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
					<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="copyPtrFloat64">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat64">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
					</field>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="copyVarFloat64">
			<init token=".variable" type="variant" kind="static const typename(var)" value="varFloat64">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
					</field>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="empty(): void">
			<init token="{}" type="void" kind="static const typename(void)">
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funAdd(x: int32, y: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:7">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x + y;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x + y">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="+" type="int32" kind="static const typename(i32)" value="x + y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="x">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="y">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funAddResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funAdd(2, 7)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funAdd">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funAddRef(x: int32, y: int32): int32">
			<init token=".variable" type="function" kind="static const typename(ref)" value="funAdd">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:7">
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x + y;">
						<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x + y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
							</left>
							<right token="+" type="int32" kind="static const typename(i32)" value="x + y">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="x">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="y">
								</right>
							</right>
						</expr>
					</stmt>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funAddRefResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funAddRef(2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funAddRef">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funMul(x: int32, y: int32): int32">
			<init token=".variable" type="function" kind="static const typename(ref)" value="funMul">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:33">
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
						<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
							</left>
							<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="x">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="y">
								</right>
							</right>
						</expr>
					</stmt>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funMulResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funMul(2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funMul">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funMulRef(x: int32, y: int32): int32">
			<init token=".variable" type="function" kind="static const typename(ref)" value="funMul">
				<init token=".variable" type="function" kind="static const typename(ref)" value="funMul">
					<init token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:33">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
								</left>
								<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="x">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="y">
									</right>
								</right>
							</expr>
						</stmt>
					</init>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funMulRefResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funMulRef(2, 7)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funMulRef">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funMul(x: int32, y: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:33">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="x">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="y">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="fib(n: uint32): uint32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:38">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (n &lt;= (1))">
					<test token="&lt;=" type="bool" kind="static const typename(bool)" value="n &lt;= (1)">
						<left token=".variable" type="uint32" kind="static const typename(u32)" value="n">
						</left>
						<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang/function.ci:39">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := n;">
							<expr token=":=" type="uint32" kind="static const typename(u32)" value=".result := n">
								<left token=".variable" type="uint32" kind="static const typename(u32)" value=".result">
								</left>
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="n">
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := fib(n - (1)) + fib(n - (2));">
					<expr token=":=" type="uint32" kind="static const typename(u32)" value=".result := fib(n - (1)) + fib(n - (2))">
						<left token=".variable" type="uint32" kind="static const typename(u32)" value=".result">
						</left>
						<right token="+" type="uint32" kind="static const typename(u32)" value="fib(n - (1)) + fib(n - (2))">
							<left token="()" type="uint32" kind="static const typename(u32)" value="fib(n - (1))">
								<push token="-" type="uint32" kind="static const typename(u32)" value="n - (1)">
									<left token=".variable" type="uint32" kind="static const typename(u32)" value="n">
									</left>
									<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="fib">
								</call>
							</left>
							<right token="()" type="uint32" kind="static const typename(u32)" value="fib(n - (2))">
								<push token="-" type="uint32" kind="static const typename(u32)" value="n - (2)">
									<left token=".variable" type="uint32" kind="static const typename(u32)" value="n">
									</left>
									<right token="()" type="uint32" kind="static const typename(u32)" value="(2)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="fib">
								</call>
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="fibonacci_13">
			<init token="()" type="uint32" kind="static const typename(u32)" value="fib(13)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="13" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="fib">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofVoid">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(void)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="void">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofBool">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(bool)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="bool">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofChar">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(char)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="char">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt8">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int8)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int8">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt16">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int16)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int16">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int32)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt64">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int64)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint8">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint8)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint16">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint16)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint32)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(22)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(23)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(24)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(25)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(26)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(27)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(28)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(29)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint64">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint64)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(30)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						<init token="emit" type="int64" kind="static const typename(i64)" value="nfc(31)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofFloat32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(float32)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(32)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(33)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(34)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(35)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(36)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(37)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(38)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						<init token="emit" type="float32" kind="static const typename(f32)" value="nfc(39)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofFloat64">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(float64)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="float64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(40)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(41)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(42)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(43)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(44)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(45)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(46)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						<init token="emit" type="float64" kind="static const typename(f64)" value="nfc(47)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofPointer">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(pointer)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
					<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(11)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(12)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(13)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(14)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofVariant">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(variant)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="variant">
					<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
						<init token="emit" type="bool" kind="static const typename(bool)" value="nfc(1)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(2)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofTypename">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(typename)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typename">
					<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(3)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(4)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						<init token="emit" type="int32" kind="static const typename(i32)" value="nfc(5)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						<init token="emit" type="typename" kind="static const typename(ref)" value="nfc(6)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofFunction">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(function)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="function">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofObject">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(object)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="object">
					<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
						<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
					</field>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordSizeof">
			<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
				<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
				<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordSizeofExt">
			<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
			<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
				<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
				<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
			<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
				<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</field>
				<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
				</field>
				<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
					<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
				</field>
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="nameOfRecord">
			<init token="()" type=".cstr" kind="static const typename(arr)" value="typename.name(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
						<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
						</field>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.name">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="name">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfRecord">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofRecord.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfRecord">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
						<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
						</field>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="fileOfRecord">
			<init token="()" type=".cstr" kind="static const typename(arr)" value="typename.file(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
						<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
						</field>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.file">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="file">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lineOfRecord">
			<init token="()" type="int32" kind="static const typename(i32)" value="typename.line(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
						<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
						</field>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.line">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="line">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
						<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
							<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
						</field>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.base">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="base">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="nameOfBase">
			<init token="()" type=".cstr" kind="static const typename(arr)" value="typename.name(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
								<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
								</field>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
								<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="base">
							</right>
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.name">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="name">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfBase">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfBase">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
								<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
								</field>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
								<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="base">
							</right>
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="fileOfBase">
			<init token="()" type=".cstr" kind="static const typename(arr)" value="typename.file(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
								<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
								</field>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
								<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="base">
							</right>
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.file">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="file">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lineOfBase">
			<init token="()" type="int32" kind="static const typename(i32)" value="typename.line(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
								<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
								</field>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
								<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="base">
							</right>
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.line">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="line">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
								<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
									<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
									<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
								</field>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
								<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="base">
							</right>
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.base">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="base">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfBase1">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase1.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfBase1">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase1.size">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="size">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase2">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofBase1)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofBase)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
							<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
								<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
									<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt">
										<field token=".variable" type="int32" kind="static const typename(i32)" value="y">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
										</field>
										<field token=".variable" type="int64" kind="static const typename(i64)" value="x">
											<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
											<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
											<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
										</field>
									</init>
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="typename.base">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
										<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
										</field>
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="base">
									</right>
								</call>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
								<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
								</field>
								<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
								</field>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="base">
							</right>
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.base">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="base">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfBase2">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase2.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase2">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfBase2">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase2.size">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase2">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="size">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="e64">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282" />
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="e32">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="e64">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgb888(r: int32, g: int32, b: int32): int32">
			<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
				<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
					<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="r">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="16" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680" />
					</left>
					<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="g">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="8" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="65280" />
					</right>
				</left>
				<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="b">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="255" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgb565(r: int32, g: int32, b: int32): int32">
			<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
				<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
					<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="r">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="8" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="63488" />
					</left>
					<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="g">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2016" />
					</right>
				</left>
				<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
					<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="b">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="31" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
			<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
			<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtR5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 11, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="11" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtG6">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 5, 6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtB5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtR5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 11, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="11" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtG6">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 5, 6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtB5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtR8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 16, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="16" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtG8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 8, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtB8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 0, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtR8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 16, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="16" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtG8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 8, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtB8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 0, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testSin_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sin(pi64 / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (2)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testCos_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.cos(pi64 / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (2)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testTan_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.tan(pi64 / (4))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (4)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="tan">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testLog_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.log(e64 * e64 * e64)">
				<push token="*" type="float64" kind="static const typename(f64)" value="e64 * e64 * e64">
					<left token="*" type="float64" kind="static const typename(f64)" value="e64 * e64">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="e64">
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="e64">
						</right>
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="e64">
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.log">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="log">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testExp_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.exp(1.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testPow_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.pow(pi64 * pi64, 0.500000)">
				<push token="*" type="float64" kind="static const typename(f64)" value="pi64 * pi64">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</right>
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.500000" />
				<call token="." type="function" kind="static const typename(ref)" value="float64.pow">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="pow">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testSqrt_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sqrt(pi64 * pi64)">
				<push token="*" type="float64" kind="static const typename(f64)" value="pi64 * pi64">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testAtan_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(pi64, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float64, y: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float64, y: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="atan2">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testSin_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sin(pi32 / (2))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (2)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testCos_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.cos(pi32 / (2))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (2)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testTan_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.tan(pi32 / (4))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (4)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</left>
					<right token="()" type="float32" kind="static const typename(f32)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="tan">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testLog_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.log(e32 * e32 * e32)">
				<push token="*" type="float32" kind="static const typename(f32)" value="e32 * e32 * e32">
					<left token="*" type="float32" kind="static const typename(f32)" value="e32 * e32">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="e32">
						</left>
						<right token=".variable" type="float32" kind="static const typename(f32)" value="e32">
						</right>
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="e32">
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.log">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="log">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testExp_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.exp(1.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float32.exp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="exp">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testPow_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.pow(pi32 * pi32, 0.500000)">
				<push token="*" type="float32" kind="static const typename(f32)" value="pi32 * pi32">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</right>
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.500000" />
				<call token="." type="function" kind="static const typename(ref)" value="float32.pow">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="pow">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testSqrt_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sqrt(pi32 * pi32)">
				<push token="*" type="float32" kind="static const typename(f32)" value="pi32 * pi32">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testAtan_f32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.atan2(pi32, 1.000000)">
				<push token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
					</init>
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float32.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="sin(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cos(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="log(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="exp(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pow(x: float32, y: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sqrt(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="atan2(x: float32, y: float32): float32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="atan2">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testPopulation_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.pop(r5g6b5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.pop">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="pop">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="testSwapBits_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.swap(r5g6b5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.swap">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="swap">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testBitScanReverse_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.bsr(r5g6b5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.bsr">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="bsr">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testBitScanForward_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.bsf(r5g6b5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.bsf">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="bsf">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testHighBit_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.hib(r5g6b5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.hib">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="hib">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testLowBit_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.lob(r5g6b5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="uint32.lob">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="lob">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testZeroExtend_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testSignExtend_u32">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int32, offs: int32, count: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="pop(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="swap(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsr(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="bsf(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="hib(value: int32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="lob(value: int32): int32">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testZeroExtend_u64">
			<init token="()" type="int64" kind="static const typename(i64)" value="uint64.zxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint64.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="testSignExtend_u64">
			<init token="()" type="int64" kind="static const typename(i64)" value="uint64.sxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint64.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
						<field token=".variable" type="function" kind="static const typename(ref)" value="zxt(value: int64, offs: int32, count: int32): int64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sxt(value: int64, offs: int32, count: int32): int64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="realloc(data: pointer, size: int32): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, size)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="data">
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="size">
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="alloc">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="malloc(size: int32): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="size">
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="alloc">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="free(data: pointer): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="data">
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="alloc">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p2">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(80)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="80" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p4">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(820)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="820" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
				</call>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.fill(p1, 0, 1024);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.fill(p1, 0, 1024)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.fill">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="fill">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.copy(p1, p3, 160);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.copy(p1, p3, 160)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.copy">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="copy">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p1);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p1)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p2);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p2)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p2">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(80)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="80" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p3);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p3)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p4);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p4)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p4">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(820)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="820" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc">
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free">
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="val1">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="val2">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val1&quot;, val1);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val1&quot;, val1)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val1&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val2&quot;, val2);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val2&quot;, val2)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val2&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.move(pointer(val2), pointer(val1), sizeof(int64));">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.move(pointer(val2), pointer(val1), sizeof(int64))">
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(val2)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</call>
				</push>
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(val1)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</call>
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="sizeof(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
					</call>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.move">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="move">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.fill(pointer(val1), 0, sizeof(int64));">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.fill(pointer(val1), 0, sizeof(int64))">
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(val1)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</call>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="int32" kind="static const typename(i32)" value="sizeof(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof">
					</call>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.fill">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="fill">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val1&quot;, val1);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val1&quot;, val1)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val1&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val2&quot;, val2);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val2&quot;, val2)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val2&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="noError(ptr: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)">
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow(ptr: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:14">
				<stmt token=".variable" type="uint8[8192]" kind="static typename(arr)" value="data">
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="stackOverflow(ptr);">
					<expr token="()" type="void" kind="static const typename(void)" value="stackOverflow(ptr)">
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="ptr">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow">
						</call>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="divisionByZero(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:19">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="value">
					<init token="/" type="int32" kind="static const typename(i32)" value="3 / 0">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="3" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="abortExecution(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:23">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="NotEquals">
					<field token=".variable" type="char[*]" kind="static typename(arr)" value="message">
					</field>
					<field token=".variable" type="int32" kind="static const typename(i32)" value="expected">
					</field>
					<field token=".variable" type="int32" kind="static const typename(i32)" value="returned">
					</field>
				</stmt>
				<stmt token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
					<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
							<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
								<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
									<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
									</left>
									<right token=".variable" type="char[*]" kind="static typename(arr)" value="message">
									</right>
								</left>
								<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
									<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
							<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
								<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
									<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="expected">
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
							<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
								<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
									<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="returned">
									</right>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="abort(&quot;fatal error&quot;, details);">
					<expr token="()" type="void" kind="static const typename(void)" value="abort(&quot;fatal error&quot;, details)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;fatal error&quot;" />
						<push token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
							<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
										<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message">
											</right>
										</left>
										<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
											<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
										<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="expected">
											</right>
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
										<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="returned">
											</right>
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
									</expr>
								</stmt>
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="abort">
						</call>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="invalidMemoryAccess(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:37">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
					<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
					</init>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Val">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
						<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</init>
					</init>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="invalidInstruction(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:42">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="emit(load.z32, ret);">
					<expr token="()" type="emit" kind="static const typename(void)" value="emit(load.z32, ret)">
						<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="load">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="z32">
							</right>
						</push>
						<push token=".variable" type="void" kind="static const typename(void)" value="ret">
							<init token="emit" type="void" kind="static const typename(void)" value="ret" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
						</call>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr0">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, noError)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="noError">
					<init token="{}" type="void" kind="static const typename(void)">
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr1">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, null)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr2">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, stackOverflow)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow">
					<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:14">
						<stmt token=".variable" type="uint8[8192]" kind="static typename(arr)" value="data">
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="stackOverflow(ptr);">
							<expr token="()" type="void" kind="static const typename(void)" value="stackOverflow(ptr)">
								<push token=".variable" type="pointer" kind="static const typename(ref)" value="ptr">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow">
								</call>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr3">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, divisionByZero)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="divisionByZero">
					<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:19">
						<stmt token=".variable" type="int32" kind="static const typename(i32)" value="value">
							<init token="/" type="int32" kind="static const typename(i32)" value="3 / 0">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="3" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</init>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr4">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, invalidInstruction)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="invalidInstruction">
					<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:42">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="emit(load.z32, ret);">
							<expr token="()" type="emit" kind="static const typename(void)" value="emit(load.z32, ret)">
								<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="load">
									</left>
									<right token=".variable" type="int32" kind="static const typename(i32)" value="z32">
									</right>
								</push>
								<push token=".variable" type="void" kind="static const typename(void)" value="ret">
									<init token="emit" type="void" kind="static const typename(void)" value="ret" />
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="emit">
								</call>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr5">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, invalidMemoryAccess)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="invalidMemoryAccess">
					<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:37">
						<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
							<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
								<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
							</init>
						</stmt>
						<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Val">
							<init token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
								<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
								</init>
							</init>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr6">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, abortExecution)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="abortExecution">
					<init token="{}" type="void" kind="static const typename(void)" file="test/std/tryExec.ci:23">
						<stmt token=".variable" type="typename" kind="static const typename(ref)" value="NotEquals">
							<field token=".variable" type="char[*]" kind="static typename(arr)" value="message">
							</field>
							<field token=".variable" type="int32" kind="static const typename(i32)" value="expected">
							</field>
							<field token=".variable" type="int32" kind="static const typename(i32)" value="returned">
							</field>
						</stmt>
						<stmt token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
							<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
										<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message">
											</right>
										</left>
										<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
											<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
										<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="expected">
											</right>
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
										<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="returned">
											</right>
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
									</expr>
								</stmt>
							</init>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="abort(&quot;fatal error&quot;, details);">
							<expr token="()" type="void" kind="static const typename(void)" value="abort(&quot;fatal error&quot;, details)">
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;fatal error&quot;" />
								<push token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
									<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
												<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
													<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
													</left>
													<right token=".variable" type="char[*]" kind="static typename(arr)" value="message">
													</right>
												</left>
												<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
													<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
												<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
													<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
													</left>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="expected">
													</right>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
												<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
													<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
													</left>
													<right token=".variable" type="int32" kind="static const typename(i32)" value="returned">
													</right>
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
											</expr>
										</stmt>
									</init>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort">
								</call>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec">
				</call>
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if ((typename(int64)) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="(typename(int64)) == null">
				<left token="()" type="pointer" kind="static const typename(ref)" value="(typename(int64))">
					<push token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
							<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
							</field>
						</call>
					</push>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:44">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</init>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayNoInit">
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceNoInit">
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; arrFixedNoInit.length; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; arrFixedNoInit.length">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</right>
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:54">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="arrFixedNoInit[i] := (42 + i);">
					<expr token=":=" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[i] := (42 + i)">
						<left token="[]" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[i]">
							<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
							</right>
						</left>
						<right token="()" type="int64" kind="static const typename(i64)" value="(42 + i)">
							<push token="+" type="int32" kind="static const typename(i32)" value="42 + i">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="42" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</right>
							</push>
						</right>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitNull">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
			<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
			</init>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
			<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitSlice">
			<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
			<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitPtr">
			<init token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed">
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.copy(strFixed, pointer(&quot;string&quot;), 7);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.copy(strFixed, pointer(&quot;string&quot;), 7)">
				<push token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed">
				</push>
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(&quot;string&quot;)">
					<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</call>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.copy">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
						<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="copy">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string as variant&quot;, strFixed);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string as variant&quot;, strFixed)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string as variant&quot;" />
				<push token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed">
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string to variant&quot;, variant(strFixed));">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string to variant&quot;, variant(strFixed))">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string to variant&quot;" />
				<push token="()" type="variant" kind="static const typename(var)" value="variant(strFixed)">
					<push token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="variant">
						<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
						</field>
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="strArray">
			<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string as variant&quot;, strArray);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string as variant&quot;, strArray)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string as variant&quot;" />
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="strArray">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string to variant&quot;, variant(strArray));">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string to variant&quot;, variant(strArray))">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string to variant&quot;" />
				<push token="()" type="variant" kind="static const typename(var)" value="variant(strArray)">
					<push token=".variable" type="char[*]" kind="static typename(arr)" value="strArray">
						<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="variant">
						<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
						</field>
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="char[]" kind="static typename(arr)" value="strSlice">
			<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string as variant&quot;, strSlice);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string as variant&quot;, strSlice)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string as variant&quot;" />
				<push token=".variable" type="char[]" kind="static typename(arr)" value="strSlice">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string to variant&quot;, variant(strSlice));">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string to variant&quot;, variant(strSlice))">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string to variant&quot;" />
				<push token="()" type="variant" kind="static const typename(var)" value="variant(strSlice)">
					<push token=".variable" type="char[]" kind="static typename(arr)" value="strSlice">
						<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="variant">
						<field token=".variable" type="function" kind="static const typename(ref)" value="is(var: variant, type: typename): bool">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="as(var: variant, type: typename): pointer">
						</field>
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(arrSliceNoInit.length &gt;= (0));">
			<expr token="()" type="void" kind="static const typename(void)" value="assert(arrSliceNoInit.length &gt;= (0))">
				<push token="&gt;=" type="bool" kind="static const typename(bool)" value="arrSliceNoInit.length &gt;= (0)">
					<left token="." type="uint32" kind="static const typename(u32)" value="arrSliceNoInit.length">
						<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceNoInit">
						</left>
						<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
						</right>
					</left>
					<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(arrSliceInitNull.length == (0));">
			<expr token="()" type="void" kind="static const typename(void)" value="assert(arrSliceInitNull.length == (0))">
				<push token="==" type="bool" kind="static const typename(bool)" value="arrSliceInitNull.length == (0)">
					<left token="." type="uint32" kind="static const typename(u32)" value="arrSliceInitNull.length">
						<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull">
						</left>
						<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
						</right>
					</left>
					<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(arrFixedNoInit[0] == (42));">
			<expr token="()" type="void" kind="static const typename(void)" value="assert(arrFixedNoInit[0] == (42))">
				<push token="==" type="bool" kind="static const typename(bool)" value="arrFixedNoInit[0] == (42)">
					<left token="[]" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[0]">
						<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</left>
					<right token="()" type="int64" kind="static const typename(i64)" value="(42)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="lenSlice(values: int64[]): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:103">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values.length;">
					<expr token=":=" type="uint32" kind="static const typename(u32)" value=".result := values.length">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result">
						</left>
						<right token="." type="uint32" kind="static const typename(u32)" value="values.length">
							<left token=".variable" type="int64[]" kind="static typename(arr)" value="values">
							</left>
							<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nthFixed(idx: int32, values: int64[7]): int64">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:104">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values[idx];">
					<expr token=":=" type="int64" kind="static const typename(i64)" value=".result := values[idx]">
						<left token=".variable" type="int64" kind="static const typename(i64)" value=".result">
						</left>
						<right token="[]" type="int64" kind="static const typename(i64)" value="values[idx]">
							<left token=".variable" type="int64[7]" kind="static typename(arr)" value="values">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="idx">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nthArray(idx: int32, values: int64[*]): int64">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:105">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values[idx];">
					<expr token=":=" type="int64" kind="static const typename(i64)" value=".result := values[idx]">
						<left token=".variable" type="int64" kind="static const typename(i64)" value=".result">
						</left>
						<right token="[]" type="int64" kind="static const typename(i64)" value="values[idx]">
							<left token=".variable" type="int64[*]" kind="static typename(arr)" value="values">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="idx">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nthSlice(idx: int32, values: int64[]): int64">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:106">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values[idx];">
					<expr token=":=" type="int64" kind="static const typename(i64)" value=".result := values[idx]">
						<left token=".variable" type="int64" kind="static const typename(i64)" value=".result">
						</left>
						<right token="[]" type="int64" kind="static const typename(i64)" value="values[idx]">
							<left token=".variable" type="int64[]" kind="static typename(arr)" value="values">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="idx">
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(7, arrFixedNoInit.length);">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(7, arrFixedNoInit.length)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, arrSliceInitFixed.length)">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</push>
				<push token="." type="uint32" kind="static const typename(u32)" value="arrSliceInitFixed.length">
					<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
					</left>
					<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, arrSliceInitSlice.length)">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</push>
				<push token="." type="uint32" kind="static const typename(u32)" value="arrSliceInitSlice.length">
					<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
					</left>
					<right token=".variable" type="uint32" kind="static const typename(u32)" value="length">
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(0, lenSlice(null));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(0, lenSlice(null))">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(null)">
					<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(0, lenSlice(arrSliceInitNull));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(0, lenSlice(arrSliceInitNull))">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrSliceInitNull)">
					<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull">
						<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</init>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit))">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrFixedNoInit)">
					<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed))">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrSliceInitFixed)">
					<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
						<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
						</init>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice))">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrSliceInitSlice)">
					<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
						<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
							<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
							</init>
						</init>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice">
					</call>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq">
				</call>
			</expr>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; arrFixedNoInit.length; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; arrFixedNoInit.length">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
					</left>
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length">
					</right>
				</right>
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/array.ci:118">
				<stmt token=".variable" type="int64" kind="static const typename(i64)" value="expected">
					<init token="+" type="int32" kind="static const typename(i32)" value="42 + i">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="42" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</right>
					</init>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrFixedNoInit[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrFixedNoInit[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrFixedNoInit[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[i]">
								<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</right>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrArrayInitFixed[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrArrayInitFixed[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrArrayInitFixed[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrArrayInitFixed[i]">
								<left token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</right>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrSliceInitFixed[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrSliceInitFixed[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrSliceInitFixed[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrSliceInitFixed[i]">
								<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</right>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthFixed(i, arrFixedNoInit));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthFixed(i, arrFixedNoInit))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthFixed(i, arrFixedNoInit)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthFixed(i, arrFixedNoInit)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthFixed">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthFixed(i, arrArrayInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthFixed(i, arrArrayInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthFixed(i, arrArrayInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthFixed(i, arrArrayInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthFixed">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthFixed(i, arrSliceInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthFixed(i, arrSliceInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthFixed(i, arrSliceInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthFixed(i, arrSliceInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthFixed">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthArray(i, arrFixedNoInit));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthArray(i, arrFixedNoInit))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthArray(i, arrFixedNoInit)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthArray(i, arrFixedNoInit)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthArray">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthArray(i, arrArrayInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthArray(i, arrArrayInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthArray(i, arrArrayInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthArray(i, arrArrayInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthArray">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthArray(i, arrSliceInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthArray(i, arrSliceInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthArray(i, arrSliceInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthArray(i, arrSliceInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthArray">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthSlice(i, arrFixedNoInit));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthSlice(i, arrFixedNoInit))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthSlice(i, arrFixedNoInit)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthSlice(i, arrFixedNoInit)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthSlice">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthSlice(i, arrSliceInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthSlice(i, arrSliceInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthSlice(i, arrSliceInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="()" type="int64" kind="static const typename(i64)" value="nthSlice(i, arrSliceInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</push>
								<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthSlice">
								</call>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrSliceInitSlice[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrSliceInitSlice[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrSliceInitSlice[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected">
							</left>
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrSliceInitSlice[i]">
								<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i">
								</right>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert">
						</call>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordMemberTest">
			<field token=".variable" type="typename" kind="static const typename(ref)" value="Inner">
				<field token=".variable" type="int32" kind="static const typename(i32)" value="member">
				</field>
				<field token=".variable" type="int32" kind="static const typename(i32)" value="constant">
				</field>
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="member">
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="constant">
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="memberInit">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="constantInit">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
			</field>
			<field token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="memberRec">
			</field>
			<field token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="constantRec">
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="global">
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="globalInit">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</field>
			<field token=".variable" type="int32" kind="static const typename(i32)" value="globalConstant">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</field>
			<field token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalRec">
			</field>
			<field token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalRecInit">
				<init token="{}" type="RecordMemberTest.Inner" kind="static const typename(val)">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="globalRecInit.member := 4;">
						<expr token=":=" type="void" kind="static const typename(void)" value="globalRecInit.member := 4">
							<left token="." type="int32" kind="static const typename(i32)" value="globalRecInit.member">
								<left token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalRecInit">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="member">
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="4" />
						</expr>
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="globalRecInit.constant := 5;">
						<expr token=":=" type="void" kind="static const typename(void)" value="globalRecInit.constant := 5">
							<left token="." type="int32" kind="static const typename(i32)" value="globalRecInit.constant">
								<left token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalRecInit">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="constant">
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="5" />
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalConstantRec">
				<init token="{}" type="RecordMemberTest.Inner" kind="static const typename(val)">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="globalConstantRec.member := 6;">
						<expr token=":=" type="void" kind="static const typename(void)" value="globalConstantRec.member := 6">
							<left token="." type="int32" kind="static const typename(i32)" value="globalConstantRec.member">
								<left token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalConstantRec">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="member">
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="6" />
						</expr>
					</stmt>
					<stmt token=";" type="void" kind="static const typename(void)" stmt="globalConstantRec.constant := 7;">
						<expr token=":=" type="void" kind="static const typename(void)" value="globalConstantRec.constant := 7">
							<left token="." type="int32" kind="static const typename(i32)" value="globalConstantRec.constant">
								<left token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="globalConstantRec">
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="constant">
								</right>
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="7" />
						</expr>
					</stmt>
				</init>
			</field>
		</stmt>
		<stmt token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
			<init token="{}" type="RecordMemberTest" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.member := 10;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.member := 10">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.member">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="member">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="10" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constant := 11;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constant := 11">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constant">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constant">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="11" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.memberInit := 12;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.memberInit := 12">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.memberInit">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="memberInit">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="12" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constantInit := 13;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constantInit := 13">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constantInit">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constantInit">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="13" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.memberRec.member := 14;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.memberRec.member := 14">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.memberRec.member">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.memberRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
								</left>
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="memberRec">
								</right>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="member">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="14" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.memberRec.constant := 15;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.memberRec.constant := 15">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.memberRec.constant">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.memberRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
								</left>
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="memberRec">
								</right>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constant">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="15" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constantRec.member := 16;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constantRec.member := 16">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constantRec.member">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.constantRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
								</left>
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="constantRec">
								</right>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="member">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="16" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constantRec.constant := 17;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constantRec.constant := 17">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constantRec.constant">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.constantRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
								</left>
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="constantRec">
								</right>
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constant">
							</right>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="17" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest">
			<field token=".variable" type="function" kind="static const typename(ref)" value="staticMethod(this: RecordMethodTest, x: int32): void">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:10">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;staticMethod&quot;, x);">
						<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;staticMethod&quot;, x)">
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;staticMethod&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
							</call>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
				<init token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
					<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:47">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;forwardMethod&quot;, x);">
							<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;forwardMethod&quot;, x)">
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;forwardMethod&quot;" />
								<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
								</call>
							</expr>
						</stmt>
					</init>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod(this: RecordMethodTest, x: int32): void">
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod(this: RecordMethodTest, x: int32): void">
				<init token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
					<init token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
						<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:47">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;forwardMethod&quot;, x);">
								<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;forwardMethod&quot;, x)">
									<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;forwardMethod&quot;" />
									<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
									</call>
								</expr>
							</stmt>
						</init>
					</init>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:40">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;virtualMethod&quot;, x);">
						<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;virtualMethod&quot;, x)">
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;virtualMethod&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
							</call>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:40">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;virtualMethod&quot;, x);">
						<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;virtualMethod&quot;, x)">
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;virtualMethod&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
							</call>
						</expr>
					</stmt>
				</init>
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:47">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;forwardMethod&quot;, x);">
						<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;forwardMethod&quot;, x)">
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;forwardMethod&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
							</call>
						</expr>
					</stmt>
				</init>
			</field>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="globalFunction(this: RecordMethodTest, x: int32): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:57">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;globalFunction&quot;, x);">
					<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;globalFunction&quot;, x)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;globalFunction&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="trace">
						</call>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
			<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
						<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
							<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
							</right>
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
						</right>
					</expr>
				</stmt>
				<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
					<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
						<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
						</right>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
					</right>
				</stmt>
				<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
					<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
						<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
						</right>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
					</right>
				</stmt>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.staticMethod(recordMethodTest, 1);">
			<expr token="()" type="void" kind="static const typename(void)" value="recordMethodTest.staticMethod(recordMethodTest, 1)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<call token="." type="void" kind="static const typename(void)" value="recordMethodTest.staticMethod">
					<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.virtualMethod(recordMethodTest, 1);">
			<expr token="()" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod(recordMethodTest, 1)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<call token="." type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod">
					<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="staticMethod(this: RecordMethodTest, x: int32): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:84">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;extension.staticMethod&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;extension.staticMethod&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;extension.staticMethod&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((this) != null)">
					<test token="!=" type="bool" kind="static const typename(bool)" value="(this) != null">
						<left token="()" type="pointer" kind="static const typename(ref)" value="(this)">
							<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="this">
							</push>
						</left>
						<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:86">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="RecordMethodTest.staticMethod(this, x);">
							<expr token="()" type="void" kind="static const typename(void)" value="RecordMethodTest.staticMethod(this, x)">
								<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="this">
								</push>
								<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest">
										<field token=".variable" type="function" kind="static const typename(ref)" value="staticMethod(this: RecordMethodTest, x: int32): void">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod(this: RecordMethodTest, x: int32): void">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod(this: RecordMethodTest, x: int32): void">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
										</field>
										<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
										</field>
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod">
									</right>
								</call>
							</expr>
						</stmt>
					</then>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:90">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;extension.virtualMethod&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;extension.virtualMethod&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;extension.virtualMethod&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((this) != null)">
					<test token="!=" type="bool" kind="static const typename(bool)" value="(this) != null">
						<left token="()" type="pointer" kind="static const typename(ref)" value="(this)">
							<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="this">
							</push>
						</left>
						<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang/method.ci:92">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="this.virtualMethod(this, x);">
							<expr token="()" type="void" kind="static const typename(void)" value="this.virtualMethod(this, x)">
								<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="this">
								</push>
								<push token=".variable" type="int32" kind="static const typename(i32)" value="x">
								</push>
								<call token="." type="void" kind="static const typename(void)" value="this.virtualMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="this">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
									</right>
								</call>
							</expr>
						</stmt>
					</then>
				</stmt>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="staticMethod(recordMethodTest, 2);">
			<expr token="()" type="void" kind="static const typename(void)" value="staticMethod(recordMethodTest, 2)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="staticMethod">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="virtualMethod(recordMethodTest, 2);">
			<expr token="()" type="void" kind="static const typename(void)" value="virtualMethod(recordMethodTest, 2)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="RecordMethodTest.staticMethod(recordMethodTest, 3);">
			<expr token="()" type="void" kind="static const typename(void)" value="RecordMethodTest.staticMethod(recordMethodTest, 3)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<call token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest">
						<field token=".variable" type="function" kind="static const typename(ref)" value="staticMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="RecordMethodTest.virtualMethod(recordMethodTest, 3);">
			<expr token="()" type="void" kind="static const typename(void)" value="RecordMethodTest.virtualMethod(recordMethodTest, 3)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<call token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.virtualMethod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest">
						<field token=".variable" type="function" kind="static const typename(ref)" value="staticMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod(this: RecordMethodTest, x: int32): void">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod(this: RecordMethodTest, x: int32): void">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.virtualMethod(recordMethodTest, 3);">
			<expr token="()" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod(recordMethodTest, 3)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
									</left>
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod">
									</right>
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction">
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod">
							</right>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
								</right>
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
							</right>
						</stmt>
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<call token="." type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod">
					<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod">
					</right>
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgbF32">
			<field token=".variable" type="float32" kind="static const typename(f32)" value="r">
			</field>
			<field token=".variable" type="float32" kind="static const typename(f32)" value="g">
			</field>
			<field token=".variable" type="float32" kind="static const typename(f32)" value="b">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgbU8">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="g">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="r">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="color">
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="col">
			</field>
			<field token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Color">
			<field token=".variable" type="rgbF32" kind="static const typename(val)" value="value">
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="create(type: typename): pointer">
				<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(7)" />
			</field>
			<field token=".variable" type="function" kind="static const typename(ref)" value="as(obj: object, type: typename): pointer">
				<init token="emit" type="pointer" kind="static const typename(ref)" value="nfc(8)" />
			</field>
		</stmt>
		<stmt token=".variable" type="rgbU8" kind="static const typename(val)" value="black">
			<init token="{}" type="rgbU8" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="black.r := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="black.r := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="black.r">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="black">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="black.g := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="black.g := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="black.g">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="black">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="black.b := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="black.b := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="black.b">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="black">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="rgbU8" kind="static const typename(val)" value="green">
			<init token="{}" type="rgbU8" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="green.r := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="green.r := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="green.r">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="green">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="green.g := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="green.g := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="green.g">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="green">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="green.b := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="green.b := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="green.b">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="green">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="rgbU8" kind="static const typename(val)" value="white">
			<init token="{}" type="rgbU8" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="white.r := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="white.r := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="white.r">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="white">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="white.g := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="white.g := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="white.g">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="white">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="white.b := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="white.b := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="white.b">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="white">
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="color" kind="static const typename(val)" value="cyan">
			<init token="{}" type="color" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="cyan.col := (65535);">
					<expr token=":=" type="void" kind="static const typename(void)" value="cyan.col := (65535)">
						<left token="." type="uint32" kind="static const typename(u32)" value="cyan.col">
							<left token=".variable" type="color" kind="static const typename(val)" value="cyan">
							</left>
							<right token=".variable" type="uint32" kind="static const typename(u32)" value="col">
							</right>
						</left>
						<right token="()" type="uint32" kind="static const typename(u32)" value="(65535)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="65535" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="color" kind="static const typename(val)" value="blue">
			<init token="{}" type="color" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="blue.rgb.r := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="blue.rgb.r := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="blue.rgb.r">
							<left token="." type="rgbU8" kind="static const typename(val)" value="blue.rgb">
								<left token=".variable" type="color" kind="static const typename(val)" value="blue">
								</left>
								<right token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb">
								</right>
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="blue.rgb.g := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="blue.rgb.g := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="blue.rgb.g">
							<left token="." type="rgbU8" kind="static const typename(val)" value="blue.rgb">
								<left token=".variable" type="color" kind="static const typename(val)" value="blue">
								</left>
								<right token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb">
								</right>
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="blue.rgb.b := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="blue.rgb.b := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="blue.rgb.b">
							<left token="." type="rgbU8" kind="static const typename(val)" value="blue.rgb">
								<left token=".variable" type="color" kind="static const typename(val)" value="blue">
								</left>
								<right token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb">
								</right>
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b">
							</right>
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack0">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_0">
			</field>
			<field token=".variable" type="uint64" kind="static const typename(u64)" value="a">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_1">
			</field>
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_2">
			</field>
			<field token=".variable" type="uint16" kind="static const typename(u32)" value="c">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack1">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_0">
			</field>
			<field token=".variable" type="uint64" kind="static const typename(u64)" value="a">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_1">
			</field>
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_2">
			</field>
			<field token=".variable" type="uint16" kind="static const typename(u32)" value="c">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack2">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_0">
			</field>
			<field token=".variable" type="uint64" kind="static const typename(u64)" value="a">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_1">
			</field>
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_2">
			</field>
			<field token=".variable" type="uint16" kind="static const typename(u32)" value="c">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack4">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_0">
			</field>
			<field token=".variable" type="uint64" kind="static const typename(u64)" value="a">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_1">
			</field>
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_2">
			</field>
			<field token=".variable" type="uint16" kind="static const typename(u32)" value="c">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack8">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_0">
			</field>
			<field token=".variable" type="uint64" kind="static const typename(u64)" value="a">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_1">
			</field>
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_2">
			</field>
			<field token=".variable" type="uint16" kind="static const typename(u32)" value="c">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_packDef">
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_0">
			</field>
			<field token=".variable" type="uint64" kind="static const typename(u64)" value="a">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_1">
			</field>
			<field token=".variable" type="uint32" kind="static const typename(u32)" value="b">
			</field>
			<field token=".variable" type="uint8" kind="static const typename(u32)" value="_2">
			</field>
			<field token=".variable" type="uint16" kind="static const typename(u32)" value="c">
			</field>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="a">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="b">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="shift">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
			<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
				<init token=".literal" type="bool" kind="static const typename(bool)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
			<init token="!" type="bool" kind="static const typename(bool)" value="!false">
				<right token=".variable" type="bool" kind="static const typename(bool)" value="false">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolAnd">
			<init token="&amp;" type="bool" kind="static const typename(bool)" value="boolA &amp; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolIor">
			<init token="|" type="bool" kind="static const typename(bool)" value="boolA | boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolXor">
			<init token="^" type="bool" kind="static const typename(bool)" value="boolA ^ boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolNot">
			<init token="!" type="bool" kind="static const typename(bool)" value="!boolB">
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="boolA == boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="boolA != boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolClt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="boolA &lt; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="boolA &lt;= boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="boolA &gt; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="boolA &gt;= boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
				</left>
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrA">
			<init token=".literal" type="char" kind="static const typename(i32)" value="&apos;a&apos;" />
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrB">
			<init token=".literal" type="char" kind="static const typename(i32)" value="&apos;b&apos;" />
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrPls">
			<init token="+" type="char" kind="static const typename(i32)" value="+chrB">
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrNeg">
			<init token="-" type="char" kind="static const typename(i32)" value="-chrB">
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrCmt">
			<init token="~" type="char" kind="static const typename(i32)" value="~chrB">
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrAdd">
			<init token="+" type="char" kind="static const typename(i32)" value="chrA + chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrSub">
			<init token="-" type="char" kind="static const typename(i32)" value="chrA - chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrMul">
			<init token="*" type="char" kind="static const typename(i32)" value="chrA * chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrDiv">
			<init token="/" type="char" kind="static const typename(i32)" value="chrA / chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrMod">
			<init token="%" type="char" kind="static const typename(i32)" value="chrA % chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrAnd">
			<init token="&amp;" type="char" kind="static const typename(i32)" value="chrA &amp; chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrIor">
			<init token="|" type="char" kind="static const typename(i32)" value="chrA | chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrXor">
			<init token="^" type="char" kind="static const typename(i32)" value="chrA ^ chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrShl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(chrA) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(chrA)">
					<push token=".variable" type="char" kind="static const typename(i32)" value="chrA">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrShr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(chrA) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(chrA)">
					<push token=".variable" type="char" kind="static const typename(i32)" value="chrA">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrNot">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(chrB)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(chrB)">
					<push token=".variable" type="char" kind="static const typename(i32)" value="chrB">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="chrA == chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="chrA != chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrClt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="chrA &lt; chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="chrA &lt;= chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="chrA &gt; chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="chrA &gt;= chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA">
				</left>
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Pls">
			<init token="+" type="int8" kind="static const typename(i32)" value="+i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Neg">
			<init token="-" type="int8" kind="static const typename(i32)" value="-i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Cmt">
			<init token="~" type="int8" kind="static const typename(i32)" value="~i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Add">
			<init token="+" type="int8" kind="static const typename(i32)" value="i8A + i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Sub">
			<init token="-" type="int8" kind="static const typename(i32)" value="i8A - i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Mul">
			<init token="*" type="int8" kind="static const typename(i32)" value="i8A * i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Div">
			<init token="/" type="int8" kind="static const typename(i32)" value="i8A / i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Mod">
			<init token="%" type="int8" kind="static const typename(i32)" value="i8A % i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8And">
			<init token="&amp;" type="int8" kind="static const typename(i32)" value="i8A &amp; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Ior">
			<init token="|" type="int8" kind="static const typename(i32)" value="i8A | i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Xor">
			<init token="^" type="int8" kind="static const typename(i32)" value="i8A ^ i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(i8A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i8A)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(i8A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i8A)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i8B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i8B)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i8A == i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i8A != i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i8A &lt; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i8A &lt;= i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i8A &gt; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i8A &gt;= i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
				</left>
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Pls">
			<init token="+" type="uint8" kind="static const typename(u32)" value="+u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Neg">
			<init token="-" type="uint8" kind="static const typename(u32)" value="-u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Cmt">
			<init token="~" type="uint8" kind="static const typename(u32)" value="~u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Add">
			<init token="+" type="uint8" kind="static const typename(u32)" value="u8A + u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Sub">
			<init token="-" type="uint8" kind="static const typename(u32)" value="u8A - u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Mul">
			<init token="*" type="uint8" kind="static const typename(u32)" value="u8A * u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Div">
			<init token="/" type="uint8" kind="static const typename(u32)" value="u8A / u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Mod">
			<init token="%" type="uint8" kind="static const typename(u32)" value="u8A % u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8And">
			<init token="&amp;" type="uint8" kind="static const typename(u32)" value="u8A &amp; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Ior">
			<init token="|" type="uint8" kind="static const typename(u32)" value="u8A | u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Xor">
			<init token="^" type="uint8" kind="static const typename(u32)" value="u8A ^ u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(u8A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u8A)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(u8A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u8A)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u8B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u8B)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u8A == u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u8A != u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u8A &lt; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u8A &lt;= u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u8A &gt; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u8A &gt;= u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
				</left>
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Pls">
			<init token="+" type="int16" kind="static const typename(i32)" value="+i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Neg">
			<init token="-" type="int16" kind="static const typename(i32)" value="-i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Cmt">
			<init token="~" type="int16" kind="static const typename(i32)" value="~i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Add">
			<init token="+" type="int16" kind="static const typename(i32)" value="i16A + i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Sub">
			<init token="-" type="int16" kind="static const typename(i32)" value="i16A - i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Mul">
			<init token="*" type="int16" kind="static const typename(i32)" value="i16A * i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Div">
			<init token="/" type="int16" kind="static const typename(i32)" value="i16A / i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Mod">
			<init token="%" type="int16" kind="static const typename(i32)" value="i16A % i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16And">
			<init token="&amp;" type="int16" kind="static const typename(i32)" value="i16A &amp; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Ior">
			<init token="|" type="int16" kind="static const typename(i32)" value="i16A | i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Xor">
			<init token="^" type="int16" kind="static const typename(i32)" value="i16A ^ i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(i16A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i16A)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(i16A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i16A)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i16B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i16B)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i16A == i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i16A != i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i16A &lt; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i16A &lt;= i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i16A &gt; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i16A &gt;= i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
				</left>
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Pls">
			<init token="+" type="uint16" kind="static const typename(u32)" value="+u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Neg">
			<init token="-" type="uint16" kind="static const typename(u32)" value="-u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Cmt">
			<init token="~" type="uint16" kind="static const typename(u32)" value="~u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Add">
			<init token="+" type="uint16" kind="static const typename(u32)" value="u16A + u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Sub">
			<init token="-" type="uint16" kind="static const typename(u32)" value="u16A - u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Mul">
			<init token="*" type="uint16" kind="static const typename(u32)" value="u16A * u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Div">
			<init token="/" type="uint16" kind="static const typename(u32)" value="u16A / u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Mod">
			<init token="%" type="uint16" kind="static const typename(u32)" value="u16A % u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16And">
			<init token="&amp;" type="uint16" kind="static const typename(u32)" value="u16A &amp; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Ior">
			<init token="|" type="uint16" kind="static const typename(u32)" value="u16A | u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Xor">
			<init token="^" type="uint16" kind="static const typename(u32)" value="u16A ^ u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(u16A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u16A)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(u16A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u16A)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
					</push>
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u16B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u16B)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u16A == u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u16A != u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u16A &lt; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u16A &lt;= u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u16A &gt; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u16A &gt;= u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
				</left>
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Pls">
			<init token="+" type="int32" kind="static const typename(i32)" value="+i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Neg">
			<init token="-" type="int32" kind="static const typename(i32)" value="-i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Cmt">
			<init token="~" type="int32" kind="static const typename(i32)" value="~i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Add">
			<init token="+" type="int32" kind="static const typename(i32)" value="i32A + i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Sub">
			<init token="-" type="int32" kind="static const typename(i32)" value="i32A - i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Mul">
			<init token="*" type="int32" kind="static const typename(i32)" value="i32A * i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Div">
			<init token="/" type="int32" kind="static const typename(i32)" value="i32A / i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Mod">
			<init token="%" type="int32" kind="static const typename(i32)" value="i32A % i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32And">
			<init token="&amp;" type="int32" kind="static const typename(i32)" value="i32A &amp; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ior">
			<init token="|" type="int32" kind="static const typename(i32)" value="i32A | i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Xor">
			<init token="^" type="int32" kind="static const typename(i32)" value="i32A ^ i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="i32A &lt;&lt; shift">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="i32A &gt;&gt; shift">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i32B)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i32A == i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i32A != i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i32A &lt; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i32A &lt;= i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i32A &gt; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i32A &gt;= i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Pls">
			<init token="+" type="uint32" kind="static const typename(u32)" value="+u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Neg">
			<init token="-" type="uint32" kind="static const typename(u32)" value="-u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Cmt">
			<init token="~" type="uint32" kind="static const typename(u32)" value="~u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Add">
			<init token="+" type="uint32" kind="static const typename(u32)" value="u32A + u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Sub">
			<init token="-" type="uint32" kind="static const typename(u32)" value="u32A - u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Mul">
			<init token="*" type="uint32" kind="static const typename(u32)" value="u32A * u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Div">
			<init token="/" type="uint32" kind="static const typename(u32)" value="u32A / u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Mod">
			<init token="%" type="uint32" kind="static const typename(u32)" value="u32A % u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32And">
			<init token="&amp;" type="uint32" kind="static const typename(u32)" value="u32A &amp; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Ior">
			<init token="|" type="uint32" kind="static const typename(u32)" value="u32A | u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Xor">
			<init token="^" type="uint32" kind="static const typename(u32)" value="u32A ^ u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Shl">
			<init token="&lt;&lt;" type="uint32" kind="static const typename(u32)" value="u32A &lt;&lt; shift">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Shr">
			<init token="&gt;&gt;" type="uint32" kind="static const typename(u32)" value="u32A &gt;&gt; shift">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u32B)">
					<push token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u32A == u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u32A != u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u32A &lt; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u32A &lt;= u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u32A &gt; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u32A &gt;= u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
				</left>
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Pls">
			<init token="+" type="int64" kind="static const typename(i64)" value="+i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Neg">
			<init token="-" type="int64" kind="static const typename(i64)" value="-i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Cmt">
			<init token="~" type="int64" kind="static const typename(i64)" value="~i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Add">
			<init token="+" type="int64" kind="static const typename(i64)" value="i64A + i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Sub">
			<init token="-" type="int64" kind="static const typename(i64)" value="i64A - i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Mul">
			<init token="*" type="int64" kind="static const typename(i64)" value="i64A * i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Div">
			<init token="/" type="int64" kind="static const typename(i64)" value="i64A / i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Mod">
			<init token="%" type="int64" kind="static const typename(i64)" value="i64A % i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64And">
			<init token="&amp;" type="int64" kind="static const typename(i64)" value="i64A &amp; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Ior">
			<init token="|" type="int64" kind="static const typename(i64)" value="i64A | i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Xor">
			<init token="^" type="int64" kind="static const typename(i64)" value="i64A ^ i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Shl">
			<init token="&lt;&lt;" type="int64" kind="static const typename(i64)" value="i64A &lt;&lt; shift">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Shr">
			<init token="&gt;&gt;" type="int64" kind="static const typename(i64)" value="i64A &gt;&gt; shift">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i64B)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i64A == i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i64A != i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i64A &lt; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i64A &lt;= i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i64A &gt; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i64A &gt;= i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
				</left>
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Pls">
			<init token="+" type="uint64" kind="static const typename(u64)" value="+u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Neg">
			<init token="-" type="uint64" kind="static const typename(u64)" value="-u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Cmt">
			<init token="~" type="uint64" kind="static const typename(u64)" value="~u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Add">
			<init token="+" type="uint64" kind="static const typename(u64)" value="u64A + u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Sub">
			<init token="-" type="uint64" kind="static const typename(u64)" value="u64A - u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Mul">
			<init token="*" type="uint64" kind="static const typename(u64)" value="u64A * u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Div">
			<init token="/" type="uint64" kind="static const typename(u64)" value="u64A / u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Mod">
			<init token="%" type="uint64" kind="static const typename(u64)" value="u64A % u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64And">
			<init token="&amp;" type="uint64" kind="static const typename(u64)" value="u64A &amp; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Ior">
			<init token="|" type="uint64" kind="static const typename(u64)" value="u64A | u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Xor">
			<init token="^" type="uint64" kind="static const typename(u64)" value="u64A ^ u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Shl">
			<init token="&lt;&lt;" type="uint64" kind="static const typename(u64)" value="u64A &lt;&lt; shift">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Shr">
			<init token="&gt;&gt;" type="uint64" kind="static const typename(u64)" value="u64A &gt;&gt; shift">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u64B)">
					<push token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u64A == u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u64A != u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u64A &lt; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u64A &lt;= u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u64A &gt; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u64A &gt;= u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
				</left>
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Pls">
			<init token="+" type="float32" kind="static const typename(f32)" value="+f32B">
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Neg">
			<init token="-" type="float32" kind="static const typename(f32)" value="-f32B">
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Add">
			<init token="+" type="float32" kind="static const typename(f32)" value="f32A + f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Sub">
			<init token="-" type="float32" kind="static const typename(f32)" value="f32A - f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Mul">
			<init token="*" type="float32" kind="static const typename(f32)" value="f32A * f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Div">
			<init token="/" type="float32" kind="static const typename(f32)" value="f32A / f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Mod">
			<init token="%" type="float32" kind="static const typename(f32)" value="f32A % f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(f32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(f32B)">
					<push token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="f32A == f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="f32A != f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="f32A &lt; f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="f32A &lt;= f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="f32A &gt; f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="f32A &gt;= f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
				</left>
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Pls">
			<init token="+" type="float64" kind="static const typename(f64)" value="+f64B">
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Neg">
			<init token="-" type="float64" kind="static const typename(f64)" value="-f64B">
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Add">
			<init token="+" type="float64" kind="static const typename(f64)" value="f64A + f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Sub">
			<init token="-" type="float64" kind="static const typename(f64)" value="f64A - f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Mul">
			<init token="*" type="float64" kind="static const typename(f64)" value="f64A * f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Div">
			<init token="/" type="float64" kind="static const typename(f64)" value="f64A / f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Mod">
			<init token="%" type="float64" kind="static const typename(f64)" value="f64A % f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(f64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(f64B)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
					</push>
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="f64A == f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="f64A != f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="f64A &lt; f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="f64A &lt;= f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="f64A &gt; f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="f64A &gt;= f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
				</left>
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(shift)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer">
					<field token=".variable" type="function" kind="static const typename(ref)" value="alloc(ptr: pointer, size: int32): pointer">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="fill(dst: pointer, value: int32, size: int32): pointer">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="copy(dst: pointer, src: pointer, size: int32): pointer">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="move(dst: pointer, src: pointer, size: int32): pointer">
					</field>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="ptrCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="ptrA == ptrB">
				<left token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="ptrCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="ptrA != ptrB">
				<left token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
				</right>
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 == 0)">
			<test token="==" type="bool" kind="static const typename(bool)" value="0 == 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:3">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 1, &quot;0 == 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 1, &quot;0 == 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 != 0)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="0 != 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:7">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 2, &quot;0 != 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 2, &quot;0 != 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 == 0)">
			<test token="==" type="bool" kind="static const typename(bool)" value="0 == 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:11">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 3, &quot;0 == 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 3, &quot;0 == 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</expr>
				</stmt>
			</then>
			<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:14">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 4, &quot;0 != 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 4, &quot;0 != 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</expr>
				</stmt>
			</else>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 != 0)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="0 != 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:18">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 5, &quot;0 != 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 5, &quot;0 != 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</expr>
				</stmt>
			</then>
			<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:21">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 6, &quot;0 == 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 6, &quot;0 == 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</left>
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
							</right>
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
						</call>
					</expr>
				</stmt>
			</else>
		</stmt>
		<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:25">
			<stmt token=".variable" type="int32" kind="static const typename(i32)" value="t">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:28">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 7, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 7, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</then>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:32">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 8, &quot;t != 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 8, &quot;t != 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</then>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:36">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 9, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 9, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:39">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t != 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t != 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</else>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:43">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 11, &quot;t != 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 11, &quot;t != 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="11" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:46">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 12, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 12, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="12" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</else>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:50">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 9, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 9, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
								</left>
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
								</right>
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
							</call>
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:53">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 1)">
						<test token="==" type="bool" kind="static const typename(bool)" value="t == 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
							</left>
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:53">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 1&quot;, t);">
								<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 1&quot;, t)">
									<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
										<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
										</left>
										<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
										</right>
									</push>
									<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
									<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 1&quot;" />
									<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
										<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
									</call>
								</expr>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:56">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 2)">
								<test token="==" type="bool" kind="static const typename(bool)" value="t == 2">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
									</left>
									<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:56">
									<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 2&quot;, t);">
										<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 2&quot;, t)">
											<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
												<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
												</left>
												<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
												</right>
											</push>
											<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
											<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 2&quot;" />
											<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
												<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
											</push>
											<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
											</call>
										</expr>
									</stmt>
								</then>
								<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:59">
									<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 3)">
										<test token="==" type="bool" kind="static const typename(bool)" value="t == 3">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
											</left>
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
										</test>
										<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:59">
											<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 3&quot;, t);">
												<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 3&quot;, t)">
													<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
														<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
														</left>
														<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
														</right>
													</push>
													<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
													<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 3&quot;" />
													<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
														<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
													</push>
													<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
													</call>
												</expr>
											</stmt>
										</then>
										<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:62">
											<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 4)">
												<test token="==" type="bool" kind="static const typename(bool)" value="t == 4">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
													</left>
													<right token=".literal" type="int32" kind="static const typename(i32)" value="4" />
												</test>
												<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:62">
													<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 4&quot;, t);">
														<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 4&quot;, t)">
															<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
																<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
																</left>
																<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
																</right>
															</push>
															<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
															<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 4&quot;" />
															<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
																<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
															</push>
															<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
															</call>
														</expr>
													</stmt>
												</then>
												<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:65">
													<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 5)">
														<test token="==" type="bool" kind="static const typename(bool)" value="t == 5">
															<left token=".variable" type="int32" kind="static const typename(i32)" value="t">
															</left>
															<right token=".literal" type="int32" kind="static const typename(i32)" value="5" />
														</test>
														<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:65">
															<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 5&quot;, t);">
																<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 5&quot;, t)">
																	<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
																		<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
																		</left>
																		<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
																		</right>
																	</push>
																	<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
																	<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 5&quot;" />
																	<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
																		<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
																	</push>
																	<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
																	</call>
																</expr>
															</stmt>
														</then>
														<else token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:68">
															<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t not in (0, 1, 2, 3, 4, 5)&quot;, t);">
																<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t not in (0, 1, 2, 3, 4, 5)&quot;, t)">
																	<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
																		<left token=".variable" type="function" kind="static const typename(ref)" value="raise">
																		</left>
																		<right token=".variable" type="int64" kind="static const typename(i64)" value="debug">
																		</right>
																	</push>
																	<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
																	<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t not in (0, 1, 2, 3, 4, 5)&quot;" />
																	<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
																		<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
																	</push>
																	<call token=".variable" type="function" kind="static const typename(ref)" value="raise">
																	</call>
																</expr>
															</stmt>
														</else>
													</stmt>
												</else>
											</stmt>
										</else>
									</stmt>
								</else>
							</stmt>
						</else>
					</stmt>
				</else>
			</stmt>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if ((typename(int64)) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="(typename(int64)) == null">
				<left token="()" type="pointer" kind="static const typename(ref)" value="(typename(int64))">
					<push token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
							<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
							</field>
						</call>
					</push>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:73">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="error(&quot;integer is not declared&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="error(&quot;integer is not declared&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;integer is not declared&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="error">
						</call>
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(int64) != typename)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="typename(int64) != typename">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename">
						<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
						</field>
					</call>
				</left>
				<right token=".variable" type="typename" kind="static const typename(ref)" value="typename">
					<field token=".variable" type="function" kind="static const typename(ref)" value="base(type: typename): typename">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="file(type: typename): .cstr">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="line(type: typename): int32">
					</field>
					<field token=".variable" type="function" kind="static const typename(ref)" value="name(type: typename): .cstr">
					</field>
				</right>
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementIf.ci:77">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="error(&quot;integer is not a type&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="error(&quot;integer is not a type&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;integer is not a type&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="error">
						</call>
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; ; )">
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:3">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for ( ; ; )&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for ( ; ; )&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for ( ; ; )&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
				<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
			</stmt>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; 2; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 2">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:8">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for (int i = 0; i &lt; 2; i += 1)&quot;, i);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for (int i = 0; i &lt; 2; i += 1)&quot;, i)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for (int i = 0; i &lt; 2; i += 1)&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="forIdx">
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (forIdx := 0; forIdx &lt; 2; forIdx := forIdx + 1)">
			<init token=":=" type="int32" kind="static const typename(i32)" value="forIdx := 0">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx">
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="forIdx &lt; 2">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx">
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="forIdx := forIdx + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx">
				</left>
				<right token="+" type="int32" kind="static const typename(i32)" value="forIdx + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:13">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for (forIdx = 0; forIdx &lt; 2; forIdx += 1)&quot;, forIdx);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for (forIdx = 0; forIdx &lt; 2; forIdx += 1)&quot;, forIdx)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for (forIdx = 0; forIdx &lt; 2; forIdx += 1)&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="forIdx">
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; 7; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 7">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="7" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:17">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i &lt; 2)">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 2">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:18">
						<stmt token="continue" type="void" kind="static const typename(void)" stmt="continue;" />
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for with continue&quot;, i);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for with continue&quot;, i)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for with continue&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; 7; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 7">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="7" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
				</left>
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:24">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i &gt; 2)">
					<test token="&gt;" type="bool" kind="static const typename(bool)" value="i &gt; 2">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i">
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang/statementFor.ci:25">
						<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for with break&quot;, i);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for with break&quot;, i)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for with break&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug">
						</call>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathFloor_1">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.floor(3.200000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="3.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.floor">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathFloor_2">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.floor(3.500000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="3.500000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.floor">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathFloor_3">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.floor(3.600000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="3.600000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.floor">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathFloor_4">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.floor(-3.200000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-3.200000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="3.200000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.floor">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathFloor_5">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.floor(-3.500000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-3.500000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="3.500000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.floor">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathFloor_6">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.floor(-3.600000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-3.600000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="3.600000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.floor">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="floor">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSign_1F">
			<init token="()" type="int32" kind="static const typename(i32)" value="Math.sign(0.200000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sign">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sign">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSign_2F">
			<init token="()" type="int32" kind="static const typename(i32)" value="Math.sign(0.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sign">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sign">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSign_3F">
			<init token="()" type="int32" kind="static const typename(i32)" value="Math.sign(-0.900000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-0.900000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="0.900000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.sign">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sign">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSign_1f">
			<init token="()" type="int32" kind="static const typename(i32)" value="Math.sign(0.200000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sign">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sign">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSign_2f">
			<init token="()" type="int32" kind="static const typename(i32)" value="Math.sign(0.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sign">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sign">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSign_3f">
			<init token="()" type="int32" kind="static const typename(i32)" value="Math.sign(-0.900000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-0.900000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="0.900000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.sign">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sign">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbs_1F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.abs(0.200000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbs_2F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.abs(0.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbs_3F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.abs(-0.900000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-0.900000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="0.900000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbs_1f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.abs(0.200000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbs_2f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.abs(0.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbs_3f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.abs(-0.900000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-0.900000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="0.900000" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="abs">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMin_1f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.min(1.000000, 2.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="2.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.min">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="min">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMax_2f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.max(1.000000, 2.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="2.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.max">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="max">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMin_1F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.min(1.000000, 2.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="2.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.min">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="min">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMax_2F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.max(1.000000, 2.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="2.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.max">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="max">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathClamp_1f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.clamp(10.000000, 0.000000, 1.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.clamp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="clamp">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathClamp_1F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.clamp(10.000000, 0.000000, 1.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.clamp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="clamp">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathLerp_1f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.lerp(0.500000, 0.000000, 2.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.500000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="2.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.lerp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="lerp">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathLerp_1F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.lerp(0.500000, 0.000000, 2.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.500000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="2.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.lerp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="lerp">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSmooth_1f">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.smooth(1.000000, 0.000000, 1.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.smooth">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="smooth">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSmooth_1F">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.smooth(1.000000, 0.000000, 1.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.smooth">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="smooth">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMin_nan">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.min()">
				<call token="." type="function" kind="static const typename(ref)" value="Math.min">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="min">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMin_1">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.min">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="min">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMax_nan">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.max()">
				<call token="." type="function" kind="static const typename(ref)" value="Math.max">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="max">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathMax_9">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.max">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="max">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSum_0">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.sum()">
				<call token="." type="function" kind="static const typename(ref)" value="Math.sum">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSum_1">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.sum(1)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sum">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSum_3">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.sum(1, 2)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sum">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSum_55">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.sum">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sum">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_0">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_1">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_2">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x, 1.000000, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_3">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_4">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_5">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_6">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="testMathEval_x">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="10" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.eval">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="eval">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSin_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.sin(Math.pi / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="Math.pi / (2)">
					<left token="." type="float64" kind="static const typename(f64)" value="Math.pi">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sin">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathCos_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.cos(Math.pi / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="Math.pi / (2)">
					<left token="." type="float64" kind="static const typename(f64)" value="Math.pi">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="cos">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathTan_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.tan(Math.pi / (4))">
				<push token="/" type="float64" kind="static const typename(f64)" value="Math.pi / (4)">
					<left token="." type="float64" kind="static const typename(f64)" value="Math.pi">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="tan">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathSinh_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.sinh(Math.pi / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="Math.pi / (2)">
					<left token="." type="float64" kind="static const typename(f64)" value="Math.pi">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.sinh">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="sinh">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathCosh_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.cosh(Math.pi / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="Math.pi / (2)">
					<left token="." type="float64" kind="static const typename(f64)" value="Math.pi">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="Math.cosh">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="cosh">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAsin_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.asin(0.200000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.asin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="asin">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAcos_f64">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.acos(0.200000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.200000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.acos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="acos">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="testMathCmp_f32">
			<init token="==" type="bool" kind="static const typename(bool)" value="Math.cmp(0.000010, 0.000012, 0.000010) == 0">
				<left token="()" type="int32" kind="static const typename(i32)" value="Math.cmp(0.000010, 0.000012, 0.000010)">
					<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000010" />
					<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000012" />
					<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000010" />
					<call token="." type="function" kind="static const typename(ref)" value="Math.cmp">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="cmp">
						</right>
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="testMathCmp_f64">
			<init token="==" type="bool" kind="static const typename(bool)" value="Math.cmp(0.000010, 0.000012, 0.000010) == 0">
				<left token="()" type="int32" kind="static const typename(i32)" value="Math.cmp(0.000010, 0.000012, 0.000010)">
					<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000010" />
					<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000012" />
					<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000010" />
					<call token="." type="function" kind="static const typename(ref)" value="Math.cmp">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
							<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
							</field>
							<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
							</field>
							<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
							</field>
							<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
							</field>
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="cmp">
						</right>
					</call>
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_0a">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(10.000000, 10.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_0b">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(0.000000, 10.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_0c">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(-10.000000, 10.000000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-10.000000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_9a">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(19.000000, 10.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="19.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_9b">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(9.000000, 10.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="9.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_9c">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(-1.000000, 10.000000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-1.000000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_9d">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(-11.000000, 10.000000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-11.000000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="11.000000" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_8a">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(18.000000, 10.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="18.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_8b">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(8.000000, 10.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="8.000000" />
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_8c">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(-2.000000, 10.000000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-2.000000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="2.000000" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="testMathAbsMod_f64_8d">
			<init token="()" type="float64" kind="static const typename(f64)" value="Math.absMod(-12.000000, 10.000000)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-12.000000">
					<right token=".literal" type="float64" kind="static const typename(f64)" value="12.000000" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_0a">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(10.000000, 10.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_0b">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(0.000000, 10.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_0c">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(-10.000000, 10.000000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-10.000000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_9a">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(19.000000, 10.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="19.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_9b">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(9.000000, 10.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="9.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_9c">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(-1.000000, 10.000000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-1.000000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_9d">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(-11.000000, 10.000000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-11.000000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="11.000000" />
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_8a">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(18.000000, 10.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="18.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_8b">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(8.000000, 10.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="8.000000" />
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_8c">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(-2.000000, 10.000000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-2.000000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="2.000000" />
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="testMathAbsMod_f32_8d">
			<init token="()" type="float32" kind="static const typename(f32)" value="Math.absMod(-12.000000, 10.000000)">
				<push token="-" type="float32" kind="static const typename(f32)" value="-12.000000">
					<right token=".literal" type="float32" kind="static const typename(f32)" value="12.000000" />
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="10.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="Math.absMod">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="Math">
						<field token=".variable" type="float64" kind="static const typename(f64)" value="pi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="e">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log2E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="ln10">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="log10E">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="phi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrt2">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtE">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="sqrtPhi">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="nan">
						</field>
						<field token=".variable" type="float64" kind="static const typename(f64)" value="inf">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="modf(x: float64, intPart: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="floor(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="ceil(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="round(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float32): int32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sign(x: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="abs(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float32, mod: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="absMod(val: float64, mod: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="clamp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="lerp(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float32, a: float32, b: float32): float32">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="smooth(t: float64, a: float64, b: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="min(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="max(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sum(data: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="mean(data: float64[]): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="eval(x: float64, polynomial: float64[]): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float32, b: float32, eps: float32): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cmp(a: float64, b: float64, eps: float64): int32">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinCos(arg: float64, quad: int32): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="sin(arg: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="cos(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="tan(arg: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="sinh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="cosh(x: float64): float64">
						</field>
						<field token=".variable" type="function" kind="static const typename(ref)" value="asin(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="acos(x: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="radians(degrees: float64): float64">
						</field>
						<field token=".variable" type="typename" kind="static const typename(ref)" value="degrees(radians: float64): float64">
						</field>
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="absMod">
					</right>
				</call>
			</init>
		</stmt>
	</stmt>
</main>

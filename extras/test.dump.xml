<main token="{}" type="void" kind="static const typename(void)">
	<stmt token="{}" type="void" kind="static const typename(void)" file="lib/stdlib.ci:3">
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(raise) == function)">
			<test token="==" type="bool" kind="static const typename(bool)" value="typename(raise) == function">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(raise)">
					<push token=".variable" type="void" kind="static const typename(void)" value="raise" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
				</left>
				<right token=".variable" type="typename" kind="static const typename(ref)" value="function" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="lib/stdlib.ci:3">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="verbose(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.verbose, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.verbose">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="verbose" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="verbose(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.verbose, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.verbose">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="verbose" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="trace(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.defTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="trace(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.defTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="debug(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="debug(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="info(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.info, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.info">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="info" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="info(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.info, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.info">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="info" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="warn(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.warn, raise.noTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.warn">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="warn" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="warn(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.warn, raise.noTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.warn">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="warn" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.noTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="noTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="error(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.error, raise.defTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.error">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="error" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="error(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.error, raise.defTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.error">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="error" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abort(message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, message, inspect)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="abort" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abort(message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, message, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="abort" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abort(): void">
					<init token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, &quot;execution aborted!&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="abort" />
						</push>
						<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
						</push>
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;execution aborted!&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assert(condition: bool, message: char[*], inspect: variant): void">
					<init token="()" type="void" kind="static const typename(void)" value="void(condition ? void(0) : abort(message, inspect))">
						<push token="?:" type="void" kind="static const typename(void)" value="condition ? void(0) : abort(message, inspect)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="condition" />
							<left token="()" type="void" kind="static const typename(void)" value="void(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								<call token=".variable" type="typename" kind="static const typename(ref)" value="void" />
							</left>
							<right token="()" type="void" kind="static const typename(void)" value="abort(message, inspect)">
								<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
								<push token=".variable" type="variant" kind="static const typename(var)" value="inspect" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="void" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assert(condition: bool, message: char[*]): void">
					<init token="()" type="void" kind="static const typename(void)" value="void(condition ? void(0) : abort(message))">
						<push token="?:" type="void" kind="static const typename(void)" value="condition ? void(0) : abort(message)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="condition" />
							<left token="()" type="void" kind="static const typename(void)" value="void(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								<call token=".variable" type="typename" kind="static const typename(ref)" value="void" />
							</left>
							<right token="()" type="void" kind="static const typename(void)" value="abort(message)">
								<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="void" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assert(condition: bool): void">
					<init token="()" type="void" kind="static const typename(void)" value="void(condition ? void(0) : abort(&quot;assertion failed!&quot;))">
						<push token="?:" type="void" kind="static const typename(void)" value="condition ? void(0) : abort(&quot;assertion failed!&quot;)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="condition" />
							<left token="()" type="void" kind="static const typename(void)" value="void(0)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								<call token=".variable" type="typename" kind="static const typename(ref)" value="void" />
							</left>
							<right token="()" type="void" kind="static const typename(void)" value="abort(&quot;assertion failed!&quot;)">
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed!&quot;" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort" />
							</right>
						</push>
						<call token=".variable" type="typename" kind="static const typename(ref)" value="void" />
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="NotEquals" />
				<stmt token=".variable" type="function" kind="static const typename(ref)" value="assertEq(expected: int32, returned: int32, message: char[*]): void">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/stdlib.ci:38">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (returned == expected)">
							<test token="==" type="bool" kind="static const typename(bool)" value="returned == expected">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/stdlib.ci:39">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return;" />
							</then>
						</stmt>
						<stmt token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
							<init token="{}" type="NotEquals" kind="static const typename(val)">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := (expected);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := (expected)">
										<left token="." type="variant" kind="static const typename(var)" value="details.expected">
											<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="variant" kind="static const typename(var)" value="expected" />
										</left>
										<right token="()" type="variant" kind="static const typename(var)" value="(expected)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := (returned);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := (returned)">
										<left token="." type="variant" kind="static const typename(var)" value="details.returned">
											<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="variant" kind="static const typename(var)" value="returned" />
										</left>
										<right token="()" type="variant" kind="static const typename(var)" value="(returned)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (message);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (message)">
										<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
											<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
										</left>
										<right token="()" type="char[*]" kind="static typename(arr)" value="(message)">
											<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
										</right>
									</expr>
								</stmt>
							</init>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.abort, raise.defTrace, &quot;assertion failed&quot;, details);">
							<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.abort, raise.defTrace, &quot;assertion failed&quot;, details)">
								<push token="." type="int64" kind="static const typename(i64)" value="raise.abort">
									<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
									<right token=".variable" type="int64" kind="static const typename(i64)" value="abort" />
								</push>
								<push token="." type="int64" kind="static const typename(i64)" value="raise.defTrace">
									<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
									<right token=".variable" type="int64" kind="static const typename(i64)" value="defTrace" />
								</push>
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
								<push token=".variable" type="NotEquals" kind="static const typename(val)" value="details">
									<init token="{}" type="NotEquals" kind="static const typename(val)">
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := (expected);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := (expected)">
												<left token="." type="variant" kind="static const typename(var)" value="details.expected">
													<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details" />
													<right token=".variable" type="variant" kind="static const typename(var)" value="expected" />
												</left>
												<right token="()" type="variant" kind="static const typename(var)" value="(expected)">
													<push token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := (returned);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := (returned)">
												<left token="." type="variant" kind="static const typename(var)" value="details.returned">
													<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details" />
													<right token=".variable" type="variant" kind="static const typename(var)" value="returned" />
												</left>
												<right token="()" type="variant" kind="static const typename(var)" value="(returned)">
													<push token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (message);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (message)">
												<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
													<left token=".variable" type="NotEquals" kind="static const typename(val)" value="details" />
													<right token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
												</left>
												<right token="()" type="char[*]" kind="static typename(arr)" value="(message)">
													<push token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
												</right>
											</expr>
										</stmt>
									</init>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="assertEq(expected: int32, returned: int32): void">
					<init token="()" type="void" kind="static const typename(void)" value="assertEq(expected, returned, null)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
					</init>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sizeof(type: typename): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="int32(type.size)">
				<push token="." type="int32" kind="static const typename(i32)" value="type.size">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="type" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="size" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Complex" />
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="Complex(re: float64): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/math.Complex.ci:40">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := re;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := re">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
								</expr>
							</stmt>
							<stmt token=":=" type="void" kind="static const typename(void)" value=".result.im := (0)">
								<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
									<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
								</left>
								<right token="()" type="float64" kind="static const typename(f64)" value="(0)">
									<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
								</right>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="Complex(re: float64, im: float64): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/math.Complex.ci:45">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := re;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := re">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := im;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := im">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
									</left>
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="neg(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(-a.re, -a.im)">
				<push token="-" type="float64" kind="static const typename(f64)" value="-a.re">
					<right token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</right>
				</push>
				<push token="-" type="float64" kind="static const typename(f64)" value="-a.im">
					<right token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: Complex, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re + b.re, a.im + b.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a.re + b.re">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</right>
				</push>
				<push token="+" type="float64" kind="static const typename(f64)" value="a.im + b.im">
					<left token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re + b, a.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a.re + b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b" />
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="a.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="add(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a + b.re, b.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a + b.re">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a" />
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="b.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: Complex, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re - b.re, a.im - b.im)">
				<push token="-" type="float64" kind="static const typename(f64)" value="a.re - b.re">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</right>
				</push>
				<push token="-" type="float64" kind="static const typename(f64)" value="a.im - b.im">
					<left token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</left>
					<right token="." type="float64" kind="static const typename(f64)" value="b.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re - b, a.im)">
				<push token="-" type="float64" kind="static const typename(f64)" value="a.re - b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b" />
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="a.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sub(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a - b.re, b.im)">
				<push token="-" type="float64" kind="static const typename(f64)" value="a - b.re">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a" />
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</right>
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="b.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: Complex, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re)">
				<push token="-" type="float64" kind="static const typename(f64)" value="a.re * b.re - a.im * b.im">
					<left token="*" type="float64" kind="static const typename(f64)" value="a.re * b.re">
						<left token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="b.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</right>
					</left>
					<right token="*" type="float64" kind="static const typename(f64)" value="a.im * b.im">
						<left token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="b.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</right>
					</right>
				</push>
				<push token="+" type="float64" kind="static const typename(f64)" value="a.re * b.im + a.im * b.re">
					<left token="*" type="float64" kind="static const typename(f64)" value="a.re * b.im">
						<left token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="b.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</right>
					</left>
					<right token="*" type="float64" kind="static const typename(f64)" value="a.im * b.re">
						<left token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="b.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</right>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re * b, a.im * b)">
				<push token="*" type="float64" kind="static const typename(f64)" value="a.re * b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b" />
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="a.im * b">
					<left token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="b" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="mul(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a * b.re, a * b.im)">
				<push token="*" type="float64" kind="static const typename(f64)" value="a * b.re">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a" />
					<right token="." type="float64" kind="static const typename(f64)" value="b.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="a * b.im">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="a" />
					<right token="." type="float64" kind="static const typename(f64)" value="b.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="div(a: Complex, b: Complex): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/math.Complex.ci:66">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (Math.abs(b.re) &gt;= Math.abs(b.im))">
					<test token="&gt;=" type="bool" kind="static const typename(bool)" value="Math.abs(b.re) &gt;= Math.abs(b.im)">
						<left token="()" type="float64" kind="static const typename(f64)" value="Math.abs(b.re)">
							<push token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="abs" />
							</call>
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="Math.abs(b.im)">
							<push token="." type="float64" kind="static const typename(f64)" value="b.im">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="Math.abs">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="abs" />
							</call>
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/math.Complex.ci:70">
						<stmt token=".variable" type="float64" kind="static const typename(f64)" value="r">
							<init token="/" type="float64" kind="static const typename(f64)" value="b.im / b.re">
								<left token="." type="float64" kind="static const typename(f64)" value="b.im">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
								</left>
								<right token="." type="float64" kind="static const typename(f64)" value="b.re">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
								</right>
							</init>
						</stmt>
						<stmt token=".variable" type="float64" kind="static const typename(f64)" value="den">
							<init token="+" type="float64" kind="static const typename(f64)" value="b.re + r * b.im">
								<left token="." type="float64" kind="static const typename(f64)" value="b.re">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
								</left>
								<right token="*" type="float64" kind="static const typename(f64)" value="r * b.im">
									<left token=".variable" type="float64" kind="static const typename(f64)" value="r" />
									<right token="." type="float64" kind="static const typename(f64)" value="b.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
									</right>
								</right>
							</init>
						</stmt>
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
							<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
								<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
								<right token="{}" type="void" kind="static const typename(void)">
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := (a.re + r * a.im) / den;">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := (a.re + r * a.im) / den">
											<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
												<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
												<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
											</left>
											<right token="/" type="float64" kind="static const typename(f64)" value="(a.re + r * a.im) / den">
												<left token="()" type="float64" kind="static const typename(f64)" value="(a.re + r * a.im)">
													<push token="+" type="float64" kind="static const typename(f64)" value="a.re + r * a.im">
														<left token="." type="float64" kind="static const typename(f64)" value="a.re">
															<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
															<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
														</left>
														<right token="*" type="float64" kind="static const typename(f64)" value="r * a.im">
															<left token=".variable" type="float64" kind="static const typename(f64)" value="r" />
															<right token="." type="float64" kind="static const typename(f64)" value="a.im">
																<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
																<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
															</right>
														</right>
													</push>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="den" />
											</right>
										</expr>
									</stmt>
									<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := (a.im - r * a.re) / den;">
										<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := (a.im - r * a.re) / den">
											<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
												<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
												<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
											</left>
											<right token="/" type="float64" kind="static const typename(f64)" value="(a.im - r * a.re) / den">
												<left token="()" type="float64" kind="static const typename(f64)" value="(a.im - r * a.re)">
													<push token="-" type="float64" kind="static const typename(f64)" value="a.im - r * a.re">
														<left token="." type="float64" kind="static const typename(f64)" value="a.im">
															<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
															<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
														</left>
														<right token="*" type="float64" kind="static const typename(f64)" value="r * a.re">
															<left token=".variable" type="float64" kind="static const typename(f64)" value="r" />
															<right token="." type="float64" kind="static const typename(f64)" value="a.re">
																<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
																<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
															</right>
														</right>
													</push>
												</left>
												<right token=".variable" type="float64" kind="static const typename(f64)" value="den" />
											</right>
										</expr>
									</stmt>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="r">
					<init token="/" type="float64" kind="static const typename(f64)" value="b.re / b.im">
						<left token="." type="float64" kind="static const typename(f64)" value="b.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="b.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="den">
					<init token="+" type="float64" kind="static const typename(f64)" value="b.im + r * b.re">
						<left token="." type="float64" kind="static const typename(f64)" value="b.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="r * b.re">
							<left token=".variable" type="float64" kind="static const typename(f64)" value="r" />
							<right token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
							</right>
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := (a.re * r + a.im) / den;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := (a.re * r + a.im) / den">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="(a.re * r + a.im) / den">
										<left token="()" type="float64" kind="static const typename(f64)" value="(a.re * r + a.im)">
											<push token="+" type="float64" kind="static const typename(f64)" value="a.re * r + a.im">
												<left token="*" type="float64" kind="static const typename(f64)" value="a.re * r">
													<left token="." type="float64" kind="static const typename(f64)" value="a.re">
														<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
														<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="r" />
												</left>
												<right token="." type="float64" kind="static const typename(f64)" value="a.im">
													<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
													<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="den" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := (a.im * r - a.re) / den;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := (a.im * r - a.re) / den">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="(a.im * r - a.re) / den">
										<left token="()" type="float64" kind="static const typename(f64)" value="(a.im * r - a.re)">
											<push token="-" type="float64" kind="static const typename(f64)" value="a.im * r - a.re">
												<left token="*" type="float64" kind="static const typename(f64)" value="a.im * r">
													<left token="." type="float64" kind="static const typename(f64)" value="a.im">
														<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
														<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
													</left>
													<right token=".variable" type="float64" kind="static const typename(f64)" value="r" />
												</left>
												<right token="." type="float64" kind="static const typename(f64)" value="a.re">
													<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
													<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
												</right>
											</push>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="den" />
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="div(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(a, Complex(b))">
				<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
				<push token="()" type="Complex" kind="static const typename(val)" value="Complex(b)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="b" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="div(a: float64, b: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(Complex(a), b)">
				<push token="()" type="Complex" kind="static const typename(val)" value="Complex(a)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
				</push>
				<push token=".variable" type="Complex" kind="static const typename(val)" value="b" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="abs(a: Complex): float64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sqrt(a.re * a.re + a.im * a.im)">
				<push token="+" type="float64" kind="static const typename(f64)" value="a.re * a.re + a.im * a.im">
					<left token="*" type="float64" kind="static const typename(f64)" value="a.re * a.re">
						<left token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</right>
					</left>
					<right token="*" type="float64" kind="static const typename(f64)" value="a.im * a.im">
						<left token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</left>
						<right token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</right>
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="arg(a: Complex): float64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(a.re, a.im)">
				<push token="." type="float64" kind="static const typename(f64)" value="a.re">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
				</push>
				<push token="." type="float64" kind="static const typename(f64)" value="a.im">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="atan2" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="inv(a: Complex): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/math.Complex.ci:93">
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="d">
					<init token="()" type="float64" kind="static const typename(f64)" value="(a.re * a.re + a.im * a.im)">
						<push token="+" type="float64" kind="static const typename(f64)" value="a.re * a.re + a.im * a.im">
							<left token="*" type="float64" kind="static const typename(f64)" value="a.re * a.re">
								<left token="." type="float64" kind="static const typename(f64)" value="a.re">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
								</left>
								<right token="." type="float64" kind="static const typename(f64)" value="a.re">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
								</right>
							</left>
							<right token="*" type="float64" kind="static const typename(f64)" value="a.im * a.im">
								<left token="." type="float64" kind="static const typename(f64)" value="a.im">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
								</left>
								<right token="." type="float64" kind="static const typename(f64)" value="a.im">
									<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
									<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
								</right>
							</right>
						</push>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := +a.re / d;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := +a.re / d">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="+a.re / d">
										<left token="+" type="float64" kind="static const typename(f64)" value="+a.re">
											<right token="." type="float64" kind="static const typename(f64)" value="a.re">
												<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
												<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
											</right>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="d" />
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := -a.im / d;">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := -a.im / d">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
									</left>
									<right token="/" type="float64" kind="static const typename(f64)" value="-a.im / d">
										<left token="-" type="float64" kind="static const typename(f64)" value="-a.im">
											<right token="." type="float64" kind="static const typename(f64)" value="a.im">
												<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
												<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
											</right>
										</left>
										<right token=".variable" type="float64" kind="static const typename(f64)" value="d" />
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="conj(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(a.re, -a.im)">
				<push token="." type="float64" kind="static const typename(f64)" value="a.re">
					<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
				</push>
				<push token="-" type="float64" kind="static const typename(f64)" value="-a.im">
					<right token="." type="float64" kind="static const typename(f64)" value="a.im">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="exp(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.exp(a.re) * float64.cos(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="exp" />
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.exp(a.re) * float64.sin(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.exp(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="exp" />
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="log(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.log(abs(a)), arg(a))">
				<push token="()" type="float64" kind="static const typename(f64)" value="float64.log(abs(a))">
					<push token="()" type="float64" kind="static const typename(f64)" value="abs(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="abs" />
					</push>
					<call token="." type="function" kind="static const typename(ref)" value="float64.log">
						<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
						<right token=".variable" type="function" kind="static const typename(ref)" value="log" />
					</call>
				</push>
				<push token="()" type="float64" kind="static const typename(f64)" value="arg(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="arg" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="pow(a: Complex, b: Complex): Complex">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/math.Complex.ci:107">
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="r">
					<init token="()" type="float64" kind="static const typename(f64)" value="abs(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="abs" />
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="t">
					<init token="()" type="float64" kind="static const typename(f64)" value="arg(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="arg" />
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="u">
					<init token="+" type="float64" kind="static const typename(f64)" value="b.re * t + b.im * float64.log(r)">
						<left token="*" type="float64" kind="static const typename(f64)" value="b.re * t">
							<left token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
							</left>
							<right token=".variable" type="float64" kind="static const typename(f64)" value="t" />
						</left>
						<right token="*" type="float64" kind="static const typename(f64)" value="b.im * float64.log(r)">
							<left token="." type="float64" kind="static const typename(f64)" value="b.im">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="float64.log(r)">
								<push token=".variable" type="float64" kind="static const typename(f64)" value="r" />
								<call token="." type="function" kind="static const typename(ref)" value="float64.log">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="log" />
								</call>
							</right>
						</right>
					</init>
				</stmt>
				<stmt token=".variable" type="float64" kind="static const typename(f64)" value="v">
					<init token="*" type="float64" kind="static const typename(f64)" value="float64.pow(r, b.re) * float64.exp(-b.im * t)">
						<left token="()" type="float64" kind="static const typename(f64)" value="float64.pow(r, b.re)">
							<push token=".variable" type="float64" kind="static const typename(f64)" value="r" />
							<push token="." type="float64" kind="static const typename(f64)" value="b.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.pow">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="pow" />
							</call>
						</left>
						<right token="()" type="float64" kind="static const typename(f64)" value="float64.exp(-b.im * t)">
							<push token="*" type="float64" kind="static const typename(f64)" value="-b.im * t">
								<left token="-" type="float64" kind="static const typename(f64)" value="-b.im">
									<right token="." type="float64" kind="static const typename(f64)" value="b.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value="b" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
									</right>
								</left>
								<right token=".variable" type="float64" kind="static const typename(f64)" value="t" />
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="exp" />
							</call>
						</right>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := {...};">
					<expr token=":=" type="void" kind="static const typename(void)" value=".result := {...}">
						<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
						<right token="{}" type="void" kind="static const typename(void)">
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.re := v * float64.cos(u);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.re := v * float64.cos(u)">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.re">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
									</left>
									<right token="*" type="float64" kind="static const typename(f64)" value="v * float64.cos(u)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="v" />
										<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(u)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="u" />
											<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
												<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
											</call>
										</right>
									</right>
								</expr>
							</stmt>
							<stmt token=";" type="void" kind="static const typename(void)" stmt=".result.im := v * float64.sin(u);">
								<expr token=":=" type="void" kind="static const typename(void)" value=".result.im := v * float64.sin(u)">
									<left token="." type="float64" kind="static const typename(f64)" value=".result.im">
										<left token=".variable" type="Complex" kind="static const typename(val)" value=".result" />
										<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
									</left>
									<right token="*" type="float64" kind="static const typename(f64)" value="v * float64.sin(u)">
										<left token=".variable" type="float64" kind="static const typename(f64)" value="v" />
										<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(u)">
											<push token=".variable" type="float64" kind="static const typename(f64)" value="u" />
											<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
												<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
												<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
											</call>
										</right>
									</right>
								</expr>
							</stmt>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="pow(a: Complex, b: float64): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="pow(a, Complex(b))">
				<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
				<push token="()" type="Complex" kind="static const typename(val)" value="Complex(b)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="b" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="pow" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sin(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.sin(a.re) * Math.cosh(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.sin(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.cosh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.cosh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="cosh" />
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="+float64.cos(a.re) * Math.sinh(a.im)">
					<left token="+" type="float64" kind="static const typename(f64)" value="+float64.cos(a.re)">
						<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(a.re)">
							<push token="." type="float64" kind="static const typename(f64)" value="a.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
							</call>
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.sinh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.sinh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="sinh" />
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cos(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="float64.cos(a.re) * Math.cosh(a.im)">
					<left token="()" type="float64" kind="static const typename(f64)" value="float64.cos(a.re)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.re">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
						</call>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.cosh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.cosh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="cosh" />
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="-float64.sin(a.re) * Math.sinh(a.im)">
					<left token="-" type="float64" kind="static const typename(f64)" value="-float64.sin(a.re)">
						<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(a.re)">
							<push token="." type="float64" kind="static const typename(f64)" value="a.re">
								<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
							</push>
							<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
								<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
							</call>
						</right>
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="Math.sinh(a.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="a.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="Math.sinh">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="Math" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="sinh" />
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="tan(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(sin(a), cos(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sin(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sin" />
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="cos(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="cos" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cot(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(cos(a), sin(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="cos(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="cos" />
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="sin(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sin" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sinh(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(sub(exp(a), exp(neg(a))), 2)">
				<push token="()" type="Complex" kind="static const typename(val)" value="sub(exp(a), exp(neg(a)))">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(neg(a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="neg(a)">
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="neg" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sub" />
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="cosh(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(add(exp(a), exp(neg(a))), 2)">
				<push token="()" type="Complex" kind="static const typename(val)" value="add(exp(a), exp(neg(a)))">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(a)">
						<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(neg(a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="neg(a)">
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="neg" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="add" />
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="tanh(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sub(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sub" />
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="add(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="add" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="coth(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))">
				<push token="()" type="Complex" kind="static const typename(val)" value="add(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="add" />
				</push>
				<push token="()" type="Complex" kind="static const typename(val)" value="sub(exp(mul(2, a)), 1)">
					<push token="()" type="Complex" kind="static const typename(val)" value="exp(mul(2, a))">
						<push token="()" type="Complex" kind="static const typename(val)" value="mul(2, a)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="mul" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="exp" />
					</push>
					<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sub" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="div" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sec(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(cos(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="cos(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="cos" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="csc(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(sin(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sin(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sin" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sech(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(cosh(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="cosh(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="cosh" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="csch(a: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="inv(sinh(a))">
				<push token="()" type="Complex" kind="static const typename(val)" value="sinh(a)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="a" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sinh" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="inv" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="toCartesian(x: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))">
				<push token="*" type="float64" kind="static const typename(f64)" value="x.re * float64.cos(x.im)">
					<left token="." type="float64" kind="static const typename(f64)" value="x.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="x" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.cos(x.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="x.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="x" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
						</call>
					</right>
				</push>
				<push token="*" type="float64" kind="static const typename(f64)" value="x.re * float64.sin(x.im)">
					<left token="." type="float64" kind="static const typename(f64)" value="x.re">
						<left token=".variable" type="Complex" kind="static const typename(val)" value="x" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="re" />
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="float64.sin(x.im)">
						<push token="." type="float64" kind="static const typename(f64)" value="x.im">
							<left token=".variable" type="Complex" kind="static const typename(val)" value="x" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="im" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
						</call>
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="toPolar(x: Complex): Complex">
			<init token="()" type="Complex" kind="static const typename(val)" value="Complex(abs(x), arg(x))">
				<push token="()" type="float64" kind="static const typename(f64)" value="abs(x)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="x" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="abs" />
				</push>
				<push token="()" type="float64" kind="static const typename(f64)" value="arg(x)">
					<push token=".variable" type="Complex" kind="static const typename(val)" value="x" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="arg" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Complex" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="length(str: char[*]): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:3">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((str) == null)">
					<test token="==" type="bool" kind="static const typename(bool)" value="(str) == null">
						<left token="()" type="pointer" kind="static const typename(ref)" value="(str)">
							<push token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
						</left>
						<right token=".variable" type="pointer" kind="static const typename(ref)" value="null" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:4">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := 0;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := 0">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="result">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; str[result]; result := result + 1)">
					<test token="[]" type="char" kind="static const typename(i32)" value="str[result]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="result := result + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="result" />
						<right token="+" type="int32" kind="static const typename(i32)" value="result + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="result" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := result">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="indexOf(str: char[*], chr: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:14">
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; str[i]; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="[]" type="char" kind="static const typename(i32)" value="str[i]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:15">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (str[i] == chr)">
							<test token="==" type="bool" kind="static const typename(bool)" value="str[i] == chr">
								<left token="[]" type="char" kind="static const typename(i32)" value="str[i]">
									<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="chr" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:16">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := i;">
									<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := i">
										<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := -1;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := -1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="-" type="int32" kind="static const typename(i32)" value="-1">
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="lastIndexOf(str: char[*], chr: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:24">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="result">
					<init token="-" type="int32" kind="static const typename(i32)" value="-1">
						<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
					</init>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; str[i]; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="[]" type="char" kind="static const typename(i32)" value="str[i]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:26">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (str[i] == chr)">
							<test token="==" type="bool" kind="static const typename(bool)" value="str[i] == chr">
								<left token="[]" type="char" kind="static const typename(i32)" value="str[i]">
									<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="chr" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:27">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="result := i;">
									<expr token=":=" type="int32" kind="static const typename(i32)" value="result := i">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="result" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := result">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:35">
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; (with[i]) != 0; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="!=" type="bool" kind="static const typename(bool)" value="(with[i]) != 0">
						<left token="()" type="int32" kind="static const typename(i32)" value="(with[i])">
							<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
								<left token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							</push>
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:36">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (cmp(str[i], with[i]) != 0)">
							<test token="!=" type="bool" kind="static const typename(bool)" value="cmp(str[i], with[i]) != 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="cmp(str[i], with[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</push>
									<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="cmp" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:37">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := false;">
									<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := false">
										<left token=".variable" type="bool" kind="static const typename(bool)" value=".result" />
										<right token=".variable" type="bool" kind="static const typename(bool)" value="false" />
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := true;">
					<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := true">
						<left token=".variable" type="bool" kind="static const typename(bool)" value=".result" />
						<right token=".variable" type="bool" kind="static const typename(bool)" value="true" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:44">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="withLen">
					<init token="()" type="int32" kind="static const typename(i32)" value="length(with)">
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="length" />
					</init>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="strLen">
					<init token="()" type="int32" kind="static const typename(i32)" value="length(str)">
						<push token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="length" />
					</init>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (strLen &lt; withLen)">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="strLen &lt; withLen">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="strLen" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="withLen" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:47">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := false;">
							<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := false">
								<left token=".variable" type="bool" kind="static const typename(bool)" value=".result" />
								<right token=".variable" type="bool" kind="static const typename(bool)" value="false" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; withLen; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; withLen">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="withLen" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:50">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (cmp(str[strLen - withLen + i], with[i]) != 0)">
							<test token="!=" type="bool" kind="static const typename(bool)" value="cmp(str[strLen - withLen + i], with[i]) != 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="cmp(str[strLen - withLen + i], with[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[strLen - withLen + i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
										<right token="+" type="int32" kind="static const typename(i32)" value="strLen - withLen + i">
											<left token="-" type="int32" kind="static const typename(i32)" value="strLen - withLen">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="strLen" />
												<right token=".variable" type="int32" kind="static const typename(i32)" value="withLen" />
											</left>
											<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
										</right>
									</push>
									<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="cmp" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:51">
								<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := false;">
									<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := false">
										<left token=".variable" type="bool" kind="static const typename(bool)" value=".result" />
										<right token=".variable" type="bool" kind="static const typename(bool)" value="false" />
									</expr>
								</stmt>
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := true;">
					<expr token=":=" type="bool" kind="static const typename(bool)" value=".result := true">
						<left token=".variable" type="bool" kind="static const typename(bool)" value=".result" />
						<right token=".variable" type="bool" kind="static const typename(bool)" value="true" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:58">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="result">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; result == 0; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="==" type="bool" kind="static const typename(bool)" value="result == 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="result" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:60">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="result := cmp(str[i], with[i]);">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="result := cmp(str[i], with[i])">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="result" />
								<right token="()" type="int32" kind="static const typename(i32)" value="cmp(str[i], with[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</push>
									<push token="[]" type="char" kind="static const typename(i32)" value="with[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="cmp" />
								</right>
							</expr>
						</stmt>
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if ((str[i]) == 0)">
							<test token="==" type="bool" kind="static const typename(bool)" value="(str[i]) == 0">
								<left token="()" type="int32" kind="static const typename(i32)" value="(str[i])">
									<push token="[]" type="char" kind="static const typename(i32)" value="str[i]">
										<left token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</push>
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:62">
								<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
							</then>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := result;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := result">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="result" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="ignCaseCmp(chr: char, with: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:70">
				<stmt token=".variable" type="function" kind="static const typename(ref)" value="ignCase(chr: char): char">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:71">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (chr &gt;= &apos;A&apos; &amp;&amp; chr &lt;= &apos;Z&apos;)">
							<test token="&amp;&amp;" type="bool" kind="static const typename(bool)" value="chr &gt;= &apos;A&apos; &amp;&amp; chr &lt;= &apos;Z&apos;">
								<left token="&gt;=" type="bool" kind="static const typename(bool)" value="chr &gt;= &apos;A&apos;">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
									<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;A&apos;" />
								</left>
								<right token="&lt;=" type="bool" kind="static const typename(bool)" value="chr &lt;= &apos;Z&apos;">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
									<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;Z&apos;" />
								</right>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:72">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="chr := chr - &apos;A&apos;;">
									<expr token=":=" type="char" kind="static const typename(i32)" value="chr := chr - &apos;A&apos;">
										<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
										<right token="-" type="char" kind="static const typename(i32)" value="chr - &apos;A&apos;">
											<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
											<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;A&apos;" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="chr := chr + &apos;a&apos;;">
									<expr token=":=" type="char" kind="static const typename(i32)" value="chr := chr + &apos;a&apos;">
										<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
										<right token="+" type="char" kind="static const typename(i32)" value="chr + &apos;a&apos;">
											<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
											<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;a&apos;" />
										</right>
									</expr>
								</stmt>
							</then>
						</stmt>
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr">
								<left token=".variable" type="char" kind="static const typename(i32)" value=".result" />
								<right token=".variable" type="char" kind="static const typename(i32)" value="chr" />
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := ignCase(chr) - ignCase(with);">
					<expr token=":=" type="char" kind="static const typename(i32)" value=".result := ignCase(chr) - ignCase(with)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="-" type="char" kind="static const typename(i32)" value="ignCase(chr) - ignCase(with)">
							<left token="()" type="char" kind="static const typename(i32)" value="ignCase(chr)">
								<push token=".variable" type="char" kind="static const typename(i32)" value="chr" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="ignCase" />
							</left>
							<right token="()" type="char" kind="static const typename(i32)" value="ignCase(with)">
								<push token=".variable" type="char" kind="static const typename(i32)" value="with" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="ignCase" />
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="caseCmp(chr: char, with: char): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:82">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
					<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
							<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
							<right token=".variable" type="char" kind="static const typename(i32)" value="with" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="startsWith(str: char[*], with: char[*]): bool">
			<init token="()" type="bool" kind="static const typename(bool)" value="startsWith(str, with, caseCmp)">
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
				<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:82">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
								<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="with" />
								</right>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="startsWith" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="endsWith(str: char[*], with: char[*]): bool">
			<init token="()" type="bool" kind="static const typename(bool)" value="endsWith(str, with, caseCmp)">
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
				<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:82">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
								<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="with" />
								</right>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="endsWith" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="compare(str: char[*], with: char[*]): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="compare(str, with, caseCmp)">
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="with" />
				<push token=".variable" type="function" kind="static const typename(ref)" value="caseCmp">
					<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:82">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := chr - with;">
							<expr token=":=" type="char" kind="static const typename(i32)" value=".result := chr - with">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
								<right token="-" type="char" kind="static const typename(i32)" value="chr - with">
									<left token=".variable" type="char" kind="static const typename(i32)" value="chr" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="with" />
								</right>
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="compare" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="contains(str: char[*], chr: char): bool">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="indexOf(str, chr) &gt;= 0">
				<left token="()" type="int32" kind="static const typename(i32)" value="indexOf(str, chr)">
					<push token=".variable" type="char[*]" kind="static typename(arr)" value="str" />
					<push token=".variable" type="char" kind="static const typename(i32)" value="chr" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="indexOf" />
				</left>
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="FormatFlags" />
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: char[*]): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:101">
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; value[i]; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="[]" type="char" kind="static const typename(i32)" value="value[i]">
						<left token=".variable" type="char[*]" kind="static typename(arr)" value="value" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:102">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (pos &gt;= (output.length))">
							<test token="&gt;=" type="bool" kind="static const typename(bool)" value="pos &gt;= (output.length)">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
									<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
										<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
										<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
									</push>
								</right>
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:103">
								<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
							</then>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := value[i];">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := value[i]">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								</left>
								<right token="[]" type="char" kind="static const typename(i32)" value="value[i]">
									<left token=".variable" type="char[*]" kind="static typename(arr)" value="value" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (pos &gt;= (output.length))">
					<test token="&gt;=" type="bool" kind="static const typename(bool)" value="pos &gt;= (output.length)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
						<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
							<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
								<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
							</push>
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:110">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := (output.length - (1));">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := (output.length - (1))">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="()" type="int32" kind="static const typename(i32)" value="(output.length - (1))">
									<push token="-" type="uint32" kind="static const typename(u32)" value="output.length - (1)">
										<left token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
										</left>
										<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</push>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := (0);">
					<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := (0)">
						<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
							<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
						</left>
						<right token="()" type="char" kind="static const typename(i32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := pos;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := pos">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:117">
				<stmt token=".variable" type="char[]" kind="static typename(arr)" value="whiteSpace">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot; 	
&quot;" />
				</stmt>
				<stmt token=".variable" type="char[]" kind="static typename(arr)" value="radixDigits">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;" />
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="len">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token=".variable" type="char[80]" kind="static typename(arr)" value="digits" />
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="radix">
					<init token="." type="int32" kind="static const typename(i32)" value="format.radix">
						<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
					</init>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(radix &gt; 1 &amp;&amp; radix &lt; (radixDigits.length));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(radix &gt; 1 &amp;&amp; radix &lt; (radixDigits.length))">
						<push token="&amp;&amp;" type="bool" kind="static const typename(bool)" value="radix &gt; 1 &amp;&amp; radix &lt; (radixDigits.length)">
							<left token="&gt;" type="bool" kind="static const typename(bool)" value="radix &gt; 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
							</left>
							<right token="&lt;" type="bool" kind="static const typename(bool)" value="radix &lt; (radixDigits.length)">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
								<right token="()" type="int32" kind="static const typename(i32)" value="(radixDigits.length)">
									<push token="." type="uint32" kind="static const typename(u32)" value="radixDigits.length">
										<left token=".variable" type="char[]" kind="static typename(arr)" value="radixDigits" />
										<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
									</push>
								</right>
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; value &gt; (0); value := value / (radix))">
					<test token="&gt;" type="bool" kind="static const typename(bool)" value="value &gt; (0)">
						<left token=".variable" type="uint32" kind="static const typename(u32)" value="value" />
						<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</test>
					<step token=":=" type="uint32" kind="static const typename(u32)" value="value := value / (radix)">
						<left token=".variable" type="uint32" kind="static const typename(u32)" value="value" />
						<right token="/" type="uint32" kind="static const typename(u32)" value="value / (radix)">
							<left token=".variable" type="uint32" kind="static const typename(u32)" value="value" />
							<right token="()" type="uint32" kind="static const typename(u32)" value="(radix)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
							</right>
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:128">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="digits[len := len + 1] := radixDigits[value % (radix)];">
							<expr token=":=" type="char" kind="static const typename(i32)" value="digits[len := len + 1] := radixDigits[value % (radix)]">
								<left token="[]" type="char" kind="static const typename(i32)" value="digits[len := len + 1]">
									<left token=".variable" type="char[80]" kind="static typename(arr)" value="digits" />
									<right token=":=" type="int32" kind="static const typename(i32)" value="len := len + 1">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="len" />
										<right token="+" type="int32" kind="static const typename(i32)" value="len + 1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="len" />
											<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</right>
								</left>
								<right token="[]" type="char" kind="static const typename(i32)" value="radixDigits[value % (radix)]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="radixDigits" />
									<right token="%" type="uint32" kind="static const typename(u32)" value="value % (radix)">
										<left token=".variable" type="uint32" kind="static const typename(u32)" value="value" />
										<right token="()" type="uint32" kind="static const typename(u32)" value="(radix)">
											<push token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
										</right>
									</right>
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (len == 0)">
					<test token="==" type="bool" kind="static const typename(bool)" value="len == 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="len" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:131">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="digits[len := len + 1] := &apos;0&apos;;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="digits[len := len + 1] := &apos;0&apos;">
								<left token="[]" type="char" kind="static const typename(i32)" value="digits[len := len + 1]">
									<left token=".variable" type="char[80]" kind="static typename(arr)" value="digits" />
									<right token=":=" type="int32" kind="static const typename(i32)" value="len := len + 1">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="len" />
										<right token="+" type="int32" kind="static const typename(i32)" value="len + 1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="len" />
											<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</right>
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;0&apos;" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="maxLen">
					<init token="-" type="int32" kind="static const typename(i32)" value="format.padLen - len">
						<left token="." type="int32" kind="static const typename(i32)" value="format.padLen">
							<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen" />
						</left>
						<right token=".variable" type="int32" kind="static const typename(i32)" value="len" />
					</init>
				</stmt>
				<stmt token=".variable" type="char" kind="static const typename(i32)" value="padChr">
					<init token="." type="char" kind="static const typename(i32)" value="format.padChr">
						<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
						<right token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
					</init>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (padChr == &apos;&apos;)">
					<test token="==" type="bool" kind="static const typename(bool)" value="padChr == &apos;&apos;">
						<left token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
						<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;&apos;" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:138">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="padChr := &apos; &apos;;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="padChr := &apos; &apos;">
								<left token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos; &apos;" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (format.sign != &apos;&apos;)">
					<test token="!=" type="bool" kind="static const typename(bool)" value="format.sign != &apos;&apos;">
						<left token="." type="char" kind="static const typename(i32)" value="format.sign">
							<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
							<right token=".variable" type="char" kind="static const typename(i32)" value="sign" />
						</left>
						<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;&apos;" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:143">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="maxLen := maxLen - 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="maxLen := maxLen - 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
								<right token="-" type="int32" kind="static const typename(i32)" value="maxLen - 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (contains(whiteSpace, padChr))">
							<test token="()" type="bool" kind="static const typename(bool)" value="contains(whiteSpace, padChr)">
								<push token=".variable" type="char[]" kind="static typename(arr)" value="whiteSpace">
									<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot; 	
&quot;" />
								</push>
								<push token=".variable" type="char" kind="static const typename(i32)" value="padChr">
									<init token="." type="char" kind="static const typename(i32)" value="format.padChr">
										<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
										<right token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
									</init>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="contains" />
							</test>
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:145">
								<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; maxLen &gt; 0; maxLen := maxLen - 1)">
									<test token="&gt;" type="bool" kind="static const typename(bool)" value="maxLen &gt; 0">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
										<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</test>
									<step token=":=" type="int32" kind="static const typename(i32)" value="maxLen := maxLen - 1">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
										<right token="-" type="int32" kind="static const typename(i32)" value="maxLen - 1">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
											<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</step>
									<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:147">
										<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(pos &lt; (output.length));">
											<expr token="()" type="void" kind="static const typename(void)" value="assert(pos &lt; (output.length))">
												<push token="&lt;" type="bool" kind="static const typename(bool)" value="pos &lt; (output.length)">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
													<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
														<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
															<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
															<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
														</push>
													</right>
												</push>
												<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := padChr;">
											<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := padChr">
												<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
													<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
													<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
												</left>
												<right token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
											<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
												<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
												<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
													<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
												</right>
											</expr>
										</stmt>
									</stmt>
								</stmt>
							</then>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(pos &lt; (output.length));">
							<expr token="()" type="void" kind="static const typename(void)" value="assert(pos &lt; (output.length))">
								<push token="&lt;" type="bool" kind="static const typename(bool)" value="pos &lt; (output.length)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
									<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
										<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
										</push>
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := format.sign;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := format.sign">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								</left>
								<right token="." type="char" kind="static const typename(i32)" value="format.sign">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="sign" />
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; maxLen &gt; 0; maxLen := maxLen - 1)">
					<test token="&gt;" type="bool" kind="static const typename(bool)" value="maxLen &gt; 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="maxLen := maxLen - 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
						<right token="-" type="int32" kind="static const typename(i32)" value="maxLen - 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="maxLen" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:159">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(pos &lt; (output.length));">
							<expr token="()" type="void" kind="static const typename(void)" value="assert(pos &lt; (output.length))">
								<push token="&lt;" type="bool" kind="static const typename(bool)" value="pos &lt; (output.length)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
									<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
										<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
										</push>
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := padChr;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := padChr">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; len; i := i + 1)">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; len">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="len" />
					</test>
					<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</step>
					<stmt token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:166">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(i &lt; (output.length));">
							<expr token="()" type="void" kind="static const typename(void)" value="assert(i &lt; (output.length))">
								<push token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; (output.length)">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
										<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
										</push>
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := digits[len - i];">
							<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := digits[len - i]">
								<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
									<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								</left>
								<right token="[]" type="char" kind="static const typename(i32)" value="digits[len - i]">
									<left token=".variable" type="char[80]" kind="static typename(arr)" value="digits" />
									<right token="-" type="int32" kind="static const typename(i32)" value="len - i">
										<left token=".variable" type="int32" kind="static const typename(i32)" value="len" />
										<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
									</right>
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := pos + 1;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := pos + 1">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="+" type="int32" kind="static const typename(i32)" value="pos + 1">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
									<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
								</right>
							</expr>
						</stmt>
					</stmt>
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (pos &gt;= (output.length))">
					<test token="&gt;=" type="bool" kind="static const typename(bool)" value="pos &gt;= (output.length)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
						<right token="()" type="int32" kind="static const typename(i32)" value="(output.length)">
							<push token="." type="uint32" kind="static const typename(u32)" value="output.length">
								<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
							</push>
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:172">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="pos := (output.length - (1));">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="pos := (output.length - (1))">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
								<right token="()" type="int32" kind="static const typename(i32)" value="(output.length - (1))">
									<push token="-" type="uint32" kind="static const typename(u32)" value="output.length - (1)">
										<left token="." type="uint32" kind="static const typename(u32)" value="output.length">
											<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
											<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
										</left>
										<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
											<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
										</right>
									</push>
								</right>
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="output[pos] := (0);">
					<expr token=":=" type="char" kind="static const typename(i32)" value="output[pos] := (0)">
						<left token="[]" type="char" kind="static const typename(i32)" value="output[pos]">
							<left token=".variable" type="char[]" kind="static typename(arr)" value="output" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
						</left>
						<right token="()" type="char" kind="static const typename(i32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := pos;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := pos">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: uint32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:179">
				<stmt token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
					<init token="{}" type="FormatFlags" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.radix := 10;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.radix := 10">
								<left token="." type="int32" kind="static const typename(i32)" value="format.radix">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="10" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.sign := &apos;&apos;;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.sign := &apos;&apos;">
								<left token="." type="char" kind="static const typename(i32)" value="format.sign">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="sign" />
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;&apos;" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.padChr := &apos; &apos;;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.padChr := &apos; &apos;">
								<left token="." type="char" kind="static const typename(i32)" value="format.padChr">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos; &apos;" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.padLen := 0;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.padLen := 0">
								<left token="." type="int32" kind="static const typename(i32)" value="format.padLen">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.precision := 0;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.precision := 0">
								<left token="." type="int32" kind="static const typename(i32)" value="format.precision">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="precision" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := append(output, pos, value, format);">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := append(output, pos, value, format)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, value, format)">
							<push token=".variable" type="char[]" kind="static typename(arr)" value="output" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
							<push token=".variable" type="uint32" kind="static const typename(u32)" value="value" />
							<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="append" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="append(output: char[], pos: int32, value: int32, forceSign: bool, pad: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:189">
				<stmt token=".variable" type="char" kind="static const typename(i32)" value="sign">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</stmt>
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (value &lt; 0)">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="value &lt; 0">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="value" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:191">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="value := -value;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value="value := -value">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="value" />
								<right token="-" type="int32" kind="static const typename(i32)" value="-value">
									<right token=".variable" type="int32" kind="static const typename(i32)" value="value" />
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="sign := &apos;-&apos;;">
							<expr token=":=" type="char" kind="static const typename(i32)" value="sign := &apos;-&apos;">
								<left token=".variable" type="char" kind="static const typename(i32)" value="sign" />
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;-&apos;" />
							</expr>
						</stmt>
					</then>
					<else token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:195">
						<stmt token="if" type="void" kind="static const typename(void)" stmt="if (forceSign)">
							<test token=".variable" type="bool" kind="static const typename(bool)" value="forceSign" />
							<then token="{}" type="void" kind="static const typename(void)" file="lib/string.ci:195">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="sign := &apos;+&apos;;">
									<expr token=":=" type="char" kind="static const typename(i32)" value="sign := &apos;+&apos;">
										<left token=".variable" type="char" kind="static const typename(i32)" value="sign" />
										<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;+&apos;" />
									</expr>
								</stmt>
							</then>
						</stmt>
					</else>
				</stmt>
				<stmt token=".variable" type="FormatFlags" kind="static const typename(val)" value="format">
					<init token="{}" type="FormatFlags" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.radix := 10;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.radix := 10">
								<left token="." type="int32" kind="static const typename(i32)" value="format.radix">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="radix" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="10" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.sign := sign;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.sign := sign">
								<left token="." type="char" kind="static const typename(i32)" value="format.sign">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="sign" />
								</left>
								<right token=".variable" type="char" kind="static const typename(i32)" value="sign" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.padChr := &apos;0&apos;;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.padChr := &apos;0&apos;">
								<left token="." type="char" kind="static const typename(i32)" value="format.padChr">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="char" kind="static const typename(i32)" value="padChr" />
								</left>
								<right token=".literal" type="char" kind="static const typename(i32)" value="&apos;0&apos;" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.padLen := pad;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.padLen := pad">
								<left token="." type="int32" kind="static const typename(i32)" value="format.padLen">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="padLen" />
								</left>
								<right token=".variable" type="int32" kind="static const typename(i32)" value="pad" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="format.precision := 0;">
							<expr token=":=" type="void" kind="static const typename(void)" value="format.precision := 0">
								<left token="." type="int32" kind="static const typename(i32)" value="format.precision">
									<left token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="precision" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := append(output, pos, value, format);">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := append(output, pos, value, format)">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="()" type="int32" kind="static const typename(i32)" value="append(output, pos, value, format)">
							<push token=".variable" type="char[]" kind="static typename(arr)" value="output" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="pos" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="value" />
							<push token=".variable" type="FormatFlags" kind="static const typename(val)" value="format" />
							<call token=".variable" type="function" kind="static const typename(ref)" value="append" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
	</stmt>
	<stmt token="{}" type="void" kind="static const typename(void)" file="test.ci:4">
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitldz32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(load.z32)">
				<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
					<left token=".variable" type="void" kind="static const typename(void)" value="load" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="z32" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitldz64">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(load.z64)">
				<push token="." type="int64" kind="static const typename(i64)" value="load.z64">
					<left token=".variable" type="void" kind="static const typename(void)" value="load" />
					<right token=".variable" type="int64" kind="static const typename(i64)" value="z64" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitA">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitB">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitAddI32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(int32(emitA), int32(emitB), add.i32)">
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(emitA)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="emitA">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(emitB)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="emitB">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
				</push>
				<push token="." type="int32" kind="static const typename(i32)" value="add.i32">
					<left token=".variable" type="void" kind="static const typename(void)" value="add" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="i32" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitDivI32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(int32(10), int32(5), div.i32)">
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(10)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(5)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
				</push>
				<push token="." type="int32" kind="static const typename(i32)" value="div.i32">
					<left token=".variable" type="void" kind="static const typename(void)" value="div" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="i32" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="emitNfcF32">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(float32(3.140000 / (2)), float32.sin)">
				<push token="()" type="float32" kind="static const typename(f32)" value="float32(3.140000 / (2))">
					<push token="/" type="float64" kind="static const typename(f64)" value="3.140000 / (2)">
						<left token=".literal" type="float64" kind="static const typename(f64)" value="3.140000" />
						<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
						</right>
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
				</push>
				<push token="." type="float32" kind="static const typename(f32)" value="float32.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="float32" kind="static const typename(f32)" value="sin" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="floatAsInt32(value: float32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="int32(emit(float32(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float32(value))">
					<push token="()" type="float32" kind="static const typename(f32)" value="float32(value)">
						<push token=".variable" type="float32" kind="static const typename(f32)" value="value" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="floatAsInt64(value: float64): int64">
			<init token="()" type="int64" kind="static const typename(i64)" value="int64(emit(float64(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float64(value))">
					<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="value" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="int64" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitFloatAsInt1">
			<init token="()" type="int32" kind="static const typename(i32)" value="floatAsInt32(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt32" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitFloatAsInt2">
			<init token="()" type="int32" kind="static const typename(i32)" value="floatAsInt32(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt32" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="emitFloatAsInt3">
			<init token="()" type="int64" kind="static const typename(i64)" value="floatAsInt64(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt64" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="emitFloatAsInt4">
			<init token="()" type="int64" kind="static const typename(i64)" value="floatAsInt64(500)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="500" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="floatAsInt64" />
			</init>
		</stmt>
		<stmt token=".variable" type="char[]" kind="static typename(arr)" value="emitSlice">
			<init token="()" type="emit" kind="static const typename(void)" value="emit(int32(3), pointer(&quot;string&quot;))">
				<push token="()" type="int32" kind="static const typename(i32)" value="int32(3)">
					<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="int32" />
				</push>
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(&quot;string&quot;)">
					<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="zero(a: int32, b: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="last(a: int32, b: int32): int32">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="b" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sum(a: int32, b: int32): int32">
			<init token="+" type="int32" kind="static const typename(i32)" value="a + b">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="any(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="(a) ? a : b">
				<test token="()" type="bool" kind="static const typename(bool)" value="(a)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="a" />
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(a: int32, b: int32): int32">
			<init token="?:" type="int32" kind="static const typename(i32)" value="a &lt; b ? a : b">
				<test token="&lt;" type="bool" kind="static const typename(bool)" value="a &lt; b">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="a" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="b" />
				</test>
				<left token=".variable" type="int32" kind="static const typename(i32)" value="a" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="b" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="sum(a: int32, b: int32, c: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(sum(a, b), c)">
				<push token="()" type="int32" kind="static const typename(i32)" value="sum(a, b)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="a" />
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="c" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="any(a: int32, b: int32, c: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(any(a, b), c)">
				<push token="()" type="int32" kind="static const typename(i32)" value="any(a, b)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="a" />
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="c" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="min(a: int32, b: int32, c: int32): int32">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(min(a, b), c)">
				<push token="()" type="int32" kind="static const typename(i32)" value="min(a, b)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="a" />
					<push token=".variable" type="int32" kind="static const typename(i32)" value="b" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="c" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="ma">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="mb">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="mc">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="9" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zeroVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="zero(2, 3)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="zero" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zeroVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="zero(ma, mb)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="zero" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zeroXpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="zero(ma + mb, mb + mc)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="zero" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lastVal">
			<init token="()" type="int32" kind="static const typename(i32)" value="last(2, 3)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="last" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lastVar">
			<init token="()" type="int32" kind="static const typename(i32)" value="last(ma, mb)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="last" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lastXpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="last(ma + mb, mb + mc)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="last" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(3, 12)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="12" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(ma, mb)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum2Xpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(ma + mb, mb + mc)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(3, 12)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="12" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(ma, mb)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any2Xpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(ma + mb, mb + mc)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(3, 12)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="12" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(ma, mb)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min2Xpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(ma + mb, mb + mc)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum3Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(3, 2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum3Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(ma, mb, mc)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mc">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="9" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sum3Xpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="sum(ma + mb, mb + mc, mc + ma)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mc + ma">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sum" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any3Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(3, 2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any3Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(ma, mb, mc)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mc">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="9" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="any3Xpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="any(ma + mb, mb + mc, mc + ma)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mc + ma">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="any" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min3Val">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(3, 2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min3Var">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(ma, mb, mc)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="ma">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mb">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="mc">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="9" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="min3Xpr">
			<init token="()" type="int32" kind="static const typename(i32)" value="min(ma + mb, mb + mc, mc + ma)">
				<push token="+" type="int32" kind="static const typename(i32)" value="ma + mb">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mb + mc">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mb" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
				</push>
				<push token="+" type="int32" kind="static const typename(i32)" value="mc + ma">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="mc" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="ma" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="min" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(a: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="3" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(a: float32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="4" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="overload(a: int32, b: int32): int32">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="5" />
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload1">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="overload">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload2">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload()">
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload3">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload(0)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload4">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload(0.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="overload5">
			<init token="()" type="int32" kind="static const typename(i32)" value="overload(0, 0)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="overload" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Celsius" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Celsius(value: float64): Celsius">
			<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius(emit(float64(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float64(value))">
					<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="value" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Celsius" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit(value: float64): Fahrenheit">
			<init token="()" type="Fahrenheit" kind="static const typename(val)" value="Fahrenheit(emit(float64(value)))">
				<push token="()" type="emit" kind="static const typename(void)" value="emit(float64(value))">
					<push token="()" type="float64" kind="static const typename(f64)" value="float64(value)">
						<push token=".variable" type="float64" kind="static const typename(f64)" value="value" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Celsius(value: Fahrenheit): Celsius">
			<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius((value.degrees - (32)) / 1.800000)">
				<push token="/" type="float64" kind="static const typename(f64)" value="(value.degrees - (32)) / 1.800000">
					<left token="()" type="float64" kind="static const typename(f64)" value="(value.degrees - (32))">
						<push token="-" type="float64" kind="static const typename(f64)" value="value.degrees - (32)">
							<left token="." type="float64" kind="static const typename(f64)" value="value.degrees">
								<left token=".variable" type="Fahrenheit" kind="static const typename(val)" value="value" />
								<right token=".variable" type="float64" kind="static const typename(f64)" value="degrees" />
							</left>
							<right token="()" type="float64" kind="static const typename(f64)" value="(32)">
								<push token=".literal" type="int32" kind="static const typename(i32)" value="32" />
							</right>
						</push>
					</left>
					<right token=".literal" type="float64" kind="static const typename(f64)" value="1.800000" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Celsius" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Fahrenheit(value: Celsius): Fahrenheit">
			<init token="()" type="Fahrenheit" kind="static const typename(val)" value="Fahrenheit(value.degrees * 1.800000 + (32))">
				<push token="+" type="float64" kind="static const typename(f64)" value="value.degrees * 1.800000 + (32)">
					<left token="*" type="float64" kind="static const typename(f64)" value="value.degrees * 1.800000">
						<left token="." type="float64" kind="static const typename(f64)" value="value.degrees">
							<left token=".variable" type="Celsius" kind="static const typename(val)" value="value" />
							<right token=".variable" type="float64" kind="static const typename(f64)" value="degrees" />
						</left>
						<right token=".literal" type="float64" kind="static const typename(f64)" value="1.800000" />
					</left>
					<right token="()" type="float64" kind="static const typename(f64)" value="(32)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="32" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Fahrenheit" />
			</init>
		</stmt>
		<stmt token=".variable" type="Celsius" kind="static const typename(val)" value="boilC">
			<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius(100.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="100.000000" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="Celsius" />
			</init>
		</stmt>
		<stmt token=".variable" type="Fahrenheit" kind="static const typename(val)" value="boilF">
			<init token="()" type="Fahrenheit" kind="static const typename(val)" value="Fahrenheit(boilC)">
				<push token=".variable" type="Celsius" kind="static const typename(val)" value="boilC">
					<init token="()" type="Celsius" kind="static const typename(val)" value="Celsius(100.000000)">
						<push token=".literal" type="float64" kind="static const typename(f64)" value="100.000000" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="Celsius" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="Fahrenheit" />
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if ((typename(int64)) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="(typename(int64)) == null">
				<left token="()" type="pointer" kind="static const typename(ref)" value="(typename(int64))">
					<push token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="int64" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					</push>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.initByRef.ci:3">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</init>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="value">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="fromVar">
			<init token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="nullRef">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="nullPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="nullVar">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="nullTyp">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nullFun">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="object" kind="static const typename(ref)" value="nullObj">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="typePtr">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="typeVar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeTyp">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="local">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="copyVal">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="local">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="copyRef">
			<init token=".variable" type="int64" kind="static const typename(i64)" value="valueRef">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="copyPtr">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="valuePtr">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="copyVar">
			<init token=".variable" type="variant" kind="static const typename(var)" value="valueVar">
				<init token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="copyTyp">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typeTyp">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void" />
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function" />
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object" />
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void" />
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function" />
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="varObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typVoid">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="void" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typBool">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="bool">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typChar">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="char">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typInt64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="int64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint8">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint16">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typUint64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFloat32">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float32">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFloat64">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
				<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typTypename">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typFunction">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="function" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typPointer">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typVariant">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typObject">
			<init token=".variable" type="typename" kind="static const typename(ref)" value="object" />
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="valueOfPtr">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="valueOfVar">
			<init token="()" type="variant" kind="static const typename(var)" value="variant(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="valueOfTyp">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeOfValue">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename(value)">
				<push token=".variable" type="int64" kind="static const typename(i64)" value="value">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
			</init>
		</stmt>
		<stmt token=".variable" type="variant" kind="static const typename(var)" value="copyPtrFloat64">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="ptrFloat64">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="copyVarFloat64">
			<init token=".variable" type="variant" kind="static const typename(var)" value="varFloat64">
				<init token=".variable" type="typename" kind="static const typename(ref)" value="float64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="empty(): void">
			<init token="{}" type="void" kind="static const typename(void)">
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funAdd(x: int32, y: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:6">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x + y;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x + y">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="+" type="int32" kind="static const typename(i32)" value="x + y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="x" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="y" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funAddResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funAdd(2, 7)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funAdd" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funAddRef(x: int32, y: int32): int32">
			<init token=".variable" type="function" kind="static const typename(ref)" value="funAdd">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:6">
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x + y;">
						<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x + y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
							<right token="+" type="int32" kind="static const typename(i32)" value="x + y">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="x" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="y" />
							</right>
						</expr>
					</stmt>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funAddRefResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funAddRef(2, 8)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funAddRef" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funMul(x: int32, y: int32): int32">
			<init token=".variable" type="function" kind="static const typename(ref)" value="funMul">
				<init token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:32">
					<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
						<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
							<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
								<left token=".variable" type="int32" kind="static const typename(i32)" value="x" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="y" />
							</right>
						</expr>
					</stmt>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funMulResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funMul(2, 6)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funMul" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funMulRef(x: int32, y: int32): int32">
			<init token=".variable" type="function" kind="static const typename(ref)" value="funMul">
				<init token=".variable" type="function" kind="static const typename(ref)" value="funMul">
					<init token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:32">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
							<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
								<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
								<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="x" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="y" />
								</right>
							</expr>
						</stmt>
					</init>
				</init>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="funMulRefResult">
			<init token="()" type="int32" kind="static const typename(i32)" value="funMulRef(2, 7)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="funMulRef" />
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="funMul(x: int32, y: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:32">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="x" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="y" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="fib(n: uint32): uint32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:37">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (n &lt;= (1))">
					<test token="&lt;=" type="bool" kind="static const typename(bool)" value="n &lt;= (1)">
						<left token=".variable" type="uint32" kind="static const typename(u32)" value="n" />
						<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</right>
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang.function.ci:38">
						<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := n;">
							<expr token=":=" type="uint32" kind="static const typename(u32)" value=".result := n">
								<left token=".variable" type="uint32" kind="static const typename(u32)" value=".result" />
								<right token=".variable" type="uint32" kind="static const typename(u32)" value="n" />
							</expr>
						</stmt>
					</then>
				</stmt>
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := fib(n - (1)) + fib(n - (2));">
					<expr token=":=" type="uint32" kind="static const typename(u32)" value=".result := fib(n - (1)) + fib(n - (2))">
						<left token=".variable" type="uint32" kind="static const typename(u32)" value=".result" />
						<right token="+" type="uint32" kind="static const typename(u32)" value="fib(n - (1)) + fib(n - (2))">
							<left token="()" type="uint32" kind="static const typename(u32)" value="fib(n - (1))">
								<push token="-" type="uint32" kind="static const typename(u32)" value="n - (1)">
									<left token=".variable" type="uint32" kind="static const typename(u32)" value="n" />
									<right token="()" type="uint32" kind="static const typename(u32)" value="(1)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="fib" />
							</left>
							<right token="()" type="uint32" kind="static const typename(u32)" value="fib(n - (2))">
								<push token="-" type="uint32" kind="static const typename(u32)" value="n - (2)">
									<left token=".variable" type="uint32" kind="static const typename(u32)" value="n" />
									<right token="()" type="uint32" kind="static const typename(u32)" value="(2)">
										<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
									</right>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="fib" />
							</right>
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="fibonacci_13">
			<init token="()" type="uint32" kind="static const typename(u32)" value="fib(13)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="13" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="fib" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofVoid">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(void)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="void" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofBool">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(bool)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="bool">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofChar">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(char)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="char">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt8">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int8)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int8">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt16">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int16)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int16">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int32)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int32">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofInt64">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(int64)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint8">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint8)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint8">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint16">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint16)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint16">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint32)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint32">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofUint64">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(uint64)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="uint64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofFloat32">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(float32)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="float32">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofFloat64">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(float64)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="float64">
					<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofPointer">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(pointer)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofVariant">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(variant)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofTypename">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(typename)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofFunction">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(function)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="function" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeofObject">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(object)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="object" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordSizeof" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordSizeofExt" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
			<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="nameOfRecord">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.name(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.name">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="name" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfRecord">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofRecord.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfRecord">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="fileOfRecord">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.file(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.file">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="file" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lineOfRecord">
			<init token="()" type="int32" kind="static const typename(i32)" value="typename.line(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.line">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="line" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
					<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.base">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="nameOfBase">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.name(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.name">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="name" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfBase">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfBase">
			<init token="()" type="int32" kind="static const typename(i32)" value="sizeof(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
						</call>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
			</init>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="fileOfBase">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.file(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.file">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="file" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="lineOfBase">
			<init token="()" type="int32" kind="static const typename(i32)" value="typename.line(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.line">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="line" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofBase)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
							<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.base">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfBase1">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase1.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfBase1">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase1.size">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="size" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase2">
			<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofBase1)">
				<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase1">
					<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofBase)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase">
							<init token="()" type="typename" kind="static const typename(ref)" value="typename.base(typeofRecord)">
								<push token=".variable" type="typename" kind="static const typename(ref)" value="typeofRecord">
									<init token=".variable" type="RecordSizeof" kind="static const typename(ref)" value="RecordSizeofExt" />
								</push>
								<call token="." type="function" kind="static const typename(ref)" value="typename.base">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
								</call>
							</init>
						</push>
						<call token="." type="function" kind="static const typename(ref)" value="typename.base">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
						</call>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="typename.base">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="base" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="offsetOfBase2">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase2.offset">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase2" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="offset" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sizeOfBase2">
			<init token="." type="int32" kind="static const typename(i32)" value="typeofBase2.size">
				<left token=".variable" type="typename" kind="static const typename(ref)" value="typeofBase2" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="size" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="e64">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282" />
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="e32">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="e64">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="2.718282" />
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgb888(r: int32, g: int32, b: int32): int32">
			<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280 | b &amp; 255">
				<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680 | g &lt;&lt; 8 &amp; 65280">
					<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16 &amp; 16711680">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 16">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="r" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="16" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="16711680" />
					</left>
					<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8 &amp; 65280">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 8">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="g" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="8" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="65280" />
					</right>
				</left>
				<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &amp; 255">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="b" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="255" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgb565(r: int32, g: int32, b: int32): int32">
			<init token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016 | b &gt;&gt; 3 &amp; 31">
				<left token="|" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488 | g &lt;&lt; 3 &amp; 2016">
					<left token="&amp;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8 &amp; 63488">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="r &lt;&lt; 8">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="r" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="8" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="63488" />
					</left>
					<right token="&amp;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3 &amp; 2016">
						<left token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="g &lt;&lt; 3">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="g" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2016" />
					</right>
				</left>
				<right token="&amp;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3 &amp; 31">
					<left token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="b &gt;&gt; 3">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="b" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</left>
					<right token=".literal" type="int32" kind="static const typename(i32)" value="31" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
			<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
			<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</init>
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
					<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtR5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 11, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="11" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtG6">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 5, 6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtB5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtR5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 11, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="11" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtG6">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 5, 6)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtB5">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r5g6b5, 0, 5)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r5g6b5">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb565(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb565" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtR8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 16, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="16" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtG8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 8, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="zxtB8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.zxt(r8g8b8, 0, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.zxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="zxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtR8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 16, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="16" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtG8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 8, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="sxtB8">
			<init token="()" type="int32" kind="static const typename(i32)" value="uint32.sxt(r8g8b8, 0, 8)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="r8g8b8">
					<init token="()" type="int32" kind="static const typename(i32)" value="rgb888(r_comp, g_comp, b_comp)">
						<push token=".variable" type="int32" kind="static const typename(i32)" value="r_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="14 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="14" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="g_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="63 &lt;&lt; 2">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="63" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
							</init>
						</push>
						<push token=".variable" type="int32" kind="static const typename(i32)" value="b_comp">
							<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="31 &lt;&lt; 3">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="31" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="rgb888" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
				<call token="." type="function" kind="static const typename(ref)" value="uint32.sxt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="uint32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sxt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="sinF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sin(pi64 / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (2)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="cosF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.cos(pi64 / (2))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (2)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
					<right token="()" type="float64" kind="static const typename(f64)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="tanF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.tan(pi64 / (4))">
				<push token="/" type="float64" kind="static const typename(f64)" value="pi64 / (4)">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
					<right token="()" type="float64" kind="static const typename(f64)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="tan" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="logF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.log(e64 * e64 * e64)">
				<push token="*" type="float64" kind="static const typename(f64)" value="e64 * e64 * e64">
					<left token="*" type="float64" kind="static const typename(f64)" value="e64 * e64">
						<left token=".variable" type="float64" kind="static const typename(f64)" value="e64" />
						<right token=".variable" type="float64" kind="static const typename(f64)" value="e64" />
					</left>
					<right token=".variable" type="float64" kind="static const typename(f64)" value="e64" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.log">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="log" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="expF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.exp(1.000000)">
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float64.exp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="exp" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="powF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.pow(pi64 * pi64, 0.500000)">
				<push token="*" type="float64" kind="static const typename(f64)" value="pi64 * pi64">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="0.500000" />
				<call token="." type="function" kind="static const typename(ref)" value="float64.pow">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="pow" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="sqrtF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.sqrt(pi64 * pi64)">
				<push token="*" type="float64" kind="static const typename(f64)" value="pi64 * pi64">
					<left token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
					<right token=".variable" type="float64" kind="static const typename(f64)" value="pi64" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float64.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="atanF64">
			<init token="()" type="float64" kind="static const typename(f64)" value="float64.atan2(pi64, 1.000000)">
				<push token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
					<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
				</push>
				<push token=".literal" type="float64" kind="static const typename(f64)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float64.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float64" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="atan2" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="sinF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sin(pi32 / (2))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (2)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
					<right token="()" type="float32" kind="static const typename(f32)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sin">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sin" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="cosF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.cos(pi32 / (2))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (2)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
					<right token="()" type="float32" kind="static const typename(f32)" value="(2)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.cos">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="cos" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="tanF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.tan(pi32 / (4))">
				<push token="/" type="float32" kind="static const typename(f32)" value="pi32 / (4)">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
					<right token="()" type="float32" kind="static const typename(f32)" value="(4)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
					</right>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.tan">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="tan" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="logF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.log(e32 * e32 * e32)">
				<push token="*" type="float32" kind="static const typename(f32)" value="e32 * e32 * e32">
					<left token="*" type="float32" kind="static const typename(f32)" value="e32 * e32">
						<left token=".variable" type="float32" kind="static const typename(f32)" value="e32" />
						<right token=".variable" type="float32" kind="static const typename(f32)" value="e32" />
					</left>
					<right token=".variable" type="float32" kind="static const typename(f32)" value="e32" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.log">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="log" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="expF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.exp(1.000000)">
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float32.exp">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="exp" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="powF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.pow(pi32 * pi32, 0.500000)">
				<push token="*" type="float32" kind="static const typename(f32)" value="pi32 * pi32">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
					<right token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="0.500000" />
				<call token="." type="function" kind="static const typename(ref)" value="float32.pow">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="pow" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="sqrtF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.sqrt(pi32 * pi32)">
				<push token="*" type="float32" kind="static const typename(f32)" value="pi32 * pi32">
					<left token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
					<right token=".variable" type="float32" kind="static const typename(f32)" value="pi32" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="float32.sqrt">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="sqrt" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="atanF32">
			<init token="()" type="float32" kind="static const typename(f32)" value="float32.atan2(pi32, 1.000000)">
				<push token=".variable" type="float32" kind="static const typename(f32)" value="pi32">
					<init token=".variable" type="float64" kind="static const typename(f64)" value="pi64">
						<init token=".literal" type="float64" kind="static const typename(f64)" value="3.141593" />
					</init>
				</push>
				<push token=".literal" type="float32" kind="static const typename(f32)" value="1.000000" />
				<call token="." type="function" kind="static const typename(ref)" value="float32.atan2">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="float32" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="atan2" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="realloc(data: pointer, size: int32): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, size)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="data" />
				<push token=".variable" type="int32" kind="static const typename(i32)" value="size" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="alloc" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="malloc(size: int32): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(null, size)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="int32" kind="static const typename(i32)" value="size" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="alloc" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="free(data: pointer): pointer">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer.alloc(data, 0)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="data" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.alloc">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="alloc" />
				</call>
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p2">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(80)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="80" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="p4">
			<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(820)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="820" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.fill(p1, 0, 1024);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.fill(p1, 0, 1024)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.fill">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="fill" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.copy(p1, p3, 160);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.copy(p1, p3, 160)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.copy">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="copy" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p1);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p1)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p1">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(1024)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1024" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p2);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p2)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p2">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(80)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="80" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p3);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p3)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p3">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(160)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="160" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="free(p4);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="free(p4)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="p4">
					<init token="()" type="pointer" kind="static const typename(ref)" value="malloc(820)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="820" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="malloc" />
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="free" />
			</expr>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="val1">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="val2">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val1&quot;, val1);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val1&quot;, val1)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val1&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val2&quot;, val2);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val2&quot;, val2)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val2&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.move(pointer(val2), pointer(val1), sizeof(int64));">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.move(pointer(val2), pointer(val1), sizeof(int64))">
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(val2)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
				</push>
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(val1)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="sizeof(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.move">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="move" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.fill(pointer(val1), 0, sizeof(int64));">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.fill(pointer(val1), 0, sizeof(int64))">
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(val1)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
						<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="int32" kind="static const typename(i32)" value="sizeof(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="sizeof" />
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="pointer.fill">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="fill" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val1&quot;, val1);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val1&quot;, val1)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val1&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val1">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="42" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;val2&quot;, val2);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;val2&quot;, val2)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;val2&quot;" />
				<push token=".variable" type="int64" kind="static const typename(i64)" value="val2">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="96" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="noError(ptr: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)">
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow(ptr: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:14">
				<stmt token=".variable" type="uint8[8192]" kind="static typename(arr)" value="data" />
				<stmt token=";" type="void" kind="static const typename(void)" stmt="stackOverflow(ptr);">
					<expr token="()" type="void" kind="static const typename(void)" value="stackOverflow(ptr)">
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="ptr" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="divisionByZero(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:19">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="value">
					<init token="/" type="int32" kind="static const typename(i32)" value="3 / 0">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="3" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</init>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="abortExecution(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:23">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="NotEquals" />
				<stmt token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
					<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
							<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
								<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
									<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
									<right token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
								</left>
								<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
									<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
								</right>
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
							<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
								<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
									<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
							<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
								<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
									<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
								</left>
								<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
							</expr>
						</stmt>
					</init>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="abort(&quot;fatal error&quot;, details);">
					<expr token="()" type="void" kind="static const typename(void)" value="abort(&quot;fatal error&quot;, details)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;fatal error&quot;" />
						<push token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
							<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
										<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
										</left>
										<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
											<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
										<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
										<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
									</expr>
								</stmt>
							</init>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="abort" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="invalidMemoryAccess(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:37">
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
					<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
					</init>
				</stmt>
				<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Val">
					<init token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
						<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</init>
					</init>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="invalidInstruction(args: pointer): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:42">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="emit(load.z32, ret);">
					<expr token="()" type="emit" kind="static const typename(void)" value="emit(load.z32, ret)">
						<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
							<left token=".variable" type="void" kind="static const typename(void)" value="load" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="z32" />
						</push>
						<push token=".variable" type="void" kind="static const typename(void)" value="ret">
							<init token="emit" type="void" kind="static const typename(void)" value="ret" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr0">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, noError)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="noError">
					<init token="{}" type="void" kind="static const typename(void)">
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr1">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, null)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr2">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, stackOverflow)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow">
					<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:14">
						<stmt token=".variable" type="uint8[8192]" kind="static typename(arr)" value="data" />
						<stmt token=";" type="void" kind="static const typename(void)" stmt="stackOverflow(ptr);">
							<expr token="()" type="void" kind="static const typename(void)" value="stackOverflow(ptr)">
								<push token=".variable" type="pointer" kind="static const typename(ref)" value="ptr" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="stackOverflow" />
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr3">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, divisionByZero)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="divisionByZero">
					<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:19">
						<stmt token=".variable" type="int32" kind="static const typename(i32)" value="value">
							<init token="/" type="int32" kind="static const typename(i32)" value="3 / 0">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="3" />
								<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</init>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr4">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, invalidInstruction)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="invalidInstruction">
					<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:42">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="emit(load.z32, ret);">
							<expr token="()" type="emit" kind="static const typename(void)" value="emit(load.z32, ret)">
								<push token="." type="int32" kind="static const typename(i32)" value="load.z32">
									<left token=".variable" type="void" kind="static const typename(void)" value="load" />
									<right token=".variable" type="int32" kind="static const typename(i32)" value="z32" />
								</push>
								<push token=".variable" type="void" kind="static const typename(void)" value="ret">
									<init token="emit" type="void" kind="static const typename(void)" value="ret" />
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="emit" />
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr5">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, invalidMemoryAccess)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="invalidMemoryAccess">
					<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:37">
						<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
							<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
								<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
							</init>
						</stmt>
						<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Val">
							<init token=".variable" type="int32" kind="static const typename(i32)" value="i32Ref">
								<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
									<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
								</init>
							</init>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="tryExecErr6">
			<init token="()" type="int32" kind="static const typename(i32)" value="tryExec(null, abortExecution)">
				<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
					<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
				</push>
				<push token=".variable" type="function" kind="static const typename(ref)" value="abortExecution">
					<init token="{}" type="void" kind="static const typename(void)" file="test/stdc.execute.ci:23">
						<stmt token=".variable" type="typename" kind="static const typename(ref)" value="NotEquals" />
						<stmt token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
							<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
										<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
										</left>
										<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
											<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
										</right>
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
										<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
									</expr>
								</stmt>
								<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
									<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
										<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
											<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
											<right token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
										</left>
										<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
									</expr>
								</stmt>
							</init>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="abort(&quot;fatal error&quot;, details);">
							<expr token="()" type="void" kind="static const typename(void)" value="abort(&quot;fatal error&quot;, details)">
								<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;fatal error&quot;" />
								<push token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details">
									<init token="{}" type="abortExecution.NotEquals" kind="static const typename(val)">
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.message := (&quot;assertion failed&quot;);">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.message := (&quot;assertion failed&quot;)">
												<left token="." type="char[*]" kind="static typename(arr)" value="details.message">
													<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
													<right token=".variable" type="char[*]" kind="static typename(arr)" value="message" />
												</left>
												<right token="()" type="char[*]" kind="static typename(arr)" value="(&quot;assertion failed&quot;)">
													<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;assertion failed&quot;" />
												</right>
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.expected := 97;">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.expected := 97">
												<left token="." type="int32" kind="static const typename(i32)" value="details.expected">
													<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
													<right token=".variable" type="int32" kind="static const typename(i32)" value="expected" />
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="97" />
											</expr>
										</stmt>
										<stmt token=";" type="void" kind="static const typename(void)" stmt="details.returned := 77;">
											<expr token=":=" type="void" kind="static const typename(void)" value="details.returned := 77">
												<left token="." type="int32" kind="static const typename(i32)" value="details.returned">
													<left token=".variable" type="abortExecution.NotEquals" kind="static const typename(val)" value="details" />
													<right token=".variable" type="int32" kind="static const typename(i32)" value="returned" />
												</left>
												<right token=".literal" type="int32" kind="static const typename(i32)" value="77" />
											</expr>
										</stmt>
									</init>
								</push>
								<call token=".variable" type="function" kind="static const typename(ref)" value="abort" />
							</expr>
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="tryExec" />
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if ((typename(int64)) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="(typename(int64)) == null">
				<left token="()" type="pointer" kind="static const typename(ref)" value="(typename(int64))">
					<push token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="int64" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					</push>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:44">
				<stmt token=".variable" type="typename" kind="static const typename(ref)" value="integer">
					<init token=".variable" type="typename" kind="static const typename(ref)" value="int32">
						<init token=".literal" type="int64" kind="static const typename(i64)" value="0" />
					</init>
				</stmt>
			</then>
		</stmt>
		<stmt token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayNoInit" />
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceNoInit" />
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; arrFixedNoInit.length; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; arrFixedNoInit.length">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</right>
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:54">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="arrFixedNoInit[i] := (42 + i);">
					<expr token=":=" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[i] := (42 + i)">
						<left token="[]" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[i]">
							<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						</left>
						<right token="()" type="int64" kind="static const typename(i64)" value="(42 + i)">
							<push token="+" type="int32" kind="static const typename(i32)" value="42 + i">
								<left token=".literal" type="int32" kind="static const typename(i32)" value="42" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							</push>
						</right>
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitNull">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
			<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
			<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitSlice">
			<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
			<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitPtr">
			<init token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed">
				<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
			</init>
		</stmt>
		<stmt token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed" />
		<stmt token=";" type="void" kind="static const typename(void)" stmt="pointer.copy(strFixed, pointer(&quot;string&quot;), 7);">
			<expr token="()" type="pointer" kind="static const typename(ref)" value="pointer.copy(strFixed, pointer(&quot;string&quot;), 7)">
				<push token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed" />
				<push token="()" type="pointer" kind="static const typename(ref)" value="pointer(&quot;string&quot;)">
					<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
				</push>
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<call token="." type="function" kind="static const typename(ref)" value="pointer.copy">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="copy" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string as variant&quot;, strFixed);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string as variant&quot;, strFixed)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string as variant&quot;" />
				<push token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed" />
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string to variant&quot;, variant(strFixed));">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string to variant&quot;, variant(strFixed))">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string to variant&quot;" />
				<push token="()" type="variant" kind="static const typename(var)" value="variant(strFixed)">
					<push token=".variable" type="char[7]" kind="static typename(arr)" value="strFixed" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=".variable" type="char[*]" kind="static typename(arr)" value="strArray">
			<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string as variant&quot;, strArray);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string as variant&quot;, strArray)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string as variant&quot;" />
				<push token=".variable" type="char[*]" kind="static typename(arr)" value="strArray">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string to variant&quot;, variant(strArray));">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string to variant&quot;, variant(strArray))">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string to variant&quot;" />
				<push token="()" type="variant" kind="static const typename(var)" value="variant(strArray)">
					<push token=".variable" type="char[*]" kind="static typename(arr)" value="strArray">
						<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=".variable" type="char[]" kind="static typename(arr)" value="strSlice">
			<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string as variant&quot;, strSlice);">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string as variant&quot;, strSlice)">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string as variant&quot;" />
				<push token=".variable" type="char[]" kind="static typename(arr)" value="strSlice">
					<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;string to variant&quot;, variant(strSlice));">
			<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;string to variant&quot;, variant(strSlice))">
				<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string to variant&quot;" />
				<push token="()" type="variant" kind="static const typename(var)" value="variant(strSlice)">
					<push token=".variable" type="char[]" kind="static typename(arr)" value="strSlice">
						<init token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;string&quot;" />
					</push>
					<call token=".variable" type="typename" kind="static const typename(ref)" value="variant" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(arrSliceNoInit.length &gt;= (0));">
			<expr token="()" type="void" kind="static const typename(void)" value="assert(arrSliceNoInit.length &gt;= (0))">
				<push token="&gt;=" type="bool" kind="static const typename(bool)" value="arrSliceNoInit.length &gt;= (0)">
					<left token="." type="uint32" kind="static const typename(u32)" value="arrSliceNoInit.length">
						<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceNoInit" />
						<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
					</left>
					<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(arrSliceInitNull.length == (0));">
			<expr token="()" type="void" kind="static const typename(void)" value="assert(arrSliceInitNull.length == (0))">
				<push token="==" type="bool" kind="static const typename(bool)" value="arrSliceInitNull.length == (0)">
					<left token="." type="uint32" kind="static const typename(u32)" value="arrSliceInitNull.length">
						<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull" />
						<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
					</left>
					<right token="()" type="uint32" kind="static const typename(u32)" value="(0)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(arrFixedNoInit[0] == (42));">
			<expr token="()" type="void" kind="static const typename(void)" value="assert(arrFixedNoInit[0] == (42))">
				<push token="==" type="bool" kind="static const typename(bool)" value="arrFixedNoInit[0] == (42)">
					<left token="[]" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[0]">
						<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
					</left>
					<right token="()" type="int64" kind="static const typename(i64)" value="(42)">
						<push token=".literal" type="int32" kind="static const typename(i32)" value="42" />
					</right>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
			</expr>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="lenSlice(values: int64[]): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:103">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values.length;">
					<expr token=":=" type="uint32" kind="static const typename(u32)" value=".result := values.length">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="." type="uint32" kind="static const typename(u32)" value="values.length">
							<left token=".variable" type="int64[]" kind="static typename(arr)" value="values" />
							<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nthFixed(idx: int32, values: int64[7]): int64">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:104">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values[idx];">
					<expr token=":=" type="int64" kind="static const typename(i64)" value=".result := values[idx]">
						<left token=".variable" type="int64" kind="static const typename(i64)" value=".result" />
						<right token="[]" type="int64" kind="static const typename(i64)" value="values[idx]">
							<left token=".variable" type="int64[7]" kind="static typename(arr)" value="values" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="idx" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nthArray(idx: int32, values: int64[*]): int64">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:105">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values[idx];">
					<expr token=":=" type="int64" kind="static const typename(i64)" value=".result := values[idx]">
						<left token=".variable" type="int64" kind="static const typename(i64)" value=".result" />
						<right token="[]" type="int64" kind="static const typename(i64)" value="values[idx]">
							<left token=".variable" type="int64[*]" kind="static typename(arr)" value="values" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="idx" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="nthSlice(idx: int32, values: int64[]): int64">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:106">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := values[idx];">
					<expr token=":=" type="int64" kind="static const typename(i64)" value=".result := values[idx]">
						<left token=".variable" type="int64" kind="static const typename(i64)" value=".result" />
						<right token="[]" type="int64" kind="static const typename(i64)" value="values[idx]">
							<left token=".variable" type="int64[]" kind="static typename(arr)" value="values" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="idx" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(7, arrFixedNoInit.length);">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(7, arrFixedNoInit.length)">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, arrSliceInitFixed.length);">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, arrSliceInitFixed.length)">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</push>
				<push token="." type="uint32" kind="static const typename(u32)" value="arrSliceInitFixed.length">
					<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed" />
					<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, arrSliceInitSlice.length);">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, arrSliceInitSlice.length)">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</push>
				<push token="." type="uint32" kind="static const typename(u32)" value="arrSliceInitSlice.length">
					<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice" />
					<right token=".variable" type="uint32" kind="static const typename(u32)" value="length" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(0, lenSlice(null));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(0, lenSlice(null))">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(null)">
					<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
						<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(0, lenSlice(arrSliceInitNull));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(0, lenSlice(arrSliceInitNull))">
				<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrSliceInitNull)">
					<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitNull">
						<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</init>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, lenSlice(arrFixedNoInit))">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrFixedNoInit)">
					<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitFixed))">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrSliceInitFixed)">
					<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
						<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice));">
			<expr token="()" type="void" kind="static const typename(void)" value="assertEq(arrFixedNoInit.length, lenSlice(arrSliceInitSlice))">
				<push token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</push>
				<push token="()" type="int32" kind="static const typename(i32)" value="lenSlice(arrSliceInitSlice)">
					<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice">
						<init token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed">
							<init token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
						</init>
					</push>
					<call token=".variable" type="function" kind="static const typename(ref)" value="lenSlice" />
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="assertEq" />
			</expr>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; arrFixedNoInit.length; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; arrFixedNoInit.length">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="." type="int32" kind="static const typename(i32)" value="arrFixedNoInit.length">
					<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
					<right token=".variable" type="int32" kind="static const typename(i32)" value="length" />
				</right>
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.array.ci:118">
				<stmt token=".variable" type="int64" kind="static const typename(i64)" value="expected">
					<init token="+" type="int32" kind="static const typename(i32)" value="42 + i">
						<left token=".literal" type="int32" kind="static const typename(i32)" value="42" />
						<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					</init>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrFixedNoInit[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrFixedNoInit[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrFixedNoInit[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrFixedNoInit[i]">
								<left token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrArrayInitFixed[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrArrayInitFixed[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrArrayInitFixed[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrArrayInitFixed[i]">
								<left token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrSliceInitFixed[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrSliceInitFixed[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrSliceInitFixed[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrSliceInitFixed[i]">
								<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthFixed(i, arrFixedNoInit));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthFixed(i, arrFixedNoInit))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthFixed(i, arrFixedNoInit)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthFixed(i, arrFixedNoInit)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthFixed" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthFixed(i, arrArrayInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthFixed(i, arrArrayInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthFixed(i, arrArrayInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthFixed(i, arrArrayInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthFixed" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthFixed(i, arrSliceInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthFixed(i, arrSliceInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthFixed(i, arrSliceInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthFixed(i, arrSliceInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthFixed" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthArray(i, arrFixedNoInit));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthArray(i, arrFixedNoInit))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthArray(i, arrFixedNoInit)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthArray(i, arrFixedNoInit)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthArray" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthArray(i, arrArrayInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthArray(i, arrArrayInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthArray(i, arrArrayInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthArray(i, arrArrayInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[*]" kind="static typename(arr)" value="arrArrayInitFixed" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthArray" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthArray(i, arrSliceInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthArray(i, arrSliceInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthArray(i, arrSliceInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthArray(i, arrSliceInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthArray" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthSlice(i, arrFixedNoInit));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthSlice(i, arrFixedNoInit))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthSlice(i, arrFixedNoInit)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthSlice(i, arrFixedNoInit)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[7]" kind="static typename(arr)" value="arrFixedNoInit" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthSlice" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == nthSlice(i, arrSliceInitFixed));">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == nthSlice(i, arrSliceInitFixed))">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == nthSlice(i, arrSliceInitFixed)">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="()" type="int64" kind="static const typename(i64)" value="nthSlice(i, arrSliceInitFixed)">
								<push token=".variable" type="int32" kind="static const typename(i32)" value="i" />
								<push token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitFixed" />
								<call token=".variable" type="function" kind="static const typename(ref)" value="nthSlice" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="assert(expected == arrSliceInitSlice[i]);">
					<expr token="()" type="void" kind="static const typename(void)" value="assert(expected == arrSliceInitSlice[i])">
						<push token="==" type="bool" kind="static const typename(bool)" value="expected == arrSliceInitSlice[i]">
							<left token=".variable" type="int64" kind="static const typename(i64)" value="expected" />
							<right token="[]" type="int64" kind="static const typename(i64)" value="arrSliceInitSlice[i]">
								<left token=".variable" type="int64[]" kind="static typename(arr)" value="arrSliceInitSlice" />
								<right token=".variable" type="int32" kind="static const typename(i32)" value="i" />
							</right>
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="assert" />
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordMemberTest" />
		<stmt token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest">
			<init token="{}" type="RecordMemberTest" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.member := 6;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.member := 6">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.member">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="member" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="6" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constant := 7;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constant := 7">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constant">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constant" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="7" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.memberInit := 8;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.memberInit := 8">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.memberInit">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="memberInit" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="8" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constantInit := 9;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constantInit := 9">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constantInit">
							<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constantInit" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="9" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.memberRec.member := 61;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.memberRec.member := 61">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.memberRec.member">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.memberRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="memberRec" />
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="member" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="61" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.memberRec.constant := 62;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.memberRec.constant := 62">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.memberRec.constant">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.memberRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="memberRec" />
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constant" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="62" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constantRec.member := 71;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constantRec.member := 71">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constantRec.member">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.constantRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="constantRec" />
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="member" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="71" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMemberTest.constantRec.constant := 72;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMemberTest.constantRec.constant := 72">
						<left token="." type="int32" kind="static const typename(i32)" value="recordMemberTest.constantRec.constant">
							<left token="." type="RecordMemberTest.Inner" kind="static const typename(val)" value="recordMemberTest.constantRec">
								<left token=".variable" type="RecordMemberTest" kind="static const typename(val)" value="recordMemberTest" />
								<right token=".variable" type="RecordMemberTest.Inner" kind="static const typename(val)" value="constantRec" />
							</left>
							<right token=".variable" type="int32" kind="static const typename(i32)" value="constant" />
						</left>
						<right token=".literal" type="int32" kind="static const typename(i32)" value="72" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="globalFunction(x: int32, y: int32): int32">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.method.ci:49">
				<stmt token="return" type="void" kind="static const typename(void)" stmt="return .result := x * y;">
					<expr token=":=" type="int32" kind="static const typename(i32)" value=".result := x * y">
						<left token=".variable" type="int32" kind="static const typename(i32)" value=".result" />
						<right token="*" type="int32" kind="static const typename(i32)" value="x * y">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="x" />
							<right token=".variable" type="int32" kind="static const typename(i32)" value="y" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
			<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
						<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
							<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
						<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
							<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
						</left>
						<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
							<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
						</right>
					</expr>
				</stmt>
				<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
					<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
						<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
						<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
				</stmt>
				<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
					<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
						<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
						<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="customPrint(this: RecordMethodTest): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.method.ci:59">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;override&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;override&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;override&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="trace" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint">
			<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.abstractMethod := globalFunction;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.abstractMethod := globalFunction">
						<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.abstractMethod">
							<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.print := customPrint;">
					<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.print := customPrint">
						<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.print">
							<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</left>
						<right token=".variable" type="function" kind="static const typename(ref)" value="customPrint" />
					</expr>
				</stmt>
				<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.delegateMethod := forwardMethod">
					<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.delegateMethod">
						<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
						<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod" />
				</stmt>
				<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.virtualMethod := virtualMethod">
					<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.virtualMethod">
						<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
						<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
					</left>
					<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
				</stmt>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.print(recordMethodTest);">
			<expr token="()" type="void" kind="static const typename(void)" value="recordMethodTest.print(recordMethodTest)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</stmt>
					</init>
				</push>
				<call token="." type="void" kind="static const typename(void)" value="recordMethodTest.print">
					<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.print(recordMethodTestCustomPrint);">
			<expr token="()" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.print(recordMethodTestCustomPrint)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.print := customPrint;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.print := customPrint">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.print">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="customPrint" />
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
					</init>
				</push>
				<call token="." type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.print">
					<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.printStatic(recordMethodTest);">
			<expr token="()" type="void" kind="static const typename(void)" value="recordMethodTest.printStatic(recordMethodTest)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</stmt>
					</init>
				</push>
				<call token="." type="void" kind="static const typename(void)" value="recordMethodTest.printStatic">
					<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="printStatic" />
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="print(this: RecordMethodTest): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.method.ci:75">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;extension&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;extension&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;extension&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="trace" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="function" kind="static const typename(ref)" value="printStatic(this: RecordMethodTest): void">
			<init token="{}" type="void" kind="static const typename(void)" file="test/lang.method.ci:79">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="trace(&quot;extension&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="trace(&quot;extension&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;extension&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="trace" />
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="print(recordMethodTest);">
			<expr token="()" type="void" kind="static const typename(void)" value="print(recordMethodTest)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="print" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="printStatic(recordMethodTest);">
			<expr token="()" type="void" kind="static const typename(void)" value="printStatic(recordMethodTest)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="printStatic" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="print(recordMethodTestCustomPrint);">
			<expr token="()" type="void" kind="static const typename(void)" value="print(recordMethodTestCustomPrint)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.print := customPrint;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.print := customPrint">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.print">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="customPrint" />
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
					</init>
				</push>
				<call token=".variable" type="function" kind="static const typename(ref)" value="print" />
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="RecordMethodTest.print(recordMethodTest);">
			<expr token="()" type="void" kind="static const typename(void)" value="RecordMethodTest.print(recordMethodTest)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</stmt>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.print">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="RecordMethodTest.printStatic(recordMethodTest);">
			<expr token="()" type="void" kind="static const typename(void)" value="RecordMethodTest.printStatic(recordMethodTest)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.delegateMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.delegateMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.delegateMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.abstractMethod := RecordMethodTest.staticMethod">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.staticMethod">
									<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="staticMethod" />
								</right>
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTest.print := print">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTest.print">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTest" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
						</stmt>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.printStatic">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="printStatic" />
				</call>
			</expr>
		</stmt>
		<stmt token=";" type="void" kind="static const typename(void)" stmt="RecordMethodTest.print(recordMethodTestCustomPrint);">
			<expr token="()" type="void" kind="static const typename(void)" value="RecordMethodTest.print(recordMethodTestCustomPrint)">
				<push token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint">
					<init token="{}" type="RecordMethodTest" kind="static const typename(val)">
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.abstractMethod := globalFunction;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.abstractMethod := globalFunction">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.abstractMethod">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="abstractMethod" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="globalFunction" />
							</expr>
						</stmt>
						<stmt token=";" type="void" kind="static const typename(void)" stmt="recordMethodTestCustomPrint.print := customPrint;">
							<expr token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.print := customPrint">
								<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.print">
									<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
									<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
								</left>
								<right token=".variable" type="function" kind="static const typename(ref)" value="customPrint" />
							</expr>
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.delegateMethod := forwardMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.delegateMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="delegateMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="forwardMethod" />
						</stmt>
						<stmt token=":=" type="void" kind="static const typename(void)" value="recordMethodTestCustomPrint.virtualMethod := virtualMethod">
							<left token="." type="function" kind="static const typename(ref)" value="recordMethodTestCustomPrint.virtualMethod">
								<left token=".variable" type="RecordMethodTest" kind="static const typename(val)" value="recordMethodTestCustomPrint" />
								<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
							</left>
							<right token=".variable" type="function" kind="static const typename(ref)" value="virtualMethod" />
						</stmt>
					</init>
				</push>
				<call token="." type="function" kind="static const typename(ref)" value="RecordMethodTest.print">
					<left token=".variable" type="typename" kind="static const typename(ref)" value="RecordMethodTest" />
					<right token=".variable" type="function" kind="static const typename(ref)" value="print" />
				</call>
			</expr>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgbF32" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="rgbU8" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="color" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="Color" />
		<stmt token=".variable" type="rgbU8" kind="static const typename(val)" value="black">
			<init token="{}" type="rgbU8" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="black.r := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="black.r := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="black.r">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="black" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="black.g := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="black.g := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="black.g">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="black" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="black.b := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="black.b := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="black.b">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="black" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="rgbU8" kind="static const typename(val)" value="green">
			<init token="{}" type="rgbU8" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="green.r := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="green.r := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="green.r">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="green" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="green.g := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="green.g := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="green.g">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="green" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="green.b := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="green.b := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="green.b">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="green" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="rgbU8" kind="static const typename(val)" value="white">
			<init token="{}" type="rgbU8" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="white.r := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="white.r := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="white.r">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="white" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="white.g := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="white.g := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="white.g">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="white" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="white.b := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="white.b := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="white.b">
							<left token=".variable" type="rgbU8" kind="static const typename(val)" value="white" />
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="color" kind="static const typename(val)" value="cyan">
			<init token="{}" type="color" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="cyan.col := (65535);">
					<expr token=":=" type="void" kind="static const typename(void)" value="cyan.col := (65535)">
						<left token="." type="uint32" kind="static const typename(u32)" value="cyan.col">
							<left token=".variable" type="color" kind="static const typename(val)" value="cyan" />
							<right token=".variable" type="uint32" kind="static const typename(u32)" value="col" />
						</left>
						<right token="()" type="uint32" kind="static const typename(u32)" value="(65535)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="65535" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="color" kind="static const typename(val)" value="blue">
			<init token="{}" type="color" kind="static const typename(val)">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="blue.rgb.r := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="blue.rgb.r := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="blue.rgb.r">
							<left token="." type="rgbU8" kind="static const typename(val)" value="blue.rgb">
								<left token=".variable" type="color" kind="static const typename(val)" value="blue" />
								<right token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb" />
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="r" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="blue.rgb.g := (0);">
					<expr token=":=" type="void" kind="static const typename(void)" value="blue.rgb.g := (0)">
						<left token="." type="uint8" kind="static const typename(u32)" value="blue.rgb.g">
							<left token="." type="rgbU8" kind="static const typename(val)" value="blue.rgb">
								<left token=".variable" type="color" kind="static const typename(val)" value="blue" />
								<right token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb" />
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="g" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(0)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</right>
					</expr>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="blue.rgb.b := (255);">
					<expr token=":=" type="void" kind="static const typename(void)" value="blue.rgb.b := (255)">
						<left token="." type="uint8" kind="static const typename(u32)" value="blue.rgb.b">
							<left token="." type="rgbU8" kind="static const typename(val)" value="blue.rgb">
								<left token=".variable" type="color" kind="static const typename(val)" value="blue" />
								<right token=".variable" type="rgbU8" kind="static const typename(val)" value="rgb" />
							</left>
							<right token=".variable" type="uint8" kind="static const typename(u32)" value="b" />
						</left>
						<right token="()" type="uint8" kind="static const typename(u32)" value="(255)">
							<push token=".literal" type="int32" kind="static const typename(i32)" value="255" />
						</right>
					</expr>
				</stmt>
			</init>
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack0" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack1" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack2" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack4" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_pack8" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="record_packDef" />
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="a">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
		</stmt>
		<stmt token=".variable" type="typename" kind="static const typename(ref)" value="b">
			<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="shift">
			<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolA">
			<init token=".variable" type="bool" kind="static const typename(bool)" value="true">
				<init token=".literal" type="bool" kind="static const typename(bool)" value="1" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolB">
			<init token="!" type="bool" kind="static const typename(bool)" value="!false">
				<right token=".variable" type="bool" kind="static const typename(bool)" value="false" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolAnd">
			<init token="&amp;" type="bool" kind="static const typename(bool)" value="boolA &amp; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolIor">
			<init token="|" type="bool" kind="static const typename(bool)" value="boolA | boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolXor">
			<init token="^" type="bool" kind="static const typename(bool)" value="boolA ^ boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolNot">
			<init token="!" type="bool" kind="static const typename(bool)" value="!boolB">
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="boolA == boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="boolA != boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolClt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="boolA &lt; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="boolA &lt;= boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="boolA &gt; boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="boolCge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="boolA &gt;= boolB">
				<left token=".variable" type="bool" kind="static const typename(bool)" value="boolA" />
				<right token=".variable" type="bool" kind="static const typename(bool)" value="boolB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrA">
			<init token=".literal" type="char" kind="static const typename(i32)" value="&apos;a&apos;" />
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrB">
			<init token=".literal" type="char" kind="static const typename(i32)" value="&apos;b&apos;" />
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrPls">
			<init token="+" type="char" kind="static const typename(i32)" value="+chrB">
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrNeg">
			<init token="-" type="char" kind="static const typename(i32)" value="-chrB">
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrCmt">
			<init token="~" type="char" kind="static const typename(i32)" value="~chrB">
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrAdd">
			<init token="+" type="char" kind="static const typename(i32)" value="chrA + chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrSub">
			<init token="-" type="char" kind="static const typename(i32)" value="chrA - chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrMul">
			<init token="*" type="char" kind="static const typename(i32)" value="chrA * chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrDiv">
			<init token="/" type="char" kind="static const typename(i32)" value="chrA / chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrMod">
			<init token="%" type="char" kind="static const typename(i32)" value="chrA % chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrAnd">
			<init token="&amp;" type="char" kind="static const typename(i32)" value="chrA &amp; chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrIor">
			<init token="|" type="char" kind="static const typename(i32)" value="chrA | chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrXor">
			<init token="^" type="char" kind="static const typename(i32)" value="chrA ^ chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrShl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(chrA) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(chrA)">
					<push token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="char" kind="static const typename(i32)" value="chrShr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(chrA) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(chrA)">
					<push token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrNot">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(chrB)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(chrB)">
					<push token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="chrA == chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="chrA != chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrClt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="chrA &lt; chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="chrA &lt;= chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="chrA &gt; chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="chrCge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="chrA &gt;= chrB">
				<left token=".variable" type="char" kind="static const typename(i32)" value="chrA" />
				<right token=".variable" type="char" kind="static const typename(i32)" value="chrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Pls">
			<init token="+" type="int8" kind="static const typename(i32)" value="+i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Neg">
			<init token="-" type="int8" kind="static const typename(i32)" value="-i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Cmt">
			<init token="~" type="int8" kind="static const typename(i32)" value="~i8B">
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Add">
			<init token="+" type="int8" kind="static const typename(i32)" value="i8A + i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Sub">
			<init token="-" type="int8" kind="static const typename(i32)" value="i8A - i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Mul">
			<init token="*" type="int8" kind="static const typename(i32)" value="i8A * i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Div">
			<init token="/" type="int8" kind="static const typename(i32)" value="i8A / i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Mod">
			<init token="%" type="int8" kind="static const typename(i32)" value="i8A % i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8And">
			<init token="&amp;" type="int8" kind="static const typename(i32)" value="i8A &amp; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Ior">
			<init token="|" type="int8" kind="static const typename(i32)" value="i8A | i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Xor">
			<init token="^" type="int8" kind="static const typename(i32)" value="i8A ^ i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(i8A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i8A)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="int8" kind="static const typename(i32)" value="i8Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(i8A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i8A)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i8B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i8B)">
					<push token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i8A == i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i8A != i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i8A &lt; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i8A &lt;= i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i8A &gt; i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i8Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i8A &gt;= i8B">
				<left token=".variable" type="int8" kind="static const typename(i32)" value="i8A" />
				<right token=".variable" type="int8" kind="static const typename(i32)" value="i8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Pls">
			<init token="+" type="uint8" kind="static const typename(u32)" value="+u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Neg">
			<init token="-" type="uint8" kind="static const typename(u32)" value="-u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Cmt">
			<init token="~" type="uint8" kind="static const typename(u32)" value="~u8B">
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Add">
			<init token="+" type="uint8" kind="static const typename(u32)" value="u8A + u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Sub">
			<init token="-" type="uint8" kind="static const typename(u32)" value="u8A - u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Mul">
			<init token="*" type="uint8" kind="static const typename(u32)" value="u8A * u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Div">
			<init token="/" type="uint8" kind="static const typename(u32)" value="u8A / u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Mod">
			<init token="%" type="uint8" kind="static const typename(u32)" value="u8A % u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8And">
			<init token="&amp;" type="uint8" kind="static const typename(u32)" value="u8A &amp; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Ior">
			<init token="|" type="uint8" kind="static const typename(u32)" value="u8A | u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Xor">
			<init token="^" type="uint8" kind="static const typename(u32)" value="u8A ^ u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(u8A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u8A)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint8" kind="static const typename(u32)" value="u8Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(u8A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u8A)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u8B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u8B)">
					<push token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u8A == u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u8A != u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u8A &lt; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u8A &lt;= u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u8A &gt; u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u8Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u8A &gt;= u8B">
				<left token=".variable" type="uint8" kind="static const typename(u32)" value="u8A" />
				<right token=".variable" type="uint8" kind="static const typename(u32)" value="u8B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Pls">
			<init token="+" type="int16" kind="static const typename(i32)" value="+i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Neg">
			<init token="-" type="int16" kind="static const typename(i32)" value="-i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Cmt">
			<init token="~" type="int16" kind="static const typename(i32)" value="~i16B">
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Add">
			<init token="+" type="int16" kind="static const typename(i32)" value="i16A + i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Sub">
			<init token="-" type="int16" kind="static const typename(i32)" value="i16A - i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Mul">
			<init token="*" type="int16" kind="static const typename(i32)" value="i16A * i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Div">
			<init token="/" type="int16" kind="static const typename(i32)" value="i16A / i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Mod">
			<init token="%" type="int16" kind="static const typename(i32)" value="i16A % i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16And">
			<init token="&amp;" type="int16" kind="static const typename(i32)" value="i16A &amp; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Ior">
			<init token="|" type="int16" kind="static const typename(i32)" value="i16A | i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Xor">
			<init token="^" type="int16" kind="static const typename(i32)" value="i16A ^ i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(i16A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i16A)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="int16" kind="static const typename(i32)" value="i16Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(i16A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(i16A)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i16B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i16B)">
					<push token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i16A == i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i16A != i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i16A &lt; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i16A &lt;= i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i16A &gt; i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i16Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i16A &gt;= i16B">
				<left token=".variable" type="int16" kind="static const typename(i32)" value="i16A" />
				<right token=".variable" type="int16" kind="static const typename(i32)" value="i16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Pls">
			<init token="+" type="uint16" kind="static const typename(u32)" value="+u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Neg">
			<init token="-" type="uint16" kind="static const typename(u32)" value="-u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Cmt">
			<init token="~" type="uint16" kind="static const typename(u32)" value="~u16B">
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Add">
			<init token="+" type="uint16" kind="static const typename(u32)" value="u16A + u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Sub">
			<init token="-" type="uint16" kind="static const typename(u32)" value="u16A - u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Mul">
			<init token="*" type="uint16" kind="static const typename(u32)" value="u16A * u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Div">
			<init token="/" type="uint16" kind="static const typename(u32)" value="u16A / u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Mod">
			<init token="%" type="uint16" kind="static const typename(u32)" value="u16A % u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16And">
			<init token="&amp;" type="uint16" kind="static const typename(u32)" value="u16A &amp; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Ior">
			<init token="|" type="uint16" kind="static const typename(u32)" value="u16A | u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Xor">
			<init token="^" type="uint16" kind="static const typename(u32)" value="u16A ^ u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="(u16A) &lt;&lt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u16A)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint16" kind="static const typename(u32)" value="u16Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="(u16A) &gt;&gt; shift">
				<left token="()" type="int32" kind="static const typename(i32)" value="(u16A)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				</left>
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u16B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u16B)">
					<push token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u16A == u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u16A != u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u16A &lt; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u16A &lt;= u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u16A &gt; u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u16Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u16A &gt;= u16B">
				<left token=".variable" type="uint16" kind="static const typename(u32)" value="u16A" />
				<right token=".variable" type="uint16" kind="static const typename(u32)" value="u16B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Pls">
			<init token="+" type="int32" kind="static const typename(i32)" value="+i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Neg">
			<init token="-" type="int32" kind="static const typename(i32)" value="-i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Cmt">
			<init token="~" type="int32" kind="static const typename(i32)" value="~i32B">
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Add">
			<init token="+" type="int32" kind="static const typename(i32)" value="i32A + i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Sub">
			<init token="-" type="int32" kind="static const typename(i32)" value="i32A - i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Mul">
			<init token="*" type="int32" kind="static const typename(i32)" value="i32A * i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Div">
			<init token="/" type="int32" kind="static const typename(i32)" value="i32A / i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Mod">
			<init token="%" type="int32" kind="static const typename(i32)" value="i32A % i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32And">
			<init token="&amp;" type="int32" kind="static const typename(i32)" value="i32A &amp; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Ior">
			<init token="|" type="int32" kind="static const typename(i32)" value="i32A | i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Xor">
			<init token="^" type="int32" kind="static const typename(i32)" value="i32A ^ i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Shl">
			<init token="&lt;&lt;" type="int32" kind="static const typename(i32)" value="i32A &lt;&lt; shift">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="i32Shr">
			<init token="&gt;&gt;" type="int32" kind="static const typename(i32)" value="i32A &gt;&gt; shift">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i32B)">
					<push token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i32A == i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i32A != i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i32A &lt; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i32A &lt;= i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i32A &gt; i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i32A &gt;= i32B">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="i32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Pls">
			<init token="+" type="uint32" kind="static const typename(u32)" value="+u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Neg">
			<init token="-" type="uint32" kind="static const typename(u32)" value="-u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Cmt">
			<init token="~" type="uint32" kind="static const typename(u32)" value="~u32B">
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Add">
			<init token="+" type="uint32" kind="static const typename(u32)" value="u32A + u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Sub">
			<init token="-" type="uint32" kind="static const typename(u32)" value="u32A - u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Mul">
			<init token="*" type="uint32" kind="static const typename(u32)" value="u32A * u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Div">
			<init token="/" type="uint32" kind="static const typename(u32)" value="u32A / u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Mod">
			<init token="%" type="uint32" kind="static const typename(u32)" value="u32A % u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32And">
			<init token="&amp;" type="uint32" kind="static const typename(u32)" value="u32A &amp; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Ior">
			<init token="|" type="uint32" kind="static const typename(u32)" value="u32A | u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Xor">
			<init token="^" type="uint32" kind="static const typename(u32)" value="u32A ^ u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Shl">
			<init token="&lt;&lt;" type="uint32" kind="static const typename(u32)" value="u32A &lt;&lt; shift">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint32" kind="static const typename(u32)" value="u32Shr">
			<init token="&gt;&gt;" type="uint32" kind="static const typename(u32)" value="u32A &gt;&gt; shift">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u32B)">
					<push token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u32A == u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u32A != u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u32A &lt; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u32A &lt;= u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u32A &gt; u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u32A &gt;= u32B">
				<left token=".variable" type="uint32" kind="static const typename(u32)" value="u32A" />
				<right token=".variable" type="uint32" kind="static const typename(u32)" value="u32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Pls">
			<init token="+" type="int64" kind="static const typename(i64)" value="+i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Neg">
			<init token="-" type="int64" kind="static const typename(i64)" value="-i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Cmt">
			<init token="~" type="int64" kind="static const typename(i64)" value="~i64B">
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Add">
			<init token="+" type="int64" kind="static const typename(i64)" value="i64A + i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Sub">
			<init token="-" type="int64" kind="static const typename(i64)" value="i64A - i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Mul">
			<init token="*" type="int64" kind="static const typename(i64)" value="i64A * i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Div">
			<init token="/" type="int64" kind="static const typename(i64)" value="i64A / i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Mod">
			<init token="%" type="int64" kind="static const typename(i64)" value="i64A % i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64And">
			<init token="&amp;" type="int64" kind="static const typename(i64)" value="i64A &amp; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Ior">
			<init token="|" type="int64" kind="static const typename(i64)" value="i64A | i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Xor">
			<init token="^" type="int64" kind="static const typename(i64)" value="i64A ^ i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Shl">
			<init token="&lt;&lt;" type="int64" kind="static const typename(i64)" value="i64A &lt;&lt; shift">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="int64" kind="static const typename(i64)" value="i64Shr">
			<init token="&gt;&gt;" type="int64" kind="static const typename(i64)" value="i64A &gt;&gt; shift">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(i64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(i64B)">
					<push token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="i64A == i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="i64A != i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="i64A &lt; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="i64A &lt;= i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="i64A &gt; i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="i64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="i64A &gt;= i64B">
				<left token=".variable" type="int64" kind="static const typename(i64)" value="i64A" />
				<right token=".variable" type="int64" kind="static const typename(i64)" value="i64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Pls">
			<init token="+" type="uint64" kind="static const typename(u64)" value="+u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Neg">
			<init token="-" type="uint64" kind="static const typename(u64)" value="-u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Cmt">
			<init token="~" type="uint64" kind="static const typename(u64)" value="~u64B">
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Add">
			<init token="+" type="uint64" kind="static const typename(u64)" value="u64A + u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Sub">
			<init token="-" type="uint64" kind="static const typename(u64)" value="u64A - u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Mul">
			<init token="*" type="uint64" kind="static const typename(u64)" value="u64A * u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Div">
			<init token="/" type="uint64" kind="static const typename(u64)" value="u64A / u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Mod">
			<init token="%" type="uint64" kind="static const typename(u64)" value="u64A % u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64And">
			<init token="&amp;" type="uint64" kind="static const typename(u64)" value="u64A &amp; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Ior">
			<init token="|" type="uint64" kind="static const typename(u64)" value="u64A | u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Xor">
			<init token="^" type="uint64" kind="static const typename(u64)" value="u64A ^ u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Shl">
			<init token="&lt;&lt;" type="uint64" kind="static const typename(u64)" value="u64A &lt;&lt; shift">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="uint64" kind="static const typename(u64)" value="u64Shr">
			<init token="&gt;&gt;" type="uint64" kind="static const typename(u64)" value="u64A &gt;&gt; shift">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="int32" kind="static const typename(i32)" value="shift" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(u64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(u64B)">
					<push token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="u64A == u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="u64A != u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="u64A &lt; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="u64A &lt;= u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="u64A &gt; u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="u64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="u64A &gt;= u64B">
				<left token=".variable" type="uint64" kind="static const typename(u64)" value="u64A" />
				<right token=".variable" type="uint64" kind="static const typename(u64)" value="u64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Pls">
			<init token="+" type="float32" kind="static const typename(f32)" value="+f32B">
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Neg">
			<init token="-" type="float32" kind="static const typename(f32)" value="-f32B">
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Add">
			<init token="+" type="float32" kind="static const typename(f32)" value="f32A + f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Sub">
			<init token="-" type="float32" kind="static const typename(f32)" value="f32A - f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Mul">
			<init token="*" type="float32" kind="static const typename(f32)" value="f32A * f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Div">
			<init token="/" type="float32" kind="static const typename(f32)" value="f32A / f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float32" kind="static const typename(f32)" value="f32Mod">
			<init token="%" type="float32" kind="static const typename(f32)" value="f32A % f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(f32B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(f32B)">
					<push token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="f32A == f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="f32A != f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="f32A &lt; f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="f32A &lt;= f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="f32A &gt; f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f32Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="f32A &gt;= f32B">
				<left token=".variable" type="float32" kind="static const typename(f32)" value="f32A" />
				<right token=".variable" type="float32" kind="static const typename(f32)" value="f32B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64A">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="a">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="96.300000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64B">
			<init token=".variable" type="float64" kind="static const typename(f64)" value="b">
				<init token=".literal" type="float64" kind="static const typename(f64)" value="42.140000" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Pls">
			<init token="+" type="float64" kind="static const typename(f64)" value="+f64B">
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Neg">
			<init token="-" type="float64" kind="static const typename(f64)" value="-f64B">
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Add">
			<init token="+" type="float64" kind="static const typename(f64)" value="f64A + f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Sub">
			<init token="-" type="float64" kind="static const typename(f64)" value="f64A - f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Mul">
			<init token="*" type="float64" kind="static const typename(f64)" value="f64A * f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Div">
			<init token="/" type="float64" kind="static const typename(f64)" value="f64A / f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="float64" kind="static const typename(f64)" value="f64Mod">
			<init token="%" type="float64" kind="static const typename(f64)" value="f64A % f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Not">
			<init token="!" type="bool" kind="static const typename(bool)" value="!(f64B)">
				<right token="()" type="bool" kind="static const typename(bool)" value="(f64B)">
					<push token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
				</right>
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Ceq">
			<init token="==" type="bool" kind="static const typename(bool)" value="f64A == f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="f64A != f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Clt">
			<init token="&lt;" type="bool" kind="static const typename(bool)" value="f64A &lt; f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cle">
			<init token="&lt;=" type="bool" kind="static const typename(bool)" value="f64A &lt;= f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cgt">
			<init token="&gt;" type="bool" kind="static const typename(bool)" value="f64A &gt; f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="f64Cge">
			<init token="&gt;=" type="bool" kind="static const typename(bool)" value="f64A &gt;= f64B">
				<left token=".variable" type="float64" kind="static const typename(f64)" value="f64A" />
				<right token=".variable" type="float64" kind="static const typename(f64)" value="f64B" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA">
			<init token=".variable" type="pointer" kind="static const typename(ref)" value="null">
				<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
			</init>
		</stmt>
		<stmt token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB">
			<init token="()" type="pointer" kind="static const typename(ref)" value="pointer(shift)">
				<push token=".variable" type="int32" kind="static const typename(i32)" value="shift">
					<init token=".literal" type="int32" kind="static const typename(i32)" value="2" />
				</push>
				<call token=".variable" type="typename" kind="static const typename(ref)" value="pointer" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="ptrCeq">
			<init token="==" type="bool" kind="static const typename(bool)" value="ptrA == ptrB">
				<left token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA" />
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB" />
			</init>
		</stmt>
		<stmt token=".variable" type="bool" kind="static const typename(bool)" value="ptrCne">
			<init token="!=" type="bool" kind="static const typename(bool)" value="ptrA != ptrB">
				<left token=".variable" type="pointer" kind="static const typename(ref)" value="ptrA" />
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="ptrB" />
			</init>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 == 0)">
			<test token="==" type="bool" kind="static const typename(bool)" value="0 == 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:3">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 1, &quot;0 == 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 1, &quot;0 == 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 != 0)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="0 != 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:7">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 2, &quot;0 != 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 2, &quot;0 != 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="2" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 == 0)">
			<test token="==" type="bool" kind="static const typename(bool)" value="0 == 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:11">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 3, &quot;0 == 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 3, &quot;0 == 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="3" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</expr>
				</stmt>
			</then>
			<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:14">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 4, &quot;0 != 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 4, &quot;0 != 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="4" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</expr>
				</stmt>
			</else>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (0 != 0)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="0 != 0">
				<left token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:18">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 5, &quot;0 != 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 5, &quot;0 != 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="5" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 != 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</expr>
				</stmt>
			</then>
			<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:21">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 6, &quot;0 == 0&quot;, null);">
					<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 6, &quot;0 == 0&quot;, null)">
						<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
							<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
							<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
						</push>
						<push token=".literal" type="int32" kind="static const typename(i32)" value="6" />
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;0 == 0&quot;" />
						<push token=".variable" type="pointer" kind="static const typename(ref)" value="null">
							<init token=".literal" type="pointer" kind="static const typename(ref)" value="{pointer @0}" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
					</expr>
				</stmt>
			</else>
		</stmt>
		<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:25">
			<stmt token=".variable" type="int32" kind="static const typename(i32)" value="t">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:28">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 7, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 7, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="7" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</then>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:32">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 8, &quot;t != 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 8, &quot;t != 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="8" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</then>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:36">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 9, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 9, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:39">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t != 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t != 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</else>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t != 0)">
				<test token="!=" type="bool" kind="static const typename(bool)" value="t != 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:43">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 11, &quot;t != 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 11, &quot;t != 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="11" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t != 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:46">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 12, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 12, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="12" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</else>
			</stmt>
			<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 0)">
				<test token="==" type="bool" kind="static const typename(bool)" value="t == 0">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
				</test>
				<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:50">
					<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 9, &quot;t == 0&quot;, t);">
						<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 9, &quot;t == 0&quot;, t)">
							<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
								<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
								<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
							</push>
							<push token=".literal" type="int32" kind="static const typename(i32)" value="9" />
							<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 0&quot;" />
							<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
								<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
							</push>
							<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
						</expr>
					</stmt>
				</then>
				<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:53">
					<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 1)">
						<test token="==" type="bool" kind="static const typename(bool)" value="t == 1">
							<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
							<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
						</test>
						<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:53">
							<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 1&quot;, t);">
								<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 1&quot;, t)">
									<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
										<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
										<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
									</push>
									<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
									<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 1&quot;" />
									<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
										<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
									</push>
									<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
								</expr>
							</stmt>
						</then>
						<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:56">
							<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 2)">
								<test token="==" type="bool" kind="static const typename(bool)" value="t == 2">
									<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
									<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
								</test>
								<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:56">
									<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 2&quot;, t);">
										<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 2&quot;, t)">
											<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
												<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
												<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
											</push>
											<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
											<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 2&quot;" />
											<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
												<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
											</push>
											<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
										</expr>
									</stmt>
								</then>
								<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:59">
									<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 3)">
										<test token="==" type="bool" kind="static const typename(bool)" value="t == 3">
											<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
											<right token=".literal" type="int32" kind="static const typename(i32)" value="3" />
										</test>
										<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:59">
											<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 3&quot;, t);">
												<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 3&quot;, t)">
													<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
														<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
														<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
													</push>
													<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
													<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 3&quot;" />
													<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
														<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
													</push>
													<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
												</expr>
											</stmt>
										</then>
										<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:62">
											<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 4)">
												<test token="==" type="bool" kind="static const typename(bool)" value="t == 4">
													<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
													<right token=".literal" type="int32" kind="static const typename(i32)" value="4" />
												</test>
												<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:62">
													<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 4&quot;, t);">
														<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 4&quot;, t)">
															<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
																<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
																<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
															</push>
															<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
															<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 4&quot;" />
															<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
																<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
															</push>
															<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
														</expr>
													</stmt>
												</then>
												<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:65">
													<stmt token="if" type="void" kind="static const typename(void)" stmt="if (t == 5)">
														<test token="==" type="bool" kind="static const typename(bool)" value="t == 5">
															<left token=".variable" type="int32" kind="static const typename(i32)" value="t" />
															<right token=".literal" type="int32" kind="static const typename(i32)" value="5" />
														</test>
														<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:65">
															<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t == 5&quot;, t);">
																<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t == 5&quot;, t)">
																	<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
																		<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
																		<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
																	</push>
																	<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
																	<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t == 5&quot;" />
																	<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
																		<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
																	</push>
																	<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
																</expr>
															</stmt>
														</then>
														<else token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:68">
															<stmt token=";" type="void" kind="static const typename(void)" stmt="raise(raise.debug, 10, &quot;t not in (0, 1, 2, 3, 4, 5)&quot;, t);">
																<expr token="()" type="void" kind="static const typename(void)" value="raise(raise.debug, 10, &quot;t not in (0, 1, 2, 3, 4, 5)&quot;, t)">
																	<push token="." type="int64" kind="static const typename(i64)" value="raise.debug">
																		<left token=".variable" type="void" kind="static const typename(void)" value="raise" />
																		<right token=".variable" type="int64" kind="static const typename(i64)" value="debug" />
																	</push>
																	<push token=".literal" type="int32" kind="static const typename(i32)" value="10" />
																	<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;t not in (0, 1, 2, 3, 4, 5)&quot;" />
																	<push token=".variable" type="int32" kind="static const typename(i32)" value="t">
																		<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
																	</push>
																	<call token=".variable" type="function" kind="static const typename(ref)" value="raise" />
																</expr>
															</stmt>
														</else>
													</stmt>
												</else>
											</stmt>
										</else>
									</stmt>
								</else>
							</stmt>
						</else>
					</stmt>
				</else>
			</stmt>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if ((typename(int64)) == null)">
			<test token="==" type="bool" kind="static const typename(bool)" value="(typename(int64)) == null">
				<left token="()" type="pointer" kind="static const typename(ref)" value="(typename(int64))">
					<push token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
						<push token=".variable" type="typename" kind="static const typename(ref)" value="int64" />
						<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
					</push>
				</left>
				<right token=".variable" type="pointer" kind="static const typename(ref)" value="null" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:73">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="error(&quot;integer is not declared&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="error(&quot;integer is not declared&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;integer is not declared&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="error" />
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="static if" type="void" kind="static const typename(void)" stmt="static if (typename(int64) != typename)">
			<test token="!=" type="bool" kind="static const typename(bool)" value="typename(int64) != typename">
				<left token="()" type="typename" kind="static const typename(ref)" value="typename(int64)">
					<push token=".variable" type="typename" kind="static const typename(ref)" value="int64" />
					<call token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
				</left>
				<right token=".variable" type="typename" kind="static const typename(ref)" value="typename" />
			</test>
			<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementIf.ci:77">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="error(&quot;integer is not a type&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="error(&quot;integer is not a type&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;integer is not a type&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="error" />
					</expr>
				</stmt>
			</then>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for ( ; ; )">
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:3">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for ( ; ; )&quot;);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for ( ; ; )&quot;)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for ( ; ; )&quot;" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
					</expr>
				</stmt>
				<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
			</stmt>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; 2; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 2">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:8">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for (int i = 0; i &lt; 2; i += 1)&quot;, i);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for (int i = 0; i &lt; 2; i += 1)&quot;, i)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for (int i = 0; i &lt; 2; i += 1)&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token=".variable" type="int32" kind="static const typename(i32)" value="forIdx" />
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (forIdx := 0; forIdx &lt; 2; forIdx := forIdx + 1)">
			<init token=":=" type="int32" kind="static const typename(i32)" value="forIdx := 0">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="forIdx &lt; 2">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="forIdx := forIdx + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx" />
				<right token="+" type="int32" kind="static const typename(i32)" value="forIdx + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="forIdx" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:13">
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for (forIdx = 0; forIdx &lt; 2; forIdx += 1)&quot;, forIdx);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for (forIdx = 0; forIdx &lt; 2; forIdx += 1)&quot;, forIdx)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for (forIdx = 0; forIdx &lt; 2; forIdx += 1)&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="forIdx" />
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; 7; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 7">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="7" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:17">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i &lt; 2)">
					<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 2">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:18">
						<stmt token="continue" type="void" kind="static const typename(void)" stmt="continue;" />
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for with continue&quot;, i);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for with continue&quot;, i)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for with continue&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
					</expr>
				</stmt>
			</stmt>
		</stmt>
		<stmt token="for" type="void" kind="static const typename(void)" stmt="for (i; i &lt; 7; i := i + 1)">
			<init token=".variable" type="int32" kind="static const typename(i32)" value="i">
				<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
			</init>
			<test token="&lt;" type="bool" kind="static const typename(bool)" value="i &lt; 7">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token=".literal" type="int32" kind="static const typename(i32)" value="7" />
			</test>
			<step token=":=" type="int32" kind="static const typename(i32)" value="i := i + 1">
				<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
				<right token="+" type="int32" kind="static const typename(i32)" value="i + 1">
					<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
					<right token=".literal" type="int32" kind="static const typename(i32)" value="1" />
				</right>
			</step>
			<stmt token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:24">
				<stmt token="if" type="void" kind="static const typename(void)" stmt="if (i &gt; 2)">
					<test token="&gt;" type="bool" kind="static const typename(bool)" value="i &gt; 2">
						<left token=".variable" type="int32" kind="static const typename(i32)" value="i" />
						<right token=".literal" type="int32" kind="static const typename(i32)" value="2" />
					</test>
					<then token="{}" type="void" kind="static const typename(void)" file="test/lang.statementFor.ci:25">
						<stmt token="break" type="void" kind="static const typename(void)" stmt="break;" />
					</then>
				</stmt>
				<stmt token=";" type="void" kind="static const typename(void)" stmt="debug(&quot;for with break&quot;, i);">
					<expr token="()" type="void" kind="static const typename(void)" value="debug(&quot;for with break&quot;, i)">
						<push token=".literal" type=".cstr" kind="static const typename(arr)" value="&quot;for with break&quot;" />
						<push token=".variable" type="int32" kind="static const typename(i32)" value="i">
							<init token=".literal" type="int32" kind="static const typename(i32)" value="0" />
						</push>
						<call token=".variable" type="function" kind="static const typename(ref)" value="debug" />
					</expr>
				</stmt>
			</stmt>
		</stmt>
	</stmt>
</main>
